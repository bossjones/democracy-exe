"""
This type stub file was generated by pyright.
"""

class Style:
    RESET_ALL = ...
    BOLD = ...
    DIM = ...
    ITALIC = ...
    UNDERLINE = ...
    BLINK = ...
    REVERSE = ...
    HIDE = ...
    STRIKE = ...
    NORMAL = ...


class Fore:
    BLACK = ...
    RED = ...
    GREEN = ...
    YELLOW = ...
    BLUE = ...
    MAGENTA = ...
    CYAN = ...
    WHITE = ...
    RESET = ...
    LIGHTBLACK_EX = ...
    LIGHTRED_EX = ...
    LIGHTGREEN_EX = ...
    LIGHTYELLOW_EX = ...
    LIGHTBLUE_EX = ...
    LIGHTMAGENTA_EX = ...
    LIGHTCYAN_EX = ...
    LIGHTWHITE_EX = ...


class Back:
    BLACK = ...
    RED = ...
    GREEN = ...
    YELLOW = ...
    BLUE = ...
    MAGENTA = ...
    CYAN = ...
    WHITE = ...
    RESET = ...
    LIGHTBLACK_EX = ...
    LIGHTRED_EX = ...
    LIGHTGREEN_EX = ...
    LIGHTYELLOW_EX = ...
    LIGHTBLUE_EX = ...
    LIGHTMAGENTA_EX = ...
    LIGHTCYAN_EX = ...
    LIGHTWHITE_EX = ...


def ansi_escape(codes): # -> dict[Any, Any]:
    ...

class TokenType:
    TEXT = ...
    ANSI = ...
    LEVEL = ...
    CLOSING = ...


class AnsiParser:
    _style = ...
    _foreground = ...
    _background = ...
    _regex_tag = ...
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def strip(tokens): # -> Literal['']:
        ...
    
    @staticmethod
    def colorize(tokens, ansi_level): # -> Literal['']:
        ...
    
    @staticmethod
    def wrap(tokens, *, ansi_level, color_tokens): # -> Literal['']:
        ...
    
    def feed(self, text, *, raw=...): # -> None:
        ...
    
    def done(self, *, strict=...): # -> list[Any]:
        ...
    
    def current_color_tokens(self): # -> list[Any]:
        ...
    


class ColoringMessage(str):
    __fields__ = ...
    def __format__(self, spec):
        ...
    


class ColoredMessage:
    def __init__(self, tokens) -> None:
        ...
    
    def colorize(self, ansi_level): # -> Literal['']:
        ...
    


class ColoredFormat:
    def __init__(self, tokens, messages_color_tokens) -> None:
        ...
    
    def strip(self): # -> Literal['']:
        ...
    
    def colorize(self, ansi_level): # -> Literal['']:
        ...
    
    def make_coloring_message(self, message, *, ansi_level, colored_message): # -> ColoringMessage:
        ...
    


class Colorizer:
    @staticmethod
    def prepare_format(string): # -> ColoredFormat:
        ...
    
    @staticmethod
    def prepare_message(string, args=..., kwargs=...): # -> ColoredMessage:
        ...
    
    @staticmethod
    def prepare_simple_message(string): # -> ColoredMessage:
        ...
    
    @staticmethod
    def ansify(text): # -> Literal['']:
        ...
    


