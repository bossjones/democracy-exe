"""
This type stub file was generated by pyright.
"""

import datetime
from typing import AsyncIterator, List, Optional, TYPE_CHECKING, Union
from .enums import PollLayoutType
from . import utils
from .emoji import Emoji, PartialEmoji
from .user import User
from typing_extensions import Self
from .message import Message
from .abc import Snowflake
from .member import Member
from .types.poll import PollAnswerWithID as PollAnswerWithIDPayload, PollMedia as PollMediaPayload

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
if TYPE_CHECKING:
    ...
__all__ = ('Poll', 'PollAnswer', 'PollMedia')
MISSING = utils.MISSING
PollMediaEmoji = Union[PartialEmoji, Emoji, str]
class PollMedia:
    """Represents the poll media for a poll item.

    .. versionadded:: 2.4

    Attributes
    ----------
    text: :class:`str`
        The displayed text.
    emoji: Optional[Union[:class:`PartialEmoji`, :class:`Emoji`]]
        The attached emoji for this media. This is only valid for poll answers.
    """
    __slots__ = ...
    def __init__(self, /, text: str, emoji: Optional[PollMediaEmoji] = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def to_dict(self) -> PollMediaPayload:
        ...
    
    @classmethod
    def from_dict(cls, *, data: PollMediaPayload) -> Self:
        ...
    


class PollAnswer:
    """Represents a poll's answer.

    .. container:: operations

        .. describe:: str(x)

            Returns this answer's text, if any.

    .. versionadded:: 2.4

    Attributes
    ----------
    id: :class:`int`
        The ID of this answer.
    media: :class:`PollMedia`
        The display data for this answer.
    self_voted: :class:`bool`
        Whether the current user has voted to this answer or not.
    """
    __slots__ = ...
    def __init__(self, *, message: Optional[Message], poll: Poll, data: PollAnswerWithIDPayload) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @classmethod
    def from_params(cls, id: int, text: str, emoji: Optional[PollMediaEmoji] = ..., *, poll: Poll, message: Optional[Message]) -> Self:
        ...
    
    @property
    def text(self) -> str:
        """:class:`str`: Returns this answer's displayed text."""
        ...
    
    @property
    def emoji(self) -> Optional[Union[PartialEmoji, Emoji]]:
        """Optional[Union[:class:`Emoji`, :class:`PartialEmoji`]]: Returns this answer's displayed
        emoji, if any.
        """
        ...
    
    @property
    def vote_count(self) -> int:
        """:class:`int`: Returns an approximate count of votes for this answer.

        If the poll is finished, the count is exact.
        """
        ...
    
    @property
    def poll(self) -> Poll:
        """:class:`Poll`: Returns the parent poll of this answer."""
        ...
    
    async def voters(self, *, limit: Optional[int] = ..., after: Optional[Snowflake] = ...) -> AsyncIterator[Union[User, Member]]:
        """Returns an :term:`asynchronous iterator` representing the users that have voted on this answer.

        The ``after`` parameter must represent a user
        and meet the :class:`abc.Snowflake` abc.

        This can only be called when the parent poll was sent to a message.

        Examples
        --------

        Usage ::

            async for voter in poll_answer.voters():
                print(f'{voter} has voted for {poll_answer}!')

        Flattening into a list: ::

            voters = [voter async for voter in poll_answer.voters()]
            # voters is now a list of User

        Parameters
        ----------
        limit: Optional[:class:`int`]
            The maximum number of results to return.
            If not provided, returns all the users who
            voted on this poll answer.
        after: Optional[:class:`abc.Snowflake`]
            For pagination, voters are sorted by member.

        Raises
        ------
        HTTPException
            Retrieving the users failed.

        Yields
        ------
        Union[:class:`User`, :class:`Member`]
            The member (if retrievable) or the user that has voted
            on this poll answer. The case where it can be a :class:`Member`
            is in a guild message context. Sometimes it can be a :class:`User`
            if the member has left the guild or if the member is not cached.
        """
        ...
    


class Poll:
    """Represents a message's Poll.

    .. versionadded:: 2.4

    Parameters
    ----------
    question: Union[:class:`PollMedia`, :class:`str`]
        The poll's displayed question. The text can be up to 300 characters.
    duration: :class:`datetime.timedelta`
        The duration of the poll. Duration must be in hours.
    multiple: :class:`bool`
        Whether users are allowed to select more than one answer.
        Defaults to ``False``.
    layout_type: :class:`PollLayoutType`
        The layout type of the poll. Defaults to :attr:`PollLayoutType.default`.
    """
    __slots__ = ...
    def __init__(self, question: Union[PollMedia, str], duration: datetime.timedelta, *, multiple: bool = ..., layout_type: PollLayoutType = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def question(self) -> str:
        """:class:`str`: Returns this poll's question string."""
        ...
    
    @property
    def answers(self) -> List[PollAnswer]:
        """List[:class:`PollAnswer`]: Returns a read-only copy of the answers."""
        ...
    
    @property
    def expires_at(self) -> Optional[datetime.datetime]:
        """Optional[:class:`datetime.datetime`]: A datetime object representing the poll expiry.

        .. note::

            This will **always** be ``None`` for stateless polls.
        """
        ...
    
    @property
    def created_at(self) -> Optional[datetime.datetime]:
        """Optional[:class:`datetime.datetime`]: Returns the poll's creation time.

        .. note::

            This will **always** be ``None`` for stateless polls.
        """
        ...
    
    @property
    def message(self) -> Optional[Message]:
        """:class:`Message`: The message this poll is from."""
        ...
    
    @property
    def total_votes(self) -> int:
        """:class:`int`: Returns the sum of all the answer votes."""
        ...
    
    def is_finalised(self) -> bool:
        """:class:`bool`: Returns whether the poll has finalised.

        This always returns ``False`` for stateless polls.
        """
        ...
    
    is_finalized = ...
    def copy(self) -> Self:
        """Returns a stateless copy of this poll.

        This is meant to be used when you want to edit a stateful poll.

        Returns
        -------
        :class:`Poll`
            The copy of the poll.
        """
        ...
    
    def add_answer(self, *, text: str, emoji: Optional[Union[PartialEmoji, Emoji, str]] = ...) -> Self:
        """Appends a new answer to this poll.

        Parameters
        ----------
        text: :class:`str`
            The text label for this poll answer. Can be up to 55
            characters.
        emoji: Union[:class:`PartialEmoji`, :class:`Emoji`, :class:`str`]
            The emoji to display along the text.

        Raises
        ------
        ClientException
            Cannot append answers to a poll that is active.

        Returns
        -------
        :class:`Poll`
            This poll with the new answer appended. This allows fluent-style chaining.
        """
        ...
    
    def get_answer(self, /, id: int) -> Optional[PollAnswer]:
        """Returns the answer with the provided ID or ``None`` if not found.

        Parameters
        ----------
        id: :class:`int`
            The ID of the answer to get.

        Returns
        -------
        Optional[:class:`PollAnswer`]
            The answer.
        """
        ...
    
    async def end(self) -> Self:
        """|coro|

        Ends the poll.

        Raises
        ------
        ClientException
            This poll has no attached message.
        HTTPException
            Ending the poll failed.

        Returns
        -------
        :class:`Poll`
            The updated poll.
        """
        ...
    


