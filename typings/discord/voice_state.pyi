"""
This type stub file was generated by pyright.
"""

import threading
from typing import Any, Callable, Coroutine, Dict, Optional, TYPE_CHECKING, Tuple
from .enums import Enum
from .gateway import DiscordVoiceWebSocket
from . import abc
from .guild import Guild
from .user import ClientUser
from .member import VoiceState
from .voice_client import VoiceClient
from .types.voice import GuildVoiceState as GuildVoiceStatePayload, SupportedModes, VoiceServerUpdate as VoiceServerUpdatePayload

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.


Some documentation to refer to:

- Our main web socket (mWS) sends opcode 4 with a guild ID and channel ID.
- The mWS receives VOICE_STATE_UPDATE and VOICE_SERVER_UPDATE.
- We pull the session_id from VOICE_STATE_UPDATE.
- We pull the token, endpoint and server_id from VOICE_SERVER_UPDATE.
- Then we initiate the voice web socket (vWS) pointing to the endpoint.
- We send opcode 0 with the user_id, server_id, session_id and token using the vWS.
- The vWS sends back opcode 2 with an ssrc, port, modes(array) and heartbeat_interval.
- We send a UDP discovery packet to endpoint:port and receive our IP and our port in LE.
- Then we send our IP and port via vWS with opcode 1.
- When that's all done, we receive opcode 4 from the vWS.
- Finally we can transmit data to endpoint:port.
"""
if TYPE_CHECKING:
    WebsocketHook = Optional[Callable[[DiscordVoiceWebSocket, Dict[str, Any]], Coroutine[Any, Any, Any]]]
    SocketReaderCallback = Callable[[bytes], Any]
__all__ = ('VoiceConnectionState', )
_log = ...
class SocketReader(threading.Thread):
    def __init__(self, state: VoiceConnectionState, *, start_paused: bool = ...) -> None:
        ...
    
    def register(self, callback: SocketReaderCallback) -> None:
        ...
    
    def unregister(self, callback: SocketReaderCallback) -> None:
        ...
    
    def pause(self) -> None:
        ...
    
    def resume(self, *, force: bool = ...) -> None:
        ...
    
    def stop(self) -> None:
        ...
    
    def run(self) -> None:
        ...
    


class ConnectionFlowState(Enum):
    """Enum representing voice connection flow state."""
    disconnected = ...
    set_guild_voice_state = ...
    got_voice_state_update = ...
    got_voice_server_update = ...
    got_both_voice_updates = ...
    websocket_connected = ...
    got_websocket_ready = ...
    got_ip_discovery = ...
    connected = ...


class VoiceConnectionState:
    """Represents the internal state of a voice connection."""
    def __init__(self, voice_client: VoiceClient, *, hook: Optional[WebsocketHook] = ...) -> None:
        ...
    
    @property
    def state(self) -> ConnectionFlowState:
        ...
    
    @state.setter
    def state(self, state: ConnectionFlowState) -> None:
        ...
    
    @property
    def guild(self) -> Guild:
        ...
    
    @property
    def user(self) -> ClientUser:
        ...
    
    @property
    def supported_modes(self) -> Tuple[SupportedModes, ...]:
        ...
    
    @property
    def self_voice_state(self) -> Optional[VoiceState]:
        ...
    
    async def voice_state_update(self, data: GuildVoiceStatePayload) -> None:
        ...
    
    async def voice_server_update(self, data: VoiceServerUpdatePayload) -> None:
        ...
    
    async def connect(self, *, reconnect: bool, timeout: float, self_deaf: bool, self_mute: bool, resume: bool, wait: bool = ...) -> None:
        ...
    
    async def disconnect(self, *, force: bool = ..., cleanup: bool = ..., wait: bool = ...) -> None:
        ...
    
    async def soft_disconnect(self, *, with_state: ConnectionFlowState = ...) -> None:
        ...
    
    async def move_to(self, channel: Optional[abc.Snowflake], timeout: Optional[float]) -> None:
        ...
    
    def wait(self, timeout: Optional[float] = ...) -> bool:
        ...
    
    async def wait_async(self, timeout: Optional[float] = ...) -> None:
        ...
    
    def is_connected(self) -> bool:
        ...
    
    def send_packet(self, packet: bytes) -> None:
        ...
    
    def add_socket_listener(self, callback: SocketReaderCallback) -> None:
        ...
    
    def remove_socket_listener(self, callback: SocketReaderCallback) -> None:
        ...
    


