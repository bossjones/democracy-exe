"""
This type stub file was generated by pyright.
"""

import threading
from typing import Any, Callable, Coroutine, Dict, Optional, TYPE_CHECKING, Tuple
from .enums import Enum
from .gateway import DiscordVoiceWebSocket
from . import abc
from .guild import Guild
from .user import ClientUser
from .member import VoiceState
from .voice_client import VoiceClient
from .types.voice import GuildVoiceState as GuildVoiceStatePayload, SupportedModes, VoiceServerUpdate as VoiceServerUpdatePayload

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    WebsocketHook = Optional[Callable[[DiscordVoiceWebSocket, Dict[str, Any]], Coroutine[Any, Any, Any]]]
    SocketReaderCallback = Callable[[bytes], Any]
__all__ = ('VoiceConnectionState', )
_log = ...
class SocketReader(threading.Thread):
    def __init__(self, state: VoiceConnectionState, *, start_paused: bool = ...) -> None:
        ...
    
    def register(self, callback: SocketReaderCallback) -> None:
        ...
    
    def unregister(self, callback: SocketReaderCallback) -> None:
        ...
    
    def pause(self) -> None:
        ...
    
    def resume(self, *, force: bool = ...) -> None:
        ...
    
    def stop(self) -> None:
        ...
    
    def run(self) -> None:
        ...
    


class ConnectionFlowState(Enum):
    """Enum representing voice connection flow state."""
    disconnected = ...
    set_guild_voice_state = ...
    got_voice_state_update = ...
    got_voice_server_update = ...
    got_both_voice_updates = ...
    websocket_connected = ...
    got_websocket_ready = ...
    got_ip_discovery = ...
    connected = ...


class VoiceConnectionState:
    """Represents the internal state of a voice connection."""
    def __init__(self, voice_client: VoiceClient, *, hook: Optional[WebsocketHook] = ...) -> None:
        ...
    
    @property
    def state(self) -> ConnectionFlowState:
        ...
    
    @state.setter
    def state(self, state: ConnectionFlowState) -> None:
        ...
    
    @property
    def guild(self) -> Guild:
        ...
    
    @property
    def user(self) -> ClientUser:
        ...
    
    @property
    def supported_modes(self) -> Tuple[SupportedModes, ...]:
        ...
    
    @property
    def self_voice_state(self) -> Optional[VoiceState]:
        ...
    
    async def voice_state_update(self, data: GuildVoiceStatePayload) -> None:
        ...
    
    async def voice_server_update(self, data: VoiceServerUpdatePayload) -> None:
        ...
    
    async def connect(self, *, reconnect: bool, timeout: float, self_deaf: bool, self_mute: bool, resume: bool, wait: bool = ...) -> None:
        ...
    
    async def disconnect(self, *, force: bool = ..., cleanup: bool = ..., wait: bool = ...) -> None:
        ...
    
    async def soft_disconnect(self, *, with_state: ConnectionFlowState = ...) -> None:
        ...
    
    async def move_to(self, channel: Optional[abc.Snowflake], timeout: Optional[float]) -> None:
        ...
    
    def wait(self, timeout: Optional[float] = ...) -> bool:
        ...
    
    async def wait_async(self, timeout: Optional[float] = ...) -> None:
        ...
    
    def is_connected(self) -> bool:
        ...
    
    def send_packet(self, packet: bytes) -> None:
        ...
    
    def add_socket_listener(self, callback: SocketReaderCallback) -> None:
        ...
    
    def remove_socket_listener(self, callback: SocketReaderCallback) -> None:
        ...
    


