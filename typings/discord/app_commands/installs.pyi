"""
This type stub file was generated by pyright.
"""

from typing import ClassVar, List, Optional, TYPE_CHECKING
from ..types.interactions import InteractionContextType, InteractionInstallationType

"""
This type stub file was generated by pyright.
"""
__all__ = ('AppInstallationType', 'AppCommandContext')
if TYPE_CHECKING:
    ...
class AppInstallationType:
    r"""Represents the installation location of an application command.

    .. versionadded:: 2.4

    Parameters
    -----------
    guild: Optional[:class:`bool`]
        Whether the integration is a guild install.
    user: Optional[:class:`bool`]
        Whether the integration is a user install.
    """
    __slots__ = ...
    GUILD: ClassVar[int] = ...
    USER: ClassVar[int] = ...
    def __init__(self, *, guild: Optional[bool] = ..., user: Optional[bool] = ...) -> None:
        ...
    
    @property
    def guild(self) -> bool:
        """:class:`bool`: Whether the integration is a guild install."""
        ...
    
    @guild.setter
    def guild(self, value: bool) -> None:
        ...
    
    @property
    def user(self) -> bool:
        """:class:`bool`: Whether the integration is a user install."""
        ...
    
    @user.setter
    def user(self, value: bool) -> None:
        ...
    
    def merge(self, other: AppInstallationType) -> AppInstallationType:
        ...
    
    def to_array(self) -> List[InteractionInstallationType]:
        ...
    


class AppCommandContext:
    r"""Wraps up the Discord :class:`~discord.app_commands.Command` execution context.

    .. versionadded:: 2.4

    Parameters
    -----------
    guild: Optional[:class:`bool`]
        Whether the context allows usage in a guild.
    dm_channel: Optional[:class:`bool`]
        Whether the context allows usage in a DM channel.
    private_channel: Optional[:class:`bool`]
        Whether the context allows usage in a DM or a GDM channel.
    """
    GUILD: ClassVar[int] = ...
    DM_CHANNEL: ClassVar[int] = ...
    PRIVATE_CHANNEL: ClassVar[int] = ...
    __slots__ = ...
    def __init__(self, *, guild: Optional[bool] = ..., dm_channel: Optional[bool] = ..., private_channel: Optional[bool] = ...) -> None:
        ...
    
    @property
    def guild(self) -> bool:
        """:class:`bool`: Whether the context allows usage in a guild."""
        ...
    
    @guild.setter
    def guild(self, value: bool) -> None:
        ...
    
    @property
    def dm_channel(self) -> bool:
        """:class:`bool`: Whether the context allows usage in a DM channel."""
        ...
    
    @dm_channel.setter
    def dm_channel(self, value: bool) -> None:
        ...
    
    @property
    def private_channel(self) -> bool:
        """:class:`bool`: Whether the context allows usage in a DM or a GDM channel."""
        ...
    
    @private_channel.setter
    def private_channel(self, value: bool) -> None:
        ...
    
    def merge(self, other: AppCommandContext) -> AppCommandContext:
        ...
    
    def to_array(self) -> List[InteractionContextType]:
        ...
    


