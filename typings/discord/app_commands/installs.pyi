"""
This type stub file was generated by pyright.
"""

from typing import ClassVar, List, Optional, TYPE_CHECKING
from ..types.interactions import InteractionContextType, InteractionInstallationType

"""
The MIT License (MIT)

Copyright (c) 2015-present Rapptz

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""
__all__ = ('AppInstallationType', 'AppCommandContext')
if TYPE_CHECKING:
    ...
class AppInstallationType:
    r"""Represents the installation location of an application command.

    .. versionadded:: 2.4

    Parameters
    -----------
    guild: Optional[:class:`bool`]
        Whether the integration is a guild install.
    user: Optional[:class:`bool`]
        Whether the integration is a user install.
    """
    __slots__ = ...
    GUILD: ClassVar[int] = ...
    USER: ClassVar[int] = ...
    def __init__(self, *, guild: Optional[bool] = ..., user: Optional[bool] = ...) -> None:
        ...
    
    @property
    def guild(self) -> bool:
        """:class:`bool`: Whether the integration is a guild install."""
        ...
    
    @guild.setter
    def guild(self, value: bool) -> None:
        ...
    
    @property
    def user(self) -> bool:
        """:class:`bool`: Whether the integration is a user install."""
        ...
    
    @user.setter
    def user(self, value: bool) -> None:
        ...
    
    def merge(self, other: AppInstallationType) -> AppInstallationType:
        ...
    
    def to_array(self) -> List[InteractionInstallationType]:
        ...
    


class AppCommandContext:
    r"""Wraps up the Discord :class:`~discord.app_commands.Command` execution context.

    .. versionadded:: 2.4

    Parameters
    -----------
    guild: Optional[:class:`bool`]
        Whether the context allows usage in a guild.
    dm_channel: Optional[:class:`bool`]
        Whether the context allows usage in a DM channel.
    private_channel: Optional[:class:`bool`]
        Whether the context allows usage in a DM or a GDM channel.
    """
    GUILD: ClassVar[int] = ...
    DM_CHANNEL: ClassVar[int] = ...
    PRIVATE_CHANNEL: ClassVar[int] = ...
    __slots__ = ...
    def __init__(self, *, guild: Optional[bool] = ..., dm_channel: Optional[bool] = ..., private_channel: Optional[bool] = ...) -> None:
        ...
    
    @property
    def guild(self) -> bool:
        """:class:`bool`: Whether the context allows usage in a guild."""
        ...
    
    @guild.setter
    def guild(self, value: bool) -> None:
        ...
    
    @property
    def dm_channel(self) -> bool:
        """:class:`bool`: Whether the context allows usage in a DM channel."""
        ...
    
    @dm_channel.setter
    def dm_channel(self, value: bool) -> None:
        ...
    
    @property
    def private_channel(self) -> bool:
        """:class:`bool`: Whether the context allows usage in a DM or a GDM channel."""
        ...
    
    @private_channel.setter
    def private_channel(self, value: bool) -> None:
        ...
    
    def merge(self, other: AppCommandContext) -> AppCommandContext:
        ...
    
    def to_array(self) -> List[InteractionContextType]:
        ...
    


