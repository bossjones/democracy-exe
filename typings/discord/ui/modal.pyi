"""
This type stub file was generated by pyright.
"""

from typing import Any, ClassVar, Dict, Optional, TYPE_CHECKING
from .._types import ClientT
from .item import Item
from .view import View
from typing_extensions import Self
from ..interactions import Interaction

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
__all__ = ('Modal', )
_log = ...
class Modal(View):
    """Represents a UI modal.

    This object must be inherited to create a modal popup window within discord.

    .. versionadded:: 2.0

    Examples
    ----------

    .. code-block:: python3

        import discord
        from discord import ui

        class Questionnaire(ui.Modal, title='Questionnaire Response'):
            name = ui.TextInput(label='Name')
            answer = ui.TextInput(label='Answer', style=discord.TextStyle.paragraph)

            async def on_submit(self, interaction: discord.Interaction):
                await interaction.response.send_message(f'Thanks for your response, {self.name}!', ephemeral=True)

    Parameters
    -----------
    title: :class:`str`
        The title of the modal.
        Can only be up to 45 characters.
    timeout: Optional[:class:`float`]
        Timeout in seconds from last interaction with the UI before no longer accepting input.
        If ``None`` then there is no timeout.
    custom_id: :class:`str`
        The ID of the modal that gets received during an interaction.
        If not given then one is generated for you.
        Can only be up to 100 characters.

    Attributes
    ------------
    title: :class:`str`
        The title of the modal.
    custom_id: :class:`str`
        The ID of the modal that gets received during an interaction.
    """
    if TYPE_CHECKING:
        title: str
        ...
    __discord_ui_modal__ = ...
    __modal_children_items__: ClassVar[Dict[str, Item[Self]]] = ...
    def __init_subclass__(cls, *, title: str = ...) -> None:
        ...
    
    def __init__(self, *, title: str = ..., timeout: Optional[float] = ..., custom_id: str = ...) -> None:
        ...
    
    async def on_submit(self, interaction: Interaction[ClientT], /) -> None:
        """|coro|

        Called when the modal is submitted.

        Parameters
        -----------
        interaction: :class:`.Interaction`
            The interaction that submitted this modal.
        """
        ...
    
    async def on_error(self, interaction: Interaction[ClientT], error: Exception, /) -> None:
        """|coro|

        A callback that is called when :meth:`on_submit`
        fails with an error.

        The default implementation logs to the library logger.

        Parameters
        -----------
        interaction: :class:`~discord.Interaction`
            The interaction that led to the failure.
        error: :class:`Exception`
            The exception that was raised.
        """
        ...
    
    def to_dict(self) -> Dict[str, Any]:
        ...
    


