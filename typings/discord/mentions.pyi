"""
This type stub file was generated by pyright.
"""

from typing import Any, Sequence, TYPE_CHECKING, Union
from typing_extensions import Self
from .types.message import AllowedMentions as AllowedMentionsPayload
from .abc import Snowflake

"""
This type stub file was generated by pyright.
"""
__all__ = ('AllowedMentions', )
if TYPE_CHECKING:
    ...
class _FakeBool:
    def __repr__(self):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __bool__(self):
        ...
    


default: Any = ...
class AllowedMentions:
    """A class that represents what mentions are allowed in a message.

    This class can be set during :class:`Client` initialisation to apply
    to every message sent. It can also be applied on a per message basis
    via :meth:`abc.Messageable.send` for more fine-grained control.

    Attributes
    ------------
    everyone: :class:`bool`
        Whether to allow everyone and here mentions. Defaults to ``True``.
    users: Union[:class:`bool`, Sequence[:class:`abc.Snowflake`]]
        Controls the users being mentioned. If ``True`` (the default) then
        users are mentioned based on the message content. If ``False`` then
        users are not mentioned at all. If a list of :class:`abc.Snowflake`
        is given then only the users provided will be mentioned, provided those
        users are in the message content.
    roles: Union[:class:`bool`, Sequence[:class:`abc.Snowflake`]]
        Controls the roles being mentioned. If ``True`` (the default) then
        roles are mentioned based on the message content. If ``False`` then
        roles are not mentioned at all. If a list of :class:`abc.Snowflake`
        is given then only the roles provided will be mentioned, provided those
        roles are in the message content.
    replied_user: :class:`bool`
        Whether to mention the author of the message being replied to. Defaults
        to ``True``.

        .. versionadded:: 1.6
    """
    __slots__ = ...
    def __init__(self, *, everyone: bool = ..., users: Union[bool, Sequence[Snowflake]] = ..., roles: Union[bool, Sequence[Snowflake]] = ..., replied_user: bool = ...) -> None:
        ...
    
    @classmethod
    def all(cls) -> Self:
        """A factory method that returns a :class:`AllowedMentions` with all fields explicitly set to ``True``

        .. versionadded:: 1.5
        """
        ...
    
    @classmethod
    def none(cls) -> Self:
        """A factory method that returns a :class:`AllowedMentions` with all fields set to ``False``

        .. versionadded:: 1.5
        """
        ...
    
    def to_dict(self) -> AllowedMentionsPayload:
        ...
    
    def merge(self, other: AllowedMentions) -> AllowedMentions:
        ...
    
    def __repr__(self) -> str:
        ...
    


