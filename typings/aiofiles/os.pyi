"""
This type stub file was generated by pyright.
"""

import sys
from _typeshed import BytesPath, FileDescriptorOrPath, GenericPath, ReadableBuffer, StrOrBytesPath, StrPath
from asyncio.events import AbstractEventLoop
from collections.abc import Sequence
from os import _ScandirIterator, stat_result, statvfs_result
from typing import Any, AnyStr, overload
from aiofiles import ospath

__all__ = ["path", "stat", "rename", "renames", "replace", "remove", "unlink", "mkdir", "makedirs", "rmdir", "removedirs", "link", "symlink", "readlink", "listdir", "scandir", "access", "wrap", "getcwd"]
if sys.platform != "win32":
    ...
path = ospath
async def stat(path: FileDescriptorOrPath, *, dir_fd: int | None = ..., follow_symlinks: bool = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> stat_result:
    ...

async def rename(src: StrOrBytesPath, dst: StrOrBytesPath, *, src_dir_fd: int | None = ..., dst_dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def renames(old: StrOrBytesPath, new: StrOrBytesPath, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def replace(src: StrOrBytesPath, dst: StrOrBytesPath, *, src_dir_fd: int | None = ..., dst_dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def remove(path: StrOrBytesPath, *, dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def unlink(path: StrOrBytesPath, *, dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def mkdir(path: StrOrBytesPath, mode: int = ..., *, dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def makedirs(name: StrOrBytesPath, mode: int = ..., exist_ok: bool = ..., *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def link(src: StrOrBytesPath, dst: StrOrBytesPath, *, src_dir_fd: int | None = ..., dst_dir_fd: int | None = ..., follow_symlinks: bool = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def symlink(src: StrOrBytesPath, dst: StrOrBytesPath, target_is_directory: bool = ..., *, dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def readlink(path: AnyStr, *, dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> AnyStr:
    ...

async def rmdir(path: StrOrBytesPath, *, dir_fd: int | None = ..., loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

async def removedirs(name: StrOrBytesPath, *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> None:
    ...

@overload
async def scandir(path: None = ..., *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> _ScandirIterator[str]:
    ...

@overload
async def scandir(path: int, *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> _ScandirIterator[str]:
    ...

@overload
async def scandir(path: GenericPath[AnyStr], *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> _ScandirIterator[AnyStr]:
    ...

@overload
async def listdir(path: StrPath | None, *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> list[str]:
    ...

@overload
async def listdir(path: BytesPath, *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> list[bytes]:
    ...

@overload
async def listdir(path: int, *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> list[str]:
    ...

async def access(path: FileDescriptorOrPath, mode: int, *, dir_fd: int | None = ..., effective_ids: bool = ..., follow_symlinks: bool = ...) -> bool:
    ...

async def getcwd() -> str:
    ...

if sys.platform != "win32":
    @overload
    async def sendfile(out_fd: int, in_fd: int, offset: int | None, count: int, *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> int:
        ...
    
    @overload
    async def sendfile(out_fd: int, in_fd: int, offset: int, count: int, headers: Sequence[ReadableBuffer] = ..., trailers: Sequence[ReadableBuffer] = ..., flags: int = ..., *, loop: AbstractEventLoop | None = ..., executor: Any = ...) -> int:
        ...
    
    async def statvfs(path: FileDescriptorOrPath) -> statvfs_result:
        ...
    
