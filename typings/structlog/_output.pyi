"""
This type stub file was generated by pyright.
"""

import threading
from typing import Any, BinaryIO, IO, TextIO

"""
Logger classes responsible for output.
"""
WRITE_LOCKS: dict[IO[Any], threading.Lock] = ...
class PrintLogger:
    """
    Print events into a file.

    Args:
        file: File to print to. (default: `sys.stdout`)

    >>> from structlog import PrintLogger
    >>> PrintLogger().info("hello")
    hello

    Useful if you follow `current logging best practices
    <logging-best-practices>`.

    Also very useful for testing and examples since `logging` is finicky in
    doctests.

    .. versionchanged:: 22.1.0
       The implementation has been switched to use `print` for better
       monkeypatchability.
    """
    def __init__(self, file: TextIO | None = ...) -> None:
        ...
    
    def __getstate__(self) -> str:
        """
        Our __getattr__ magic makes this necessary.
        """
        ...
    
    def __setstate__(self, state: Any) -> None:
        """
        Our __getattr__ magic makes this necessary.
        """
        ...
    
    def __deepcopy__(self, memodict: dict[str, object]) -> PrintLogger:
        """
        Create a new PrintLogger with the same attributes. Similar to pickling.
        """
        ...
    
    def __repr__(self) -> str:
        ...
    
    def msg(self, message: str) -> None:
        """
        Print *message*.
        """
        ...
    
    warning = ...
    exception = ...


class PrintLoggerFactory:
    r"""
    Produce `PrintLogger`\ s.

    To be used with `structlog.configure`\ 's ``logger_factory``.

    Args:
        file: File to print to. (default: `sys.stdout`)

    Positional arguments are silently ignored.

    .. versionadded:: 0.4.0
    """
    def __init__(self, file: TextIO | None = ...) -> None:
        ...
    
    def __call__(self, *args: Any) -> PrintLogger:
        ...
    


class WriteLogger:
    """
    Write events into a file.

    Args:
        file: File to print to. (default: `sys.stdout`)

    >>> from structlog import WriteLogger
    >>> WriteLogger().info("hello")
    hello

    Useful if you follow
    `current logging best practices <logging-best-practices>`.

    Also very useful for testing and examples since `logging` is finicky in
    doctests.

    A little faster and a little less versatile than `structlog.PrintLogger`.

    .. versionadded:: 22.1.0
    """
    def __init__(self, file: TextIO | None = ...) -> None:
        ...
    
    def __getstate__(self) -> str:
        """
        Our __getattr__ magic makes this necessary.
        """
        ...
    
    def __setstate__(self, state: Any) -> None:
        """
        Our __getattr__ magic makes this necessary.
        """
        ...
    
    def __deepcopy__(self, memodict: dict[str, object]) -> WriteLogger:
        """
        Create a new WriteLogger with the same attributes. Similar to pickling.
        """
        ...
    
    def __repr__(self) -> str:
        ...
    
    def msg(self, message: str) -> None:
        """
        Write and flush *message*.
        """
        ...
    
    warning = ...
    exception = ...


class WriteLoggerFactory:
    r"""
    Produce `WriteLogger`\ s.

    To be used with `structlog.configure`\ 's ``logger_factory``.

    Args:
        file: File to print to. (default: `sys.stdout`)

    Positional arguments are silently ignored.

    .. versionadded:: 22.1.0
    """
    def __init__(self, file: TextIO | None = ...) -> None:
        ...
    
    def __call__(self, *args: Any) -> WriteLogger:
        ...
    


class BytesLogger:
    r"""
    Writes bytes into a file.

    Args:
        file: File to print to. (default: `sys.stdout`\ ``.buffer``)

    Useful if you follow `current logging best practices
    <logging-best-practices>` together with a formatter that returns bytes
    (e.g. `orjson <https://github.com/ijl/orjson>`_).

    .. versionadded:: 20.2.0
    """
    __slots__ = ...
    def __init__(self, file: BinaryIO | None = ...) -> None:
        ...
    
    def __getstate__(self) -> str:
        """
        Our __getattr__ magic makes this necessary.
        """
        ...
    
    def __setstate__(self, state: Any) -> None:
        """
        Our __getattr__ magic makes this necessary.
        """
        ...
    
    def __deepcopy__(self, memodict: dict[str, object]) -> BytesLogger:
        """
        Create a new BytesLogger with the same attributes. Similar to pickling.
        """
        ...
    
    def __repr__(self) -> str:
        ...
    
    def msg(self, message: bytes) -> None:
        """
        Write *message*.
        """
        ...
    
    warning = ...
    exception = ...


class BytesLoggerFactory:
    r"""
    Produce `BytesLogger`\ s.

    To be used with `structlog.configure`\ 's ``logger_factory``.

    Args:
        file: File to print to. (default: `sys.stdout`\ ``.buffer``)

    Positional arguments are silently ignored.

    .. versionadded:: 20.2.0
    """
    __slots__ = ...
    def __init__(self, file: BinaryIO | None = ...) -> None:
        ...
    
    def __call__(self, *args: Any) -> BytesLogger:
        ...
    


