"""
This type stub file was generated by pyright.
"""

from typing import Any
from .typing import FilteringBoundLogger

"""
structlog's native high-performance loggers.
"""
def exception(self: FilteringBoundLogger, event: str, *args: Any, **kw: Any) -> Any:
    ...

async def aexception(self: FilteringBoundLogger, event: str, *args: Any, **kw: Any) -> Any:
    """
    .. versionchanged:: 23.3.0
       Callsite parameters are now also collected under asyncio.
    """
    ...

def make_filtering_bound_logger(min_level: int) -> type[FilteringBoundLogger]:
    """
    Create a new `FilteringBoundLogger` that only logs *min_level* or higher.

    The logger is optimized such that log levels below *min_level* only consist
    of a ``return None``.

    All familiar log methods are present, with async variants of each that are
    prefixed by an ``a``. Therefore, the async version of ``log.info("hello")``
    is ``await log.ainfo("hello")``.

    Additionally it has a ``log(self, level: int, **kw: Any)`` method to mirror
    `logging.Logger.log` and `structlog.stdlib.BoundLogger.log`.

    Compared to using *structlog*'s standard library integration and the
    `structlog.stdlib.filter_by_level` processor:

    - It's faster because once the logger is built at program start; it's a
      static class.
    - For the same reason you can't change the log level once configured. Use
      the dynamic approach of `standard-library` instead, if you need this
      feature.
    - You *can* have (much) more fine-grained filtering by :ref:`writing a
      simple processor <finer-filtering>`.

    Args:
        min_level:
            The log level as an integer. You can use the constants from
            `logging` like ``logging.INFO`` or pass the values directly. See
            `this table from the logging docs
            <https://docs.python.org/3/library/logging.html#levels>`_ for
            possible values.

    .. versionadded:: 20.2.0
    .. versionchanged:: 21.1.0 The returned loggers are now pickleable.
    .. versionadded:: 20.1.0 The ``log()`` method.
    .. versionadded:: 22.2.0
       Async variants ``alog()``, ``adebug()``, ``ainfo()``, and so forth.
    """
    ...

BoundLoggerFilteringAtNotset = ...
BoundLoggerFilteringAtDebug = ...
BoundLoggerFilteringAtInfo = ...
BoundLoggerFilteringAtWarning = ...
BoundLoggerFilteringAtError = ...
BoundLoggerFilteringAtCritical = ...
LEVEL_TO_FILTERING_LOGGER = ...
