"""
This type stub file was generated by pyright.
"""

import enum
import logging
from types import FrameType
from typing import Any, Callable, ClassVar, Collection, NamedTuple, Sequence, TextIO
from .typing import EventDict, ExceptionTransformer, WrappedLogger

"""
Processors useful regardless of the logging framework.
"""
__all__ = ["NAME_TO_LEVEL", "add_log_level", "CallsiteParameter", "CallsiteParameterAdder", "dict_tracebacks", "EventRenamer", "ExceptionPrettyPrinter", "format_exc_info", "JSONRenderer", "KeyValueRenderer", "StackInfoRenderer", "TimeStamper", "UnicodeDecoder", "UnicodeEncoder"]
class KeyValueRenderer:
    """
    Render ``event_dict`` as a list of ``Key=repr(Value)`` pairs.

    Args:
        sort_keys: Whether to sort keys when formatting.

        key_order:
            List of keys that should be rendered in this exact order.  Missing
            keys will be rendered as ``None``, extra keys depending on
            *sort_keys* and the dict class.

        drop_missing:
            When ``True``, extra keys in *key_order* will be dropped rather
            than rendered as ``None``.

        repr_native_str:
            When ``True``, :func:`repr()` is also applied to native strings.

    .. versionadded:: 0.2.0 *key_order*
    .. versionadded:: 16.1.0 *drop_missing*
    .. versionadded:: 17.1.0 *repr_native_str*
    """
    def __init__(self, sort_keys: bool = ..., key_order: Sequence[str] | None = ..., drop_missing: bool = ..., repr_native_str: bool = ...) -> None:
        ...
    
    def __call__(self, _: WrappedLogger, __: str, event_dict: EventDict) -> str:
        ...
    


class LogfmtRenderer:
    """
    Render ``event_dict`` using the logfmt_ format.

    .. _logfmt: https://brandur.org/logfmt

    Args:
        sort_keys: Whether to sort keys when formatting.

        key_order:
            List of keys that should be rendered in this exact order. Missing
            keys are rendered with empty values, extra keys depending on
            *sort_keys* and the dict class.

        drop_missing:
            When ``True``, extra keys in *key_order* will be dropped rather
            than rendered with empty values.

        bool_as_flag:
            When ``True``, render ``{"flag": True}`` as ``flag``, instead of
            ``flag=true``. ``{"flag": False}`` is always rendered as
            ``flag=false``.

    Raises:
        ValueError: If a key contains non-printable or whitespace characters.

    .. versionadded:: 21.5.0
    """
    def __init__(self, sort_keys: bool = ..., key_order: Sequence[str] | None = ..., drop_missing: bool = ..., bool_as_flag: bool = ...) -> None:
        ...
    
    def __call__(self, _: WrappedLogger, __: str, event_dict: EventDict) -> str:
        ...
    


class UnicodeEncoder:
    """
    Encode unicode values in ``event_dict``.

    Args:
        encoding: Encoding to encode to (default: ``"utf-8"``).

        errors:
            How to cope with encoding errors (default ``"backslashreplace"``).

    Just put it in the processor chain before the renderer.

    .. note:: Not very useful in a Python 3-only world.
    """
    _encoding: str
    _errors: str
    def __init__(self, encoding: str = ..., errors: str = ...) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


class UnicodeDecoder:
    """
    Decode byte string values in ``event_dict``.

    Args:
        encoding: Encoding to decode from (default: ``"utf-8"``).

        errors: How to cope with encoding errors (default: ``"replace"``).

    Useful to prevent ``b"abc"`` being rendered as as ``'b"abc"'``.

    Just put it in the processor chain before the renderer.

    .. versionadded:: 15.4.0
    """
    _encoding: str
    _errors: str
    def __init__(self, encoding: str = ..., errors: str = ...) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


class JSONRenderer:
    """
    Render the ``event_dict`` using ``serializer(event_dict, **dumps_kw)``.

    Args:
        dumps_kw:
            Are passed unmodified to *serializer*.  If *default* is passed, it
            will disable support for ``__structlog__``-based serialization.

        serializer:
            A :func:`json.dumps`-compatible callable that will be used to
            format the string.  This can be used to use alternative JSON
            encoders (default: :func:`json.dumps`).

            .. seealso:: :doc:`performance` for examples.

    .. versionadded:: 0.2.0 Support for ``__structlog__`` serialization method.
    .. versionadded:: 15.4.0 *serializer* parameter.
    .. versionadded:: 18.2.0
       Serializer's *default* parameter can be overwritten now.
    """
    def __init__(self, serializer: Callable[..., str | bytes] = ..., **dumps_kw: Any) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> str | bytes:
        """
        The return type of this depends on the return type of self._dumps.
        """
        ...
    


class ExceptionRenderer:
    """
    Replace an ``exc_info`` field with an ``exception`` field which is rendered
    by *exception_formatter*.

    The contents of the ``exception`` field depends on the return value of the
    *exception_formatter* that is passed:

    - The default produces a formatted string via Python's built-in traceback
      formatting (this is :obj:`.format_exc_info`).
    - If you pass a :class:`~structlog.tracebacks.ExceptionDictTransformer`, it
      becomes a list of stack dicts that can be serialized to JSON.

    If *event_dict* contains the key ``exc_info``, there are three possible
    behaviors:

    1. If the value is a tuple, render it into the key ``exception``.
    2. If the value is an Exception render it into the key ``exception``.
    3. If the value true but no tuple, obtain exc_info ourselves and render
       that.

    If there is no ``exc_info`` key, the *event_dict* is not touched. This
    behavior is analog to the one of the stdlib's logging.

    Args:
        exception_formatter:
            A callable that is used to format the exception from the
            ``exc_info`` field into the ``exception`` field.

    .. seealso::
        :doc:`exceptions` for a broader explanation of *structlog*'s exception
        features.

    .. versionadded:: 22.1.0
    """
    def __init__(self, exception_formatter: ExceptionTransformer = ...) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


format_exc_info = ...
dict_tracebacks = ...
class TimeStamper:
    """
    Add a timestamp to ``event_dict``.

    Args:
        fmt:
            strftime format string, or ``"iso"`` for `ISO 8601
            <https://en.wikipedia.org/wiki/ISO_8601>`_, or `None` for a `UNIX
            timestamp <https://en.wikipedia.org/wiki/Unix_time>`_.

        utc: Whether timestamp should be in UTC or local time.

        key: Target key in *event_dict* for added timestamps.

    .. versionchanged:: 19.2.0 Can be pickled now.
    """
    __slots__ = ...
    def __init__(self, fmt: str | None = ..., utc: bool = ..., key: str = ...) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> EventDict:
        ...
    
    def __getstate__(self) -> dict[str, Any]:
        ...
    
    def __setstate__(self, state: dict[str, Any]) -> None:
        ...
    


class MaybeTimeStamper:
    """
    A timestamper that only adds a timestamp if there is none.

    This allows you to overwrite the ``timestamp`` key in the event dict for
    example when the event is coming from another system.

    It takes the same arguments as `TimeStamper`.

    .. versionadded:: 23.2.0
    """
    __slots__ = ...
    def __init__(self, fmt: str | None = ..., utc: bool = ..., key: str = ...) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


class ExceptionPrettyPrinter:
    """
    Pretty print exceptions and remove them from the ``event_dict``.

    Args:
        file: Target file for output (default: ``sys.stdout``).

    This processor is mostly for development and testing so you can read
    exceptions properly formatted.

    It behaves like `format_exc_info` except it removes the exception data from
    the event dictionary after printing it.

    It's tolerant to having `format_exc_info` in front of itself in the
    processor chain but doesn't require it.  In other words, it handles both
    ``exception`` as well as ``exc_info`` keys.

    .. versionadded:: 0.4.0

    .. versionchanged:: 16.0.0
       Added support for passing exceptions as ``exc_info`` on Python 3.
    """
    def __init__(self, file: TextIO | None = ..., exception_formatter: ExceptionTransformer = ...) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


class StackInfoRenderer:
    """
    Add stack information with key ``stack`` if ``stack_info`` is `True`.

    Useful when you want to attach a stack dump to a log entry without
    involving an exception and works analogously to the *stack_info* argument
    of the Python standard library logging.

    Args:
        additional_ignores:
            By default, stack frames coming from *structlog* are ignored. With
            this argument you can add additional names that are ignored, before
            the stack starts being rendered. They are matched using
            ``startswith()``, so they don't have to match exactly. The names
            are used to find the first relevant name, therefore once a frame is
            found that doesn't start with *structlog* or one of
            *additional_ignores*, **no filtering** is applied to subsequent
            frames.

    .. versionadded:: 0.4.0
    .. versionadded:: 22.1.0  *additional_ignores*
    """
    __slots__ = ...
    def __init__(self, additional_ignores: list[str] | None = ...) -> None:
        ...
    
    def __call__(self, logger: WrappedLogger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


class CallsiteParameter(enum.Enum):
    """
    Callsite parameters that can be added to an event dictionary with the
    `structlog.processors.CallsiteParameterAdder` processor class.

    The string values of the members of this enum will be used as the keys for
    the callsite parameters in the event dictionary.

    .. versionadded:: 21.5.0
    """
    PATHNAME = ...
    FILENAME = ...
    MODULE = ...
    FUNC_NAME = ...
    LINENO = ...
    THREAD = ...
    THREAD_NAME = ...
    PROCESS = ...
    PROCESS_NAME = ...


class CallsiteParameterAdder:
    """
    Adds parameters of the callsite that an event dictionary originated from to
    the event dictionary. This processor can be used to enrich events
    dictionaries with information such as the function name, line number and
    filename that an event dictionary originated from.

    If the event dictionary has an embedded `logging.LogRecord` object and did
    not originate from *structlog* then the callsite information will be
    determined from the `logging.LogRecord` object. For event dictionaries
    without an embedded `logging.LogRecord` object the callsite will be
    determined from the stack trace, ignoring all intra-structlog calls, calls
    from the `logging` module, and stack frames from modules with names that
    start with values in ``additional_ignores``, if it is specified.

    The keys used for callsite parameters in the event dictionary are the
    string values of `CallsiteParameter` enum members.

    Args:
        parameters:
            A collection of `CallsiteParameter` values that should be added to
            the event dictionary.

        additional_ignores:
            Additional names with which a stack frame's module name must not
            start for it to be considered when determening the callsite.

    .. note::

        When used with `structlog.stdlib.ProcessorFormatter` the most efficient
        configuration is to either use this processor in ``foreign_pre_chain``
        of `structlog.stdlib.ProcessorFormatter` and in ``processors`` of
        `structlog.configure`, or to use it in ``processors`` of
        `structlog.stdlib.ProcessorFormatter` without using it in
        ``processors`` of `structlog.configure` and ``foreign_pre_chain`` of
        `structlog.stdlib.ProcessorFormatter`.

    .. versionadded:: 21.5.0
    """
    _handlers: ClassVar[dict[CallsiteParameter, Callable[[str, FrameType], Any]]] = ...
    _record_attribute_map: ClassVar[dict[CallsiteParameter, str]] = ...
    _all_parameters: ClassVar[set[CallsiteParameter]] = ...
    class _RecordMapping(NamedTuple):
        event_dict_key: str
        record_attribute: str
        ...
    
    
    __slots__ = ...
    def __init__(self, parameters: Collection[CallsiteParameter] = ..., additional_ignores: list[str] | None = ...) -> None:
        ...
    
    def __call__(self, logger: logging.Logger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


class EventRenamer:
    r"""
    Rename the ``event`` key in event dicts.

    This is useful if you want to use consistent log message keys across
    platforms and/or use the ``event`` key for something custom.

    .. warning::

       It's recommended to put this processor right before the renderer, since
       some processors may rely on the presence and meaning of the ``event``
       key.

    Args:
        to: Rename ``event_dict["event"]`` to ``event_dict[to]``

        replace_by:
            Rename ``event_dict[replace_by]`` to ``event_dict["event"]``.
            *replace_by* missing from ``event_dict`` is handled gracefully.

    .. versionadded:: 22.1.0

    See also the :ref:`rename-event` recipe.
    """
    def __init__(self, to: str, replace_by: str | None = ...) -> None:
        ...
    
    def __call__(self, logger: logging.Logger, name: str, event_dict: EventDict) -> EventDict:
        ...
    


