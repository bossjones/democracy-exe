"""
This type stub file was generated by pyright.
"""

from .base_coder import Coder

class EditBlockCoder(Coder):
    """A coder that uses search/replace blocks for code modifications."""
    edit_format = ...
    gpt_prompts = ...
    def get_edits(self): # -> list[Any]:
        ...
    
    def apply_edits_dry_run(self, edits): # -> list[Any] | None:
        ...
    
    def apply_edits(self, edits, dry_run=...): # -> list[Any] | None:
        ...
    


def prep(content): # -> tuple[Any, Any]:
    ...

def perfect_or_whitespace(whole_lines, part_lines, replace_lines): # -> str | None:
    ...

def perfect_replace(whole_lines, part_lines, replace_lines): # -> str | None:
    ...

def replace_most_similar_chunk(whole, part, replace): # -> str | None:
    """Best efforts to find the `part` lines in `whole` and replace them with `replace`"""
    ...

def try_dotdotdots(whole, part, replace): # -> None:
    """
    See if the edit block has ... lines.
    If not, return none.

    If yes, try and do a perfect edit with the ... chunks.
    If there's a mismatch or otherwise imperfect edit, raise ValueError.

    If perfect edit succeeds, return the updated whole.
    """
    ...

def replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replace_lines): # -> str | None:
    ...

def match_but_for_leading_whitespace(whole_lines, part_lines): # -> None:
    ...

def replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines): # -> str | None:
    ...

DEFAULT_FENCE = ...
def strip_quoted_wrapping(res, fname=..., fence=...): # -> str:
    """
    Given an input string which may have extra "wrapping" around it, remove the wrapping.
    For example:

    filename.ext
    ```
    We just want this content
    Not the filename and triple quotes
    ```
    """
    ...

def do_replace(fname, content, before_text, after_text, fence=...): # -> str | None:
    ...

HEAD = ...
DIVIDER = ...
UPDATED = ...
HEAD_ERR = ...
DIVIDER_ERR = ...
UPDATED_ERR = ...
separators = ...
split_re = ...
missing_filename_err = ...
def strip_filename(filename, fence): # -> None:
    ...

def find_original_update_blocks(content, fence=..., valid_fnames=...):
    ...

def find_filename(lines, fence, valid_fnames): # -> None:
    """
    Deepseek Coder v2 has been doing this:


     ```python
    word_count.py
    ```
    ```python
    <<<<<<< SEARCH
    ...

    This is a more flexible search back for filenames.
    """
    ...

def find_similar_lines(search_lines, content_lines, threshold=...): # -> str:
    ...

def main(): # -> None:
    ...

if __name__ == "__main__":
    ...
