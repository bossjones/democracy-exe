"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from prompt_toolkit.completion import Completer

@dataclass
class ConfirmGroup:
    preference: str = ...
    show_group: bool = ...
    def __init__(self, items=...) -> None:
        ...
    


class AutoCompleter(Completer):
    def __init__(self, root, rel_fnames, addable_rel_fnames, commands, encoding, abs_read_only_fnames=...) -> None:
        ...
    
    def tokenize(self): # -> None:
        ...
    
    def get_command_completions(self, document, complete_event, text, words): # -> Generator[Completion | Any, Any, None]:
        ...
    
    def get_completions(self, document, complete_event): # -> Generator[Completion | Any, Any, None]:
        ...
    


class InputOutput:
    num_error_outputs = ...
    num_user_asks = ...
    clipboard_watcher = ...
    def __init__(self, pretty=..., yes=..., input_history_file=..., chat_history_file=..., input=..., output=..., user_input_color=..., tool_output_color=..., tool_error_color=..., tool_warning_color=..., assistant_output_color=..., completion_menu_color=..., completion_menu_bg_color=..., completion_menu_current_color=..., completion_menu_current_bg_color=..., code_theme=..., encoding=..., line_endings=..., dry_run=..., llm_history_file=..., editingmode=..., fancy_input=..., file_watcher=..., multiline_mode=..., root=...) -> None:
        ...
    
    def read_image(self, filename): # -> str | None:
        ...
    
    def read_text(self, filename, silent=...): # -> str | None:
        ...
    
    def write_text(self, filename, content, max_retries=..., initial_delay=...): # -> None:
        """
        Writes content to a file, retrying with progressive backoff if the file is locked.

        :param filename: Path to the file to write.
        :param content: Content to write to the file.
        :param max_retries: Maximum number of retries if a file lock is encountered.
        :param initial_delay: Initial delay (in seconds) before the first retry.
        """
        ...
    
    def rule(self): # -> None:
        ...
    
    def interrupt_input(self): # -> None:
        ...
    
    def get_input(self, root, rel_fnames, addable_rel_fnames, commands, abs_read_only_fnames=..., edit_format=...):
        ...
    
    def add_to_input_history(self, inp): # -> None:
        ...
    
    def get_input_history(self): # -> list[Any] | Iterable[str]:
        ...
    
    def log_llm_history(self, role, content): # -> None:
        ...
    
    def display_user_input(self, inp): # -> None:
        ...
    
    def user_input(self, inp, log_only=...): # -> None:
        ...
    
    def ai_output(self, content): # -> None:
        ...
    
    def offer_url(self, url, prompt=..., allow_never=...): # -> bool:
        """Offer to open a URL in the browser, returns True if opened."""
        ...
    
    def confirm_ask(self, question, default=..., subject=..., explicit_yes_required=..., group=..., allow_never=...):
        ...
    
    def prompt_ask(self, question, default=..., subject=...): # -> str:
        ...
    
    def tool_error(self, message=..., strip=...): # -> None:
        ...
    
    def tool_warning(self, message=..., strip=...): # -> None:
        ...
    
    def tool_output(self, *messages, log_only=..., bold=...): # -> None:
        ...
    
    def get_assistant_mdstream(self): # -> MarkdownStream:
        ...
    
    def assistant_output(self, message, pretty=...): # -> None:
        ...
    
    def set_placeholder(self, placeholder): # -> None:
        """Set a one-time placeholder text for the next input prompt."""
        ...
    
    def print(self, message=...): # -> None:
        ...
    
    def toggle_multiline_mode(self): # -> None:
        """Toggle between normal and multiline input modes"""
        ...
    
    def append_chat_history(self, text, linebreak=..., blockquote=..., strip=...): # -> None:
        ...
    
    def format_files_for_input(self, rel_fnames, rel_read_only_fnames): # -> LiteralString | str:
        ...
    


def get_rel_fname(fname, root):
    ...

