"""
This type stub file was generated by pyright.
"""

IMAGE_EXTENSIONS = ...
class IgnorantTemporaryDirectory:
    def __init__(self) -> None:
        ...
    
    def __enter__(self): # -> str:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def __getattr__(self, item): # -> Any:
        ...
    


class ChdirTemporaryDirectory(IgnorantTemporaryDirectory):
    def __init__(self) -> None:
        ...
    
    def __enter__(self): # -> str:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    


class GitTemporaryDirectory(ChdirTemporaryDirectory):
    def __enter__(self): # -> str:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    


def make_repo(path=...): # -> Repo:
    ...

def is_image_file(file_name): # -> bool:
    """
    Check if the given file name has an image file extension.

    :param file_name: The name of the file to check.
    :return: True if the file is an image, False otherwise.
    """
    ...

def safe_abs_path(res): # -> str:
    "Gives an abs path, which safely returns a full (not 8.3) windows path"
    ...

def format_content(role, content): # -> LiteralString:
    ...

def format_messages(messages, title=...): # -> LiteralString:
    ...

def show_messages(messages, title=..., functions=...): # -> None:
    ...

def split_chat_history_markdown(text, include_tool=...): # -> list[Any]:
    ...

def get_pip_install(args):
    ...

def run_install(cmd): # -> tuple[Literal[True], LiteralString] | tuple[Literal[False], LiteralString | Any | list[Any]]:
    ...

class Spinner:
    unicode_spinner = ...
    ascii_spinner = ...
    def __init__(self, text) -> None:
        ...
    
    def test_charset(self): # -> None:
        ...
    
    def step(self): # -> None:
        ...
    
    def end(self): # -> None:
        ...
    


def find_common_root(abs_fnames): # -> str:
    ...

def format_tokens(count): # -> str:
    ...

def touch_file(fname): # -> bool:
    ...

def check_pip_install_extra(io, module, prompt, pip_install_cmd, self_update=...): # -> Literal[True] | None:
    ...

def printable_shell_command(cmd_list): # -> str:
    """
    Convert a list of command arguments to a properly shell-escaped string.

    Args:
        cmd_list (list): List of command arguments.

    Returns:
        str: Shell-escaped command string.
    """
    ...

def main(): # -> None:
    ...

if __name__ == "__main__":
    ...
