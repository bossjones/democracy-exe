"""
This type stub file was generated by pyright.
"""

from aider import voice

class SwitchCoder(Exception):
    def __init__(self, **kwargs) -> None:
        ...
    


class Commands:
    voice = ...
    scraper = ...
    def clone(self): # -> Commands:
        ...
    
    def __init__(self, io, coder, voice_language=..., voice_input_device=..., voice_format=..., verify_ssl=..., args=..., parser=..., verbose=..., editor=...) -> None:
        ...
    
    def cmd_model(self, args):
        "Switch to a new LLM"
        ...
    
    def cmd_chat_mode(self, args): # -> None:
        "Switch to a new chat mode"
        ...
    
    def completions_model(self): # -> Any:
        ...
    
    def cmd_models(self, args): # -> None:
        "Search the list of available models"
        ...
    
    def cmd_web(self, args, return_content=...): # -> str | None:
        "Scrape a webpage, convert to markdown and send in a message"
        ...
    
    def is_command(self, inp): # -> bool:
        ...
    
    def get_raw_completions(self, cmd): # -> Any | None:
        ...
    
    def get_completions(self, cmd): # -> list[Any] | None:
        ...
    
    def get_commands(self): # -> list[Any]:
        ...
    
    def do_run(self, cmd_name, args): # -> Any | None:
        ...
    
    def matching_commands(self, inp): # -> tuple[list[Any], Any, Any] | None:
        ...
    
    def run(self, inp): # -> Any | None:
        ...
    
    def cmd_commit(self, args=...): # -> None:
        "Commit edits to the repo made outside the chat (commit message optional)"
        ...
    
    def raw_cmd_commit(self, args=...): # -> None:
        ...
    
    def cmd_lint(self, args=..., fnames=...): # -> None:
        "Lint and fix in-chat files or all dirty files if none in chat"
        ...
    
    def cmd_clear(self, args): # -> None:
        "Clear the chat history"
        ...
    
    def cmd_reset(self, args): # -> None:
        "Drop all files and clear the chat history"
        ...
    
    def cmd_tokens(self, args): # -> None:
        "Report on the number of tokens used by the current chat context"
        ...
    
    def cmd_undo(self, args): # -> None:
        "Undo the last git commit if it was done by aider"
        ...
    
    def raw_cmd_undo(self, args): # -> str | None:
        ...
    
    def cmd_diff(self, args=...): # -> None:
        "Display the diff of changes since the last message"
        ...
    
    def raw_cmd_diff(self, args=...): # -> None:
        ...
    
    def quote_fname(self, fname): # -> str:
        ...
    
    def completions_raw_read_only(self, document, complete_event): # -> Generator[Any, Any, None]:
        ...
    
    def completions_add(self): # -> list[str | Any]:
        ...
    
    def glob_filtered_to_repo(self, pattern): # -> list[Any] | list[str]:
        ...
    
    def cmd_add(self, args): # -> None:
        "Add files to the chat so aider can edit them or review them in detail"
        ...
    
    def completions_drop(self): # -> list[str | Any]:
        ...
    
    def cmd_drop(self, args=...): # -> None:
        "Remove files from the chat session to free up context space"
        ...
    
    def cmd_git(self, args): # -> None:
        "Run a git command (output excluded from chat)"
        ...
    
    def cmd_test(self, args): # -> object | None:
        "Run a shell command and add the output to the chat on non-zero exit code"
        ...
    
    def cmd_run(self, args, add_on_nonzero_exit=...): # -> None:
        "Run a shell command and optionally add the output to the chat (alias: !)"
        ...
    
    def cmd_exit(self, args):
        "Exit the application"
        ...
    
    def cmd_quit(self, args):
        "Exit the application"
        ...
    
    def cmd_ls(self, args): # -> None:
        "List all known files and indicate which are included in the chat session"
        ...
    
    def basic_help(self): # -> None:
        ...
    
    def cmd_help(self, args): # -> None:
        "Ask questions about aider"
        ...
    
    def cmd_ask(self, args): # -> None:
        """Ask questions about the code base without editing any files. If no prompt provided, switches to ask mode."""
        ...
    
    def cmd_code(self, args): # -> None:
        """Ask for changes to your code. If no prompt provided, switches to code mode."""
        ...
    
    def cmd_architect(self, args): # -> None:
        """Enter architect/editor mode using 2 different models. If no prompt provided, switches to architect/editor mode."""
        ...
    
    def get_help_md(self): # -> str:
        "Show help about all commands in markdown"
        ...
    
    def cmd_voice(self, args): # -> None:
        "Record and transcribe voice input"
        ...
    
    def cmd_paste(self, args):
        """Paste image/text from the clipboard into the chat.\
        Optionally provide a name for the image."""
        ...
    
    def cmd_read_only(self, args): # -> None:
        "Add files to the chat that are for reference only, or turn added files to read-only"
        ...
    
    def cmd_map(self, args): # -> None:
        "Print out the current repository map"
        ...
    
    def cmd_map_refresh(self, args): # -> None:
        "Force a refresh of the repository map"
        ...
    
    def cmd_settings(self, args): # -> None:
        "Print out the current settings"
        ...
    
    def completions_raw_load(self, document, complete_event): # -> Generator[Any, Any, None]:
        ...
    
    def cmd_load(self, args): # -> None:
        "Load and execute commands from a file"
        ...
    
    def completions_raw_save(self, document, complete_event): # -> Generator[Any, Any, None]:
        ...
    
    def cmd_save(self, args): # -> None:
        "Save commands to a file that can reconstruct the current chat session's files"
        ...
    
    def cmd_multiline_mode(self, args): # -> None:
        "Toggle multiline mode (swaps behavior of Enter and Meta+Enter)"
        ...
    
    def cmd_copy(self, args): # -> None:
        "Copy the last assistant message to the clipboard"
        ...
    
    def cmd_report(self, args): # -> None:
        "Report a problem by opening a GitHub Issue"
        ...
    
    def cmd_editor(self, initial_content=...): # -> None:
        "Open an editor to write a prompt"
        ...
    
    def cmd_copy_context(self, args=...): # -> None:
        """Copy the current chat context as markdown, suitable to paste into a web UI"""
        ...
    


def expand_subdir(file_path): # -> Generator[Any, Any, None]:
    ...

def parse_quoted_filenames(args): # -> list[Any]:
    ...

def get_help_md(): # -> str:
    ...

def main(): # -> None:
    ...

if __name__ == "__main__":
    status = ...
