"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass

class Linter:
    def __init__(self, encoding=..., root=...) -> None:
        ...
    
    def set_linter(self, lang, cmd): # -> None:
        ...
    
    def get_rel_fname(self, fname):
        ...
    
    def run_cmd(self, cmd, rel_fname, code): # -> LintResult | None:
        ...
    
    def errors_to_lint_result(self, rel_fname, errors): # -> LintResult | None:
        ...
    
    def lint(self, fname, cmd=...): # -> None:
        ...
    
    def py_lint(self, fname, rel_fname, code): # -> LintResult | None:
        ...
    
    def flake8_lint(self, rel_fname): # -> LintResult | None:
        ...
    


@dataclass
class LintResult:
    text: str
    lines: list
    ...


def lint_python_compile(fname, code): # -> LintResult | None:
    ...

def basic_lint(fname, code): # -> LintResult | None:
    """
    Use tree-sitter to look for syntax errors, display them with tree context.
    """
    ...

def tree_context(fname, code, line_nums):
    ...

def traverse_tree(node): # -> list[Any]:
    ...

def find_filenames_and_linenums(text, fnames): # -> dict[Any, Any]:
    """
    Search text for all occurrences of <filename>:\\d+ and make a list of them
    where <filename> is one of the filenames in the list `fnames`.
    """
    ...

def main(): # -> None:
    """
    Main function to parse files provided as command line arguments.
    """
    ...

if __name__ == "__main__":
    ...
