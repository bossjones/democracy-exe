"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional

DEFAULT_MODEL_NAME = ...
ANTHROPIC_BETA_HEADER = ...
OPENAI_MODELS = ...
OPENAI_MODELS = ...
ANTHROPIC_MODELS = ...
ANTHROPIC_MODELS = ...
MODEL_ALIASES = ...
@dataclass
class ModelSettings:
    name: str
    edit_format: str = ...
    weak_model_name: Optional[str] = ...
    use_repo_map: bool = ...
    send_undo_reply: bool = ...
    lazy: bool = ...
    reminder: str = ...
    examples_as_sys_msg: bool = ...
    extra_params: Optional[dict] = ...
    cache_control: bool = ...
    caches_by_default: bool = ...
    use_system_prompt: bool = ...
    use_temperature: bool = ...
    streaming: bool = ...
    editor_model_name: Optional[str] = ...
    editor_edit_format: Optional[str] = ...


MODEL_SETTINGS = ...
class ModelInfoManager:
    MODEL_INFO_URL = ...
    CACHE_TTL = ...
    def __init__(self) -> None:
        ...
    
    def get_model_from_cached_json_db(self, model): # -> dict[Any, Any] | Any:
        ...
    
    def get_model_info(self, model): # -> Any | dict[Any, Any]:
        ...
    


model_info_manager = ...
class Model(ModelSettings):
    def __init__(self, model, weak_model=..., editor_model=..., editor_edit_format=...) -> None:
        ...
    
    def get_model_info(self, model): # -> Any | dict[Any, Any]:
        ...
    
    def configure_model_settings(self, model): # -> None:
        ...
    
    def apply_generic_model_settings(self, model):
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_weak_model(self, provided_weak_model_name): # -> Model | None:
        ...
    
    def commit_message_models(self): # -> list[Any]:
        ...
    
    def get_editor_model(self, provided_editor_model_name, editor_edit_format): # -> Self | Model:
        ...
    
    def tokenizer(self, text): # -> Any:
        ...
    
    def token_count(self, messages): # -> Any | int | None:
        ...
    
    def token_count_for_image(self, fname): # -> int:
        """
        Calculate the token cost for an image assuming high detail.
        The token cost is determined by the size of the image.
        :param fname: The filename of the image.
        :return: The token cost for the image.
        """
        ...
    
    def get_image_size(self, fname): # -> tuple[int, int]:
        """
        Retrieve the size of an image.
        :param fname: The filename of the image.
        :return: A tuple (width, height) representing the image size in pixels.
        """
        ...
    
    def fast_validate_environment(self): # -> dict[str, list[str]] | None:
        """Fast path for common models. Avoids forcing litellm import."""
        ...
    
    def validate_environment(self): # -> dict[str, list[str]] | Any | dict[str, bool | list[Any]]:
        ...
    
    def get_repo_map_tokens(self): # -> int:
        ...
    


def register_models(model_settings_fnames): # -> list[Any]:
    ...

def register_litellm_models(model_fnames): # -> list[Any]:
    ...

def validate_variables(vars): # -> dict[str, bool | list[Any]]:
    ...

def sanity_check_models(io, main_model): # -> bool | None:
    ...

def sanity_check_model(io, model): # -> bool:
    ...

def fuzzy_match_models(name): # -> list[Any]:
    ...

def print_matching_models(io, search): # -> None:
    ...

def get_model_settings_as_yaml(): # -> str:
    ...

def main(): # -> None:
    ...

if __name__ == "__main__":
    ...
