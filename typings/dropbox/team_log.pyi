"""
This type stub file was generated by pyright.
"""

from stone.backends.python_rsrc import stone_base as bb
from dropbox import file_requests, sharing, team, team_policies

class AccessMethodLogInfo(bb.Union):
    """
    Indicates the method in which the action was performed.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar WebSessionLogInfo AccessMethodLogInfo.admin_console: Admin console
        session details.
    :ivar ApiSessionLogInfo AccessMethodLogInfo.api: Api session details.
    :ivar WebSessionLogInfo AccessMethodLogInfo.content_manager: Content manager
        session details.
    :ivar SessionLogInfo AccessMethodLogInfo.end_user: End user session details.
    :ivar WebSessionLogInfo AccessMethodLogInfo.enterprise_console: Enterprise
        console session details.
    :ivar WebSessionLogInfo AccessMethodLogInfo.sign_in_as: Sign in as session
        details.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def admin_console(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``admin_console`` tag with
        value ``val``.

        :param WebSessionLogInfo val:
        :rtype: AccessMethodLogInfo
        """
        ...
    
    @classmethod
    def api(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``api`` tag with value
        ``val``.

        :param ApiSessionLogInfo val:
        :rtype: AccessMethodLogInfo
        """
        ...
    
    @classmethod
    def content_manager(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``content_manager`` tag with
        value ``val``.

        :param WebSessionLogInfo val:
        :rtype: AccessMethodLogInfo
        """
        ...
    
    @classmethod
    def end_user(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``end_user`` tag with value
        ``val``.

        :param SessionLogInfo val:
        :rtype: AccessMethodLogInfo
        """
        ...
    
    @classmethod
    def enterprise_console(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``enterprise_console`` tag
        with value ``val``.

        :param WebSessionLogInfo val:
        :rtype: AccessMethodLogInfo
        """
        ...
    
    @classmethod
    def sign_in_as(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sign_in_as`` tag with
        value ``val``.

        :param WebSessionLogInfo val:
        :rtype: AccessMethodLogInfo
        """
        ...
    
    def is_admin_console(self):
        """
        Check if the union tag is ``admin_console``.

        :rtype: bool
        """
        ...
    
    def is_api(self):
        """
        Check if the union tag is ``api``.

        :rtype: bool
        """
        ...
    
    def is_content_manager(self):
        """
        Check if the union tag is ``content_manager``.

        :rtype: bool
        """
        ...
    
    def is_end_user(self):
        """
        Check if the union tag is ``end_user``.

        :rtype: bool
        """
        ...
    
    def is_enterprise_console(self):
        """
        Check if the union tag is ``enterprise_console``.

        :rtype: bool
        """
        ...
    
    def is_sign_in_as(self):
        """
        Check if the union tag is ``sign_in_as``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_admin_console(self): # -> None:
        """
        Admin console session details.

        Only call this if :meth:`is_admin_console` is true.

        :rtype: WebSessionLogInfo
        """
        ...
    
    def get_api(self): # -> None:
        """
        Api session details.

        Only call this if :meth:`is_api` is true.

        :rtype: ApiSessionLogInfo
        """
        ...
    
    def get_content_manager(self): # -> None:
        """
        Content manager session details.

        Only call this if :meth:`is_content_manager` is true.

        :rtype: WebSessionLogInfo
        """
        ...
    
    def get_end_user(self): # -> None:
        """
        End user session details.

        Only call this if :meth:`is_end_user` is true.

        :rtype: SessionLogInfo
        """
        ...
    
    def get_enterprise_console(self): # -> None:
        """
        Enterprise console session details.

        Only call this if :meth:`is_enterprise_console` is true.

        :rtype: WebSessionLogInfo
        """
        ...
    
    def get_sign_in_as(self): # -> None:
        """
        Sign in as session details.

        Only call this if :meth:`is_sign_in_as` is true.

        :rtype: WebSessionLogInfo
        """
        ...
    


AccessMethodLogInfo_validator = ...
class AccountCaptureAvailability(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    available = ...
    unavailable = ...
    other = ...
    def is_available(self):
        """
        Check if the union tag is ``available``.

        :rtype: bool
        """
        ...
    
    def is_unavailable(self):
        """
        Check if the union tag is ``unavailable``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AccountCaptureAvailability_validator = ...
class AccountCaptureChangeAvailabilityDetails(bb.Struct):
    """
    Granted/revoked option to enable account capture on team domains.

    :ivar team_log.AccountCaptureChangeAvailabilityDetails.new_value: New
        account capture availabilty value.
    :ivar team_log.AccountCaptureChangeAvailabilityDetails.previous_value:
        Previous account capture availabilty value. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


AccountCaptureChangeAvailabilityDetails_validator = ...
class AccountCaptureChangeAvailabilityType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AccountCaptureChangeAvailabilityType_validator = ...
class AccountCaptureChangePolicyDetails(bb.Struct):
    """
    Changed account capture setting on team domain.

    :ivar team_log.AccountCaptureChangePolicyDetails.new_value: New account
        capture policy.
    :ivar team_log.AccountCaptureChangePolicyDetails.previous_value: Previous
        account capture policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


AccountCaptureChangePolicyDetails_validator = ...
class AccountCaptureChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AccountCaptureChangePolicyType_validator = ...
class AccountCaptureMigrateAccountDetails(bb.Struct):
    """
    Account-captured user migrated account to team.

    :ivar team_log.AccountCaptureMigrateAccountDetails.domain_name: Domain name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, domain_name=...) -> None:
        ...
    
    domain_name = ...


AccountCaptureMigrateAccountDetails_validator = ...
class AccountCaptureMigrateAccountType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AccountCaptureMigrateAccountType_validator = ...
class AccountCaptureNotificationEmailsSentDetails(bb.Struct):
    """
    Sent account capture email to all unmanaged members.

    :ivar team_log.AccountCaptureNotificationEmailsSentDetails.domain_name:
        Domain name.
    :ivar
        team_log.AccountCaptureNotificationEmailsSentDetails.notification_type:
        Account-capture email notification type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, domain_name=..., notification_type=...) -> None:
        ...
    
    domain_name = ...
    notification_type = ...


AccountCaptureNotificationEmailsSentDetails_validator = ...
class AccountCaptureNotificationEmailsSentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AccountCaptureNotificationEmailsSentType_validator = ...
class AccountCaptureNotificationType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    actionable_notification = ...
    proactive_warning_notification = ...
    other = ...
    def is_actionable_notification(self):
        """
        Check if the union tag is ``actionable_notification``.

        :rtype: bool
        """
        ...
    
    def is_proactive_warning_notification(self):
        """
        Check if the union tag is ``proactive_warning_notification``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AccountCaptureNotificationType_validator = ...
class AccountCapturePolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    all_users = ...
    disabled = ...
    invited_users = ...
    prevent_personal_creation = ...
    other = ...
    def is_all_users(self):
        """
        Check if the union tag is ``all_users``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_invited_users(self):
        """
        Check if the union tag is ``invited_users``.

        :rtype: bool
        """
        ...
    
    def is_prevent_personal_creation(self):
        """
        Check if the union tag is ``prevent_personal_creation``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AccountCapturePolicy_validator = ...
class AccountCaptureRelinquishAccountDetails(bb.Struct):
    """
    Account-captured user changed account email to personal email.

    :ivar team_log.AccountCaptureRelinquishAccountDetails.domain_name: Domain
        name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, domain_name=...) -> None:
        ...
    
    domain_name = ...


AccountCaptureRelinquishAccountDetails_validator = ...
class AccountCaptureRelinquishAccountType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AccountCaptureRelinquishAccountType_validator = ...
class AccountLockOrUnlockedDetails(bb.Struct):
    """
    Unlocked/locked account after failed sign in attempts.

    :ivar team_log.AccountLockOrUnlockedDetails.previous_value: The previous
        account status.
    :ivar team_log.AccountLockOrUnlockedDetails.new_value: The new account
        status.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


AccountLockOrUnlockedDetails_validator = ...
class AccountLockOrUnlockedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AccountLockOrUnlockedType_validator = ...
class AccountState(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    locked = ...
    unlocked = ...
    other = ...
    def is_locked(self):
        """
        Check if the union tag is ``locked``.

        :rtype: bool
        """
        ...
    
    def is_unlocked(self):
        """
        Check if the union tag is ``unlocked``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AccountState_validator = ...
class ActionDetails(bb.Union):
    """
    Additional information indicating the action taken that caused status
    change.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar MemberRemoveActionType ActionDetails.remove_action: Define how the
        user was removed from the team.
    :ivar TeamInviteDetails ActionDetails.team_invite_details: Additional
        information relevant when someone is invited to the team.
    :ivar JoinTeamDetails ActionDetails.team_join_details: Additional
        information relevant when a new member joins the team.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def remove_action(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``remove_action`` tag with
        value ``val``.

        :param MemberRemoveActionType val:
        :rtype: ActionDetails
        """
        ...
    
    @classmethod
    def team_invite_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_invite_details`` tag
        with value ``val``.

        :param TeamInviteDetails val:
        :rtype: ActionDetails
        """
        ...
    
    @classmethod
    def team_join_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_join_details`` tag
        with value ``val``.

        :param JoinTeamDetails val:
        :rtype: ActionDetails
        """
        ...
    
    def is_remove_action(self):
        """
        Check if the union tag is ``remove_action``.

        :rtype: bool
        """
        ...
    
    def is_team_invite_details(self):
        """
        Check if the union tag is ``team_invite_details``.

        :rtype: bool
        """
        ...
    
    def is_team_join_details(self):
        """
        Check if the union tag is ``team_join_details``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_remove_action(self): # -> None:
        """
        Define how the user was removed from the team.

        Only call this if :meth:`is_remove_action` is true.

        :rtype: MemberRemoveActionType
        """
        ...
    
    def get_team_invite_details(self): # -> None:
        """
        Additional information relevant when someone is invited to the team.

        Only call this if :meth:`is_team_invite_details` is true.

        :rtype: TeamInviteDetails
        """
        ...
    
    def get_team_join_details(self): # -> None:
        """
        Additional information relevant when a new member joins the team.

        Only call this if :meth:`is_team_join_details` is true.

        :rtype: JoinTeamDetails
        """
        ...
    


ActionDetails_validator = ...
class ActorLogInfo(bb.Union):
    """
    The entity who performed the action.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar UserLogInfo ActorLogInfo.admin: The admin who did the action.
    :ivar team_log.ActorLogInfo.anonymous: Anonymous actor.
    :ivar AppLogInfo ActorLogInfo.app: The application who did the action.
    :ivar team_log.ActorLogInfo.dropbox: Action done by Dropbox.
    :ivar ResellerLogInfo ActorLogInfo.reseller: Action done by reseller.
    :ivar UserLogInfo ActorLogInfo.user: The user who did the action.
    """
    _catch_all = ...
    anonymous = ...
    dropbox = ...
    other = ...
    @classmethod
    def admin(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``admin`` tag with value
        ``val``.

        :param UserLogInfo val:
        :rtype: ActorLogInfo
        """
        ...
    
    @classmethod
    def app(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app`` tag with value
        ``val``.

        :param AppLogInfo val:
        :rtype: ActorLogInfo
        """
        ...
    
    @classmethod
    def reseller(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``reseller`` tag with value
        ``val``.

        :param ResellerLogInfo val:
        :rtype: ActorLogInfo
        """
        ...
    
    @classmethod
    def user(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``user`` tag with value
        ``val``.

        :param UserLogInfo val:
        :rtype: ActorLogInfo
        """
        ...
    
    def is_admin(self):
        """
        Check if the union tag is ``admin``.

        :rtype: bool
        """
        ...
    
    def is_anonymous(self):
        """
        Check if the union tag is ``anonymous``.

        :rtype: bool
        """
        ...
    
    def is_app(self):
        """
        Check if the union tag is ``app``.

        :rtype: bool
        """
        ...
    
    def is_dropbox(self):
        """
        Check if the union tag is ``dropbox``.

        :rtype: bool
        """
        ...
    
    def is_reseller(self):
        """
        Check if the union tag is ``reseller``.

        :rtype: bool
        """
        ...
    
    def is_user(self):
        """
        Check if the union tag is ``user``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_admin(self): # -> None:
        """
        The admin who did the action.

        Only call this if :meth:`is_admin` is true.

        :rtype: UserLogInfo
        """
        ...
    
    def get_app(self): # -> None:
        """
        The application who did the action.

        Only call this if :meth:`is_app` is true.

        :rtype: AppLogInfo
        """
        ...
    
    def get_reseller(self): # -> None:
        """
        Action done by reseller.

        Only call this if :meth:`is_reseller` is true.

        :rtype: ResellerLogInfo
        """
        ...
    
    def get_user(self): # -> None:
        """
        The user who did the action.

        Only call this if :meth:`is_user` is true.

        :rtype: UserLogInfo
        """
        ...
    


ActorLogInfo_validator = ...
class AdminAlertCategoryEnum(bb.Union):
    """
    Alert category

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    account_takeover = ...
    data_loss_protection = ...
    information_governance = ...
    malware_sharing = ...
    massive_file_operation = ...
    na = ...
    threat_management = ...
    other = ...
    def is_account_takeover(self):
        """
        Check if the union tag is ``account_takeover``.

        :rtype: bool
        """
        ...
    
    def is_data_loss_protection(self):
        """
        Check if the union tag is ``data_loss_protection``.

        :rtype: bool
        """
        ...
    
    def is_information_governance(self):
        """
        Check if the union tag is ``information_governance``.

        :rtype: bool
        """
        ...
    
    def is_malware_sharing(self):
        """
        Check if the union tag is ``malware_sharing``.

        :rtype: bool
        """
        ...
    
    def is_massive_file_operation(self):
        """
        Check if the union tag is ``massive_file_operation``.

        :rtype: bool
        """
        ...
    
    def is_na(self):
        """
        Check if the union tag is ``na``.

        :rtype: bool
        """
        ...
    
    def is_threat_management(self):
        """
        Check if the union tag is ``threat_management``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminAlertCategoryEnum_validator = ...
class AdminAlertGeneralStateEnum(bb.Union):
    """
    Alert state

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    active = ...
    dismissed = ...
    in_progress = ...
    na = ...
    resolved = ...
    other = ...
    def is_active(self):
        """
        Check if the union tag is ``active``.

        :rtype: bool
        """
        ...
    
    def is_dismissed(self):
        """
        Check if the union tag is ``dismissed``.

        :rtype: bool
        """
        ...
    
    def is_in_progress(self):
        """
        Check if the union tag is ``in_progress``.

        :rtype: bool
        """
        ...
    
    def is_na(self):
        """
        Check if the union tag is ``na``.

        :rtype: bool
        """
        ...
    
    def is_resolved(self):
        """
        Check if the union tag is ``resolved``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminAlertGeneralStateEnum_validator = ...
class AdminAlertSeverityEnum(bb.Union):
    """
    Alert severity

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    high = ...
    info = ...
    low = ...
    medium = ...
    na = ...
    other = ...
    def is_high(self):
        """
        Check if the union tag is ``high``.

        :rtype: bool
        """
        ...
    
    def is_info(self):
        """
        Check if the union tag is ``info``.

        :rtype: bool
        """
        ...
    
    def is_low(self):
        """
        Check if the union tag is ``low``.

        :rtype: bool
        """
        ...
    
    def is_medium(self):
        """
        Check if the union tag is ``medium``.

        :rtype: bool
        """
        ...
    
    def is_na(self):
        """
        Check if the union tag is ``na``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminAlertSeverityEnum_validator = ...
class AdminAlertingAlertConfiguration(bb.Struct):
    """
    Alert configurations

    :ivar team_log.AdminAlertingAlertConfiguration.alert_state: Alert state.
    :ivar team_log.AdminAlertingAlertConfiguration.sensitivity_level:
        Sensitivity level.
    :ivar team_log.AdminAlertingAlertConfiguration.recipients_settings:
        Recipient settings.
    :ivar team_log.AdminAlertingAlertConfiguration.text: Text.
    :ivar team_log.AdminAlertingAlertConfiguration.excluded_file_extensions:
        Excluded file extensions.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, alert_state=..., sensitivity_level=..., recipients_settings=..., text=..., excluded_file_extensions=...) -> None:
        ...
    
    alert_state = ...
    sensitivity_level = ...
    recipients_settings = ...
    text = ...
    excluded_file_extensions = ...


AdminAlertingAlertConfiguration_validator = ...
class AdminAlertingAlertSensitivity(bb.Union):
    """
    Alert sensitivity

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    high = ...
    highest = ...
    invalid = ...
    low = ...
    lowest = ...
    medium = ...
    other = ...
    def is_high(self):
        """
        Check if the union tag is ``high``.

        :rtype: bool
        """
        ...
    
    def is_highest(self):
        """
        Check if the union tag is ``highest``.

        :rtype: bool
        """
        ...
    
    def is_invalid(self):
        """
        Check if the union tag is ``invalid``.

        :rtype: bool
        """
        ...
    
    def is_low(self):
        """
        Check if the union tag is ``low``.

        :rtype: bool
        """
        ...
    
    def is_lowest(self):
        """
        Check if the union tag is ``lowest``.

        :rtype: bool
        """
        ...
    
    def is_medium(self):
        """
        Check if the union tag is ``medium``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminAlertingAlertSensitivity_validator = ...
class AdminAlertingAlertStateChangedDetails(bb.Struct):
    """
    Changed an alert state.

    :ivar team_log.AdminAlertingAlertStateChangedDetails.alert_name: Alert name.
    :ivar team_log.AdminAlertingAlertStateChangedDetails.alert_severity: Alert
        severity.
    :ivar team_log.AdminAlertingAlertStateChangedDetails.alert_category: Alert
        category.
    :ivar team_log.AdminAlertingAlertStateChangedDetails.alert_instance_id:
        Alert ID.
    :ivar team_log.AdminAlertingAlertStateChangedDetails.previous_value: Alert
        state before the change.
    :ivar team_log.AdminAlertingAlertStateChangedDetails.new_value: Alert state
        after the change.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, alert_name=..., alert_severity=..., alert_category=..., alert_instance_id=..., previous_value=..., new_value=...) -> None:
        ...
    
    alert_name = ...
    alert_severity = ...
    alert_category = ...
    alert_instance_id = ...
    previous_value = ...
    new_value = ...


AdminAlertingAlertStateChangedDetails_validator = ...
class AdminAlertingAlertStateChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AdminAlertingAlertStateChangedType_validator = ...
class AdminAlertingAlertStatePolicy(bb.Union):
    """
    Policy for controlling whether an alert can be triggered or not

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    off = ...
    on = ...
    other = ...
    def is_off(self):
        """
        Check if the union tag is ``off``.

        :rtype: bool
        """
        ...
    
    def is_on(self):
        """
        Check if the union tag is ``on``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminAlertingAlertStatePolicy_validator = ...
class AdminAlertingChangedAlertConfigDetails(bb.Struct):
    """
    Changed an alert setting.

    :ivar team_log.AdminAlertingChangedAlertConfigDetails.alert_name: Alert
        Name.
    :ivar team_log.AdminAlertingChangedAlertConfigDetails.previous_alert_config:
        Previous alert configuration.
    :ivar team_log.AdminAlertingChangedAlertConfigDetails.new_alert_config: New
        alert configuration.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, alert_name=..., previous_alert_config=..., new_alert_config=...) -> None:
        ...
    
    alert_name = ...
    previous_alert_config = ...
    new_alert_config = ...


AdminAlertingChangedAlertConfigDetails_validator = ...
class AdminAlertingChangedAlertConfigType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AdminAlertingChangedAlertConfigType_validator = ...
class AdminAlertingTriggeredAlertDetails(bb.Struct):
    """
    Triggered security alert.

    :ivar team_log.AdminAlertingTriggeredAlertDetails.alert_name: Alert name.
    :ivar team_log.AdminAlertingTriggeredAlertDetails.alert_severity: Alert
        severity.
    :ivar team_log.AdminAlertingTriggeredAlertDetails.alert_category: Alert
        category.
    :ivar team_log.AdminAlertingTriggeredAlertDetails.alert_instance_id: Alert
        ID.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, alert_name=..., alert_severity=..., alert_category=..., alert_instance_id=...) -> None:
        ...
    
    alert_name = ...
    alert_severity = ...
    alert_category = ...
    alert_instance_id = ...


AdminAlertingTriggeredAlertDetails_validator = ...
class AdminAlertingTriggeredAlertType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AdminAlertingTriggeredAlertType_validator = ...
class AdminConsoleAppPermission(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default_for_listed_apps = ...
    default_for_unlisted_apps = ...
    other = ...
    def is_default_for_listed_apps(self):
        """
        Check if the union tag is ``default_for_listed_apps``.

        :rtype: bool
        """
        ...
    
    def is_default_for_unlisted_apps(self):
        """
        Check if the union tag is ``default_for_unlisted_apps``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminConsoleAppPermission_validator = ...
class AdminConsoleAppPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    allow = ...
    block = ...
    default = ...
    other = ...
    def is_allow(self):
        """
        Check if the union tag is ``allow``.

        :rtype: bool
        """
        ...
    
    def is_block(self):
        """
        Check if the union tag is ``block``.

        :rtype: bool
        """
        ...
    
    def is_default(self):
        """
        Check if the union tag is ``default``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminConsoleAppPolicy_validator = ...
class AdminEmailRemindersChangedDetails(bb.Struct):
    """
    Changed admin reminder settings for requests to join the team.

    :ivar team_log.AdminEmailRemindersChangedDetails.new_value: To.
    :ivar team_log.AdminEmailRemindersChangedDetails.previous_value: From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


AdminEmailRemindersChangedDetails_validator = ...
class AdminEmailRemindersChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AdminEmailRemindersChangedType_validator = ...
class AdminEmailRemindersPolicy(bb.Union):
    """
    Policy for deciding whether team admins receive reminder emails for requests
    to join the team

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_default(self):
        """
        Check if the union tag is ``default``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminEmailRemindersPolicy_validator = ...
class AdminRole(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    billing_admin = ...
    compliance_admin = ...
    content_admin = ...
    limited_admin = ...
    member_only = ...
    reporting_admin = ...
    security_admin = ...
    support_admin = ...
    team_admin = ...
    user_management_admin = ...
    other = ...
    def is_billing_admin(self):
        """
        Check if the union tag is ``billing_admin``.

        :rtype: bool
        """
        ...
    
    def is_compliance_admin(self):
        """
        Check if the union tag is ``compliance_admin``.

        :rtype: bool
        """
        ...
    
    def is_content_admin(self):
        """
        Check if the union tag is ``content_admin``.

        :rtype: bool
        """
        ...
    
    def is_limited_admin(self):
        """
        Check if the union tag is ``limited_admin``.

        :rtype: bool
        """
        ...
    
    def is_member_only(self):
        """
        Check if the union tag is ``member_only``.

        :rtype: bool
        """
        ...
    
    def is_reporting_admin(self):
        """
        Check if the union tag is ``reporting_admin``.

        :rtype: bool
        """
        ...
    
    def is_security_admin(self):
        """
        Check if the union tag is ``security_admin``.

        :rtype: bool
        """
        ...
    
    def is_support_admin(self):
        """
        Check if the union tag is ``support_admin``.

        :rtype: bool
        """
        ...
    
    def is_team_admin(self):
        """
        Check if the union tag is ``team_admin``.

        :rtype: bool
        """
        ...
    
    def is_user_management_admin(self):
        """
        Check if the union tag is ``user_management_admin``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AdminRole_validator = ...
class AlertRecipientsSettingType(bb.Union):
    """
    Alert recipients setting type

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    custom_list = ...
    invalid = ...
    none = ...
    team_admins = ...
    other = ...
    def is_custom_list(self):
        """
        Check if the union tag is ``custom_list``.

        :rtype: bool
        """
        ...
    
    def is_invalid(self):
        """
        Check if the union tag is ``invalid``.

        :rtype: bool
        """
        ...
    
    def is_none(self):
        """
        Check if the union tag is ``none``.

        :rtype: bool
        """
        ...
    
    def is_team_admins(self):
        """
        Check if the union tag is ``team_admins``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


AlertRecipientsSettingType_validator = ...
class AllowDownloadDisabledDetails(bb.Struct):
    """
    Disabled downloads.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


AllowDownloadDisabledDetails_validator = ...
class AllowDownloadDisabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AllowDownloadDisabledType_validator = ...
class AllowDownloadEnabledDetails(bb.Struct):
    """
    Enabled downloads.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


AllowDownloadEnabledDetails_validator = ...
class AllowDownloadEnabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AllowDownloadEnabledType_validator = ...
class ApiSessionLogInfo(bb.Struct):
    """
    Api session.

    :ivar team_log.ApiSessionLogInfo.request_id: Api request ID.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, request_id=...) -> None:
        ...
    
    request_id = ...


ApiSessionLogInfo_validator = ...
class AppBlockedByPermissionsDetails(bb.Struct):
    """
    Failed to connect app for member.

    :ivar team_log.AppBlockedByPermissionsDetails.app_info: Relevant application
        details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_info=...) -> None:
        ...
    
    app_info = ...


AppBlockedByPermissionsDetails_validator = ...
class AppBlockedByPermissionsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AppBlockedByPermissionsType_validator = ...
class AppLinkTeamDetails(bb.Struct):
    """
    Linked app for team.

    :ivar team_log.AppLinkTeamDetails.app_info: Relevant application details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_info=...) -> None:
        ...
    
    app_info = ...


AppLinkTeamDetails_validator = ...
class AppLinkTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AppLinkTeamType_validator = ...
class AppLinkUserDetails(bb.Struct):
    """
    Linked app for member.

    :ivar team_log.AppLinkUserDetails.app_info: Relevant application details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_info=...) -> None:
        ...
    
    app_info = ...


AppLinkUserDetails_validator = ...
class AppLinkUserType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AppLinkUserType_validator = ...
class AppLogInfo(bb.Struct):
    """
    App's logged information.

    :ivar team_log.AppLogInfo.app_id: App unique ID.
    :ivar team_log.AppLogInfo.display_name: App display name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_id=..., display_name=...) -> None:
        ...
    
    app_id = ...
    display_name = ...


AppLogInfo_validator = ...
class AppPermissionsChangedDetails(bb.Struct):
    """
    Changed app permissions.

    :ivar team_log.AppPermissionsChangedDetails.app_name: Name of the app.
    :ivar team_log.AppPermissionsChangedDetails.permission: Permission that was
        changed.
    :ivar team_log.AppPermissionsChangedDetails.previous_value: Previous policy.
    :ivar team_log.AppPermissionsChangedDetails.new_value: New policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=..., app_name=..., permission=...) -> None:
        ...
    
    app_name = ...
    permission = ...
    previous_value = ...
    new_value = ...


AppPermissionsChangedDetails_validator = ...
class AppPermissionsChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AppPermissionsChangedType_validator = ...
class AppUnlinkTeamDetails(bb.Struct):
    """
    Unlinked app for team.

    :ivar team_log.AppUnlinkTeamDetails.app_info: Relevant application details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_info=...) -> None:
        ...
    
    app_info = ...


AppUnlinkTeamDetails_validator = ...
class AppUnlinkTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AppUnlinkTeamType_validator = ...
class AppUnlinkUserDetails(bb.Struct):
    """
    Unlinked app for member.

    :ivar team_log.AppUnlinkUserDetails.app_info: Relevant application details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_info=...) -> None:
        ...
    
    app_info = ...


AppUnlinkUserDetails_validator = ...
class AppUnlinkUserType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


AppUnlinkUserType_validator = ...
class ApplyNamingConventionDetails(bb.Struct):
    """
    Applied naming convention.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ApplyNamingConventionDetails_validator = ...
class ApplyNamingConventionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ApplyNamingConventionType_validator = ...
class AssetLogInfo(bb.Union):
    """
    Asset details.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar FileLogInfo AssetLogInfo.file: File's details.
    :ivar FolderLogInfo AssetLogInfo.folder: Folder's details.
    :ivar PaperDocumentLogInfo AssetLogInfo.paper_document: Paper document's
        details.
    :ivar PaperFolderLogInfo AssetLogInfo.paper_folder: Paper folder's details.
    :ivar ShowcaseDocumentLogInfo AssetLogInfo.showcase_document: Showcase
        document's details.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def file(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file`` tag with value
        ``val``.

        :param FileLogInfo val:
        :rtype: AssetLogInfo
        """
        ...
    
    @classmethod
    def folder(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``folder`` tag with value
        ``val``.

        :param FolderLogInfo val:
        :rtype: AssetLogInfo
        """
        ...
    
    @classmethod
    def paper_document(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_document`` tag with
        value ``val``.

        :param PaperDocumentLogInfo val:
        :rtype: AssetLogInfo
        """
        ...
    
    @classmethod
    def paper_folder(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_folder`` tag with
        value ``val``.

        :param PaperFolderLogInfo val:
        :rtype: AssetLogInfo
        """
        ...
    
    @classmethod
    def showcase_document(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_document`` tag
        with value ``val``.

        :param ShowcaseDocumentLogInfo val:
        :rtype: AssetLogInfo
        """
        ...
    
    def is_file(self):
        """
        Check if the union tag is ``file``.

        :rtype: bool
        """
        ...
    
    def is_folder(self):
        """
        Check if the union tag is ``folder``.

        :rtype: bool
        """
        ...
    
    def is_paper_document(self):
        """
        Check if the union tag is ``paper_document``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder(self):
        """
        Check if the union tag is ``paper_folder``.

        :rtype: bool
        """
        ...
    
    def is_showcase_document(self):
        """
        Check if the union tag is ``showcase_document``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_file(self): # -> None:
        """
        File's details.

        Only call this if :meth:`is_file` is true.

        :rtype: FileLogInfo
        """
        ...
    
    def get_folder(self): # -> None:
        """
        Folder's details.

        Only call this if :meth:`is_folder` is true.

        :rtype: FolderLogInfo
        """
        ...
    
    def get_paper_document(self): # -> None:
        """
        Paper document's details.

        Only call this if :meth:`is_paper_document` is true.

        :rtype: PaperDocumentLogInfo
        """
        ...
    
    def get_paper_folder(self): # -> None:
        """
        Paper folder's details.

        Only call this if :meth:`is_paper_folder` is true.

        :rtype: PaperFolderLogInfo
        """
        ...
    
    def get_showcase_document(self): # -> None:
        """
        Showcase document's details.

        Only call this if :meth:`is_showcase_document` is true.

        :rtype: ShowcaseDocumentLogInfo
        """
        ...
    


AssetLogInfo_validator = ...
class BackupAdminInvitationSentDetails(bb.Struct):
    """
    Invited members to activate Backup.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


BackupAdminInvitationSentDetails_validator = ...
class BackupAdminInvitationSentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BackupAdminInvitationSentType_validator = ...
class BackupInvitationOpenedDetails(bb.Struct):
    """
    Opened Backup invite.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


BackupInvitationOpenedDetails_validator = ...
class BackupInvitationOpenedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BackupInvitationOpenedType_validator = ...
class BackupStatus(bb.Union):
    """
    Backup status

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


BackupStatus_validator = ...
class BinderAddPageDetails(bb.Struct):
    """
    Added Binder page.

    :ivar team_log.BinderAddPageDetails.event_uuid: Event unique identifier.
    :ivar team_log.BinderAddPageDetails.doc_title: Title of the Binder doc.
    :ivar team_log.BinderAddPageDetails.binder_item_name: Name of the Binder
        page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...


BinderAddPageDetails_validator = ...
class BinderAddPageType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderAddPageType_validator = ...
class BinderAddSectionDetails(bb.Struct):
    """
    Added Binder section.

    :ivar team_log.BinderAddSectionDetails.event_uuid: Event unique identifier.
    :ivar team_log.BinderAddSectionDetails.doc_title: Title of the Binder doc.
    :ivar team_log.BinderAddSectionDetails.binder_item_name: Name of the Binder
        page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...


BinderAddSectionDetails_validator = ...
class BinderAddSectionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderAddSectionType_validator = ...
class BinderRemovePageDetails(bb.Struct):
    """
    Removed Binder page.

    :ivar team_log.BinderRemovePageDetails.event_uuid: Event unique identifier.
    :ivar team_log.BinderRemovePageDetails.doc_title: Title of the Binder doc.
    :ivar team_log.BinderRemovePageDetails.binder_item_name: Name of the Binder
        page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...


BinderRemovePageDetails_validator = ...
class BinderRemovePageType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderRemovePageType_validator = ...
class BinderRemoveSectionDetails(bb.Struct):
    """
    Removed Binder section.

    :ivar team_log.BinderRemoveSectionDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.BinderRemoveSectionDetails.doc_title: Title of the Binder
        doc.
    :ivar team_log.BinderRemoveSectionDetails.binder_item_name: Name of the
        Binder page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...


BinderRemoveSectionDetails_validator = ...
class BinderRemoveSectionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderRemoveSectionType_validator = ...
class BinderRenamePageDetails(bb.Struct):
    """
    Renamed Binder page.

    :ivar team_log.BinderRenamePageDetails.event_uuid: Event unique identifier.
    :ivar team_log.BinderRenamePageDetails.doc_title: Title of the Binder doc.
    :ivar team_log.BinderRenamePageDetails.binder_item_name: Name of the Binder
        page/section.
    :ivar team_log.BinderRenamePageDetails.previous_binder_item_name: Previous
        name of the Binder page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=..., previous_binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...
    previous_binder_item_name = ...


BinderRenamePageDetails_validator = ...
class BinderRenamePageType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderRenamePageType_validator = ...
class BinderRenameSectionDetails(bb.Struct):
    """
    Renamed Binder section.

    :ivar team_log.BinderRenameSectionDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.BinderRenameSectionDetails.doc_title: Title of the Binder
        doc.
    :ivar team_log.BinderRenameSectionDetails.binder_item_name: Name of the
        Binder page/section.
    :ivar team_log.BinderRenameSectionDetails.previous_binder_item_name:
        Previous name of the Binder page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=..., previous_binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...
    previous_binder_item_name = ...


BinderRenameSectionDetails_validator = ...
class BinderRenameSectionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderRenameSectionType_validator = ...
class BinderReorderPageDetails(bb.Struct):
    """
    Reordered Binder page.

    :ivar team_log.BinderReorderPageDetails.event_uuid: Event unique identifier.
    :ivar team_log.BinderReorderPageDetails.doc_title: Title of the Binder doc.
    :ivar team_log.BinderReorderPageDetails.binder_item_name: Name of the Binder
        page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...


BinderReorderPageDetails_validator = ...
class BinderReorderPageType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderReorderPageType_validator = ...
class BinderReorderSectionDetails(bb.Struct):
    """
    Reordered Binder section.

    :ivar team_log.BinderReorderSectionDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.BinderReorderSectionDetails.doc_title: Title of the Binder
        doc.
    :ivar team_log.BinderReorderSectionDetails.binder_item_name: Name of the
        Binder page/section.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., doc_title=..., binder_item_name=...) -> None:
        ...
    
    event_uuid = ...
    doc_title = ...
    binder_item_name = ...


BinderReorderSectionDetails_validator = ...
class BinderReorderSectionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


BinderReorderSectionType_validator = ...
class CameraUploadsPolicy(bb.Union):
    """
    Policy for controlling if team members can activate camera uploads

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


CameraUploadsPolicy_validator = ...
class CameraUploadsPolicyChangedDetails(bb.Struct):
    """
    Changed camera uploads setting for team.

    :ivar team_log.CameraUploadsPolicyChangedDetails.new_value: New camera
        uploads setting.
    :ivar team_log.CameraUploadsPolicyChangedDetails.previous_value: Previous
        camera uploads setting.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


CameraUploadsPolicyChangedDetails_validator = ...
class CameraUploadsPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


CameraUploadsPolicyChangedType_validator = ...
class CaptureTranscriptPolicy(bb.Union):
    """
    Policy for deciding whether team users can transcription in Capture

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_default(self):
        """
        Check if the union tag is ``default``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


CaptureTranscriptPolicy_validator = ...
class CaptureTranscriptPolicyChangedDetails(bb.Struct):
    """
    Changed Capture transcription policy for team.

    :ivar team_log.CaptureTranscriptPolicyChangedDetails.new_value: To.
    :ivar team_log.CaptureTranscriptPolicyChangedDetails.previous_value: From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


CaptureTranscriptPolicyChangedDetails_validator = ...
class CaptureTranscriptPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


CaptureTranscriptPolicyChangedType_validator = ...
class Certificate(bb.Struct):
    """
    Certificate details.

    :ivar team_log.Certificate.subject: Certificate subject.
    :ivar team_log.Certificate.issuer: Certificate issuer.
    :ivar team_log.Certificate.issue_date: Certificate issue date.
    :ivar team_log.Certificate.expiration_date: Certificate expiration date.
    :ivar team_log.Certificate.serial_number: Certificate serial number.
    :ivar team_log.Certificate.sha1_fingerprint: Certificate sha1 fingerprint.
    :ivar team_log.Certificate.common_name: Certificate common name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, subject=..., issuer=..., issue_date=..., expiration_date=..., serial_number=..., sha1_fingerprint=..., common_name=...) -> None:
        ...
    
    subject = ...
    issuer = ...
    issue_date = ...
    expiration_date = ...
    serial_number = ...
    sha1_fingerprint = ...
    common_name = ...


Certificate_validator = ...
class ChangeLinkExpirationPolicy(bb.Union):
    """
    Policy for deciding whether the team's default expiration days policy must
    be enforced when an externally shared link is updated

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    allowed = ...
    not_allowed = ...
    other = ...
    def is_allowed(self):
        """
        Check if the union tag is ``allowed``.

        :rtype: bool
        """
        ...
    
    def is_not_allowed(self):
        """
        Check if the union tag is ``not_allowed``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ChangeLinkExpirationPolicy_validator = ...
class ChangedEnterpriseAdminRoleDetails(bb.Struct):
    """
    Changed enterprise admin role.

    :ivar team_log.ChangedEnterpriseAdminRoleDetails.previous_value: The
        member&#x2019s previous enterprise admin role.
    :ivar team_log.ChangedEnterpriseAdminRoleDetails.new_value: The
        member&#x2019s new enterprise admin role.
    :ivar team_log.ChangedEnterpriseAdminRoleDetails.team_name: The name of the
        member&#x2019s team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=..., team_name=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...
    team_name = ...


ChangedEnterpriseAdminRoleDetails_validator = ...
class ChangedEnterpriseAdminRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ChangedEnterpriseAdminRoleType_validator = ...
class ChangedEnterpriseConnectedTeamStatusDetails(bb.Struct):
    """
    Changed enterprise-connected team status.

    :ivar team_log.ChangedEnterpriseConnectedTeamStatusDetails.action: The
        preformed change in the team&#x2019s connection status.
    :ivar team_log.ChangedEnterpriseConnectedTeamStatusDetails.additional_info:
        Additional information about the organization or team.
    :ivar team_log.ChangedEnterpriseConnectedTeamStatusDetails.previous_value:
        Previous request state.
    :ivar team_log.ChangedEnterpriseConnectedTeamStatusDetails.new_value: New
        request state.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, action=..., additional_info=..., previous_value=..., new_value=...) -> None:
        ...
    
    action = ...
    additional_info = ...
    previous_value = ...
    new_value = ...


ChangedEnterpriseConnectedTeamStatusDetails_validator = ...
class ChangedEnterpriseConnectedTeamStatusType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ChangedEnterpriseConnectedTeamStatusType_validator = ...
class ClassificationChangePolicyDetails(bb.Struct):
    """
    Changed classification policy for team.

    :ivar team_log.ClassificationChangePolicyDetails.previous_value: Previous
        classification policy.
    :ivar team_log.ClassificationChangePolicyDetails.new_value: New
        classification policy.
    :ivar team_log.ClassificationChangePolicyDetails.classification_type: Policy
        type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=..., classification_type=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...
    classification_type = ...


ClassificationChangePolicyDetails_validator = ...
class ClassificationChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ClassificationChangePolicyType_validator = ...
class ClassificationCreateReportDetails(bb.Struct):
    """
    Created Classification report.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ClassificationCreateReportDetails_validator = ...
class ClassificationCreateReportFailDetails(bb.Struct):
    """
    Couldn't create Classification report.

    :ivar team_log.ClassificationCreateReportFailDetails.failure_reason: Failure
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


ClassificationCreateReportFailDetails_validator = ...
class ClassificationCreateReportFailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ClassificationCreateReportFailType_validator = ...
class ClassificationCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ClassificationCreateReportType_validator = ...
class ClassificationPolicyEnumWrapper(bb.Union):
    """
    Policy for controlling team access to the classification feature

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    member_and_team_folders = ...
    team_folders = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_member_and_team_folders(self):
        """
        Check if the union tag is ``member_and_team_folders``.

        :rtype: bool
        """
        ...
    
    def is_team_folders(self):
        """
        Check if the union tag is ``team_folders``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ClassificationPolicyEnumWrapper_validator = ...
class ClassificationType(bb.Union):
    """
    The type of classification (currently only personal information)

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    personal_information = ...
    pii = ...
    other = ...
    def is_personal_information(self):
        """
        Check if the union tag is ``personal_information``.

        :rtype: bool
        """
        ...
    
    def is_pii(self):
        """
        Check if the union tag is ``pii``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ClassificationType_validator = ...
class CollectionShareDetails(bb.Struct):
    """
    Shared album.

    :ivar team_log.CollectionShareDetails.album_name: Album name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, album_name=...) -> None:
        ...
    
    album_name = ...


CollectionShareDetails_validator = ...
class CollectionShareType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


CollectionShareType_validator = ...
class ComputerBackupPolicy(bb.Union):
    """
    Policy for controlling team access to computer backup feature

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_default(self):
        """
        Check if the union tag is ``default``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ComputerBackupPolicy_validator = ...
class ComputerBackupPolicyChangedDetails(bb.Struct):
    """
    Changed computer backup policy for team.

    :ivar team_log.ComputerBackupPolicyChangedDetails.new_value: New computer
        backup policy.
    :ivar team_log.ComputerBackupPolicyChangedDetails.previous_value: Previous
        computer backup policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ComputerBackupPolicyChangedDetails_validator = ...
class ComputerBackupPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ComputerBackupPolicyChangedType_validator = ...
class ConnectedTeamName(bb.Struct):
    """
    The name of the team

    :ivar team_log.ConnectedTeamName.team: The name of the team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team=...) -> None:
        ...
    
    team = ...


ConnectedTeamName_validator = ...
class ContentAdministrationPolicyChangedDetails(bb.Struct):
    """
    Changed content management setting.

    :ivar team_log.ContentAdministrationPolicyChangedDetails.new_value: New
        content administration policy.
    :ivar team_log.ContentAdministrationPolicyChangedDetails.previous_value:
        Previous content administration policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ContentAdministrationPolicyChangedDetails_validator = ...
class ContentAdministrationPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ContentAdministrationPolicyChangedType_validator = ...
class ContentPermanentDeletePolicy(bb.Union):
    """
    Policy for pemanent content deletion

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ContentPermanentDeletePolicy_validator = ...
class ContextLogInfo(bb.Union):
    """
    The primary entity on which the action was done.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_log.ContextLogInfo.anonymous: Anonymous context.
    :ivar NonTeamMemberLogInfo ContextLogInfo.non_team_member: Action was done
        on behalf of a non team member.
    :ivar TeamLogInfo ContextLogInfo.organization_team: Action was done on
        behalf of a team that's part of an organization.
    :ivar team_log.ContextLogInfo.team: Action was done on behalf of the team.
    :ivar TeamMemberLogInfo ContextLogInfo.team_member: Action was done on
        behalf of a team member.
    :ivar TrustedNonTeamMemberLogInfo ContextLogInfo.trusted_non_team_member:
        Action was done on behalf of a trusted non team member.
    """
    _catch_all = ...
    anonymous = ...
    team = ...
    other = ...
    @classmethod
    def non_team_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``non_team_member`` tag with
        value ``val``.

        :param NonTeamMemberLogInfo val:
        :rtype: ContextLogInfo
        """
        ...
    
    @classmethod
    def organization_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``organization_team`` tag
        with value ``val``.

        :param TeamLogInfo val:
        :rtype: ContextLogInfo
        """
        ...
    
    @classmethod
    def team_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_member`` tag with
        value ``val``.

        :param TeamMemberLogInfo val:
        :rtype: ContextLogInfo
        """
        ...
    
    @classmethod
    def trusted_non_team_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``trusted_non_team_member``
        tag with value ``val``.

        :param TrustedNonTeamMemberLogInfo val:
        :rtype: ContextLogInfo
        """
        ...
    
    def is_anonymous(self):
        """
        Check if the union tag is ``anonymous``.

        :rtype: bool
        """
        ...
    
    def is_non_team_member(self):
        """
        Check if the union tag is ``non_team_member``.

        :rtype: bool
        """
        ...
    
    def is_organization_team(self):
        """
        Check if the union tag is ``organization_team``.

        :rtype: bool
        """
        ...
    
    def is_team(self):
        """
        Check if the union tag is ``team``.

        :rtype: bool
        """
        ...
    
    def is_team_member(self):
        """
        Check if the union tag is ``team_member``.

        :rtype: bool
        """
        ...
    
    def is_trusted_non_team_member(self):
        """
        Check if the union tag is ``trusted_non_team_member``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_non_team_member(self): # -> None:
        """
        Action was done on behalf of a non team member.

        Only call this if :meth:`is_non_team_member` is true.

        :rtype: NonTeamMemberLogInfo
        """
        ...
    
    def get_organization_team(self): # -> None:
        """
        Action was done on behalf of a team that's part of an organization.

        Only call this if :meth:`is_organization_team` is true.

        :rtype: TeamLogInfo
        """
        ...
    
    def get_team_member(self): # -> None:
        """
        Action was done on behalf of a team member.

        Only call this if :meth:`is_team_member` is true.

        :rtype: TeamMemberLogInfo
        """
        ...
    
    def get_trusted_non_team_member(self): # -> None:
        """
        Action was done on behalf of a trusted non team member.

        Only call this if :meth:`is_trusted_non_team_member` is true.

        :rtype: TrustedNonTeamMemberLogInfo
        """
        ...
    


ContextLogInfo_validator = ...
class CreateFolderDetails(bb.Struct):
    """
    Created folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


CreateFolderDetails_validator = ...
class CreateFolderType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


CreateFolderType_validator = ...
class CreateTeamInviteLinkDetails(bb.Struct):
    """
    Created team invite link.

    :ivar team_log.CreateTeamInviteLinkDetails.link_url: The invite link url
        that was created.
    :ivar team_log.CreateTeamInviteLinkDetails.expiry_date: The expiration date
        of the invite link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, link_url=..., expiry_date=...) -> None:
        ...
    
    link_url = ...
    expiry_date = ...


CreateTeamInviteLinkDetails_validator = ...
class CreateTeamInviteLinkType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


CreateTeamInviteLinkType_validator = ...
class DataPlacementRestrictionChangePolicyDetails(bb.Struct):
    """
    Set restrictions on data center locations where team data resides.

    :ivar team_log.DataPlacementRestrictionChangePolicyDetails.previous_value:
        Previous placement restriction.
    :ivar team_log.DataPlacementRestrictionChangePolicyDetails.new_value: New
        placement restriction.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


DataPlacementRestrictionChangePolicyDetails_validator = ...
class DataPlacementRestrictionChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DataPlacementRestrictionChangePolicyType_validator = ...
class DataPlacementRestrictionSatisfyPolicyDetails(bb.Struct):
    """
    Completed restrictions on data center locations where team data resides.

    :ivar
        team_log.DataPlacementRestrictionSatisfyPolicyDetails.placement_restriction:
        Placement restriction.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, placement_restriction=...) -> None:
        ...
    
    placement_restriction = ...


DataPlacementRestrictionSatisfyPolicyDetails_validator = ...
class DataPlacementRestrictionSatisfyPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DataPlacementRestrictionSatisfyPolicyType_validator = ...
class DataResidencyMigrationRequestSuccessfulDetails(bb.Struct):
    """
    Requested data residency migration for team data.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DataResidencyMigrationRequestSuccessfulDetails_validator = ...
class DataResidencyMigrationRequestSuccessfulType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DataResidencyMigrationRequestSuccessfulType_validator = ...
class DataResidencyMigrationRequestUnsuccessfulDetails(bb.Struct):
    """
    Request for data residency migration for team data has failed.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DataResidencyMigrationRequestUnsuccessfulDetails_validator = ...
class DataResidencyMigrationRequestUnsuccessfulType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DataResidencyMigrationRequestUnsuccessfulType_validator = ...
class DefaultLinkExpirationDaysPolicy(bb.Union):
    """
    Policy for the default number of days until an externally shared link
    expires

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    day_1 = ...
    day_180 = ...
    day_3 = ...
    day_30 = ...
    day_7 = ...
    day_90 = ...
    none = ...
    year_1 = ...
    other = ...
    def is_day_1(self):
        """
        Check if the union tag is ``day_1``.

        :rtype: bool
        """
        ...
    
    def is_day_180(self):
        """
        Check if the union tag is ``day_180``.

        :rtype: bool
        """
        ...
    
    def is_day_3(self):
        """
        Check if the union tag is ``day_3``.

        :rtype: bool
        """
        ...
    
    def is_day_30(self):
        """
        Check if the union tag is ``day_30``.

        :rtype: bool
        """
        ...
    
    def is_day_7(self):
        """
        Check if the union tag is ``day_7``.

        :rtype: bool
        """
        ...
    
    def is_day_90(self):
        """
        Check if the union tag is ``day_90``.

        :rtype: bool
        """
        ...
    
    def is_none(self):
        """
        Check if the union tag is ``none``.

        :rtype: bool
        """
        ...
    
    def is_year_1(self):
        """
        Check if the union tag is ``year_1``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


DefaultLinkExpirationDaysPolicy_validator = ...
class DeleteTeamInviteLinkDetails(bb.Struct):
    """
    Deleted team invite link.

    :ivar team_log.DeleteTeamInviteLinkDetails.link_url: The invite link url
        that was deleted.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, link_url=...) -> None:
        ...
    
    link_url = ...


DeleteTeamInviteLinkDetails_validator = ...
class DeleteTeamInviteLinkType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeleteTeamInviteLinkType_validator = ...
class DeviceSessionLogInfo(bb.Struct):
    """
    Device's session logged information.

    :ivar team_log.DeviceSessionLogInfo.ip_address: The IP address of the last
        activity from this session.
    :ivar team_log.DeviceSessionLogInfo.created: The time this session was
        created.
    :ivar team_log.DeviceSessionLogInfo.updated: The time of the last activity
        from this session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, ip_address=..., created=..., updated=...) -> None:
        ...
    
    ip_address = ...
    created = ...
    updated = ...


DeviceSessionLogInfo_validator = ...
class DesktopDeviceSessionLogInfo(DeviceSessionLogInfo):
    """
    Information about linked Dropbox desktop client sessions

    :ivar team_log.DesktopDeviceSessionLogInfo.session_info: Desktop session
        unique id.
    :ivar team_log.DesktopDeviceSessionLogInfo.host_name: Name of the hosting
        desktop.
    :ivar team_log.DesktopDeviceSessionLogInfo.client_type: The Dropbox desktop
        client type.
    :ivar team_log.DesktopDeviceSessionLogInfo.client_version: The Dropbox
        client version.
    :ivar team_log.DesktopDeviceSessionLogInfo.platform: Information on the
        hosting platform.
    :ivar team_log.DesktopDeviceSessionLogInfo.is_delete_on_unlink_supported:
        Whether itu2019s possible to delete all of the account files upon
        unlinking.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, host_name=..., client_type=..., platform=..., is_delete_on_unlink_supported=..., ip_address=..., created=..., updated=..., session_info=..., client_version=...) -> None:
        ...
    
    session_info = ...
    host_name = ...
    client_type = ...
    client_version = ...
    platform = ...
    is_delete_on_unlink_supported = ...


DesktopDeviceSessionLogInfo_validator = ...
class SessionLogInfo(bb.Struct):
    """
    Session's logged information.

    :ivar team_log.SessionLogInfo.session_id: Session ID.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, session_id=...) -> None:
        ...
    
    session_id = ...


SessionLogInfo_validator = ...
class DesktopSessionLogInfo(SessionLogInfo):
    """
    Desktop session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, session_id=...) -> None:
        ...
    


DesktopSessionLogInfo_validator = ...
class DeviceApprovalsAddExceptionDetails(bb.Struct):
    """
    Added members to device approvals exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DeviceApprovalsAddExceptionDetails_validator = ...
class DeviceApprovalsAddExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceApprovalsAddExceptionType_validator = ...
class DeviceApprovalsChangeDesktopPolicyDetails(bb.Struct):
    """
    Set/removed limit on number of computers member can link to team Dropbox
    account.

    :ivar team_log.DeviceApprovalsChangeDesktopPolicyDetails.new_value: New
        desktop device approvals policy. Might be missing due to historical data
        gap.
    :ivar team_log.DeviceApprovalsChangeDesktopPolicyDetails.previous_value:
        Previous desktop device approvals policy. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


DeviceApprovalsChangeDesktopPolicyDetails_validator = ...
class DeviceApprovalsChangeDesktopPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceApprovalsChangeDesktopPolicyType_validator = ...
class DeviceApprovalsChangeMobilePolicyDetails(bb.Struct):
    """
    Set/removed limit on number of mobile devices member can link to team
    Dropbox account.

    :ivar team_log.DeviceApprovalsChangeMobilePolicyDetails.new_value: New
        mobile device approvals policy. Might be missing due to historical data
        gap.
    :ivar team_log.DeviceApprovalsChangeMobilePolicyDetails.previous_value:
        Previous mobile device approvals policy. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


DeviceApprovalsChangeMobilePolicyDetails_validator = ...
class DeviceApprovalsChangeMobilePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceApprovalsChangeMobilePolicyType_validator = ...
class DeviceApprovalsChangeOverageActionDetails(bb.Struct):
    """
    Changed device approvals setting when member is over limit.

    :ivar team_log.DeviceApprovalsChangeOverageActionDetails.new_value: New over
        the limits policy. Might be missing due to historical data gap.
    :ivar team_log.DeviceApprovalsChangeOverageActionDetails.previous_value:
        Previous over the limit policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


DeviceApprovalsChangeOverageActionDetails_validator = ...
class DeviceApprovalsChangeOverageActionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceApprovalsChangeOverageActionType_validator = ...
class DeviceApprovalsChangeUnlinkActionDetails(bb.Struct):
    """
    Changed device approvals setting when member unlinks approved device.

    :ivar team_log.DeviceApprovalsChangeUnlinkActionDetails.new_value: New
        device unlink policy. Might be missing due to historical data gap.
    :ivar team_log.DeviceApprovalsChangeUnlinkActionDetails.previous_value:
        Previous device unlink policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


DeviceApprovalsChangeUnlinkActionDetails_validator = ...
class DeviceApprovalsChangeUnlinkActionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceApprovalsChangeUnlinkActionType_validator = ...
class DeviceApprovalsPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    limited = ...
    unlimited = ...
    other = ...
    def is_limited(self):
        """
        Check if the union tag is ``limited``.

        :rtype: bool
        """
        ...
    
    def is_unlimited(self):
        """
        Check if the union tag is ``unlimited``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


DeviceApprovalsPolicy_validator = ...
class DeviceApprovalsRemoveExceptionDetails(bb.Struct):
    """
    Removed members from device approvals exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DeviceApprovalsRemoveExceptionDetails_validator = ...
class DeviceApprovalsRemoveExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceApprovalsRemoveExceptionType_validator = ...
class DeviceChangeIpDesktopDetails(bb.Struct):
    """
    Changed IP address associated with active desktop session.

    :ivar team_log.DeviceChangeIpDesktopDetails.device_session_info: Device's
        session logged information.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, device_session_info=...) -> None:
        ...
    
    device_session_info = ...


DeviceChangeIpDesktopDetails_validator = ...
class DeviceChangeIpDesktopType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceChangeIpDesktopType_validator = ...
class DeviceChangeIpMobileDetails(bb.Struct):
    """
    Changed IP address associated with active mobile session.

    :ivar team_log.DeviceChangeIpMobileDetails.device_session_info: Device's
        session logged information.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, device_session_info=...) -> None:
        ...
    
    device_session_info = ...


DeviceChangeIpMobileDetails_validator = ...
class DeviceChangeIpMobileType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceChangeIpMobileType_validator = ...
class DeviceChangeIpWebDetails(bb.Struct):
    """
    Changed IP address associated with active web session.

    :ivar team_log.DeviceChangeIpWebDetails.user_agent: Web browser name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, user_agent=...) -> None:
        ...
    
    user_agent = ...


DeviceChangeIpWebDetails_validator = ...
class DeviceChangeIpWebType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceChangeIpWebType_validator = ...
class DeviceDeleteOnUnlinkFailDetails(bb.Struct):
    """
    Failed to delete all files from unlinked device.

    :ivar team_log.DeviceDeleteOnUnlinkFailDetails.session_info: Session unique
        id.
    :ivar team_log.DeviceDeleteOnUnlinkFailDetails.display_name: The device
        name. Might be missing due to historical data gap.
    :ivar team_log.DeviceDeleteOnUnlinkFailDetails.num_failures: The number of
        times that remote file deletion failed.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, num_failures=..., session_info=..., display_name=...) -> None:
        ...
    
    session_info = ...
    display_name = ...
    num_failures = ...


DeviceDeleteOnUnlinkFailDetails_validator = ...
class DeviceDeleteOnUnlinkFailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceDeleteOnUnlinkFailType_validator = ...
class DeviceDeleteOnUnlinkSuccessDetails(bb.Struct):
    """
    Deleted all files from unlinked device.

    :ivar team_log.DeviceDeleteOnUnlinkSuccessDetails.session_info: Session
        unique id.
    :ivar team_log.DeviceDeleteOnUnlinkSuccessDetails.display_name: The device
        name. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, session_info=..., display_name=...) -> None:
        ...
    
    session_info = ...
    display_name = ...


DeviceDeleteOnUnlinkSuccessDetails_validator = ...
class DeviceDeleteOnUnlinkSuccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceDeleteOnUnlinkSuccessType_validator = ...
class DeviceLinkFailDetails(bb.Struct):
    """
    Failed to link device.

    :ivar team_log.DeviceLinkFailDetails.ip_address: IP address. Might be
        missing due to historical data gap.
    :ivar team_log.DeviceLinkFailDetails.device_type: A description of the
        device used while user approval blocked.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, device_type=..., ip_address=...) -> None:
        ...
    
    ip_address = ...
    device_type = ...


DeviceLinkFailDetails_validator = ...
class DeviceLinkFailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceLinkFailType_validator = ...
class DeviceLinkSuccessDetails(bb.Struct):
    """
    Linked device.

    :ivar team_log.DeviceLinkSuccessDetails.device_session_info: Device's
        session logged information.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, device_session_info=...) -> None:
        ...
    
    device_session_info = ...


DeviceLinkSuccessDetails_validator = ...
class DeviceLinkSuccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceLinkSuccessType_validator = ...
class DeviceManagementDisabledDetails(bb.Struct):
    """
    Disabled device management.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DeviceManagementDisabledDetails_validator = ...
class DeviceManagementDisabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceManagementDisabledType_validator = ...
class DeviceManagementEnabledDetails(bb.Struct):
    """
    Enabled device management.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DeviceManagementEnabledDetails_validator = ...
class DeviceManagementEnabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceManagementEnabledType_validator = ...
class DeviceSyncBackupStatusChangedDetails(bb.Struct):
    """
    Enabled/disabled backup for computer.

    :ivar
        team_log.DeviceSyncBackupStatusChangedDetails.desktop_device_session_info:
        Device's session logged information.
    :ivar team_log.DeviceSyncBackupStatusChangedDetails.previous_value: Previous
        status of computer backup on the device.
    :ivar team_log.DeviceSyncBackupStatusChangedDetails.new_value: Next status
        of computer backup on the device.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, desktop_device_session_info=..., previous_value=..., new_value=...) -> None:
        ...
    
    desktop_device_session_info = ...
    previous_value = ...
    new_value = ...


DeviceSyncBackupStatusChangedDetails_validator = ...
class DeviceSyncBackupStatusChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceSyncBackupStatusChangedType_validator = ...
class DeviceType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    desktop = ...
    mobile = ...
    other = ...
    def is_desktop(self):
        """
        Check if the union tag is ``desktop``.

        :rtype: bool
        """
        ...
    
    def is_mobile(self):
        """
        Check if the union tag is ``mobile``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


DeviceType_validator = ...
class DeviceUnlinkDetails(bb.Struct):
    """
    Disconnected device.

    :ivar team_log.DeviceUnlinkDetails.session_info: Session unique id.
    :ivar team_log.DeviceUnlinkDetails.display_name: The device name. Might be
        missing due to historical data gap.
    :ivar team_log.DeviceUnlinkDetails.delete_data: True if the user requested
        to delete data after device unlink, false otherwise.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, delete_data=..., session_info=..., display_name=...) -> None:
        ...
    
    session_info = ...
    display_name = ...
    delete_data = ...


DeviceUnlinkDetails_validator = ...
class DeviceUnlinkPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    keep = ...
    remove = ...
    other = ...
    def is_keep(self):
        """
        Check if the union tag is ``keep``.

        :rtype: bool
        """
        ...
    
    def is_remove(self):
        """
        Check if the union tag is ``remove``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


DeviceUnlinkPolicy_validator = ...
class DeviceUnlinkType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DeviceUnlinkType_validator = ...
class DirectoryRestrictionsAddMembersDetails(bb.Struct):
    """
    Added members to directory restrictions list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DirectoryRestrictionsAddMembersDetails_validator = ...
class DirectoryRestrictionsAddMembersType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DirectoryRestrictionsAddMembersType_validator = ...
class DirectoryRestrictionsRemoveMembersDetails(bb.Struct):
    """
    Removed members from directory restrictions list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DirectoryRestrictionsRemoveMembersDetails_validator = ...
class DirectoryRestrictionsRemoveMembersType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DirectoryRestrictionsRemoveMembersType_validator = ...
class DisabledDomainInvitesDetails(bb.Struct):
    """
    Disabled domain invites.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DisabledDomainInvitesDetails_validator = ...
class DisabledDomainInvitesType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DisabledDomainInvitesType_validator = ...
class DispositionActionType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    automatic_delete = ...
    automatic_permanently_delete = ...
    other = ...
    def is_automatic_delete(self):
        """
        Check if the union tag is ``automatic_delete``.

        :rtype: bool
        """
        ...
    
    def is_automatic_permanently_delete(self):
        """
        Check if the union tag is ``automatic_permanently_delete``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


DispositionActionType_validator = ...
class DomainInvitesApproveRequestToJoinTeamDetails(bb.Struct):
    """
    Approved user's request to join team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DomainInvitesApproveRequestToJoinTeamDetails_validator = ...
class DomainInvitesApproveRequestToJoinTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainInvitesApproveRequestToJoinTeamType_validator = ...
class DomainInvitesDeclineRequestToJoinTeamDetails(bb.Struct):
    """
    Declined user's request to join team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DomainInvitesDeclineRequestToJoinTeamDetails_validator = ...
class DomainInvitesDeclineRequestToJoinTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainInvitesDeclineRequestToJoinTeamType_validator = ...
class DomainInvitesEmailExistingUsersDetails(bb.Struct):
    """
    Sent domain invites to existing domain accounts.

    :ivar team_log.DomainInvitesEmailExistingUsersDetails.domain_name: Domain
        names.
    :ivar team_log.DomainInvitesEmailExistingUsersDetails.num_recipients: Number
        of recipients.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, domain_name=..., num_recipients=...) -> None:
        ...
    
    domain_name = ...
    num_recipients = ...


DomainInvitesEmailExistingUsersDetails_validator = ...
class DomainInvitesEmailExistingUsersType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainInvitesEmailExistingUsersType_validator = ...
class DomainInvitesRequestToJoinTeamDetails(bb.Struct):
    """
    Requested to join team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DomainInvitesRequestToJoinTeamDetails_validator = ...
class DomainInvitesRequestToJoinTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainInvitesRequestToJoinTeamType_validator = ...
class DomainInvitesSetInviteNewUserPrefToNoDetails(bb.Struct):
    """
    Disabled "Automatically invite new users".
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DomainInvitesSetInviteNewUserPrefToNoDetails_validator = ...
class DomainInvitesSetInviteNewUserPrefToNoType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainInvitesSetInviteNewUserPrefToNoType_validator = ...
class DomainInvitesSetInviteNewUserPrefToYesDetails(bb.Struct):
    """
    Enabled "Automatically invite new users".
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


DomainInvitesSetInviteNewUserPrefToYesDetails_validator = ...
class DomainInvitesSetInviteNewUserPrefToYesType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainInvitesSetInviteNewUserPrefToYesType_validator = ...
class DomainVerificationAddDomainFailDetails(bb.Struct):
    """
    Failed to verify team domain.

    :ivar team_log.DomainVerificationAddDomainFailDetails.domain_name: Domain
        name.
    :ivar team_log.DomainVerificationAddDomainFailDetails.verification_method:
        Domain name verification method. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, domain_name=..., verification_method=...) -> None:
        ...
    
    domain_name = ...
    verification_method = ...


DomainVerificationAddDomainFailDetails_validator = ...
class DomainVerificationAddDomainFailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainVerificationAddDomainFailType_validator = ...
class DomainVerificationAddDomainSuccessDetails(bb.Struct):
    """
    Verified team domain.

    :ivar team_log.DomainVerificationAddDomainSuccessDetails.domain_names:
        Domain names.
    :ivar
        team_log.DomainVerificationAddDomainSuccessDetails.verification_method:
        Domain name verification method. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, domain_names=..., verification_method=...) -> None:
        ...
    
    domain_names = ...
    verification_method = ...


DomainVerificationAddDomainSuccessDetails_validator = ...
class DomainVerificationAddDomainSuccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainVerificationAddDomainSuccessType_validator = ...
class DomainVerificationRemoveDomainDetails(bb.Struct):
    """
    Removed domain from list of verified team domains.

    :ivar team_log.DomainVerificationRemoveDomainDetails.domain_names: Domain
        names.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, domain_names=...) -> None:
        ...
    
    domain_names = ...


DomainVerificationRemoveDomainDetails_validator = ...
class DomainVerificationRemoveDomainType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DomainVerificationRemoveDomainType_validator = ...
class DownloadPolicyType(bb.Union):
    """
    Shared content downloads policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    allow = ...
    disallow = ...
    other = ...
    def is_allow(self):
        """
        Check if the union tag is ``allow``.

        :rtype: bool
        """
        ...
    
    def is_disallow(self):
        """
        Check if the union tag is ``disallow``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


DownloadPolicyType_validator = ...
class DropboxPasswordsExportedDetails(bb.Struct):
    """
    Exported passwords.

    :ivar team_log.DropboxPasswordsExportedDetails.platform: The platform the
        device runs export.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, platform=...) -> None:
        ...
    
    platform = ...


DropboxPasswordsExportedDetails_validator = ...
class DropboxPasswordsExportedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DropboxPasswordsExportedType_validator = ...
class DropboxPasswordsNewDeviceEnrolledDetails(bb.Struct):
    """
    Enrolled new Dropbox Passwords device.

    :ivar team_log.DropboxPasswordsNewDeviceEnrolledDetails.is_first_device:
        Whether it's a first device enrolled.
    :ivar team_log.DropboxPasswordsNewDeviceEnrolledDetails.platform: The
        platform the device is enrolled.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, is_first_device=..., platform=...) -> None:
        ...
    
    is_first_device = ...
    platform = ...


DropboxPasswordsNewDeviceEnrolledDetails_validator = ...
class DropboxPasswordsNewDeviceEnrolledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DropboxPasswordsNewDeviceEnrolledType_validator = ...
class DropboxPasswordsPolicy(bb.Union):
    """
    Policy for deciding whether team users can use Dropbox Passwords

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_default(self):
        """
        Check if the union tag is ``default``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


DropboxPasswordsPolicy_validator = ...
class DropboxPasswordsPolicyChangedDetails(bb.Struct):
    """
    Changed Dropbox Passwords policy for team.

    :ivar team_log.DropboxPasswordsPolicyChangedDetails.new_value: To.
    :ivar team_log.DropboxPasswordsPolicyChangedDetails.previous_value: From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


DropboxPasswordsPolicyChangedDetails_validator = ...
class DropboxPasswordsPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


DropboxPasswordsPolicyChangedType_validator = ...
class DurationLogInfo(bb.Struct):
    """
    Represents a time duration: unit and amount

    :ivar team_log.DurationLogInfo.unit: Time unit.
    :ivar team_log.DurationLogInfo.amount: Amount of time.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, unit=..., amount=...) -> None:
        ...
    
    unit = ...
    amount = ...


DurationLogInfo_validator = ...
class EmailIngestPolicy(bb.Union):
    """
    Policy for deciding whether a team can use Email to Dropbox feature

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


EmailIngestPolicy_validator = ...
class EmailIngestPolicyChangedDetails(bb.Struct):
    """
    Changed email to Dropbox policy for team.

    :ivar team_log.EmailIngestPolicyChangedDetails.new_value: To.
    :ivar team_log.EmailIngestPolicyChangedDetails.previous_value: From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


EmailIngestPolicyChangedDetails_validator = ...
class EmailIngestPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmailIngestPolicyChangedType_validator = ...
class EmailIngestReceiveFileDetails(bb.Struct):
    """
    Received files via Email to Dropbox.

    :ivar team_log.EmailIngestReceiveFileDetails.inbox_name: Inbox name.
    :ivar team_log.EmailIngestReceiveFileDetails.attachment_names: Submitted
        file names.
    :ivar team_log.EmailIngestReceiveFileDetails.subject: Subject of the email.
    :ivar team_log.EmailIngestReceiveFileDetails.from_name: The name as provided
        by the submitter.
    :ivar team_log.EmailIngestReceiveFileDetails.from_email: The email as
        provided by the submitter.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, inbox_name=..., attachment_names=..., subject=..., from_name=..., from_email=...) -> None:
        ...
    
    inbox_name = ...
    attachment_names = ...
    subject = ...
    from_name = ...
    from_email = ...


EmailIngestReceiveFileDetails_validator = ...
class EmailIngestReceiveFileType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmailIngestReceiveFileType_validator = ...
class EmmAddExceptionDetails(bb.Struct):
    """
    Added members to EMM exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


EmmAddExceptionDetails_validator = ...
class EmmAddExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmmAddExceptionType_validator = ...
class EmmChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled enterprise mobility management for members.

    :ivar team_log.EmmChangePolicyDetails.new_value: New enterprise mobility
        management policy.
    :ivar team_log.EmmChangePolicyDetails.previous_value: Previous enterprise
        mobility management policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


EmmChangePolicyDetails_validator = ...
class EmmChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmmChangePolicyType_validator = ...
class EmmCreateExceptionsReportDetails(bb.Struct):
    """
    Created EMM-excluded users report.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


EmmCreateExceptionsReportDetails_validator = ...
class EmmCreateExceptionsReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmmCreateExceptionsReportType_validator = ...
class EmmCreateUsageReportDetails(bb.Struct):
    """
    Created EMM mobile app usage report.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


EmmCreateUsageReportDetails_validator = ...
class EmmCreateUsageReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmmCreateUsageReportType_validator = ...
class EmmErrorDetails(bb.Struct):
    """
    Failed to sign in via EMM.

    :ivar team_log.EmmErrorDetails.error_details: Error details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, error_details=...) -> None:
        ...
    
    error_details = ...


EmmErrorDetails_validator = ...
class EmmErrorType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmmErrorType_validator = ...
class EmmRefreshAuthTokenDetails(bb.Struct):
    """
    Refreshed auth token used for setting up EMM.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


EmmRefreshAuthTokenDetails_validator = ...
class EmmRefreshAuthTokenType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmmRefreshAuthTokenType_validator = ...
class EmmRemoveExceptionDetails(bb.Struct):
    """
    Removed members from EMM exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


EmmRemoveExceptionDetails_validator = ...
class EmmRemoveExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EmmRemoveExceptionType_validator = ...
class EnabledDomainInvitesDetails(bb.Struct):
    """
    Enabled domain invites.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


EnabledDomainInvitesDetails_validator = ...
class EnabledDomainInvitesType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EnabledDomainInvitesType_validator = ...
class EndedEnterpriseAdminSessionDeprecatedDetails(bb.Struct):
    """
    Ended enterprise admin session.

    :ivar
        team_log.EndedEnterpriseAdminSessionDeprecatedDetails.federation_extra_details:
        More information about the organization or team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, federation_extra_details=...) -> None:
        ...
    
    federation_extra_details = ...


EndedEnterpriseAdminSessionDeprecatedDetails_validator = ...
class EndedEnterpriseAdminSessionDeprecatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EndedEnterpriseAdminSessionDeprecatedType_validator = ...
class EndedEnterpriseAdminSessionDetails(bb.Struct):
    """
    Ended enterprise admin session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


EndedEnterpriseAdminSessionDetails_validator = ...
class EndedEnterpriseAdminSessionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EndedEnterpriseAdminSessionType_validator = ...
class EnforceLinkPasswordPolicy(bb.Union):
    """
    Policy for deciding whether password must be enforced when an externally
    shared link is updated

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    optional = ...
    required = ...
    other = ...
    def is_optional(self):
        """
        Check if the union tag is ``optional``.

        :rtype: bool
        """
        ...
    
    def is_required(self):
        """
        Check if the union tag is ``required``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


EnforceLinkPasswordPolicy_validator = ...
class EnterpriseSettingsLockingDetails(bb.Struct):
    """
    Changed who can update a setting.

    :ivar team_log.EnterpriseSettingsLockingDetails.team_name: The secondary
        team name.
    :ivar team_log.EnterpriseSettingsLockingDetails.settings_page_name: Settings
        page name.
    :ivar
        team_log.EnterpriseSettingsLockingDetails.previous_settings_page_locking_state:
        Previous locked settings page state.
    :ivar
        team_log.EnterpriseSettingsLockingDetails.new_settings_page_locking_state:
        New locked settings page state.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team_name=..., settings_page_name=..., previous_settings_page_locking_state=..., new_settings_page_locking_state=...) -> None:
        ...
    
    team_name = ...
    settings_page_name = ...
    previous_settings_page_locking_state = ...
    new_settings_page_locking_state = ...


EnterpriseSettingsLockingDetails_validator = ...
class EnterpriseSettingsLockingType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


EnterpriseSettingsLockingType_validator = ...
class EventCategory(bb.Union):
    """
    Category of events in event audit log.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_log.EventCategory.admin_alerting: Events that involve team
        related alerts.
    :ivar team_log.EventCategory.apps: Events that apply to management of linked
        apps.
    :ivar team_log.EventCategory.comments: Events that have to do with comments
        on files and Paper documents.
    :ivar team_log.EventCategory.data_governance: Events that involve data
        governance actions
    :ivar team_log.EventCategory.devices: Events that apply to linked devices on
        mobile, desktop and Web platforms.
    :ivar team_log.EventCategory.domains: Events that involve domain management
        feature: domain verification, invite enforcement and account capture.
    :ivar team_log.EventCategory.encryption: Events that involve encryption.
    :ivar team_log.EventCategory.file_operations: Events that have to do with
        filesystem operations on files and folders: copy, move, delete, etc.
    :ivar team_log.EventCategory.file_requests: Events that apply to the file
        requests feature.
    :ivar team_log.EventCategory.groups: Events that involve group management.
    :ivar team_log.EventCategory.logins: Events that involve users signing in to
        or out of Dropbox.
    :ivar team_log.EventCategory.members: Events that involve team member
        management.
    :ivar team_log.EventCategory.paper: Events that apply to Dropbox Paper.
    :ivar team_log.EventCategory.passwords: Events that involve using, changing
        or resetting passwords.
    :ivar team_log.EventCategory.reports: Events that concern generation of
        admin reports, including team activity and device usage.
    :ivar team_log.EventCategory.sharing: Events that apply to all types of
        sharing and collaboration.
    :ivar team_log.EventCategory.showcase: Events that apply to Dropbox
        Showcase.
    :ivar team_log.EventCategory.sso: Events that involve using or configuring
        single sign-on as well as administrative policies concerning single
        sign-on.
    :ivar team_log.EventCategory.team_folders: Events that involve team folder
        management.
    :ivar team_log.EventCategory.team_policies: Events that involve a change in
        team-wide policies.
    :ivar team_log.EventCategory.team_profile: Events that involve a change in
        the team profile.
    :ivar team_log.EventCategory.tfa: Events that involve using or configuring
        two factor authentication as well as administrative policies concerning
        two factor authentication.
    :ivar team_log.EventCategory.trusted_teams: Events that apply to cross-team
        trust establishment.
    """
    _catch_all = ...
    admin_alerting = ...
    apps = ...
    comments = ...
    data_governance = ...
    devices = ...
    domains = ...
    encryption = ...
    file_operations = ...
    file_requests = ...
    groups = ...
    logins = ...
    members = ...
    paper = ...
    passwords = ...
    reports = ...
    sharing = ...
    showcase = ...
    sso = ...
    team_folders = ...
    team_policies = ...
    team_profile = ...
    tfa = ...
    trusted_teams = ...
    other = ...
    def is_admin_alerting(self):
        """
        Check if the union tag is ``admin_alerting``.

        :rtype: bool
        """
        ...
    
    def is_apps(self):
        """
        Check if the union tag is ``apps``.

        :rtype: bool
        """
        ...
    
    def is_comments(self):
        """
        Check if the union tag is ``comments``.

        :rtype: bool
        """
        ...
    
    def is_data_governance(self):
        """
        Check if the union tag is ``data_governance``.

        :rtype: bool
        """
        ...
    
    def is_devices(self):
        """
        Check if the union tag is ``devices``.

        :rtype: bool
        """
        ...
    
    def is_domains(self):
        """
        Check if the union tag is ``domains``.

        :rtype: bool
        """
        ...
    
    def is_encryption(self):
        """
        Check if the union tag is ``encryption``.

        :rtype: bool
        """
        ...
    
    def is_file_operations(self):
        """
        Check if the union tag is ``file_operations``.

        :rtype: bool
        """
        ...
    
    def is_file_requests(self):
        """
        Check if the union tag is ``file_requests``.

        :rtype: bool
        """
        ...
    
    def is_groups(self):
        """
        Check if the union tag is ``groups``.

        :rtype: bool
        """
        ...
    
    def is_logins(self):
        """
        Check if the union tag is ``logins``.

        :rtype: bool
        """
        ...
    
    def is_members(self):
        """
        Check if the union tag is ``members``.

        :rtype: bool
        """
        ...
    
    def is_paper(self):
        """
        Check if the union tag is ``paper``.

        :rtype: bool
        """
        ...
    
    def is_passwords(self):
        """
        Check if the union tag is ``passwords``.

        :rtype: bool
        """
        ...
    
    def is_reports(self):
        """
        Check if the union tag is ``reports``.

        :rtype: bool
        """
        ...
    
    def is_sharing(self):
        """
        Check if the union tag is ``sharing``.

        :rtype: bool
        """
        ...
    
    def is_showcase(self):
        """
        Check if the union tag is ``showcase``.

        :rtype: bool
        """
        ...
    
    def is_sso(self):
        """
        Check if the union tag is ``sso``.

        :rtype: bool
        """
        ...
    
    def is_team_folders(self):
        """
        Check if the union tag is ``team_folders``.

        :rtype: bool
        """
        ...
    
    def is_team_policies(self):
        """
        Check if the union tag is ``team_policies``.

        :rtype: bool
        """
        ...
    
    def is_team_profile(self):
        """
        Check if the union tag is ``team_profile``.

        :rtype: bool
        """
        ...
    
    def is_tfa(self):
        """
        Check if the union tag is ``tfa``.

        :rtype: bool
        """
        ...
    
    def is_trusted_teams(self):
        """
        Check if the union tag is ``trusted_teams``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


EventCategory_validator = ...
class EventDetails(bb.Union):
    """
    Additional fields depending on the event type.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar MissingDetails EventDetails.missing_details: Hints that this event was
        returned with missing details due to an internal error.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def admin_alerting_alert_state_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_alerting_alert_state_changed_details`` tag with value ``val``.

        :param AdminAlertingAlertStateChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def admin_alerting_changed_alert_config_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_alerting_changed_alert_config_details`` tag with value ``val``.

        :param AdminAlertingChangedAlertConfigDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def admin_alerting_triggered_alert_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_alerting_triggered_alert_details`` tag with value ``val``.

        :param AdminAlertingTriggeredAlertDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def ransomware_restore_process_completed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_restore_process_completed_details`` tag with value ``val``.

        :param RansomwareRestoreProcessCompletedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def ransomware_restore_process_started_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_restore_process_started_details`` tag with value ``val``.

        :param RansomwareRestoreProcessStartedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def app_blocked_by_permissions_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``app_blocked_by_permissions_details`` tag with value ``val``.

        :param AppBlockedByPermissionsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def app_link_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_link_team_details``
        tag with value ``val``.

        :param AppLinkTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def app_link_user_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_link_user_details``
        tag with value ``val``.

        :param AppLinkUserDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def app_unlink_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_unlink_team_details``
        tag with value ``val``.

        :param AppUnlinkTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def app_unlink_user_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_unlink_user_details``
        tag with value ``val``.

        :param AppUnlinkUserDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def integration_connected_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``integration_connected_details`` tag with value ``val``.

        :param IntegrationConnectedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def integration_disconnected_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``integration_disconnected_details`` tag with value ``val``.

        :param IntegrationDisconnectedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_add_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_add_comment_details``
        tag with value ``val``.

        :param FileAddCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_change_comment_subscription_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_change_comment_subscription_details`` tag with value ``val``.

        :param FileChangeCommentSubscriptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_delete_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_delete_comment_details`` tag with value ``val``.

        :param FileDeleteCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_edit_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_edit_comment_details`` tag with value ``val``.

        :param FileEditCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_like_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_like_comment_details`` tag with value ``val``.

        :param FileLikeCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_resolve_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_resolve_comment_details`` tag with value ``val``.

        :param FileResolveCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_unlike_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_unlike_comment_details`` tag with value ``val``.

        :param FileUnlikeCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_unresolve_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_unresolve_comment_details`` tag with value ``val``.

        :param FileUnresolveCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_add_folders_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_add_folders_details`` tag with value ``val``.

        :param GovernancePolicyAddFoldersDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_add_folder_failed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_add_folder_failed_details`` tag with value ``val``.

        :param GovernancePolicyAddFolderFailedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_content_disposed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_content_disposed_details`` tag with value ``val``.

        :param GovernancePolicyContentDisposedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_create_details`` tag with value ``val``.

        :param GovernancePolicyCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_delete_details`` tag with value ``val``.

        :param GovernancePolicyDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_edit_details_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_edit_details_details`` tag with value ``val``.

        :param GovernancePolicyEditDetailsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_edit_duration_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_edit_duration_details`` tag with value ``val``.

        :param GovernancePolicyEditDurationDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_export_created_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_export_created_details`` tag with value ``val``.

        :param GovernancePolicyExportCreatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_export_removed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_export_removed_details`` tag with value ``val``.

        :param GovernancePolicyExportRemovedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_remove_folders_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_remove_folders_details`` tag with value ``val``.

        :param GovernancePolicyRemoveFoldersDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_report_created_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_report_created_details`` tag with value ``val``.

        :param GovernancePolicyReportCreatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def governance_policy_zip_part_downloaded_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_zip_part_downloaded_details`` tag with value
        ``val``.

        :param GovernancePolicyZipPartDownloadedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_activate_a_hold_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_activate_a_hold_details`` tag with value ``val``.

        :param LegalHoldsActivateAHoldDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_add_members_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_add_members_details`` tag with value ``val``.

        :param LegalHoldsAddMembersDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_change_hold_details_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_change_hold_details_details`` tag with value ``val``.

        :param LegalHoldsChangeHoldDetailsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_change_hold_name_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_change_hold_name_details`` tag with value ``val``.

        :param LegalHoldsChangeHoldNameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_export_a_hold_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_a_hold_details`` tag with value ``val``.

        :param LegalHoldsExportAHoldDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_export_cancelled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_cancelled_details`` tag with value ``val``.

        :param LegalHoldsExportCancelledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_export_downloaded_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_downloaded_details`` tag with value ``val``.

        :param LegalHoldsExportDownloadedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_export_removed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_removed_details`` tag with value ``val``.

        :param LegalHoldsExportRemovedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_release_a_hold_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_release_a_hold_details`` tag with value ``val``.

        :param LegalHoldsReleaseAHoldDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_remove_members_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_remove_members_details`` tag with value ``val``.

        :param LegalHoldsRemoveMembersDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def legal_holds_report_a_hold_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_report_a_hold_details`` tag with value ``val``.

        :param LegalHoldsReportAHoldDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_change_ip_desktop_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_change_ip_desktop_details`` tag with value ``val``.

        :param DeviceChangeIpDesktopDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_change_ip_mobile_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_change_ip_mobile_details`` tag with value ``val``.

        :param DeviceChangeIpMobileDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_change_ip_web_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_change_ip_web_details`` tag with value ``val``.

        :param DeviceChangeIpWebDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_delete_on_unlink_fail_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_delete_on_unlink_fail_details`` tag with value ``val``.

        :param DeviceDeleteOnUnlinkFailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_delete_on_unlink_success_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_delete_on_unlink_success_details`` tag with value ``val``.

        :param DeviceDeleteOnUnlinkSuccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_link_fail_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_link_fail_details``
        tag with value ``val``.

        :param DeviceLinkFailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_link_success_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_link_success_details`` tag with value ``val``.

        :param DeviceLinkSuccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_management_disabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_management_disabled_details`` tag with value ``val``.

        :param DeviceManagementDisabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_management_enabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_management_enabled_details`` tag with value ``val``.

        :param DeviceManagementEnabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_sync_backup_status_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_sync_backup_status_changed_details`` tag with value ``val``.

        :param DeviceSyncBackupStatusChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_unlink_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_unlink_details``
        tag with value ``val``.

        :param DeviceUnlinkDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def dropbox_passwords_exported_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``dropbox_passwords_exported_details`` tag with value ``val``.

        :param DropboxPasswordsExportedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def dropbox_passwords_new_device_enrolled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``dropbox_passwords_new_device_enrolled_details`` tag with value
        ``val``.

        :param DropboxPasswordsNewDeviceEnrolledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def emm_refresh_auth_token_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``emm_refresh_auth_token_details`` tag with value ``val``.

        :param EmmRefreshAuthTokenDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def external_drive_backup_eligibility_status_checked_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_drive_backup_eligibility_status_checked_details`` tag with
        value ``val``.

        :param ExternalDriveBackupEligibilityStatusCheckedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def external_drive_backup_status_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_drive_backup_status_changed_details`` tag with value ``val``.

        :param ExternalDriveBackupStatusChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def account_capture_change_availability_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_change_availability_details`` tag with value ``val``.

        :param AccountCaptureChangeAvailabilityDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def account_capture_migrate_account_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_migrate_account_details`` tag with value ``val``.

        :param AccountCaptureMigrateAccountDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def account_capture_notification_emails_sent_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_notification_emails_sent_details`` tag with value
        ``val``.

        :param AccountCaptureNotificationEmailsSentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def account_capture_relinquish_account_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_relinquish_account_details`` tag with value ``val``.

        :param AccountCaptureRelinquishAccountDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def disabled_domain_invites_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``disabled_domain_invites_details`` tag with value ``val``.

        :param DisabledDomainInvitesDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_invites_approve_request_to_join_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_approve_request_to_join_team_details`` tag with value
        ``val``.

        :param DomainInvitesApproveRequestToJoinTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_invites_decline_request_to_join_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_decline_request_to_join_team_details`` tag with value
        ``val``.

        :param DomainInvitesDeclineRequestToJoinTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_invites_email_existing_users_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_email_existing_users_details`` tag with value ``val``.

        :param DomainInvitesEmailExistingUsersDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_invites_request_to_join_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_request_to_join_team_details`` tag with value ``val``.

        :param DomainInvitesRequestToJoinTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_invites_set_invite_new_user_pref_to_no_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_set_invite_new_user_pref_to_no_details`` tag with value
        ``val``.

        :param DomainInvitesSetInviteNewUserPrefToNoDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_invites_set_invite_new_user_pref_to_yes_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_set_invite_new_user_pref_to_yes_details`` tag with
        value ``val``.

        :param DomainInvitesSetInviteNewUserPrefToYesDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_verification_add_domain_fail_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_verification_add_domain_fail_details`` tag with value ``val``.

        :param DomainVerificationAddDomainFailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_verification_add_domain_success_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_verification_add_domain_success_details`` tag with value
        ``val``.

        :param DomainVerificationAddDomainSuccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def domain_verification_remove_domain_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_verification_remove_domain_details`` tag with value ``val``.

        :param DomainVerificationRemoveDomainDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def enabled_domain_invites_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``enabled_domain_invites_details`` tag with value ``val``.

        :param EnabledDomainInvitesDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_encryption_key_cancel_key_deletion_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_cancel_key_deletion_details`` tag with value
        ``val``.

        :param TeamEncryptionKeyCancelKeyDeletionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_encryption_key_create_key_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_create_key_details`` tag with value ``val``.

        :param TeamEncryptionKeyCreateKeyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_encryption_key_delete_key_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_delete_key_details`` tag with value ``val``.

        :param TeamEncryptionKeyDeleteKeyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_encryption_key_disable_key_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_disable_key_details`` tag with value ``val``.

        :param TeamEncryptionKeyDisableKeyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_encryption_key_enable_key_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_enable_key_details`` tag with value ``val``.

        :param TeamEncryptionKeyEnableKeyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_encryption_key_rotate_key_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_rotate_key_details`` tag with value ``val``.

        :param TeamEncryptionKeyRotateKeyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_encryption_key_schedule_key_deletion_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_schedule_key_deletion_details`` tag with value
        ``val``.

        :param TeamEncryptionKeyScheduleKeyDeletionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def apply_naming_convention_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``apply_naming_convention_details`` tag with value ``val``.

        :param ApplyNamingConventionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def create_folder_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``create_folder_details``
        tag with value ``val``.

        :param CreateFolderDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_add_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_add_details`` tag
        with value ``val``.

        :param FileAddDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_add_from_automation_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_add_from_automation_details`` tag with value ``val``.

        :param FileAddFromAutomationDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_copy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_copy_details`` tag
        with value ``val``.

        :param FileCopyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_delete_details`` tag
        with value ``val``.

        :param FileDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_download_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_download_details``
        tag with value ``val``.

        :param FileDownloadDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_edit_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_edit_details`` tag
        with value ``val``.

        :param FileEditDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_get_copy_reference_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_get_copy_reference_details`` tag with value ``val``.

        :param FileGetCopyReferenceDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_locking_lock_status_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_locking_lock_status_changed_details`` tag with value ``val``.

        :param FileLockingLockStatusChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_move_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_move_details`` tag
        with value ``val``.

        :param FileMoveDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_permanently_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_permanently_delete_details`` tag with value ``val``.

        :param FilePermanentlyDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_preview_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_preview_details`` tag
        with value ``val``.

        :param FilePreviewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_rename_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_rename_details`` tag
        with value ``val``.

        :param FileRenameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_restore_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_restore_details`` tag
        with value ``val``.

        :param FileRestoreDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_revert_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_revert_details`` tag
        with value ``val``.

        :param FileRevertDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_rollback_changes_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_rollback_changes_details`` tag with value ``val``.

        :param FileRollbackChangesDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_save_copy_reference_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_save_copy_reference_details`` tag with value ``val``.

        :param FileSaveCopyReferenceDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def folder_overview_description_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_overview_description_changed_details`` tag with value ``val``.

        :param FolderOverviewDescriptionChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def folder_overview_item_pinned_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_overview_item_pinned_details`` tag with value ``val``.

        :param FolderOverviewItemPinnedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def folder_overview_item_unpinned_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_overview_item_unpinned_details`` tag with value ``val``.

        :param FolderOverviewItemUnpinnedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def object_label_added_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``object_label_added_details`` tag with value ``val``.

        :param ObjectLabelAddedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def object_label_removed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``object_label_removed_details`` tag with value ``val``.

        :param ObjectLabelRemovedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def object_label_updated_value_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``object_label_updated_value_details`` tag with value ``val``.

        :param ObjectLabelUpdatedValueDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def organize_folder_with_tidy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``organize_folder_with_tidy_details`` tag with value ``val``.

        :param OrganizeFolderWithTidyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def replay_file_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_file_delete_details`` tag with value ``val``.

        :param ReplayFileDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def rewind_folder_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``rewind_folder_details``
        tag with value ``val``.

        :param RewindFolderDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def undo_naming_convention_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``undo_naming_convention_details`` tag with value ``val``.

        :param UndoNamingConventionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def undo_organize_folder_with_tidy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``undo_organize_folder_with_tidy_details`` tag with value ``val``.

        :param UndoOrganizeFolderWithTidyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def user_tags_added_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``user_tags_added_details``
        tag with value ``val``.

        :param UserTagsAddedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def user_tags_removed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``user_tags_removed_details`` tag with value ``val``.

        :param UserTagsRemovedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def email_ingest_receive_file_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``email_ingest_receive_file_details`` tag with value ``val``.

        :param EmailIngestReceiveFileDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_request_change_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_request_change_details`` tag with value ``val``.

        :param FileRequestChangeDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_request_close_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_request_close_details`` tag with value ``val``.

        :param FileRequestCloseDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_request_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_request_create_details`` tag with value ``val``.

        :param FileRequestCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_request_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_request_delete_details`` tag with value ``val``.

        :param FileRequestDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_request_receive_file_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_request_receive_file_details`` tag with value ``val``.

        :param FileRequestReceiveFileDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_add_external_id_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_add_external_id_details`` tag with value ``val``.

        :param GroupAddExternalIdDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_add_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_add_member_details``
        tag with value ``val``.

        :param GroupAddMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_change_external_id_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_change_external_id_details`` tag with value ``val``.

        :param GroupChangeExternalIdDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_change_management_type_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_change_management_type_details`` tag with value ``val``.

        :param GroupChangeManagementTypeDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_change_member_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_change_member_role_details`` tag with value ``val``.

        :param GroupChangeMemberRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_create_details`` tag
        with value ``val``.

        :param GroupCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_delete_details`` tag
        with value ``val``.

        :param GroupDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_description_updated_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_description_updated_details`` tag with value ``val``.

        :param GroupDescriptionUpdatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_join_policy_updated_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_join_policy_updated_details`` tag with value ``val``.

        :param GroupJoinPolicyUpdatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_moved_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_moved_details`` tag
        with value ``val``.

        :param GroupMovedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_remove_external_id_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_remove_external_id_details`` tag with value ``val``.

        :param GroupRemoveExternalIdDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_remove_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_remove_member_details`` tag with value ``val``.

        :param GroupRemoveMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_rename_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_rename_details`` tag
        with value ``val``.

        :param GroupRenameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def account_lock_or_unlocked_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_lock_or_unlocked_details`` tag with value ``val``.

        :param AccountLockOrUnlockedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def emm_error_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``emm_error_details`` tag
        with value ``val``.

        :param EmmErrorDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def guest_admin_signed_in_via_trusted_teams_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``guest_admin_signed_in_via_trusted_teams_details`` tag with value
        ``val``.

        :param GuestAdminSignedInViaTrustedTeamsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def guest_admin_signed_out_via_trusted_teams_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``guest_admin_signed_out_via_trusted_teams_details`` tag with value
        ``val``.

        :param GuestAdminSignedOutViaTrustedTeamsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def login_fail_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``login_fail_details`` tag
        with value ``val``.

        :param LoginFailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def login_success_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``login_success_details``
        tag with value ``val``.

        :param LoginSuccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def logout_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``logout_details`` tag with
        value ``val``.

        :param LogoutDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def reseller_support_session_end_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``reseller_support_session_end_details`` tag with value ``val``.

        :param ResellerSupportSessionEndDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def reseller_support_session_start_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``reseller_support_session_start_details`` tag with value ``val``.

        :param ResellerSupportSessionStartDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sign_in_as_session_end_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sign_in_as_session_end_details`` tag with value ``val``.

        :param SignInAsSessionEndDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sign_in_as_session_start_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sign_in_as_session_start_details`` tag with value ``val``.

        :param SignInAsSessionStartDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_error_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_error_details`` tag
        with value ``val``.

        :param SsoErrorDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def backup_admin_invitation_sent_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``backup_admin_invitation_sent_details`` tag with value ``val``.

        :param BackupAdminInvitationSentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def backup_invitation_opened_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``backup_invitation_opened_details`` tag with value ``val``.

        :param BackupInvitationOpenedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def create_team_invite_link_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``create_team_invite_link_details`` tag with value ``val``.

        :param CreateTeamInviteLinkDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def delete_team_invite_link_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``delete_team_invite_link_details`` tag with value ``val``.

        :param DeleteTeamInviteLinkDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_add_external_id_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_add_external_id_details`` tag with value ``val``.

        :param MemberAddExternalIdDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_add_name_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_add_name_details``
        tag with value ``val``.

        :param MemberAddNameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_change_admin_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_admin_role_details`` tag with value ``val``.

        :param MemberChangeAdminRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_change_email_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_email_details`` tag with value ``val``.

        :param MemberChangeEmailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_change_external_id_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_external_id_details`` tag with value ``val``.

        :param MemberChangeExternalIdDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_change_membership_type_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_membership_type_details`` tag with value ``val``.

        :param MemberChangeMembershipTypeDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_change_name_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_name_details`` tag with value ``val``.

        :param MemberChangeNameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_change_reseller_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_reseller_role_details`` tag with value ``val``.

        :param MemberChangeResellerRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_change_status_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_status_details`` tag with value ``val``.

        :param MemberChangeStatusDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_delete_manual_contacts_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_delete_manual_contacts_details`` tag with value ``val``.

        :param MemberDeleteManualContactsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_delete_profile_photo_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_delete_profile_photo_details`` tag with value ``val``.

        :param MemberDeleteProfilePhotoDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_permanently_delete_account_contents_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_permanently_delete_account_contents_details`` tag with value
        ``val``.

        :param MemberPermanentlyDeleteAccountContentsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_remove_external_id_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_remove_external_id_details`` tag with value ``val``.

        :param MemberRemoveExternalIdDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_set_profile_photo_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_set_profile_photo_details`` tag with value ``val``.

        :param MemberSetProfilePhotoDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_add_custom_quota_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_add_custom_quota_details`` tag with value ``val``.

        :param MemberSpaceLimitsAddCustomQuotaDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_change_custom_quota_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_custom_quota_details`` tag with value
        ``val``.

        :param MemberSpaceLimitsChangeCustomQuotaDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_change_status_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_status_details`` tag with value ``val``.

        :param MemberSpaceLimitsChangeStatusDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_remove_custom_quota_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_remove_custom_quota_details`` tag with value
        ``val``.

        :param MemberSpaceLimitsRemoveCustomQuotaDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_suggest_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_suggest_details``
        tag with value ``val``.

        :param MemberSuggestDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_transfer_account_contents_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_transfer_account_contents_details`` tag with value ``val``.

        :param MemberTransferAccountContentsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def pending_secondary_email_added_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``pending_secondary_email_added_details`` tag with value ``val``.

        :param PendingSecondaryEmailAddedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def secondary_email_deleted_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``secondary_email_deleted_details`` tag with value ``val``.

        :param SecondaryEmailDeletedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def secondary_email_verified_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``secondary_email_verified_details`` tag with value ``val``.

        :param SecondaryEmailVerifiedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def secondary_mails_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``secondary_mails_policy_changed_details`` tag with value ``val``.

        :param SecondaryMailsPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_add_page_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_add_page_details``
        tag with value ``val``.

        :param BinderAddPageDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_add_section_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``binder_add_section_details`` tag with value ``val``.

        :param BinderAddSectionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_remove_page_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``binder_remove_page_details`` tag with value ``val``.

        :param BinderRemovePageDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_remove_section_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``binder_remove_section_details`` tag with value ``val``.

        :param BinderRemoveSectionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_rename_page_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``binder_rename_page_details`` tag with value ``val``.

        :param BinderRenamePageDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_rename_section_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``binder_rename_section_details`` tag with value ``val``.

        :param BinderRenameSectionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_reorder_page_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``binder_reorder_page_details`` tag with value ``val``.

        :param BinderReorderPageDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def binder_reorder_section_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``binder_reorder_section_details`` tag with value ``val``.

        :param BinderReorderSectionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_add_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_add_member_details`` tag with value ``val``.

        :param PaperContentAddMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_add_to_folder_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_add_to_folder_details`` tag with value ``val``.

        :param PaperContentAddToFolderDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_archive_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_archive_details`` tag with value ``val``.

        :param PaperContentArchiveDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_create_details`` tag with value ``val``.

        :param PaperContentCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_permanently_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_permanently_delete_details`` tag with value ``val``.

        :param PaperContentPermanentlyDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_remove_from_folder_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_remove_from_folder_details`` tag with value ``val``.

        :param PaperContentRemoveFromFolderDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_remove_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_remove_member_details`` tag with value ``val``.

        :param PaperContentRemoveMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_rename_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_rename_details`` tag with value ``val``.

        :param PaperContentRenameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_content_restore_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_restore_details`` tag with value ``val``.

        :param PaperContentRestoreDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_add_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_add_comment_details`` tag with value ``val``.

        :param PaperDocAddCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_change_member_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_change_member_role_details`` tag with value ``val``.

        :param PaperDocChangeMemberRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_change_sharing_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_change_sharing_policy_details`` tag with value ``val``.

        :param PaperDocChangeSharingPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_change_subscription_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_change_subscription_details`` tag with value ``val``.

        :param PaperDocChangeSubscriptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_deleted_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_deleted_details`` tag with value ``val``.

        :param PaperDocDeletedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_delete_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_delete_comment_details`` tag with value ``val``.

        :param PaperDocDeleteCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_download_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_download_details`` tag with value ``val``.

        :param PaperDocDownloadDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_edit_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_edit_details``
        tag with value ``val``.

        :param PaperDocEditDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_edit_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_edit_comment_details`` tag with value ``val``.

        :param PaperDocEditCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_followed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_followed_details`` tag with value ``val``.

        :param PaperDocFollowedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_mention_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_mention_details`` tag with value ``val``.

        :param PaperDocMentionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_ownership_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_ownership_changed_details`` tag with value ``val``.

        :param PaperDocOwnershipChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_request_access_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_request_access_details`` tag with value ``val``.

        :param PaperDocRequestAccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_resolve_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_resolve_comment_details`` tag with value ``val``.

        :param PaperDocResolveCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_revert_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_revert_details``
        tag with value ``val``.

        :param PaperDocRevertDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_slack_share_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_slack_share_details`` tag with value ``val``.

        :param PaperDocSlackShareDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_team_invite_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_team_invite_details`` tag with value ``val``.

        :param PaperDocTeamInviteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_trashed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_trashed_details`` tag with value ``val``.

        :param PaperDocTrashedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_unresolve_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_unresolve_comment_details`` tag with value ``val``.

        :param PaperDocUnresolveCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_untrashed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_untrashed_details`` tag with value ``val``.

        :param PaperDocUntrashedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_doc_view_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_view_details``
        tag with value ``val``.

        :param PaperDocViewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_external_view_allow_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_external_view_allow_details`` tag with value ``val``.

        :param PaperExternalViewAllowDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_external_view_default_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_external_view_default_team_details`` tag with value ``val``.

        :param PaperExternalViewDefaultTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_external_view_forbid_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_external_view_forbid_details`` tag with value ``val``.

        :param PaperExternalViewForbidDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_folder_change_subscription_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_folder_change_subscription_details`` tag with value ``val``.

        :param PaperFolderChangeSubscriptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_folder_deleted_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_folder_deleted_details`` tag with value ``val``.

        :param PaperFolderDeletedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_folder_followed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_folder_followed_details`` tag with value ``val``.

        :param PaperFolderFollowedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_folder_team_invite_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_folder_team_invite_details`` tag with value ``val``.

        :param PaperFolderTeamInviteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_published_link_change_permission_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_change_permission_details`` tag with value
        ``val``.

        :param PaperPublishedLinkChangePermissionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_published_link_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_create_details`` tag with value ``val``.

        :param PaperPublishedLinkCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_published_link_disabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_disabled_details`` tag with value ``val``.

        :param PaperPublishedLinkDisabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_published_link_view_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_view_details`` tag with value ``val``.

        :param PaperPublishedLinkViewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def password_change_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``password_change_details``
        tag with value ``val``.

        :param PasswordChangeDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def password_reset_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``password_reset_details``
        tag with value ``val``.

        :param PasswordResetDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def password_reset_all_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``password_reset_all_details`` tag with value ``val``.

        :param PasswordResetAllDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def classification_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``classification_create_report_details`` tag with value ``val``.

        :param ClassificationCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def classification_create_report_fail_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``classification_create_report_fail_details`` tag with value ``val``.

        :param ClassificationCreateReportFailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def emm_create_exceptions_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``emm_create_exceptions_report_details`` tag with value ``val``.

        :param EmmCreateExceptionsReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def emm_create_usage_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``emm_create_usage_report_details`` tag with value ``val``.

        :param EmmCreateUsageReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def export_members_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``export_members_report_details`` tag with value ``val``.

        :param ExportMembersReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def export_members_report_fail_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``export_members_report_fail_details`` tag with value ``val``.

        :param ExportMembersReportFailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def external_sharing_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_sharing_create_report_details`` tag with value ``val``.

        :param ExternalSharingCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def external_sharing_report_failed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_sharing_report_failed_details`` tag with value ``val``.

        :param ExternalSharingReportFailedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def no_expiration_link_gen_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_expiration_link_gen_create_report_details`` tag with value ``val``.

        :param NoExpirationLinkGenCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def no_expiration_link_gen_report_failed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_expiration_link_gen_report_failed_details`` tag with value ``val``.

        :param NoExpirationLinkGenReportFailedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def no_password_link_gen_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_gen_create_report_details`` tag with value ``val``.

        :param NoPasswordLinkGenCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def no_password_link_gen_report_failed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_gen_report_failed_details`` tag with value ``val``.

        :param NoPasswordLinkGenReportFailedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def no_password_link_view_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_view_create_report_details`` tag with value ``val``.

        :param NoPasswordLinkViewCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def no_password_link_view_report_failed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_view_report_failed_details`` tag with value ``val``.

        :param NoPasswordLinkViewReportFailedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def outdated_link_view_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``outdated_link_view_create_report_details`` tag with value ``val``.

        :param OutdatedLinkViewCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def outdated_link_view_report_failed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``outdated_link_view_report_failed_details`` tag with value ``val``.

        :param OutdatedLinkViewReportFailedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_admin_export_start_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_admin_export_start_details`` tag with value ``val``.

        :param PaperAdminExportStartDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def ransomware_alert_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_alert_create_report_details`` tag with value ``val``.

        :param RansomwareAlertCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def ransomware_alert_create_report_failed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_alert_create_report_failed_details`` tag with value
        ``val``.

        :param RansomwareAlertCreateReportFailedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def smart_sync_create_admin_privilege_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``smart_sync_create_admin_privilege_report_details`` tag with value
        ``val``.

        :param SmartSyncCreateAdminPrivilegeReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_activity_create_report_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_activity_create_report_details`` tag with value ``val``.

        :param TeamActivityCreateReportDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_activity_create_report_fail_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_activity_create_report_fail_details`` tag with value ``val``.

        :param TeamActivityCreateReportFailDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def collection_share_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``collection_share_details``
        tag with value ``val``.

        :param CollectionShareDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_transfers_file_add_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_file_add_details`` tag with value ``val``.

        :param FileTransfersFileAddDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_transfers_transfer_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_delete_details`` tag with value ``val``.

        :param FileTransfersTransferDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_transfers_transfer_download_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_download_details`` tag with value ``val``.

        :param FileTransfersTransferDownloadDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_transfers_transfer_send_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_send_details`` tag with value ``val``.

        :param FileTransfersTransferSendDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_transfers_transfer_view_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_view_details`` tag with value ``val``.

        :param FileTransfersTransferViewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def note_acl_invite_only_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``note_acl_invite_only_details`` tag with value ``val``.

        :param NoteAclInviteOnlyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def note_acl_link_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``note_acl_link_details``
        tag with value ``val``.

        :param NoteAclLinkDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def note_acl_team_link_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``note_acl_team_link_details`` tag with value ``val``.

        :param NoteAclTeamLinkDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def note_shared_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``note_shared_details`` tag
        with value ``val``.

        :param NoteSharedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def note_share_receive_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``note_share_receive_details`` tag with value ``val``.

        :param NoteShareReceiveDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def open_note_shared_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``open_note_shared_details``
        tag with value ``val``.

        :param OpenNoteSharedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def replay_file_shared_link_created_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_file_shared_link_created_details`` tag with value ``val``.

        :param ReplayFileSharedLinkCreatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def replay_file_shared_link_modified_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_file_shared_link_modified_details`` tag with value ``val``.

        :param ReplayFileSharedLinkModifiedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def replay_project_team_add_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_project_team_add_details`` tag with value ``val``.

        :param ReplayProjectTeamAddDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def replay_project_team_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_project_team_delete_details`` tag with value ``val``.

        :param ReplayProjectTeamDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_add_group_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_add_group_details`` tag
        with value ``val``.

        :param SfAddGroupDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_allow_non_members_to_view_shared_links_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_allow_non_members_to_view_shared_links_details`` tag with value
        ``val``.

        :param SfAllowNonMembersToViewSharedLinksDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_external_invite_warn_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_external_invite_warn_details`` tag with value ``val``.

        :param SfExternalInviteWarnDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_fb_invite_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_fb_invite_details`` tag
        with value ``val``.

        :param SfFbInviteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_fb_invite_change_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_fb_invite_change_role_details`` tag with value ``val``.

        :param SfFbInviteChangeRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_fb_uninvite_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_fb_uninvite_details``
        tag with value ``val``.

        :param SfFbUninviteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_invite_group_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_invite_group_details``
        tag with value ``val``.

        :param SfInviteGroupDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_team_grant_access_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_team_grant_access_details`` tag with value ``val``.

        :param SfTeamGrantAccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_team_invite_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_team_invite_details``
        tag with value ``val``.

        :param SfTeamInviteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_team_invite_change_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_team_invite_change_role_details`` tag with value ``val``.

        :param SfTeamInviteChangeRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_team_join_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_team_join_details`` tag
        with value ``val``.

        :param SfTeamJoinDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_team_join_from_oob_link_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_team_join_from_oob_link_details`` tag with value ``val``.

        :param SfTeamJoinFromOobLinkDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sf_team_uninvite_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_team_uninvite_details``
        tag with value ``val``.

        :param SfTeamUninviteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_add_invitees_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_invitees_details`` tag with value ``val``.

        :param SharedContentAddInviteesDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_add_link_expiry_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_link_expiry_details`` tag with value ``val``.

        :param SharedContentAddLinkExpiryDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_add_link_password_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_link_password_details`` tag with value ``val``.

        :param SharedContentAddLinkPasswordDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_add_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_member_details`` tag with value ``val``.

        :param SharedContentAddMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_change_downloads_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_downloads_policy_details`` tag with value
        ``val``.

        :param SharedContentChangeDownloadsPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_change_invitee_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_invitee_role_details`` tag with value ``val``.

        :param SharedContentChangeInviteeRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_change_link_audience_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_link_audience_details`` tag with value ``val``.

        :param SharedContentChangeLinkAudienceDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_change_link_expiry_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_link_expiry_details`` tag with value ``val``.

        :param SharedContentChangeLinkExpiryDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_change_link_password_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_link_password_details`` tag with value ``val``.

        :param SharedContentChangeLinkPasswordDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_change_member_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_member_role_details`` tag with value ``val``.

        :param SharedContentChangeMemberRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_change_viewer_info_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_viewer_info_policy_details`` tag with value
        ``val``.

        :param SharedContentChangeViewerInfoPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_claim_invitation_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_claim_invitation_details`` tag with value ``val``.

        :param SharedContentClaimInvitationDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_copy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_copy_details`` tag with value ``val``.

        :param SharedContentCopyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_download_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_download_details`` tag with value ``val``.

        :param SharedContentDownloadDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_relinquish_membership_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_relinquish_membership_details`` tag with value ``val``.

        :param SharedContentRelinquishMembershipDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_remove_invitees_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_invitees_details`` tag with value ``val``.

        :param SharedContentRemoveInviteesDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_remove_link_expiry_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_link_expiry_details`` tag with value ``val``.

        :param SharedContentRemoveLinkExpiryDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_remove_link_password_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_link_password_details`` tag with value ``val``.

        :param SharedContentRemoveLinkPasswordDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_remove_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_member_details`` tag with value ``val``.

        :param SharedContentRemoveMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_request_access_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_request_access_details`` tag with value ``val``.

        :param SharedContentRequestAccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_restore_invitees_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_restore_invitees_details`` tag with value ``val``.

        :param SharedContentRestoreInviteesDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_restore_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_restore_member_details`` tag with value ``val``.

        :param SharedContentRestoreMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_unshare_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_unshare_details`` tag with value ``val``.

        :param SharedContentUnshareDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_content_view_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_view_details`` tag with value ``val``.

        :param SharedContentViewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_change_link_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_link_policy_details`` tag with value ``val``.

        :param SharedFolderChangeLinkPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_change_members_inheritance_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_members_inheritance_policy_details`` tag with
        value ``val``.

        :param SharedFolderChangeMembersInheritancePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_change_members_management_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_members_management_policy_details`` tag with
        value ``val``.

        :param SharedFolderChangeMembersManagementPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_change_members_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_members_policy_details`` tag with value ``val``.

        :param SharedFolderChangeMembersPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_create_details`` tag with value ``val``.

        :param SharedFolderCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_decline_invitation_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_decline_invitation_details`` tag with value ``val``.

        :param SharedFolderDeclineInvitationDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_mount_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_mount_details`` tag with value ``val``.

        :param SharedFolderMountDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_nest_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_nest_details`` tag with value ``val``.

        :param SharedFolderNestDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_transfer_ownership_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_transfer_ownership_details`` tag with value ``val``.

        :param SharedFolderTransferOwnershipDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_folder_unmount_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_unmount_details`` tag with value ``val``.

        :param SharedFolderUnmountDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_add_expiry_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_add_expiry_details`` tag with value ``val``.

        :param SharedLinkAddExpiryDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_change_expiry_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_change_expiry_details`` tag with value ``val``.

        :param SharedLinkChangeExpiryDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_change_visibility_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_change_visibility_details`` tag with value ``val``.

        :param SharedLinkChangeVisibilityDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_copy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_copy_details``
        tag with value ``val``.

        :param SharedLinkCopyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_create_details`` tag with value ``val``.

        :param SharedLinkCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_disable_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_disable_details`` tag with value ``val``.

        :param SharedLinkDisableDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_download_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_download_details`` tag with value ``val``.

        :param SharedLinkDownloadDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_remove_expiry_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_remove_expiry_details`` tag with value ``val``.

        :param SharedLinkRemoveExpiryDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_add_expiration_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_add_expiration_details`` tag with value ``val``.

        :param SharedLinkSettingsAddExpirationDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_add_password_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_add_password_details`` tag with value ``val``.

        :param SharedLinkSettingsAddPasswordDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_allow_download_disabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_allow_download_disabled_details`` tag with value
        ``val``.

        :param SharedLinkSettingsAllowDownloadDisabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_allow_download_enabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_allow_download_enabled_details`` tag with value
        ``val``.

        :param SharedLinkSettingsAllowDownloadEnabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_change_audience_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_change_audience_details`` tag with value ``val``.

        :param SharedLinkSettingsChangeAudienceDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_change_expiration_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_change_expiration_details`` tag with value
        ``val``.

        :param SharedLinkSettingsChangeExpirationDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_change_password_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_change_password_details`` tag with value ``val``.

        :param SharedLinkSettingsChangePasswordDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_remove_expiration_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_remove_expiration_details`` tag with value
        ``val``.

        :param SharedLinkSettingsRemoveExpirationDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_settings_remove_password_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_remove_password_details`` tag with value ``val``.

        :param SharedLinkSettingsRemovePasswordDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_share_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_share_details`` tag with value ``val``.

        :param SharedLinkShareDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_link_view_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_view_details``
        tag with value ``val``.

        :param SharedLinkViewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shared_note_opened_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_note_opened_details`` tag with value ``val``.

        :param SharedNoteOpenedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shmodel_disable_downloads_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shmodel_disable_downloads_details`` tag with value ``val``.

        :param ShmodelDisableDownloadsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shmodel_enable_downloads_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shmodel_enable_downloads_details`` tag with value ``val``.

        :param ShmodelEnableDownloadsDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def shmodel_group_share_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shmodel_group_share_details`` tag with value ``val``.

        :param ShmodelGroupShareDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_access_granted_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_access_granted_details`` tag with value ``val``.

        :param ShowcaseAccessGrantedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_add_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_add_member_details`` tag with value ``val``.

        :param ShowcaseAddMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_archived_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_archived_details`` tag with value ``val``.

        :param ShowcaseArchivedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_created_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_created_details``
        tag with value ``val``.

        :param ShowcaseCreatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_delete_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_delete_comment_details`` tag with value ``val``.

        :param ShowcaseDeleteCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_edited_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_edited_details``
        tag with value ``val``.

        :param ShowcaseEditedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_edit_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_edit_comment_details`` tag with value ``val``.

        :param ShowcaseEditCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_file_added_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_file_added_details`` tag with value ``val``.

        :param ShowcaseFileAddedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_file_download_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_file_download_details`` tag with value ``val``.

        :param ShowcaseFileDownloadDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_file_removed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_file_removed_details`` tag with value ``val``.

        :param ShowcaseFileRemovedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_file_view_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_file_view_details`` tag with value ``val``.

        :param ShowcaseFileViewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_permanently_deleted_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_permanently_deleted_details`` tag with value ``val``.

        :param ShowcasePermanentlyDeletedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_post_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_post_comment_details`` tag with value ``val``.

        :param ShowcasePostCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_remove_member_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_remove_member_details`` tag with value ``val``.

        :param ShowcaseRemoveMemberDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_renamed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_renamed_details``
        tag with value ``val``.

        :param ShowcaseRenamedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_request_access_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_request_access_details`` tag with value ``val``.

        :param ShowcaseRequestAccessDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_resolve_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_resolve_comment_details`` tag with value ``val``.

        :param ShowcaseResolveCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_restored_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_restored_details`` tag with value ``val``.

        :param ShowcaseRestoredDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_trashed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_trashed_details``
        tag with value ``val``.

        :param ShowcaseTrashedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_trashed_deprecated_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_trashed_deprecated_details`` tag with value ``val``.

        :param ShowcaseTrashedDeprecatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_unresolve_comment_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_unresolve_comment_details`` tag with value ``val``.

        :param ShowcaseUnresolveCommentDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_untrashed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_untrashed_details`` tag with value ``val``.

        :param ShowcaseUntrashedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_untrashed_deprecated_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_untrashed_deprecated_details`` tag with value ``val``.

        :param ShowcaseUntrashedDeprecatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_view_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_view_details``
        tag with value ``val``.

        :param ShowcaseViewDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_add_cert_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_add_cert_details`` tag
        with value ``val``.

        :param SsoAddCertDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_add_login_url_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_add_login_url_details`` tag with value ``val``.

        :param SsoAddLoginUrlDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_add_logout_url_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_add_logout_url_details`` tag with value ``val``.

        :param SsoAddLogoutUrlDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_change_cert_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_change_cert_details``
        tag with value ``val``.

        :param SsoChangeCertDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_change_login_url_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_change_login_url_details`` tag with value ``val``.

        :param SsoChangeLoginUrlDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_change_logout_url_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_change_logout_url_details`` tag with value ``val``.

        :param SsoChangeLogoutUrlDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_change_saml_identity_mode_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_change_saml_identity_mode_details`` tag with value ``val``.

        :param SsoChangeSamlIdentityModeDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_remove_cert_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_remove_cert_details``
        tag with value ``val``.

        :param SsoRemoveCertDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_remove_login_url_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_remove_login_url_details`` tag with value ``val``.

        :param SsoRemoveLoginUrlDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_remove_logout_url_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_remove_logout_url_details`` tag with value ``val``.

        :param SsoRemoveLogoutUrlDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_folder_change_status_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_folder_change_status_details`` tag with value ``val``.

        :param TeamFolderChangeStatusDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_folder_create_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_folder_create_details`` tag with value ``val``.

        :param TeamFolderCreateDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_folder_downgrade_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_folder_downgrade_details`` tag with value ``val``.

        :param TeamFolderDowngradeDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_folder_permanently_delete_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_folder_permanently_delete_details`` tag with value ``val``.

        :param TeamFolderPermanentlyDeleteDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_folder_rename_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_folder_rename_details`` tag with value ``val``.

        :param TeamFolderRenameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_selective_sync_settings_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_selective_sync_settings_changed_details`` tag with value ``val``.

        :param TeamSelectiveSyncSettingsChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def account_capture_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_change_policy_details`` tag with value ``val``.

        :param AccountCaptureChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def admin_email_reminders_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_email_reminders_changed_details`` tag with value ``val``.

        :param AdminEmailRemindersChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def allow_download_disabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``allow_download_disabled_details`` tag with value ``val``.

        :param AllowDownloadDisabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def allow_download_enabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``allow_download_enabled_details`` tag with value ``val``.

        :param AllowDownloadEnabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def app_permissions_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``app_permissions_changed_details`` tag with value ``val``.

        :param AppPermissionsChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def camera_uploads_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``camera_uploads_policy_changed_details`` tag with value ``val``.

        :param CameraUploadsPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def capture_transcript_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``capture_transcript_policy_changed_details`` tag with value ``val``.

        :param CaptureTranscriptPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def classification_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``classification_change_policy_details`` tag with value ``val``.

        :param ClassificationChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def computer_backup_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``computer_backup_policy_changed_details`` tag with value ``val``.

        :param ComputerBackupPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def content_administration_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``content_administration_policy_changed_details`` tag with value
        ``val``.

        :param ContentAdministrationPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def data_placement_restriction_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_placement_restriction_change_policy_details`` tag with value
        ``val``.

        :param DataPlacementRestrictionChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def data_placement_restriction_satisfy_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_placement_restriction_satisfy_policy_details`` tag with value
        ``val``.

        :param DataPlacementRestrictionSatisfyPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_approvals_add_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_add_exception_details`` tag with value ``val``.

        :param DeviceApprovalsAddExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_approvals_change_desktop_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_desktop_policy_details`` tag with value
        ``val``.

        :param DeviceApprovalsChangeDesktopPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_approvals_change_mobile_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_mobile_policy_details`` tag with value
        ``val``.

        :param DeviceApprovalsChangeMobilePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_approvals_change_overage_action_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_overage_action_details`` tag with value
        ``val``.

        :param DeviceApprovalsChangeOverageActionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_approvals_change_unlink_action_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_unlink_action_details`` tag with value
        ``val``.

        :param DeviceApprovalsChangeUnlinkActionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def device_approvals_remove_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_remove_exception_details`` tag with value ``val``.

        :param DeviceApprovalsRemoveExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def directory_restrictions_add_members_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``directory_restrictions_add_members_details`` tag with value ``val``.

        :param DirectoryRestrictionsAddMembersDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def directory_restrictions_remove_members_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``directory_restrictions_remove_members_details`` tag with value
        ``val``.

        :param DirectoryRestrictionsRemoveMembersDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def dropbox_passwords_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``dropbox_passwords_policy_changed_details`` tag with value ``val``.

        :param DropboxPasswordsPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def email_ingest_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``email_ingest_policy_changed_details`` tag with value ``val``.

        :param EmailIngestPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def emm_add_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``emm_add_exception_details`` tag with value ``val``.

        :param EmmAddExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def emm_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``emm_change_policy_details`` tag with value ``val``.

        :param EmmChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def emm_remove_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``emm_remove_exception_details`` tag with value ``val``.

        :param EmmRemoveExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def extended_version_history_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``extended_version_history_change_policy_details`` tag with value
        ``val``.

        :param ExtendedVersionHistoryChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def external_drive_backup_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_drive_backup_policy_changed_details`` tag with value ``val``.

        :param ExternalDriveBackupPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_comments_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_comments_change_policy_details`` tag with value ``val``.

        :param FileCommentsChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_locking_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_locking_policy_changed_details`` tag with value ``val``.

        :param FileLockingPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_provider_migration_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_provider_migration_policy_changed_details`` tag with value
        ``val``.

        :param FileProviderMigrationPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_requests_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_requests_change_policy_details`` tag with value ``val``.

        :param FileRequestsChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_requests_emails_enabled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_requests_emails_enabled_details`` tag with value ``val``.

        :param FileRequestsEmailsEnabledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_requests_emails_restricted_to_team_only_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_requests_emails_restricted_to_team_only_details`` tag with value
        ``val``.

        :param FileRequestsEmailsRestrictedToTeamOnlyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def file_transfers_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_policy_changed_details`` tag with value ``val``.

        :param FileTransfersPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def folder_link_restriction_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_link_restriction_policy_changed_details`` tag with value
        ``val``.

        :param FolderLinkRestrictionPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def google_sso_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``google_sso_change_policy_details`` tag with value ``val``.

        :param GoogleSsoChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def group_user_management_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_user_management_change_policy_details`` tag with value ``val``.

        :param GroupUserManagementChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def integration_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``integration_policy_changed_details`` tag with value ``val``.

        :param IntegrationPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def invite_acceptance_email_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``invite_acceptance_email_policy_changed_details`` tag with value
        ``val``.

        :param InviteAcceptanceEmailPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_requests_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_requests_change_policy_details`` tag with value ``val``.

        :param MemberRequestsChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_send_invite_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_send_invite_policy_changed_details`` tag with value ``val``.

        :param MemberSendInvitePolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_add_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_add_exception_details`` tag with value ``val``.

        :param MemberSpaceLimitsAddExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_change_caps_type_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_caps_type_policy_details`` tag with value
        ``val``.

        :param MemberSpaceLimitsChangeCapsTypePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_policy_details`` tag with value ``val``.

        :param MemberSpaceLimitsChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_space_limits_remove_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_remove_exception_details`` tag with value ``val``.

        :param MemberSpaceLimitsRemoveExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def member_suggestions_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_suggestions_change_policy_details`` tag with value ``val``.

        :param MemberSuggestionsChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def microsoft_office_addin_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``microsoft_office_addin_change_policy_details`` tag with value ``val``.

        :param MicrosoftOfficeAddinChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def network_control_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``network_control_change_policy_details`` tag with value ``val``.

        :param NetworkControlChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_change_deployment_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_change_deployment_policy_details`` tag with value ``val``.

        :param PaperChangeDeploymentPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_change_member_link_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_change_member_link_policy_details`` tag with value ``val``.

        :param PaperChangeMemberLinkPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_change_member_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_change_member_policy_details`` tag with value ``val``.

        :param PaperChangeMemberPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_change_policy_details`` tag with value ``val``.

        :param PaperChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_default_folder_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_default_folder_policy_changed_details`` tag with value ``val``.

        :param PaperDefaultFolderPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_desktop_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_desktop_policy_changed_details`` tag with value ``val``.

        :param PaperDesktopPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_enabled_users_group_addition_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_enabled_users_group_addition_details`` tag with value ``val``.

        :param PaperEnabledUsersGroupAdditionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def paper_enabled_users_group_removal_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_enabled_users_group_removal_details`` tag with value ``val``.

        :param PaperEnabledUsersGroupRemovalDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def password_strength_requirements_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``password_strength_requirements_change_policy_details`` tag with value
        ``val``.

        :param PasswordStrengthRequirementsChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def permanent_delete_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``permanent_delete_change_policy_details`` tag with value ``val``.

        :param PermanentDeleteChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def reseller_support_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``reseller_support_change_policy_details`` tag with value ``val``.

        :param ResellerSupportChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def rewind_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``rewind_policy_changed_details`` tag with value ``val``.

        :param RewindPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def send_for_signature_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``send_for_signature_policy_changed_details`` tag with value ``val``.

        :param SendForSignaturePolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sharing_change_folder_join_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_folder_join_policy_details`` tag with value ``val``.

        :param SharingChangeFolderJoinPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sharing_change_link_allow_change_expiration_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_allow_change_expiration_policy_details`` tag with
        value ``val``.

        :param SharingChangeLinkAllowChangeExpirationPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sharing_change_link_default_expiration_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_default_expiration_policy_details`` tag with value
        ``val``.

        :param SharingChangeLinkDefaultExpirationPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sharing_change_link_enforce_password_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_enforce_password_policy_details`` tag with value
        ``val``.

        :param SharingChangeLinkEnforcePasswordPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sharing_change_link_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_policy_details`` tag with value ``val``.

        :param SharingChangeLinkPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sharing_change_member_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_member_policy_details`` tag with value ``val``.

        :param SharingChangeMemberPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_change_download_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_change_download_policy_details`` tag with value ``val``.

        :param ShowcaseChangeDownloadPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_change_enabled_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_change_enabled_policy_details`` tag with value ``val``.

        :param ShowcaseChangeEnabledPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def showcase_change_external_sharing_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_change_external_sharing_policy_details`` tag with value
        ``val``.

        :param ShowcaseChangeExternalSharingPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def smarter_smart_sync_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``smarter_smart_sync_policy_changed_details`` tag with value ``val``.

        :param SmarterSmartSyncPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def smart_sync_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``smart_sync_change_policy_details`` tag with value ``val``.

        :param SmartSyncChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def smart_sync_not_opt_out_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``smart_sync_not_opt_out_details`` tag with value ``val``.

        :param SmartSyncNotOptOutDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def smart_sync_opt_out_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``smart_sync_opt_out_details`` tag with value ``val``.

        :param SmartSyncOptOutDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def sso_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_change_policy_details`` tag with value ``val``.

        :param SsoChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_branding_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_branding_policy_changed_details`` tag with value ``val``.

        :param TeamBrandingPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_extensions_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_extensions_policy_changed_details`` tag with value ``val``.

        :param TeamExtensionsPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_selective_sync_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_selective_sync_policy_changed_details`` tag with value ``val``.

        :param TeamSelectiveSyncPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_sharing_whitelist_subjects_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_sharing_whitelist_subjects_changed_details`` tag with value
        ``val``.

        :param TeamSharingWhitelistSubjectsChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_add_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_add_exception_details`` tag with value ``val``.

        :param TfaAddExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_change_policy_details`` tag with value ``val``.

        :param TfaChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_remove_exception_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_remove_exception_details`` tag with value ``val``.

        :param TfaRemoveExceptionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def two_account_change_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``two_account_change_policy_details`` tag with value ``val``.

        :param TwoAccountChangePolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def viewer_info_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``viewer_info_policy_changed_details`` tag with value ``val``.

        :param ViewerInfoPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def watermarking_policy_changed_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``watermarking_policy_changed_details`` tag with value ``val``.

        :param WatermarkingPolicyChangedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def web_sessions_change_active_session_limit_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``web_sessions_change_active_session_limit_details`` tag with value
        ``val``.

        :param WebSessionsChangeActiveSessionLimitDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def web_sessions_change_fixed_length_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``web_sessions_change_fixed_length_policy_details`` tag with value
        ``val``.

        :param WebSessionsChangeFixedLengthPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def web_sessions_change_idle_length_policy_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``web_sessions_change_idle_length_policy_details`` tag with value
        ``val``.

        :param WebSessionsChangeIdleLengthPolicyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def data_residency_migration_request_successful_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_residency_migration_request_successful_details`` tag with value
        ``val``.

        :param DataResidencyMigrationRequestSuccessfulDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def data_residency_migration_request_unsuccessful_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_residency_migration_request_unsuccessful_details`` tag with value
        ``val``.

        :param DataResidencyMigrationRequestUnsuccessfulDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_from_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_merge_from_details``
        tag with value ``val``.

        :param TeamMergeFromDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_to_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_merge_to_details``
        tag with value ``val``.

        :param TeamMergeToDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_add_background_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_add_background_details`` tag with value ``val``.

        :param TeamProfileAddBackgroundDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_add_logo_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_add_logo_details`` tag with value ``val``.

        :param TeamProfileAddLogoDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_change_background_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_change_background_details`` tag with value ``val``.

        :param TeamProfileChangeBackgroundDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_change_default_language_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_change_default_language_details`` tag with value ``val``.

        :param TeamProfileChangeDefaultLanguageDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_change_logo_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_change_logo_details`` tag with value ``val``.

        :param TeamProfileChangeLogoDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_change_name_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_change_name_details`` tag with value ``val``.

        :param TeamProfileChangeNameDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_remove_background_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_remove_background_details`` tag with value ``val``.

        :param TeamProfileRemoveBackgroundDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_profile_remove_logo_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_remove_logo_details`` tag with value ``val``.

        :param TeamProfileRemoveLogoDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_add_backup_phone_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_add_backup_phone_details`` tag with value ``val``.

        :param TfaAddBackupPhoneDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_add_security_key_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_add_security_key_details`` tag with value ``val``.

        :param TfaAddSecurityKeyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_change_backup_phone_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_change_backup_phone_details`` tag with value ``val``.

        :param TfaChangeBackupPhoneDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_change_status_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_change_status_details`` tag with value ``val``.

        :param TfaChangeStatusDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_remove_backup_phone_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_remove_backup_phone_details`` tag with value ``val``.

        :param TfaRemoveBackupPhoneDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_remove_security_key_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``tfa_remove_security_key_details`` tag with value ``val``.

        :param TfaRemoveSecurityKeyDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def tfa_reset_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_reset_details`` tag
        with value ``val``.

        :param TfaResetDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def changed_enterprise_admin_role_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``changed_enterprise_admin_role_details`` tag with value ``val``.

        :param ChangedEnterpriseAdminRoleDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def changed_enterprise_connected_team_status_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``changed_enterprise_connected_team_status_details`` tag with value
        ``val``.

        :param ChangedEnterpriseConnectedTeamStatusDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def ended_enterprise_admin_session_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ended_enterprise_admin_session_details`` tag with value ``val``.

        :param EndedEnterpriseAdminSessionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def ended_enterprise_admin_session_deprecated_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ended_enterprise_admin_session_deprecated_details`` tag with value
        ``val``.

        :param EndedEnterpriseAdminSessionDeprecatedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def enterprise_settings_locking_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``enterprise_settings_locking_details`` tag with value ``val``.

        :param EnterpriseSettingsLockingDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def guest_admin_change_status_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``guest_admin_change_status_details`` tag with value ``val``.

        :param GuestAdminChangeStatusDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def started_enterprise_admin_session_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``started_enterprise_admin_session_details`` tag with value ``val``.

        :param StartedEnterpriseAdminSessionDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_accepted_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_accepted_details`` tag with value ``val``.

        :param TeamMergeRequestAcceptedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_accepted_shown_to_primary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_accepted_shown_to_primary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestAcceptedShownToPrimaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_accepted_shown_to_secondary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_accepted_shown_to_secondary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestAcceptedShownToSecondaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_auto_canceled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_auto_canceled_details`` tag with value ``val``.

        :param TeamMergeRequestAutoCanceledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_canceled_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_canceled_details`` tag with value ``val``.

        :param TeamMergeRequestCanceledDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_canceled_shown_to_primary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_canceled_shown_to_primary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestCanceledShownToPrimaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_canceled_shown_to_secondary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_canceled_shown_to_secondary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestCanceledShownToSecondaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_expired_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_expired_details`` tag with value ``val``.

        :param TeamMergeRequestExpiredDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_expired_shown_to_primary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_expired_shown_to_primary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestExpiredShownToPrimaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_expired_shown_to_secondary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_expired_shown_to_secondary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestExpiredShownToSecondaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_rejected_shown_to_primary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_rejected_shown_to_primary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestRejectedShownToPrimaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_rejected_shown_to_secondary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_rejected_shown_to_secondary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestRejectedShownToSecondaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_reminder_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_reminder_details`` tag with value ``val``.

        :param TeamMergeRequestReminderDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_reminder_shown_to_primary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_reminder_shown_to_primary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestReminderShownToPrimaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_reminder_shown_to_secondary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_reminder_shown_to_secondary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestReminderShownToSecondaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_revoked_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_revoked_details`` tag with value ``val``.

        :param TeamMergeRequestRevokedDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_sent_shown_to_primary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_sent_shown_to_primary_team_details`` tag with value
        ``val``.

        :param TeamMergeRequestSentShownToPrimaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def team_merge_request_sent_shown_to_secondary_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_sent_shown_to_secondary_team_details`` tag with
        value ``val``.

        :param TeamMergeRequestSentShownToSecondaryTeamDetails val:
        :rtype: EventDetails
        """
        ...
    
    @classmethod
    def missing_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``missing_details`` tag with
        value ``val``.

        :param MissingDetails val:
        :rtype: EventDetails
        """
        ...
    
    def is_admin_alerting_alert_state_changed_details(self):
        """
        Check if the union tag is ``admin_alerting_alert_state_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_admin_alerting_changed_alert_config_details(self):
        """
        Check if the union tag is ``admin_alerting_changed_alert_config_details``.

        :rtype: bool
        """
        ...
    
    def is_admin_alerting_triggered_alert_details(self):
        """
        Check if the union tag is ``admin_alerting_triggered_alert_details``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_restore_process_completed_details(self):
        """
        Check if the union tag is ``ransomware_restore_process_completed_details``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_restore_process_started_details(self):
        """
        Check if the union tag is ``ransomware_restore_process_started_details``.

        :rtype: bool
        """
        ...
    
    def is_app_blocked_by_permissions_details(self):
        """
        Check if the union tag is ``app_blocked_by_permissions_details``.

        :rtype: bool
        """
        ...
    
    def is_app_link_team_details(self):
        """
        Check if the union tag is ``app_link_team_details``.

        :rtype: bool
        """
        ...
    
    def is_app_link_user_details(self):
        """
        Check if the union tag is ``app_link_user_details``.

        :rtype: bool
        """
        ...
    
    def is_app_unlink_team_details(self):
        """
        Check if the union tag is ``app_unlink_team_details``.

        :rtype: bool
        """
        ...
    
    def is_app_unlink_user_details(self):
        """
        Check if the union tag is ``app_unlink_user_details``.

        :rtype: bool
        """
        ...
    
    def is_integration_connected_details(self):
        """
        Check if the union tag is ``integration_connected_details``.

        :rtype: bool
        """
        ...
    
    def is_integration_disconnected_details(self):
        """
        Check if the union tag is ``integration_disconnected_details``.

        :rtype: bool
        """
        ...
    
    def is_file_add_comment_details(self):
        """
        Check if the union tag is ``file_add_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_file_change_comment_subscription_details(self):
        """
        Check if the union tag is ``file_change_comment_subscription_details``.

        :rtype: bool
        """
        ...
    
    def is_file_delete_comment_details(self):
        """
        Check if the union tag is ``file_delete_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_file_edit_comment_details(self):
        """
        Check if the union tag is ``file_edit_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_file_like_comment_details(self):
        """
        Check if the union tag is ``file_like_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_file_resolve_comment_details(self):
        """
        Check if the union tag is ``file_resolve_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_file_unlike_comment_details(self):
        """
        Check if the union tag is ``file_unlike_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_file_unresolve_comment_details(self):
        """
        Check if the union tag is ``file_unresolve_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_add_folders_details(self):
        """
        Check if the union tag is ``governance_policy_add_folders_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_add_folder_failed_details(self):
        """
        Check if the union tag is ``governance_policy_add_folder_failed_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_content_disposed_details(self):
        """
        Check if the union tag is ``governance_policy_content_disposed_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_create_details(self):
        """
        Check if the union tag is ``governance_policy_create_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_delete_details(self):
        """
        Check if the union tag is ``governance_policy_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_edit_details_details(self):
        """
        Check if the union tag is ``governance_policy_edit_details_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_edit_duration_details(self):
        """
        Check if the union tag is ``governance_policy_edit_duration_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_export_created_details(self):
        """
        Check if the union tag is ``governance_policy_export_created_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_export_removed_details(self):
        """
        Check if the union tag is ``governance_policy_export_removed_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_remove_folders_details(self):
        """
        Check if the union tag is ``governance_policy_remove_folders_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_report_created_details(self):
        """
        Check if the union tag is ``governance_policy_report_created_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_zip_part_downloaded_details(self):
        """
        Check if the union tag is ``governance_policy_zip_part_downloaded_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_activate_a_hold_details(self):
        """
        Check if the union tag is ``legal_holds_activate_a_hold_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_add_members_details(self):
        """
        Check if the union tag is ``legal_holds_add_members_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_change_hold_details_details(self):
        """
        Check if the union tag is ``legal_holds_change_hold_details_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_change_hold_name_details(self):
        """
        Check if the union tag is ``legal_holds_change_hold_name_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_a_hold_details(self):
        """
        Check if the union tag is ``legal_holds_export_a_hold_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_cancelled_details(self):
        """
        Check if the union tag is ``legal_holds_export_cancelled_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_downloaded_details(self):
        """
        Check if the union tag is ``legal_holds_export_downloaded_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_removed_details(self):
        """
        Check if the union tag is ``legal_holds_export_removed_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_release_a_hold_details(self):
        """
        Check if the union tag is ``legal_holds_release_a_hold_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_remove_members_details(self):
        """
        Check if the union tag is ``legal_holds_remove_members_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_report_a_hold_details(self):
        """
        Check if the union tag is ``legal_holds_report_a_hold_details``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_desktop_details(self):
        """
        Check if the union tag is ``device_change_ip_desktop_details``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_mobile_details(self):
        """
        Check if the union tag is ``device_change_ip_mobile_details``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_web_details(self):
        """
        Check if the union tag is ``device_change_ip_web_details``.

        :rtype: bool
        """
        ...
    
    def is_device_delete_on_unlink_fail_details(self):
        """
        Check if the union tag is ``device_delete_on_unlink_fail_details``.

        :rtype: bool
        """
        ...
    
    def is_device_delete_on_unlink_success_details(self):
        """
        Check if the union tag is ``device_delete_on_unlink_success_details``.

        :rtype: bool
        """
        ...
    
    def is_device_link_fail_details(self):
        """
        Check if the union tag is ``device_link_fail_details``.

        :rtype: bool
        """
        ...
    
    def is_device_link_success_details(self):
        """
        Check if the union tag is ``device_link_success_details``.

        :rtype: bool
        """
        ...
    
    def is_device_management_disabled_details(self):
        """
        Check if the union tag is ``device_management_disabled_details``.

        :rtype: bool
        """
        ...
    
    def is_device_management_enabled_details(self):
        """
        Check if the union tag is ``device_management_enabled_details``.

        :rtype: bool
        """
        ...
    
    def is_device_sync_backup_status_changed_details(self):
        """
        Check if the union tag is ``device_sync_backup_status_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_device_unlink_details(self):
        """
        Check if the union tag is ``device_unlink_details``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_exported_details(self):
        """
        Check if the union tag is ``dropbox_passwords_exported_details``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_new_device_enrolled_details(self):
        """
        Check if the union tag is ``dropbox_passwords_new_device_enrolled_details``.

        :rtype: bool
        """
        ...
    
    def is_emm_refresh_auth_token_details(self):
        """
        Check if the union tag is ``emm_refresh_auth_token_details``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_eligibility_status_checked_details(self):
        """
        Check if the union tag is ``external_drive_backup_eligibility_status_checked_details``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_status_changed_details(self):
        """
        Check if the union tag is ``external_drive_backup_status_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_change_availability_details(self):
        """
        Check if the union tag is ``account_capture_change_availability_details``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_migrate_account_details(self):
        """
        Check if the union tag is ``account_capture_migrate_account_details``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_notification_emails_sent_details(self):
        """
        Check if the union tag is ``account_capture_notification_emails_sent_details``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_relinquish_account_details(self):
        """
        Check if the union tag is ``account_capture_relinquish_account_details``.

        :rtype: bool
        """
        ...
    
    def is_disabled_domain_invites_details(self):
        """
        Check if the union tag is ``disabled_domain_invites_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_approve_request_to_join_team_details(self):
        """
        Check if the union tag is ``domain_invites_approve_request_to_join_team_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_decline_request_to_join_team_details(self):
        """
        Check if the union tag is ``domain_invites_decline_request_to_join_team_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_email_existing_users_details(self):
        """
        Check if the union tag is ``domain_invites_email_existing_users_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_request_to_join_team_details(self):
        """
        Check if the union tag is ``domain_invites_request_to_join_team_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_set_invite_new_user_pref_to_no_details(self):
        """
        Check if the union tag is ``domain_invites_set_invite_new_user_pref_to_no_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_set_invite_new_user_pref_to_yes_details(self):
        """
        Check if the union tag is ``domain_invites_set_invite_new_user_pref_to_yes_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_add_domain_fail_details(self):
        """
        Check if the union tag is ``domain_verification_add_domain_fail_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_add_domain_success_details(self):
        """
        Check if the union tag is ``domain_verification_add_domain_success_details``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_remove_domain_details(self):
        """
        Check if the union tag is ``domain_verification_remove_domain_details``.

        :rtype: bool
        """
        ...
    
    def is_enabled_domain_invites_details(self):
        """
        Check if the union tag is ``enabled_domain_invites_details``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_cancel_key_deletion_details(self):
        """
        Check if the union tag is ``team_encryption_key_cancel_key_deletion_details``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_create_key_details(self):
        """
        Check if the union tag is ``team_encryption_key_create_key_details``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_delete_key_details(self):
        """
        Check if the union tag is ``team_encryption_key_delete_key_details``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_disable_key_details(self):
        """
        Check if the union tag is ``team_encryption_key_disable_key_details``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_enable_key_details(self):
        """
        Check if the union tag is ``team_encryption_key_enable_key_details``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_rotate_key_details(self):
        """
        Check if the union tag is ``team_encryption_key_rotate_key_details``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_schedule_key_deletion_details(self):
        """
        Check if the union tag is ``team_encryption_key_schedule_key_deletion_details``.

        :rtype: bool
        """
        ...
    
    def is_apply_naming_convention_details(self):
        """
        Check if the union tag is ``apply_naming_convention_details``.

        :rtype: bool
        """
        ...
    
    def is_create_folder_details(self):
        """
        Check if the union tag is ``create_folder_details``.

        :rtype: bool
        """
        ...
    
    def is_file_add_details(self):
        """
        Check if the union tag is ``file_add_details``.

        :rtype: bool
        """
        ...
    
    def is_file_add_from_automation_details(self):
        """
        Check if the union tag is ``file_add_from_automation_details``.

        :rtype: bool
        """
        ...
    
    def is_file_copy_details(self):
        """
        Check if the union tag is ``file_copy_details``.

        :rtype: bool
        """
        ...
    
    def is_file_delete_details(self):
        """
        Check if the union tag is ``file_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_file_download_details(self):
        """
        Check if the union tag is ``file_download_details``.

        :rtype: bool
        """
        ...
    
    def is_file_edit_details(self):
        """
        Check if the union tag is ``file_edit_details``.

        :rtype: bool
        """
        ...
    
    def is_file_get_copy_reference_details(self):
        """
        Check if the union tag is ``file_get_copy_reference_details``.

        :rtype: bool
        """
        ...
    
    def is_file_locking_lock_status_changed_details(self):
        """
        Check if the union tag is ``file_locking_lock_status_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_file_move_details(self):
        """
        Check if the union tag is ``file_move_details``.

        :rtype: bool
        """
        ...
    
    def is_file_permanently_delete_details(self):
        """
        Check if the union tag is ``file_permanently_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_file_preview_details(self):
        """
        Check if the union tag is ``file_preview_details``.

        :rtype: bool
        """
        ...
    
    def is_file_rename_details(self):
        """
        Check if the union tag is ``file_rename_details``.

        :rtype: bool
        """
        ...
    
    def is_file_restore_details(self):
        """
        Check if the union tag is ``file_restore_details``.

        :rtype: bool
        """
        ...
    
    def is_file_revert_details(self):
        """
        Check if the union tag is ``file_revert_details``.

        :rtype: bool
        """
        ...
    
    def is_file_rollback_changes_details(self):
        """
        Check if the union tag is ``file_rollback_changes_details``.

        :rtype: bool
        """
        ...
    
    def is_file_save_copy_reference_details(self):
        """
        Check if the union tag is ``file_save_copy_reference_details``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_description_changed_details(self):
        """
        Check if the union tag is ``folder_overview_description_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_item_pinned_details(self):
        """
        Check if the union tag is ``folder_overview_item_pinned_details``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_item_unpinned_details(self):
        """
        Check if the union tag is ``folder_overview_item_unpinned_details``.

        :rtype: bool
        """
        ...
    
    def is_object_label_added_details(self):
        """
        Check if the union tag is ``object_label_added_details``.

        :rtype: bool
        """
        ...
    
    def is_object_label_removed_details(self):
        """
        Check if the union tag is ``object_label_removed_details``.

        :rtype: bool
        """
        ...
    
    def is_object_label_updated_value_details(self):
        """
        Check if the union tag is ``object_label_updated_value_details``.

        :rtype: bool
        """
        ...
    
    def is_organize_folder_with_tidy_details(self):
        """
        Check if the union tag is ``organize_folder_with_tidy_details``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_delete_details(self):
        """
        Check if the union tag is ``replay_file_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_rewind_folder_details(self):
        """
        Check if the union tag is ``rewind_folder_details``.

        :rtype: bool
        """
        ...
    
    def is_undo_naming_convention_details(self):
        """
        Check if the union tag is ``undo_naming_convention_details``.

        :rtype: bool
        """
        ...
    
    def is_undo_organize_folder_with_tidy_details(self):
        """
        Check if the union tag is ``undo_organize_folder_with_tidy_details``.

        :rtype: bool
        """
        ...
    
    def is_user_tags_added_details(self):
        """
        Check if the union tag is ``user_tags_added_details``.

        :rtype: bool
        """
        ...
    
    def is_user_tags_removed_details(self):
        """
        Check if the union tag is ``user_tags_removed_details``.

        :rtype: bool
        """
        ...
    
    def is_email_ingest_receive_file_details(self):
        """
        Check if the union tag is ``email_ingest_receive_file_details``.

        :rtype: bool
        """
        ...
    
    def is_file_request_change_details(self):
        """
        Check if the union tag is ``file_request_change_details``.

        :rtype: bool
        """
        ...
    
    def is_file_request_close_details(self):
        """
        Check if the union tag is ``file_request_close_details``.

        :rtype: bool
        """
        ...
    
    def is_file_request_create_details(self):
        """
        Check if the union tag is ``file_request_create_details``.

        :rtype: bool
        """
        ...
    
    def is_file_request_delete_details(self):
        """
        Check if the union tag is ``file_request_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_file_request_receive_file_details(self):
        """
        Check if the union tag is ``file_request_receive_file_details``.

        :rtype: bool
        """
        ...
    
    def is_group_add_external_id_details(self):
        """
        Check if the union tag is ``group_add_external_id_details``.

        :rtype: bool
        """
        ...
    
    def is_group_add_member_details(self):
        """
        Check if the union tag is ``group_add_member_details``.

        :rtype: bool
        """
        ...
    
    def is_group_change_external_id_details(self):
        """
        Check if the union tag is ``group_change_external_id_details``.

        :rtype: bool
        """
        ...
    
    def is_group_change_management_type_details(self):
        """
        Check if the union tag is ``group_change_management_type_details``.

        :rtype: bool
        """
        ...
    
    def is_group_change_member_role_details(self):
        """
        Check if the union tag is ``group_change_member_role_details``.

        :rtype: bool
        """
        ...
    
    def is_group_create_details(self):
        """
        Check if the union tag is ``group_create_details``.

        :rtype: bool
        """
        ...
    
    def is_group_delete_details(self):
        """
        Check if the union tag is ``group_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_group_description_updated_details(self):
        """
        Check if the union tag is ``group_description_updated_details``.

        :rtype: bool
        """
        ...
    
    def is_group_join_policy_updated_details(self):
        """
        Check if the union tag is ``group_join_policy_updated_details``.

        :rtype: bool
        """
        ...
    
    def is_group_moved_details(self):
        """
        Check if the union tag is ``group_moved_details``.

        :rtype: bool
        """
        ...
    
    def is_group_remove_external_id_details(self):
        """
        Check if the union tag is ``group_remove_external_id_details``.

        :rtype: bool
        """
        ...
    
    def is_group_remove_member_details(self):
        """
        Check if the union tag is ``group_remove_member_details``.

        :rtype: bool
        """
        ...
    
    def is_group_rename_details(self):
        """
        Check if the union tag is ``group_rename_details``.

        :rtype: bool
        """
        ...
    
    def is_account_lock_or_unlocked_details(self):
        """
        Check if the union tag is ``account_lock_or_unlocked_details``.

        :rtype: bool
        """
        ...
    
    def is_emm_error_details(self):
        """
        Check if the union tag is ``emm_error_details``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_signed_in_via_trusted_teams_details(self):
        """
        Check if the union tag is ``guest_admin_signed_in_via_trusted_teams_details``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_signed_out_via_trusted_teams_details(self):
        """
        Check if the union tag is ``guest_admin_signed_out_via_trusted_teams_details``.

        :rtype: bool
        """
        ...
    
    def is_login_fail_details(self):
        """
        Check if the union tag is ``login_fail_details``.

        :rtype: bool
        """
        ...
    
    def is_login_success_details(self):
        """
        Check if the union tag is ``login_success_details``.

        :rtype: bool
        """
        ...
    
    def is_logout_details(self):
        """
        Check if the union tag is ``logout_details``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_session_end_details(self):
        """
        Check if the union tag is ``reseller_support_session_end_details``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_session_start_details(self):
        """
        Check if the union tag is ``reseller_support_session_start_details``.

        :rtype: bool
        """
        ...
    
    def is_sign_in_as_session_end_details(self):
        """
        Check if the union tag is ``sign_in_as_session_end_details``.

        :rtype: bool
        """
        ...
    
    def is_sign_in_as_session_start_details(self):
        """
        Check if the union tag is ``sign_in_as_session_start_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_error_details(self):
        """
        Check if the union tag is ``sso_error_details``.

        :rtype: bool
        """
        ...
    
    def is_backup_admin_invitation_sent_details(self):
        """
        Check if the union tag is ``backup_admin_invitation_sent_details``.

        :rtype: bool
        """
        ...
    
    def is_backup_invitation_opened_details(self):
        """
        Check if the union tag is ``backup_invitation_opened_details``.

        :rtype: bool
        """
        ...
    
    def is_create_team_invite_link_details(self):
        """
        Check if the union tag is ``create_team_invite_link_details``.

        :rtype: bool
        """
        ...
    
    def is_delete_team_invite_link_details(self):
        """
        Check if the union tag is ``delete_team_invite_link_details``.

        :rtype: bool
        """
        ...
    
    def is_member_add_external_id_details(self):
        """
        Check if the union tag is ``member_add_external_id_details``.

        :rtype: bool
        """
        ...
    
    def is_member_add_name_details(self):
        """
        Check if the union tag is ``member_add_name_details``.

        :rtype: bool
        """
        ...
    
    def is_member_change_admin_role_details(self):
        """
        Check if the union tag is ``member_change_admin_role_details``.

        :rtype: bool
        """
        ...
    
    def is_member_change_email_details(self):
        """
        Check if the union tag is ``member_change_email_details``.

        :rtype: bool
        """
        ...
    
    def is_member_change_external_id_details(self):
        """
        Check if the union tag is ``member_change_external_id_details``.

        :rtype: bool
        """
        ...
    
    def is_member_change_membership_type_details(self):
        """
        Check if the union tag is ``member_change_membership_type_details``.

        :rtype: bool
        """
        ...
    
    def is_member_change_name_details(self):
        """
        Check if the union tag is ``member_change_name_details``.

        :rtype: bool
        """
        ...
    
    def is_member_change_reseller_role_details(self):
        """
        Check if the union tag is ``member_change_reseller_role_details``.

        :rtype: bool
        """
        ...
    
    def is_member_change_status_details(self):
        """
        Check if the union tag is ``member_change_status_details``.

        :rtype: bool
        """
        ...
    
    def is_member_delete_manual_contacts_details(self):
        """
        Check if the union tag is ``member_delete_manual_contacts_details``.

        :rtype: bool
        """
        ...
    
    def is_member_delete_profile_photo_details(self):
        """
        Check if the union tag is ``member_delete_profile_photo_details``.

        :rtype: bool
        """
        ...
    
    def is_member_permanently_delete_account_contents_details(self):
        """
        Check if the union tag is ``member_permanently_delete_account_contents_details``.

        :rtype: bool
        """
        ...
    
    def is_member_remove_external_id_details(self):
        """
        Check if the union tag is ``member_remove_external_id_details``.

        :rtype: bool
        """
        ...
    
    def is_member_set_profile_photo_details(self):
        """
        Check if the union tag is ``member_set_profile_photo_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_add_custom_quota_details(self):
        """
        Check if the union tag is ``member_space_limits_add_custom_quota_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_custom_quota_details(self):
        """
        Check if the union tag is ``member_space_limits_change_custom_quota_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_status_details(self):
        """
        Check if the union tag is ``member_space_limits_change_status_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_remove_custom_quota_details(self):
        """
        Check if the union tag is ``member_space_limits_remove_custom_quota_details``.

        :rtype: bool
        """
        ...
    
    def is_member_suggest_details(self):
        """
        Check if the union tag is ``member_suggest_details``.

        :rtype: bool
        """
        ...
    
    def is_member_transfer_account_contents_details(self):
        """
        Check if the union tag is ``member_transfer_account_contents_details``.

        :rtype: bool
        """
        ...
    
    def is_pending_secondary_email_added_details(self):
        """
        Check if the union tag is ``pending_secondary_email_added_details``.

        :rtype: bool
        """
        ...
    
    def is_secondary_email_deleted_details(self):
        """
        Check if the union tag is ``secondary_email_deleted_details``.

        :rtype: bool
        """
        ...
    
    def is_secondary_email_verified_details(self):
        """
        Check if the union tag is ``secondary_email_verified_details``.

        :rtype: bool
        """
        ...
    
    def is_secondary_mails_policy_changed_details(self):
        """
        Check if the union tag is ``secondary_mails_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_add_page_details(self):
        """
        Check if the union tag is ``binder_add_page_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_add_section_details(self):
        """
        Check if the union tag is ``binder_add_section_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_remove_page_details(self):
        """
        Check if the union tag is ``binder_remove_page_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_remove_section_details(self):
        """
        Check if the union tag is ``binder_remove_section_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_rename_page_details(self):
        """
        Check if the union tag is ``binder_rename_page_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_rename_section_details(self):
        """
        Check if the union tag is ``binder_rename_section_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_reorder_page_details(self):
        """
        Check if the union tag is ``binder_reorder_page_details``.

        :rtype: bool
        """
        ...
    
    def is_binder_reorder_section_details(self):
        """
        Check if the union tag is ``binder_reorder_section_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_add_member_details(self):
        """
        Check if the union tag is ``paper_content_add_member_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_add_to_folder_details(self):
        """
        Check if the union tag is ``paper_content_add_to_folder_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_archive_details(self):
        """
        Check if the union tag is ``paper_content_archive_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_create_details(self):
        """
        Check if the union tag is ``paper_content_create_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_permanently_delete_details(self):
        """
        Check if the union tag is ``paper_content_permanently_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_remove_from_folder_details(self):
        """
        Check if the union tag is ``paper_content_remove_from_folder_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_remove_member_details(self):
        """
        Check if the union tag is ``paper_content_remove_member_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_rename_details(self):
        """
        Check if the union tag is ``paper_content_rename_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_restore_details(self):
        """
        Check if the union tag is ``paper_content_restore_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_add_comment_details(self):
        """
        Check if the union tag is ``paper_doc_add_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_member_role_details(self):
        """
        Check if the union tag is ``paper_doc_change_member_role_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_sharing_policy_details(self):
        """
        Check if the union tag is ``paper_doc_change_sharing_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_subscription_details(self):
        """
        Check if the union tag is ``paper_doc_change_subscription_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_deleted_details(self):
        """
        Check if the union tag is ``paper_doc_deleted_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_delete_comment_details(self):
        """
        Check if the union tag is ``paper_doc_delete_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_download_details(self):
        """
        Check if the union tag is ``paper_doc_download_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_edit_details(self):
        """
        Check if the union tag is ``paper_doc_edit_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_edit_comment_details(self):
        """
        Check if the union tag is ``paper_doc_edit_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_followed_details(self):
        """
        Check if the union tag is ``paper_doc_followed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_mention_details(self):
        """
        Check if the union tag is ``paper_doc_mention_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_ownership_changed_details(self):
        """
        Check if the union tag is ``paper_doc_ownership_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_request_access_details(self):
        """
        Check if the union tag is ``paper_doc_request_access_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_resolve_comment_details(self):
        """
        Check if the union tag is ``paper_doc_resolve_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_revert_details(self):
        """
        Check if the union tag is ``paper_doc_revert_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_slack_share_details(self):
        """
        Check if the union tag is ``paper_doc_slack_share_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_team_invite_details(self):
        """
        Check if the union tag is ``paper_doc_team_invite_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_trashed_details(self):
        """
        Check if the union tag is ``paper_doc_trashed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_unresolve_comment_details(self):
        """
        Check if the union tag is ``paper_doc_unresolve_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_untrashed_details(self):
        """
        Check if the union tag is ``paper_doc_untrashed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_view_details(self):
        """
        Check if the union tag is ``paper_doc_view_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_allow_details(self):
        """
        Check if the union tag is ``paper_external_view_allow_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_default_team_details(self):
        """
        Check if the union tag is ``paper_external_view_default_team_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_forbid_details(self):
        """
        Check if the union tag is ``paper_external_view_forbid_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_change_subscription_details(self):
        """
        Check if the union tag is ``paper_folder_change_subscription_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_deleted_details(self):
        """
        Check if the union tag is ``paper_folder_deleted_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_followed_details(self):
        """
        Check if the union tag is ``paper_folder_followed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_team_invite_details(self):
        """
        Check if the union tag is ``paper_folder_team_invite_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_change_permission_details(self):
        """
        Check if the union tag is ``paper_published_link_change_permission_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_create_details(self):
        """
        Check if the union tag is ``paper_published_link_create_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_disabled_details(self):
        """
        Check if the union tag is ``paper_published_link_disabled_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_view_details(self):
        """
        Check if the union tag is ``paper_published_link_view_details``.

        :rtype: bool
        """
        ...
    
    def is_password_change_details(self):
        """
        Check if the union tag is ``password_change_details``.

        :rtype: bool
        """
        ...
    
    def is_password_reset_details(self):
        """
        Check if the union tag is ``password_reset_details``.

        :rtype: bool
        """
        ...
    
    def is_password_reset_all_details(self):
        """
        Check if the union tag is ``password_reset_all_details``.

        :rtype: bool
        """
        ...
    
    def is_classification_create_report_details(self):
        """
        Check if the union tag is ``classification_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_classification_create_report_fail_details(self):
        """
        Check if the union tag is ``classification_create_report_fail_details``.

        :rtype: bool
        """
        ...
    
    def is_emm_create_exceptions_report_details(self):
        """
        Check if the union tag is ``emm_create_exceptions_report_details``.

        :rtype: bool
        """
        ...
    
    def is_emm_create_usage_report_details(self):
        """
        Check if the union tag is ``emm_create_usage_report_details``.

        :rtype: bool
        """
        ...
    
    def is_export_members_report_details(self):
        """
        Check if the union tag is ``export_members_report_details``.

        :rtype: bool
        """
        ...
    
    def is_export_members_report_fail_details(self):
        """
        Check if the union tag is ``export_members_report_fail_details``.

        :rtype: bool
        """
        ...
    
    def is_external_sharing_create_report_details(self):
        """
        Check if the union tag is ``external_sharing_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_external_sharing_report_failed_details(self):
        """
        Check if the union tag is ``external_sharing_report_failed_details``.

        :rtype: bool
        """
        ...
    
    def is_no_expiration_link_gen_create_report_details(self):
        """
        Check if the union tag is ``no_expiration_link_gen_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_no_expiration_link_gen_report_failed_details(self):
        """
        Check if the union tag is ``no_expiration_link_gen_report_failed_details``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_gen_create_report_details(self):
        """
        Check if the union tag is ``no_password_link_gen_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_gen_report_failed_details(self):
        """
        Check if the union tag is ``no_password_link_gen_report_failed_details``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_view_create_report_details(self):
        """
        Check if the union tag is ``no_password_link_view_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_view_report_failed_details(self):
        """
        Check if the union tag is ``no_password_link_view_report_failed_details``.

        :rtype: bool
        """
        ...
    
    def is_outdated_link_view_create_report_details(self):
        """
        Check if the union tag is ``outdated_link_view_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_outdated_link_view_report_failed_details(self):
        """
        Check if the union tag is ``outdated_link_view_report_failed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_admin_export_start_details(self):
        """
        Check if the union tag is ``paper_admin_export_start_details``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_alert_create_report_details(self):
        """
        Check if the union tag is ``ransomware_alert_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_alert_create_report_failed_details(self):
        """
        Check if the union tag is ``ransomware_alert_create_report_failed_details``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_create_admin_privilege_report_details(self):
        """
        Check if the union tag is ``smart_sync_create_admin_privilege_report_details``.

        :rtype: bool
        """
        ...
    
    def is_team_activity_create_report_details(self):
        """
        Check if the union tag is ``team_activity_create_report_details``.

        :rtype: bool
        """
        ...
    
    def is_team_activity_create_report_fail_details(self):
        """
        Check if the union tag is ``team_activity_create_report_fail_details``.

        :rtype: bool
        """
        ...
    
    def is_collection_share_details(self):
        """
        Check if the union tag is ``collection_share_details``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_file_add_details(self):
        """
        Check if the union tag is ``file_transfers_file_add_details``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_delete_details(self):
        """
        Check if the union tag is ``file_transfers_transfer_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_download_details(self):
        """
        Check if the union tag is ``file_transfers_transfer_download_details``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_send_details(self):
        """
        Check if the union tag is ``file_transfers_transfer_send_details``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_view_details(self):
        """
        Check if the union tag is ``file_transfers_transfer_view_details``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_invite_only_details(self):
        """
        Check if the union tag is ``note_acl_invite_only_details``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_link_details(self):
        """
        Check if the union tag is ``note_acl_link_details``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_team_link_details(self):
        """
        Check if the union tag is ``note_acl_team_link_details``.

        :rtype: bool
        """
        ...
    
    def is_note_shared_details(self):
        """
        Check if the union tag is ``note_shared_details``.

        :rtype: bool
        """
        ...
    
    def is_note_share_receive_details(self):
        """
        Check if the union tag is ``note_share_receive_details``.

        :rtype: bool
        """
        ...
    
    def is_open_note_shared_details(self):
        """
        Check if the union tag is ``open_note_shared_details``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_shared_link_created_details(self):
        """
        Check if the union tag is ``replay_file_shared_link_created_details``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_shared_link_modified_details(self):
        """
        Check if the union tag is ``replay_file_shared_link_modified_details``.

        :rtype: bool
        """
        ...
    
    def is_replay_project_team_add_details(self):
        """
        Check if the union tag is ``replay_project_team_add_details``.

        :rtype: bool
        """
        ...
    
    def is_replay_project_team_delete_details(self):
        """
        Check if the union tag is ``replay_project_team_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_add_group_details(self):
        """
        Check if the union tag is ``sf_add_group_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_allow_non_members_to_view_shared_links_details(self):
        """
        Check if the union tag is ``sf_allow_non_members_to_view_shared_links_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_external_invite_warn_details(self):
        """
        Check if the union tag is ``sf_external_invite_warn_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_invite_details(self):
        """
        Check if the union tag is ``sf_fb_invite_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_invite_change_role_details(self):
        """
        Check if the union tag is ``sf_fb_invite_change_role_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_uninvite_details(self):
        """
        Check if the union tag is ``sf_fb_uninvite_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_invite_group_details(self):
        """
        Check if the union tag is ``sf_invite_group_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_grant_access_details(self):
        """
        Check if the union tag is ``sf_team_grant_access_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_invite_details(self):
        """
        Check if the union tag is ``sf_team_invite_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_invite_change_role_details(self):
        """
        Check if the union tag is ``sf_team_invite_change_role_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_join_details(self):
        """
        Check if the union tag is ``sf_team_join_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_join_from_oob_link_details(self):
        """
        Check if the union tag is ``sf_team_join_from_oob_link_details``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_uninvite_details(self):
        """
        Check if the union tag is ``sf_team_uninvite_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_invitees_details(self):
        """
        Check if the union tag is ``shared_content_add_invitees_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_link_expiry_details(self):
        """
        Check if the union tag is ``shared_content_add_link_expiry_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_link_password_details(self):
        """
        Check if the union tag is ``shared_content_add_link_password_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_member_details(self):
        """
        Check if the union tag is ``shared_content_add_member_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_downloads_policy_details(self):
        """
        Check if the union tag is ``shared_content_change_downloads_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_invitee_role_details(self):
        """
        Check if the union tag is ``shared_content_change_invitee_role_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_audience_details(self):
        """
        Check if the union tag is ``shared_content_change_link_audience_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_expiry_details(self):
        """
        Check if the union tag is ``shared_content_change_link_expiry_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_password_details(self):
        """
        Check if the union tag is ``shared_content_change_link_password_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_member_role_details(self):
        """
        Check if the union tag is ``shared_content_change_member_role_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_viewer_info_policy_details(self):
        """
        Check if the union tag is ``shared_content_change_viewer_info_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_claim_invitation_details(self):
        """
        Check if the union tag is ``shared_content_claim_invitation_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_copy_details(self):
        """
        Check if the union tag is ``shared_content_copy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_download_details(self):
        """
        Check if the union tag is ``shared_content_download_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_relinquish_membership_details(self):
        """
        Check if the union tag is ``shared_content_relinquish_membership_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_invitees_details(self):
        """
        Check if the union tag is ``shared_content_remove_invitees_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_link_expiry_details(self):
        """
        Check if the union tag is ``shared_content_remove_link_expiry_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_link_password_details(self):
        """
        Check if the union tag is ``shared_content_remove_link_password_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_member_details(self):
        """
        Check if the union tag is ``shared_content_remove_member_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_request_access_details(self):
        """
        Check if the union tag is ``shared_content_request_access_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_restore_invitees_details(self):
        """
        Check if the union tag is ``shared_content_restore_invitees_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_restore_member_details(self):
        """
        Check if the union tag is ``shared_content_restore_member_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_unshare_details(self):
        """
        Check if the union tag is ``shared_content_unshare_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_view_details(self):
        """
        Check if the union tag is ``shared_content_view_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_link_policy_details(self):
        """
        Check if the union tag is ``shared_folder_change_link_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_inheritance_policy_details(self):
        """
        Check if the union tag is ``shared_folder_change_members_inheritance_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_management_policy_details(self):
        """
        Check if the union tag is ``shared_folder_change_members_management_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_policy_details(self):
        """
        Check if the union tag is ``shared_folder_change_members_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_create_details(self):
        """
        Check if the union tag is ``shared_folder_create_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_decline_invitation_details(self):
        """
        Check if the union tag is ``shared_folder_decline_invitation_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_mount_details(self):
        """
        Check if the union tag is ``shared_folder_mount_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_nest_details(self):
        """
        Check if the union tag is ``shared_folder_nest_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_transfer_ownership_details(self):
        """
        Check if the union tag is ``shared_folder_transfer_ownership_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_unmount_details(self):
        """
        Check if the union tag is ``shared_folder_unmount_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_add_expiry_details(self):
        """
        Check if the union tag is ``shared_link_add_expiry_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_change_expiry_details(self):
        """
        Check if the union tag is ``shared_link_change_expiry_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_change_visibility_details(self):
        """
        Check if the union tag is ``shared_link_change_visibility_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_copy_details(self):
        """
        Check if the union tag is ``shared_link_copy_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_create_details(self):
        """
        Check if the union tag is ``shared_link_create_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_disable_details(self):
        """
        Check if the union tag is ``shared_link_disable_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_download_details(self):
        """
        Check if the union tag is ``shared_link_download_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_remove_expiry_details(self):
        """
        Check if the union tag is ``shared_link_remove_expiry_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_add_expiration_details(self):
        """
        Check if the union tag is ``shared_link_settings_add_expiration_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_add_password_details(self):
        """
        Check if the union tag is ``shared_link_settings_add_password_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_allow_download_disabled_details(self):
        """
        Check if the union tag is ``shared_link_settings_allow_download_disabled_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_allow_download_enabled_details(self):
        """
        Check if the union tag is ``shared_link_settings_allow_download_enabled_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_audience_details(self):
        """
        Check if the union tag is ``shared_link_settings_change_audience_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_expiration_details(self):
        """
        Check if the union tag is ``shared_link_settings_change_expiration_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_password_details(self):
        """
        Check if the union tag is ``shared_link_settings_change_password_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_remove_expiration_details(self):
        """
        Check if the union tag is ``shared_link_settings_remove_expiration_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_remove_password_details(self):
        """
        Check if the union tag is ``shared_link_settings_remove_password_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_share_details(self):
        """
        Check if the union tag is ``shared_link_share_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_view_details(self):
        """
        Check if the union tag is ``shared_link_view_details``.

        :rtype: bool
        """
        ...
    
    def is_shared_note_opened_details(self):
        """
        Check if the union tag is ``shared_note_opened_details``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_disable_downloads_details(self):
        """
        Check if the union tag is ``shmodel_disable_downloads_details``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_enable_downloads_details(self):
        """
        Check if the union tag is ``shmodel_enable_downloads_details``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_group_share_details(self):
        """
        Check if the union tag is ``shmodel_group_share_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_access_granted_details(self):
        """
        Check if the union tag is ``showcase_access_granted_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_add_member_details(self):
        """
        Check if the union tag is ``showcase_add_member_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_archived_details(self):
        """
        Check if the union tag is ``showcase_archived_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_created_details(self):
        """
        Check if the union tag is ``showcase_created_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_delete_comment_details(self):
        """
        Check if the union tag is ``showcase_delete_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_edited_details(self):
        """
        Check if the union tag is ``showcase_edited_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_edit_comment_details(self):
        """
        Check if the union tag is ``showcase_edit_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_added_details(self):
        """
        Check if the union tag is ``showcase_file_added_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_download_details(self):
        """
        Check if the union tag is ``showcase_file_download_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_removed_details(self):
        """
        Check if the union tag is ``showcase_file_removed_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_view_details(self):
        """
        Check if the union tag is ``showcase_file_view_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_permanently_deleted_details(self):
        """
        Check if the union tag is ``showcase_permanently_deleted_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_post_comment_details(self):
        """
        Check if the union tag is ``showcase_post_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_remove_member_details(self):
        """
        Check if the union tag is ``showcase_remove_member_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_renamed_details(self):
        """
        Check if the union tag is ``showcase_renamed_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_request_access_details(self):
        """
        Check if the union tag is ``showcase_request_access_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_resolve_comment_details(self):
        """
        Check if the union tag is ``showcase_resolve_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_restored_details(self):
        """
        Check if the union tag is ``showcase_restored_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_trashed_details(self):
        """
        Check if the union tag is ``showcase_trashed_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_trashed_deprecated_details(self):
        """
        Check if the union tag is ``showcase_trashed_deprecated_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_unresolve_comment_details(self):
        """
        Check if the union tag is ``showcase_unresolve_comment_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_untrashed_details(self):
        """
        Check if the union tag is ``showcase_untrashed_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_untrashed_deprecated_details(self):
        """
        Check if the union tag is ``showcase_untrashed_deprecated_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_view_details(self):
        """
        Check if the union tag is ``showcase_view_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_cert_details(self):
        """
        Check if the union tag is ``sso_add_cert_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_login_url_details(self):
        """
        Check if the union tag is ``sso_add_login_url_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_logout_url_details(self):
        """
        Check if the union tag is ``sso_add_logout_url_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_cert_details(self):
        """
        Check if the union tag is ``sso_change_cert_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_login_url_details(self):
        """
        Check if the union tag is ``sso_change_login_url_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_logout_url_details(self):
        """
        Check if the union tag is ``sso_change_logout_url_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_saml_identity_mode_details(self):
        """
        Check if the union tag is ``sso_change_saml_identity_mode_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_cert_details(self):
        """
        Check if the union tag is ``sso_remove_cert_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_login_url_details(self):
        """
        Check if the union tag is ``sso_remove_login_url_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_logout_url_details(self):
        """
        Check if the union tag is ``sso_remove_logout_url_details``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_change_status_details(self):
        """
        Check if the union tag is ``team_folder_change_status_details``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_create_details(self):
        """
        Check if the union tag is ``team_folder_create_details``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_downgrade_details(self):
        """
        Check if the union tag is ``team_folder_downgrade_details``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_permanently_delete_details(self):
        """
        Check if the union tag is ``team_folder_permanently_delete_details``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_rename_details(self):
        """
        Check if the union tag is ``team_folder_rename_details``.

        :rtype: bool
        """
        ...
    
    def is_team_selective_sync_settings_changed_details(self):
        """
        Check if the union tag is ``team_selective_sync_settings_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_change_policy_details(self):
        """
        Check if the union tag is ``account_capture_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_admin_email_reminders_changed_details(self):
        """
        Check if the union tag is ``admin_email_reminders_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_allow_download_disabled_details(self):
        """
        Check if the union tag is ``allow_download_disabled_details``.

        :rtype: bool
        """
        ...
    
    def is_allow_download_enabled_details(self):
        """
        Check if the union tag is ``allow_download_enabled_details``.

        :rtype: bool
        """
        ...
    
    def is_app_permissions_changed_details(self):
        """
        Check if the union tag is ``app_permissions_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_camera_uploads_policy_changed_details(self):
        """
        Check if the union tag is ``camera_uploads_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_capture_transcript_policy_changed_details(self):
        """
        Check if the union tag is ``capture_transcript_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_classification_change_policy_details(self):
        """
        Check if the union tag is ``classification_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_computer_backup_policy_changed_details(self):
        """
        Check if the union tag is ``computer_backup_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_content_administration_policy_changed_details(self):
        """
        Check if the union tag is ``content_administration_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_data_placement_restriction_change_policy_details(self):
        """
        Check if the union tag is ``data_placement_restriction_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_data_placement_restriction_satisfy_policy_details(self):
        """
        Check if the union tag is ``data_placement_restriction_satisfy_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_add_exception_details(self):
        """
        Check if the union tag is ``device_approvals_add_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_desktop_policy_details(self):
        """
        Check if the union tag is ``device_approvals_change_desktop_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_mobile_policy_details(self):
        """
        Check if the union tag is ``device_approvals_change_mobile_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_overage_action_details(self):
        """
        Check if the union tag is ``device_approvals_change_overage_action_details``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_unlink_action_details(self):
        """
        Check if the union tag is ``device_approvals_change_unlink_action_details``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_remove_exception_details(self):
        """
        Check if the union tag is ``device_approvals_remove_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_directory_restrictions_add_members_details(self):
        """
        Check if the union tag is ``directory_restrictions_add_members_details``.

        :rtype: bool
        """
        ...
    
    def is_directory_restrictions_remove_members_details(self):
        """
        Check if the union tag is ``directory_restrictions_remove_members_details``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_policy_changed_details(self):
        """
        Check if the union tag is ``dropbox_passwords_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_email_ingest_policy_changed_details(self):
        """
        Check if the union tag is ``email_ingest_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_emm_add_exception_details(self):
        """
        Check if the union tag is ``emm_add_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_emm_change_policy_details(self):
        """
        Check if the union tag is ``emm_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_emm_remove_exception_details(self):
        """
        Check if the union tag is ``emm_remove_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_extended_version_history_change_policy_details(self):
        """
        Check if the union tag is ``extended_version_history_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_policy_changed_details(self):
        """
        Check if the union tag is ``external_drive_backup_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_file_comments_change_policy_details(self):
        """
        Check if the union tag is ``file_comments_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_file_locking_policy_changed_details(self):
        """
        Check if the union tag is ``file_locking_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_file_provider_migration_policy_changed_details(self):
        """
        Check if the union tag is ``file_provider_migration_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_change_policy_details(self):
        """
        Check if the union tag is ``file_requests_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_emails_enabled_details(self):
        """
        Check if the union tag is ``file_requests_emails_enabled_details``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_emails_restricted_to_team_only_details(self):
        """
        Check if the union tag is ``file_requests_emails_restricted_to_team_only_details``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_policy_changed_details(self):
        """
        Check if the union tag is ``file_transfers_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_folder_link_restriction_policy_changed_details(self):
        """
        Check if the union tag is ``folder_link_restriction_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_google_sso_change_policy_details(self):
        """
        Check if the union tag is ``google_sso_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_group_user_management_change_policy_details(self):
        """
        Check if the union tag is ``group_user_management_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_integration_policy_changed_details(self):
        """
        Check if the union tag is ``integration_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_invite_acceptance_email_policy_changed_details(self):
        """
        Check if the union tag is ``invite_acceptance_email_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_member_requests_change_policy_details(self):
        """
        Check if the union tag is ``member_requests_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_member_send_invite_policy_changed_details(self):
        """
        Check if the union tag is ``member_send_invite_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_add_exception_details(self):
        """
        Check if the union tag is ``member_space_limits_add_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_caps_type_policy_details(self):
        """
        Check if the union tag is ``member_space_limits_change_caps_type_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_policy_details(self):
        """
        Check if the union tag is ``member_space_limits_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_remove_exception_details(self):
        """
        Check if the union tag is ``member_space_limits_remove_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_member_suggestions_change_policy_details(self):
        """
        Check if the union tag is ``member_suggestions_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_microsoft_office_addin_change_policy_details(self):
        """
        Check if the union tag is ``microsoft_office_addin_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_network_control_change_policy_details(self):
        """
        Check if the union tag is ``network_control_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_deployment_policy_details(self):
        """
        Check if the union tag is ``paper_change_deployment_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_member_link_policy_details(self):
        """
        Check if the union tag is ``paper_change_member_link_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_member_policy_details(self):
        """
        Check if the union tag is ``paper_change_member_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_policy_details(self):
        """
        Check if the union tag is ``paper_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_default_folder_policy_changed_details(self):
        """
        Check if the union tag is ``paper_default_folder_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_desktop_policy_changed_details(self):
        """
        Check if the union tag is ``paper_desktop_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_enabled_users_group_addition_details(self):
        """
        Check if the union tag is ``paper_enabled_users_group_addition_details``.

        :rtype: bool
        """
        ...
    
    def is_paper_enabled_users_group_removal_details(self):
        """
        Check if the union tag is ``paper_enabled_users_group_removal_details``.

        :rtype: bool
        """
        ...
    
    def is_password_strength_requirements_change_policy_details(self):
        """
        Check if the union tag is ``password_strength_requirements_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_permanent_delete_change_policy_details(self):
        """
        Check if the union tag is ``permanent_delete_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_change_policy_details(self):
        """
        Check if the union tag is ``reseller_support_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_rewind_policy_changed_details(self):
        """
        Check if the union tag is ``rewind_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_send_for_signature_policy_changed_details(self):
        """
        Check if the union tag is ``send_for_signature_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_folder_join_policy_details(self):
        """
        Check if the union tag is ``sharing_change_folder_join_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_allow_change_expiration_policy_details(self):
        """
        Check if the union tag is ``sharing_change_link_allow_change_expiration_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_default_expiration_policy_details(self):
        """
        Check if the union tag is ``sharing_change_link_default_expiration_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_enforce_password_policy_details(self):
        """
        Check if the union tag is ``sharing_change_link_enforce_password_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_policy_details(self):
        """
        Check if the union tag is ``sharing_change_link_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_member_policy_details(self):
        """
        Check if the union tag is ``sharing_change_member_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_download_policy_details(self):
        """
        Check if the union tag is ``showcase_change_download_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_enabled_policy_details(self):
        """
        Check if the union tag is ``showcase_change_enabled_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_external_sharing_policy_details(self):
        """
        Check if the union tag is ``showcase_change_external_sharing_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_smarter_smart_sync_policy_changed_details(self):
        """
        Check if the union tag is ``smarter_smart_sync_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_change_policy_details(self):
        """
        Check if the union tag is ``smart_sync_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_not_opt_out_details(self):
        """
        Check if the union tag is ``smart_sync_not_opt_out_details``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_opt_out_details(self):
        """
        Check if the union tag is ``smart_sync_opt_out_details``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_policy_details(self):
        """
        Check if the union tag is ``sso_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_team_branding_policy_changed_details(self):
        """
        Check if the union tag is ``team_branding_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_team_extensions_policy_changed_details(self):
        """
        Check if the union tag is ``team_extensions_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_team_selective_sync_policy_changed_details(self):
        """
        Check if the union tag is ``team_selective_sync_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_team_sharing_whitelist_subjects_changed_details(self):
        """
        Check if the union tag is ``team_sharing_whitelist_subjects_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_exception_details(self):
        """
        Check if the union tag is ``tfa_add_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_policy_details(self):
        """
        Check if the union tag is ``tfa_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_exception_details(self):
        """
        Check if the union tag is ``tfa_remove_exception_details``.

        :rtype: bool
        """
        ...
    
    def is_two_account_change_policy_details(self):
        """
        Check if the union tag is ``two_account_change_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_viewer_info_policy_changed_details(self):
        """
        Check if the union tag is ``viewer_info_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_watermarking_policy_changed_details(self):
        """
        Check if the union tag is ``watermarking_policy_changed_details``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_active_session_limit_details(self):
        """
        Check if the union tag is ``web_sessions_change_active_session_limit_details``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_fixed_length_policy_details(self):
        """
        Check if the union tag is ``web_sessions_change_fixed_length_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_idle_length_policy_details(self):
        """
        Check if the union tag is ``web_sessions_change_idle_length_policy_details``.

        :rtype: bool
        """
        ...
    
    def is_data_residency_migration_request_successful_details(self):
        """
        Check if the union tag is ``data_residency_migration_request_successful_details``.

        :rtype: bool
        """
        ...
    
    def is_data_residency_migration_request_unsuccessful_details(self):
        """
        Check if the union tag is ``data_residency_migration_request_unsuccessful_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_from_details(self):
        """
        Check if the union tag is ``team_merge_from_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_to_details(self):
        """
        Check if the union tag is ``team_merge_to_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_add_background_details(self):
        """
        Check if the union tag is ``team_profile_add_background_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_add_logo_details(self):
        """
        Check if the union tag is ``team_profile_add_logo_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_background_details(self):
        """
        Check if the union tag is ``team_profile_change_background_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_default_language_details(self):
        """
        Check if the union tag is ``team_profile_change_default_language_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_logo_details(self):
        """
        Check if the union tag is ``team_profile_change_logo_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_name_details(self):
        """
        Check if the union tag is ``team_profile_change_name_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_remove_background_details(self):
        """
        Check if the union tag is ``team_profile_remove_background_details``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_remove_logo_details(self):
        """
        Check if the union tag is ``team_profile_remove_logo_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_backup_phone_details(self):
        """
        Check if the union tag is ``tfa_add_backup_phone_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_security_key_details(self):
        """
        Check if the union tag is ``tfa_add_security_key_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_backup_phone_details(self):
        """
        Check if the union tag is ``tfa_change_backup_phone_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_status_details(self):
        """
        Check if the union tag is ``tfa_change_status_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_backup_phone_details(self):
        """
        Check if the union tag is ``tfa_remove_backup_phone_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_security_key_details(self):
        """
        Check if the union tag is ``tfa_remove_security_key_details``.

        :rtype: bool
        """
        ...
    
    def is_tfa_reset_details(self):
        """
        Check if the union tag is ``tfa_reset_details``.

        :rtype: bool
        """
        ...
    
    def is_changed_enterprise_admin_role_details(self):
        """
        Check if the union tag is ``changed_enterprise_admin_role_details``.

        :rtype: bool
        """
        ...
    
    def is_changed_enterprise_connected_team_status_details(self):
        """
        Check if the union tag is ``changed_enterprise_connected_team_status_details``.

        :rtype: bool
        """
        ...
    
    def is_ended_enterprise_admin_session_details(self):
        """
        Check if the union tag is ``ended_enterprise_admin_session_details``.

        :rtype: bool
        """
        ...
    
    def is_ended_enterprise_admin_session_deprecated_details(self):
        """
        Check if the union tag is ``ended_enterprise_admin_session_deprecated_details``.

        :rtype: bool
        """
        ...
    
    def is_enterprise_settings_locking_details(self):
        """
        Check if the union tag is ``enterprise_settings_locking_details``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_change_status_details(self):
        """
        Check if the union tag is ``guest_admin_change_status_details``.

        :rtype: bool
        """
        ...
    
    def is_started_enterprise_admin_session_details(self):
        """
        Check if the union tag is ``started_enterprise_admin_session_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted_details(self):
        """
        Check if the union tag is ``team_merge_request_accepted_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted_shown_to_primary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_accepted_shown_to_primary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted_shown_to_secondary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_accepted_shown_to_secondary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_auto_canceled_details(self):
        """
        Check if the union tag is ``team_merge_request_auto_canceled_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled_details(self):
        """
        Check if the union tag is ``team_merge_request_canceled_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled_shown_to_primary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_canceled_shown_to_primary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled_shown_to_secondary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_canceled_shown_to_secondary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired_details(self):
        """
        Check if the union tag is ``team_merge_request_expired_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired_shown_to_primary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_expired_shown_to_primary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired_shown_to_secondary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_expired_shown_to_secondary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_rejected_shown_to_primary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_rejected_shown_to_primary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_rejected_shown_to_secondary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_rejected_shown_to_secondary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder_details(self):
        """
        Check if the union tag is ``team_merge_request_reminder_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder_shown_to_primary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_reminder_shown_to_primary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder_shown_to_secondary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_reminder_shown_to_secondary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_revoked_details(self):
        """
        Check if the union tag is ``team_merge_request_revoked_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_sent_shown_to_primary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_sent_shown_to_primary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_sent_shown_to_secondary_team_details(self):
        """
        Check if the union tag is ``team_merge_request_sent_shown_to_secondary_team_details``.

        :rtype: bool
        """
        ...
    
    def is_missing_details(self):
        """
        Check if the union tag is ``missing_details``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_admin_alerting_alert_state_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_admin_alerting_alert_state_changed_details` is true.

        :rtype: AdminAlertingAlertStateChangedDetails
        """
        ...
    
    def get_admin_alerting_changed_alert_config_details(self): # -> None:
        """
        Only call this if :meth:`is_admin_alerting_changed_alert_config_details` is true.

        :rtype: AdminAlertingChangedAlertConfigDetails
        """
        ...
    
    def get_admin_alerting_triggered_alert_details(self): # -> None:
        """
        Only call this if :meth:`is_admin_alerting_triggered_alert_details` is true.

        :rtype: AdminAlertingTriggeredAlertDetails
        """
        ...
    
    def get_ransomware_restore_process_completed_details(self): # -> None:
        """
        Only call this if :meth:`is_ransomware_restore_process_completed_details` is true.

        :rtype: RansomwareRestoreProcessCompletedDetails
        """
        ...
    
    def get_ransomware_restore_process_started_details(self): # -> None:
        """
        Only call this if :meth:`is_ransomware_restore_process_started_details` is true.

        :rtype: RansomwareRestoreProcessStartedDetails
        """
        ...
    
    def get_app_blocked_by_permissions_details(self): # -> None:
        """
        Only call this if :meth:`is_app_blocked_by_permissions_details` is true.

        :rtype: AppBlockedByPermissionsDetails
        """
        ...
    
    def get_app_link_team_details(self): # -> None:
        """
        Only call this if :meth:`is_app_link_team_details` is true.

        :rtype: AppLinkTeamDetails
        """
        ...
    
    def get_app_link_user_details(self): # -> None:
        """
        Only call this if :meth:`is_app_link_user_details` is true.

        :rtype: AppLinkUserDetails
        """
        ...
    
    def get_app_unlink_team_details(self): # -> None:
        """
        Only call this if :meth:`is_app_unlink_team_details` is true.

        :rtype: AppUnlinkTeamDetails
        """
        ...
    
    def get_app_unlink_user_details(self): # -> None:
        """
        Only call this if :meth:`is_app_unlink_user_details` is true.

        :rtype: AppUnlinkUserDetails
        """
        ...
    
    def get_integration_connected_details(self): # -> None:
        """
        Only call this if :meth:`is_integration_connected_details` is true.

        :rtype: IntegrationConnectedDetails
        """
        ...
    
    def get_integration_disconnected_details(self): # -> None:
        """
        Only call this if :meth:`is_integration_disconnected_details` is true.

        :rtype: IntegrationDisconnectedDetails
        """
        ...
    
    def get_file_add_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_file_add_comment_details` is true.

        :rtype: FileAddCommentDetails
        """
        ...
    
    def get_file_change_comment_subscription_details(self): # -> None:
        """
        Only call this if :meth:`is_file_change_comment_subscription_details` is true.

        :rtype: FileChangeCommentSubscriptionDetails
        """
        ...
    
    def get_file_delete_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_file_delete_comment_details` is true.

        :rtype: FileDeleteCommentDetails
        """
        ...
    
    def get_file_edit_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_file_edit_comment_details` is true.

        :rtype: FileEditCommentDetails
        """
        ...
    
    def get_file_like_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_file_like_comment_details` is true.

        :rtype: FileLikeCommentDetails
        """
        ...
    
    def get_file_resolve_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_file_resolve_comment_details` is true.

        :rtype: FileResolveCommentDetails
        """
        ...
    
    def get_file_unlike_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_file_unlike_comment_details` is true.

        :rtype: FileUnlikeCommentDetails
        """
        ...
    
    def get_file_unresolve_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_file_unresolve_comment_details` is true.

        :rtype: FileUnresolveCommentDetails
        """
        ...
    
    def get_governance_policy_add_folders_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_add_folders_details` is true.

        :rtype: GovernancePolicyAddFoldersDetails
        """
        ...
    
    def get_governance_policy_add_folder_failed_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_add_folder_failed_details` is true.

        :rtype: GovernancePolicyAddFolderFailedDetails
        """
        ...
    
    def get_governance_policy_content_disposed_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_content_disposed_details` is true.

        :rtype: GovernancePolicyContentDisposedDetails
        """
        ...
    
    def get_governance_policy_create_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_create_details` is true.

        :rtype: GovernancePolicyCreateDetails
        """
        ...
    
    def get_governance_policy_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_delete_details` is true.

        :rtype: GovernancePolicyDeleteDetails
        """
        ...
    
    def get_governance_policy_edit_details_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_edit_details_details` is true.

        :rtype: GovernancePolicyEditDetailsDetails
        """
        ...
    
    def get_governance_policy_edit_duration_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_edit_duration_details` is true.

        :rtype: GovernancePolicyEditDurationDetails
        """
        ...
    
    def get_governance_policy_export_created_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_export_created_details` is true.

        :rtype: GovernancePolicyExportCreatedDetails
        """
        ...
    
    def get_governance_policy_export_removed_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_export_removed_details` is true.

        :rtype: GovernancePolicyExportRemovedDetails
        """
        ...
    
    def get_governance_policy_remove_folders_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_remove_folders_details` is true.

        :rtype: GovernancePolicyRemoveFoldersDetails
        """
        ...
    
    def get_governance_policy_report_created_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_report_created_details` is true.

        :rtype: GovernancePolicyReportCreatedDetails
        """
        ...
    
    def get_governance_policy_zip_part_downloaded_details(self): # -> None:
        """
        Only call this if :meth:`is_governance_policy_zip_part_downloaded_details` is true.

        :rtype: GovernancePolicyZipPartDownloadedDetails
        """
        ...
    
    def get_legal_holds_activate_a_hold_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_activate_a_hold_details` is true.

        :rtype: LegalHoldsActivateAHoldDetails
        """
        ...
    
    def get_legal_holds_add_members_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_add_members_details` is true.

        :rtype: LegalHoldsAddMembersDetails
        """
        ...
    
    def get_legal_holds_change_hold_details_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_change_hold_details_details` is true.

        :rtype: LegalHoldsChangeHoldDetailsDetails
        """
        ...
    
    def get_legal_holds_change_hold_name_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_change_hold_name_details` is true.

        :rtype: LegalHoldsChangeHoldNameDetails
        """
        ...
    
    def get_legal_holds_export_a_hold_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_export_a_hold_details` is true.

        :rtype: LegalHoldsExportAHoldDetails
        """
        ...
    
    def get_legal_holds_export_cancelled_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_export_cancelled_details` is true.

        :rtype: LegalHoldsExportCancelledDetails
        """
        ...
    
    def get_legal_holds_export_downloaded_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_export_downloaded_details` is true.

        :rtype: LegalHoldsExportDownloadedDetails
        """
        ...
    
    def get_legal_holds_export_removed_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_export_removed_details` is true.

        :rtype: LegalHoldsExportRemovedDetails
        """
        ...
    
    def get_legal_holds_release_a_hold_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_release_a_hold_details` is true.

        :rtype: LegalHoldsReleaseAHoldDetails
        """
        ...
    
    def get_legal_holds_remove_members_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_remove_members_details` is true.

        :rtype: LegalHoldsRemoveMembersDetails
        """
        ...
    
    def get_legal_holds_report_a_hold_details(self): # -> None:
        """
        Only call this if :meth:`is_legal_holds_report_a_hold_details` is true.

        :rtype: LegalHoldsReportAHoldDetails
        """
        ...
    
    def get_device_change_ip_desktop_details(self): # -> None:
        """
        Only call this if :meth:`is_device_change_ip_desktop_details` is true.

        :rtype: DeviceChangeIpDesktopDetails
        """
        ...
    
    def get_device_change_ip_mobile_details(self): # -> None:
        """
        Only call this if :meth:`is_device_change_ip_mobile_details` is true.

        :rtype: DeviceChangeIpMobileDetails
        """
        ...
    
    def get_device_change_ip_web_details(self): # -> None:
        """
        Only call this if :meth:`is_device_change_ip_web_details` is true.

        :rtype: DeviceChangeIpWebDetails
        """
        ...
    
    def get_device_delete_on_unlink_fail_details(self): # -> None:
        """
        Only call this if :meth:`is_device_delete_on_unlink_fail_details` is true.

        :rtype: DeviceDeleteOnUnlinkFailDetails
        """
        ...
    
    def get_device_delete_on_unlink_success_details(self): # -> None:
        """
        Only call this if :meth:`is_device_delete_on_unlink_success_details` is true.

        :rtype: DeviceDeleteOnUnlinkSuccessDetails
        """
        ...
    
    def get_device_link_fail_details(self): # -> None:
        """
        Only call this if :meth:`is_device_link_fail_details` is true.

        :rtype: DeviceLinkFailDetails
        """
        ...
    
    def get_device_link_success_details(self): # -> None:
        """
        Only call this if :meth:`is_device_link_success_details` is true.

        :rtype: DeviceLinkSuccessDetails
        """
        ...
    
    def get_device_management_disabled_details(self): # -> None:
        """
        Only call this if :meth:`is_device_management_disabled_details` is true.

        :rtype: DeviceManagementDisabledDetails
        """
        ...
    
    def get_device_management_enabled_details(self): # -> None:
        """
        Only call this if :meth:`is_device_management_enabled_details` is true.

        :rtype: DeviceManagementEnabledDetails
        """
        ...
    
    def get_device_sync_backup_status_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_device_sync_backup_status_changed_details` is true.

        :rtype: DeviceSyncBackupStatusChangedDetails
        """
        ...
    
    def get_device_unlink_details(self): # -> None:
        """
        Only call this if :meth:`is_device_unlink_details` is true.

        :rtype: DeviceUnlinkDetails
        """
        ...
    
    def get_dropbox_passwords_exported_details(self): # -> None:
        """
        Only call this if :meth:`is_dropbox_passwords_exported_details` is true.

        :rtype: DropboxPasswordsExportedDetails
        """
        ...
    
    def get_dropbox_passwords_new_device_enrolled_details(self): # -> None:
        """
        Only call this if :meth:`is_dropbox_passwords_new_device_enrolled_details` is true.

        :rtype: DropboxPasswordsNewDeviceEnrolledDetails
        """
        ...
    
    def get_emm_refresh_auth_token_details(self): # -> None:
        """
        Only call this if :meth:`is_emm_refresh_auth_token_details` is true.

        :rtype: EmmRefreshAuthTokenDetails
        """
        ...
    
    def get_external_drive_backup_eligibility_status_checked_details(self): # -> None:
        """
        Only call this if :meth:`is_external_drive_backup_eligibility_status_checked_details` is true.

        :rtype: ExternalDriveBackupEligibilityStatusCheckedDetails
        """
        ...
    
    def get_external_drive_backup_status_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_external_drive_backup_status_changed_details` is true.

        :rtype: ExternalDriveBackupStatusChangedDetails
        """
        ...
    
    def get_account_capture_change_availability_details(self): # -> None:
        """
        Only call this if :meth:`is_account_capture_change_availability_details` is true.

        :rtype: AccountCaptureChangeAvailabilityDetails
        """
        ...
    
    def get_account_capture_migrate_account_details(self): # -> None:
        """
        Only call this if :meth:`is_account_capture_migrate_account_details` is true.

        :rtype: AccountCaptureMigrateAccountDetails
        """
        ...
    
    def get_account_capture_notification_emails_sent_details(self): # -> None:
        """
        Only call this if :meth:`is_account_capture_notification_emails_sent_details` is true.

        :rtype: AccountCaptureNotificationEmailsSentDetails
        """
        ...
    
    def get_account_capture_relinquish_account_details(self): # -> None:
        """
        Only call this if :meth:`is_account_capture_relinquish_account_details` is true.

        :rtype: AccountCaptureRelinquishAccountDetails
        """
        ...
    
    def get_disabled_domain_invites_details(self): # -> None:
        """
        Only call this if :meth:`is_disabled_domain_invites_details` is true.

        :rtype: DisabledDomainInvitesDetails
        """
        ...
    
    def get_domain_invites_approve_request_to_join_team_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_invites_approve_request_to_join_team_details` is true.

        :rtype: DomainInvitesApproveRequestToJoinTeamDetails
        """
        ...
    
    def get_domain_invites_decline_request_to_join_team_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_invites_decline_request_to_join_team_details` is true.

        :rtype: DomainInvitesDeclineRequestToJoinTeamDetails
        """
        ...
    
    def get_domain_invites_email_existing_users_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_invites_email_existing_users_details` is true.

        :rtype: DomainInvitesEmailExistingUsersDetails
        """
        ...
    
    def get_domain_invites_request_to_join_team_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_invites_request_to_join_team_details` is true.

        :rtype: DomainInvitesRequestToJoinTeamDetails
        """
        ...
    
    def get_domain_invites_set_invite_new_user_pref_to_no_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_invites_set_invite_new_user_pref_to_no_details` is true.

        :rtype: DomainInvitesSetInviteNewUserPrefToNoDetails
        """
        ...
    
    def get_domain_invites_set_invite_new_user_pref_to_yes_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_invites_set_invite_new_user_pref_to_yes_details` is true.

        :rtype: DomainInvitesSetInviteNewUserPrefToYesDetails
        """
        ...
    
    def get_domain_verification_add_domain_fail_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_verification_add_domain_fail_details` is true.

        :rtype: DomainVerificationAddDomainFailDetails
        """
        ...
    
    def get_domain_verification_add_domain_success_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_verification_add_domain_success_details` is true.

        :rtype: DomainVerificationAddDomainSuccessDetails
        """
        ...
    
    def get_domain_verification_remove_domain_details(self): # -> None:
        """
        Only call this if :meth:`is_domain_verification_remove_domain_details` is true.

        :rtype: DomainVerificationRemoveDomainDetails
        """
        ...
    
    def get_enabled_domain_invites_details(self): # -> None:
        """
        Only call this if :meth:`is_enabled_domain_invites_details` is true.

        :rtype: EnabledDomainInvitesDetails
        """
        ...
    
    def get_team_encryption_key_cancel_key_deletion_details(self): # -> None:
        """
        Only call this if :meth:`is_team_encryption_key_cancel_key_deletion_details` is true.

        :rtype: TeamEncryptionKeyCancelKeyDeletionDetails
        """
        ...
    
    def get_team_encryption_key_create_key_details(self): # -> None:
        """
        Only call this if :meth:`is_team_encryption_key_create_key_details` is true.

        :rtype: TeamEncryptionKeyCreateKeyDetails
        """
        ...
    
    def get_team_encryption_key_delete_key_details(self): # -> None:
        """
        Only call this if :meth:`is_team_encryption_key_delete_key_details` is true.

        :rtype: TeamEncryptionKeyDeleteKeyDetails
        """
        ...
    
    def get_team_encryption_key_disable_key_details(self): # -> None:
        """
        Only call this if :meth:`is_team_encryption_key_disable_key_details` is true.

        :rtype: TeamEncryptionKeyDisableKeyDetails
        """
        ...
    
    def get_team_encryption_key_enable_key_details(self): # -> None:
        """
        Only call this if :meth:`is_team_encryption_key_enable_key_details` is true.

        :rtype: TeamEncryptionKeyEnableKeyDetails
        """
        ...
    
    def get_team_encryption_key_rotate_key_details(self): # -> None:
        """
        Only call this if :meth:`is_team_encryption_key_rotate_key_details` is true.

        :rtype: TeamEncryptionKeyRotateKeyDetails
        """
        ...
    
    def get_team_encryption_key_schedule_key_deletion_details(self): # -> None:
        """
        Only call this if :meth:`is_team_encryption_key_schedule_key_deletion_details` is true.

        :rtype: TeamEncryptionKeyScheduleKeyDeletionDetails
        """
        ...
    
    def get_apply_naming_convention_details(self): # -> None:
        """
        Only call this if :meth:`is_apply_naming_convention_details` is true.

        :rtype: ApplyNamingConventionDetails
        """
        ...
    
    def get_create_folder_details(self): # -> None:
        """
        Only call this if :meth:`is_create_folder_details` is true.

        :rtype: CreateFolderDetails
        """
        ...
    
    def get_file_add_details(self): # -> None:
        """
        Only call this if :meth:`is_file_add_details` is true.

        :rtype: FileAddDetails
        """
        ...
    
    def get_file_add_from_automation_details(self): # -> None:
        """
        Only call this if :meth:`is_file_add_from_automation_details` is true.

        :rtype: FileAddFromAutomationDetails
        """
        ...
    
    def get_file_copy_details(self): # -> None:
        """
        Only call this if :meth:`is_file_copy_details` is true.

        :rtype: FileCopyDetails
        """
        ...
    
    def get_file_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_file_delete_details` is true.

        :rtype: FileDeleteDetails
        """
        ...
    
    def get_file_download_details(self): # -> None:
        """
        Only call this if :meth:`is_file_download_details` is true.

        :rtype: FileDownloadDetails
        """
        ...
    
    def get_file_edit_details(self): # -> None:
        """
        Only call this if :meth:`is_file_edit_details` is true.

        :rtype: FileEditDetails
        """
        ...
    
    def get_file_get_copy_reference_details(self): # -> None:
        """
        Only call this if :meth:`is_file_get_copy_reference_details` is true.

        :rtype: FileGetCopyReferenceDetails
        """
        ...
    
    def get_file_locking_lock_status_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_file_locking_lock_status_changed_details` is true.

        :rtype: FileLockingLockStatusChangedDetails
        """
        ...
    
    def get_file_move_details(self): # -> None:
        """
        Only call this if :meth:`is_file_move_details` is true.

        :rtype: FileMoveDetails
        """
        ...
    
    def get_file_permanently_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_file_permanently_delete_details` is true.

        :rtype: FilePermanentlyDeleteDetails
        """
        ...
    
    def get_file_preview_details(self): # -> None:
        """
        Only call this if :meth:`is_file_preview_details` is true.

        :rtype: FilePreviewDetails
        """
        ...
    
    def get_file_rename_details(self): # -> None:
        """
        Only call this if :meth:`is_file_rename_details` is true.

        :rtype: FileRenameDetails
        """
        ...
    
    def get_file_restore_details(self): # -> None:
        """
        Only call this if :meth:`is_file_restore_details` is true.

        :rtype: FileRestoreDetails
        """
        ...
    
    def get_file_revert_details(self): # -> None:
        """
        Only call this if :meth:`is_file_revert_details` is true.

        :rtype: FileRevertDetails
        """
        ...
    
    def get_file_rollback_changes_details(self): # -> None:
        """
        Only call this if :meth:`is_file_rollback_changes_details` is true.

        :rtype: FileRollbackChangesDetails
        """
        ...
    
    def get_file_save_copy_reference_details(self): # -> None:
        """
        Only call this if :meth:`is_file_save_copy_reference_details` is true.

        :rtype: FileSaveCopyReferenceDetails
        """
        ...
    
    def get_folder_overview_description_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_folder_overview_description_changed_details` is true.

        :rtype: FolderOverviewDescriptionChangedDetails
        """
        ...
    
    def get_folder_overview_item_pinned_details(self): # -> None:
        """
        Only call this if :meth:`is_folder_overview_item_pinned_details` is true.

        :rtype: FolderOverviewItemPinnedDetails
        """
        ...
    
    def get_folder_overview_item_unpinned_details(self): # -> None:
        """
        Only call this if :meth:`is_folder_overview_item_unpinned_details` is true.

        :rtype: FolderOverviewItemUnpinnedDetails
        """
        ...
    
    def get_object_label_added_details(self): # -> None:
        """
        Only call this if :meth:`is_object_label_added_details` is true.

        :rtype: ObjectLabelAddedDetails
        """
        ...
    
    def get_object_label_removed_details(self): # -> None:
        """
        Only call this if :meth:`is_object_label_removed_details` is true.

        :rtype: ObjectLabelRemovedDetails
        """
        ...
    
    def get_object_label_updated_value_details(self): # -> None:
        """
        Only call this if :meth:`is_object_label_updated_value_details` is true.

        :rtype: ObjectLabelUpdatedValueDetails
        """
        ...
    
    def get_organize_folder_with_tidy_details(self): # -> None:
        """
        Only call this if :meth:`is_organize_folder_with_tidy_details` is true.

        :rtype: OrganizeFolderWithTidyDetails
        """
        ...
    
    def get_replay_file_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_replay_file_delete_details` is true.

        :rtype: ReplayFileDeleteDetails
        """
        ...
    
    def get_rewind_folder_details(self): # -> None:
        """
        Only call this if :meth:`is_rewind_folder_details` is true.

        :rtype: RewindFolderDetails
        """
        ...
    
    def get_undo_naming_convention_details(self): # -> None:
        """
        Only call this if :meth:`is_undo_naming_convention_details` is true.

        :rtype: UndoNamingConventionDetails
        """
        ...
    
    def get_undo_organize_folder_with_tidy_details(self): # -> None:
        """
        Only call this if :meth:`is_undo_organize_folder_with_tidy_details` is true.

        :rtype: UndoOrganizeFolderWithTidyDetails
        """
        ...
    
    def get_user_tags_added_details(self): # -> None:
        """
        Only call this if :meth:`is_user_tags_added_details` is true.

        :rtype: UserTagsAddedDetails
        """
        ...
    
    def get_user_tags_removed_details(self): # -> None:
        """
        Only call this if :meth:`is_user_tags_removed_details` is true.

        :rtype: UserTagsRemovedDetails
        """
        ...
    
    def get_email_ingest_receive_file_details(self): # -> None:
        """
        Only call this if :meth:`is_email_ingest_receive_file_details` is true.

        :rtype: EmailIngestReceiveFileDetails
        """
        ...
    
    def get_file_request_change_details(self): # -> None:
        """
        Only call this if :meth:`is_file_request_change_details` is true.

        :rtype: FileRequestChangeDetails
        """
        ...
    
    def get_file_request_close_details(self): # -> None:
        """
        Only call this if :meth:`is_file_request_close_details` is true.

        :rtype: FileRequestCloseDetails
        """
        ...
    
    def get_file_request_create_details(self): # -> None:
        """
        Only call this if :meth:`is_file_request_create_details` is true.

        :rtype: FileRequestCreateDetails
        """
        ...
    
    def get_file_request_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_file_request_delete_details` is true.

        :rtype: FileRequestDeleteDetails
        """
        ...
    
    def get_file_request_receive_file_details(self): # -> None:
        """
        Only call this if :meth:`is_file_request_receive_file_details` is true.

        :rtype: FileRequestReceiveFileDetails
        """
        ...
    
    def get_group_add_external_id_details(self): # -> None:
        """
        Only call this if :meth:`is_group_add_external_id_details` is true.

        :rtype: GroupAddExternalIdDetails
        """
        ...
    
    def get_group_add_member_details(self): # -> None:
        """
        Only call this if :meth:`is_group_add_member_details` is true.

        :rtype: GroupAddMemberDetails
        """
        ...
    
    def get_group_change_external_id_details(self): # -> None:
        """
        Only call this if :meth:`is_group_change_external_id_details` is true.

        :rtype: GroupChangeExternalIdDetails
        """
        ...
    
    def get_group_change_management_type_details(self): # -> None:
        """
        Only call this if :meth:`is_group_change_management_type_details` is true.

        :rtype: GroupChangeManagementTypeDetails
        """
        ...
    
    def get_group_change_member_role_details(self): # -> None:
        """
        Only call this if :meth:`is_group_change_member_role_details` is true.

        :rtype: GroupChangeMemberRoleDetails
        """
        ...
    
    def get_group_create_details(self): # -> None:
        """
        Only call this if :meth:`is_group_create_details` is true.

        :rtype: GroupCreateDetails
        """
        ...
    
    def get_group_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_group_delete_details` is true.

        :rtype: GroupDeleteDetails
        """
        ...
    
    def get_group_description_updated_details(self): # -> None:
        """
        Only call this if :meth:`is_group_description_updated_details` is true.

        :rtype: GroupDescriptionUpdatedDetails
        """
        ...
    
    def get_group_join_policy_updated_details(self): # -> None:
        """
        Only call this if :meth:`is_group_join_policy_updated_details` is true.

        :rtype: GroupJoinPolicyUpdatedDetails
        """
        ...
    
    def get_group_moved_details(self): # -> None:
        """
        Only call this if :meth:`is_group_moved_details` is true.

        :rtype: GroupMovedDetails
        """
        ...
    
    def get_group_remove_external_id_details(self): # -> None:
        """
        Only call this if :meth:`is_group_remove_external_id_details` is true.

        :rtype: GroupRemoveExternalIdDetails
        """
        ...
    
    def get_group_remove_member_details(self): # -> None:
        """
        Only call this if :meth:`is_group_remove_member_details` is true.

        :rtype: GroupRemoveMemberDetails
        """
        ...
    
    def get_group_rename_details(self): # -> None:
        """
        Only call this if :meth:`is_group_rename_details` is true.

        :rtype: GroupRenameDetails
        """
        ...
    
    def get_account_lock_or_unlocked_details(self): # -> None:
        """
        Only call this if :meth:`is_account_lock_or_unlocked_details` is true.

        :rtype: AccountLockOrUnlockedDetails
        """
        ...
    
    def get_emm_error_details(self): # -> None:
        """
        Only call this if :meth:`is_emm_error_details` is true.

        :rtype: EmmErrorDetails
        """
        ...
    
    def get_guest_admin_signed_in_via_trusted_teams_details(self): # -> None:
        """
        Only call this if :meth:`is_guest_admin_signed_in_via_trusted_teams_details` is true.

        :rtype: GuestAdminSignedInViaTrustedTeamsDetails
        """
        ...
    
    def get_guest_admin_signed_out_via_trusted_teams_details(self): # -> None:
        """
        Only call this if :meth:`is_guest_admin_signed_out_via_trusted_teams_details` is true.

        :rtype: GuestAdminSignedOutViaTrustedTeamsDetails
        """
        ...
    
    def get_login_fail_details(self): # -> None:
        """
        Only call this if :meth:`is_login_fail_details` is true.

        :rtype: LoginFailDetails
        """
        ...
    
    def get_login_success_details(self): # -> None:
        """
        Only call this if :meth:`is_login_success_details` is true.

        :rtype: LoginSuccessDetails
        """
        ...
    
    def get_logout_details(self): # -> None:
        """
        Only call this if :meth:`is_logout_details` is true.

        :rtype: LogoutDetails
        """
        ...
    
    def get_reseller_support_session_end_details(self): # -> None:
        """
        Only call this if :meth:`is_reseller_support_session_end_details` is true.

        :rtype: ResellerSupportSessionEndDetails
        """
        ...
    
    def get_reseller_support_session_start_details(self): # -> None:
        """
        Only call this if :meth:`is_reseller_support_session_start_details` is true.

        :rtype: ResellerSupportSessionStartDetails
        """
        ...
    
    def get_sign_in_as_session_end_details(self): # -> None:
        """
        Only call this if :meth:`is_sign_in_as_session_end_details` is true.

        :rtype: SignInAsSessionEndDetails
        """
        ...
    
    def get_sign_in_as_session_start_details(self): # -> None:
        """
        Only call this if :meth:`is_sign_in_as_session_start_details` is true.

        :rtype: SignInAsSessionStartDetails
        """
        ...
    
    def get_sso_error_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_error_details` is true.

        :rtype: SsoErrorDetails
        """
        ...
    
    def get_backup_admin_invitation_sent_details(self): # -> None:
        """
        Only call this if :meth:`is_backup_admin_invitation_sent_details` is true.

        :rtype: BackupAdminInvitationSentDetails
        """
        ...
    
    def get_backup_invitation_opened_details(self): # -> None:
        """
        Only call this if :meth:`is_backup_invitation_opened_details` is true.

        :rtype: BackupInvitationOpenedDetails
        """
        ...
    
    def get_create_team_invite_link_details(self): # -> None:
        """
        Only call this if :meth:`is_create_team_invite_link_details` is true.

        :rtype: CreateTeamInviteLinkDetails
        """
        ...
    
    def get_delete_team_invite_link_details(self): # -> None:
        """
        Only call this if :meth:`is_delete_team_invite_link_details` is true.

        :rtype: DeleteTeamInviteLinkDetails
        """
        ...
    
    def get_member_add_external_id_details(self): # -> None:
        """
        Only call this if :meth:`is_member_add_external_id_details` is true.

        :rtype: MemberAddExternalIdDetails
        """
        ...
    
    def get_member_add_name_details(self): # -> None:
        """
        Only call this if :meth:`is_member_add_name_details` is true.

        :rtype: MemberAddNameDetails
        """
        ...
    
    def get_member_change_admin_role_details(self): # -> None:
        """
        Only call this if :meth:`is_member_change_admin_role_details` is true.

        :rtype: MemberChangeAdminRoleDetails
        """
        ...
    
    def get_member_change_email_details(self): # -> None:
        """
        Only call this if :meth:`is_member_change_email_details` is true.

        :rtype: MemberChangeEmailDetails
        """
        ...
    
    def get_member_change_external_id_details(self): # -> None:
        """
        Only call this if :meth:`is_member_change_external_id_details` is true.

        :rtype: MemberChangeExternalIdDetails
        """
        ...
    
    def get_member_change_membership_type_details(self): # -> None:
        """
        Only call this if :meth:`is_member_change_membership_type_details` is true.

        :rtype: MemberChangeMembershipTypeDetails
        """
        ...
    
    def get_member_change_name_details(self): # -> None:
        """
        Only call this if :meth:`is_member_change_name_details` is true.

        :rtype: MemberChangeNameDetails
        """
        ...
    
    def get_member_change_reseller_role_details(self): # -> None:
        """
        Only call this if :meth:`is_member_change_reseller_role_details` is true.

        :rtype: MemberChangeResellerRoleDetails
        """
        ...
    
    def get_member_change_status_details(self): # -> None:
        """
        Only call this if :meth:`is_member_change_status_details` is true.

        :rtype: MemberChangeStatusDetails
        """
        ...
    
    def get_member_delete_manual_contacts_details(self): # -> None:
        """
        Only call this if :meth:`is_member_delete_manual_contacts_details` is true.

        :rtype: MemberDeleteManualContactsDetails
        """
        ...
    
    def get_member_delete_profile_photo_details(self): # -> None:
        """
        Only call this if :meth:`is_member_delete_profile_photo_details` is true.

        :rtype: MemberDeleteProfilePhotoDetails
        """
        ...
    
    def get_member_permanently_delete_account_contents_details(self): # -> None:
        """
        Only call this if :meth:`is_member_permanently_delete_account_contents_details` is true.

        :rtype: MemberPermanentlyDeleteAccountContentsDetails
        """
        ...
    
    def get_member_remove_external_id_details(self): # -> None:
        """
        Only call this if :meth:`is_member_remove_external_id_details` is true.

        :rtype: MemberRemoveExternalIdDetails
        """
        ...
    
    def get_member_set_profile_photo_details(self): # -> None:
        """
        Only call this if :meth:`is_member_set_profile_photo_details` is true.

        :rtype: MemberSetProfilePhotoDetails
        """
        ...
    
    def get_member_space_limits_add_custom_quota_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_add_custom_quota_details` is true.

        :rtype: MemberSpaceLimitsAddCustomQuotaDetails
        """
        ...
    
    def get_member_space_limits_change_custom_quota_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_change_custom_quota_details` is true.

        :rtype: MemberSpaceLimitsChangeCustomQuotaDetails
        """
        ...
    
    def get_member_space_limits_change_status_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_change_status_details` is true.

        :rtype: MemberSpaceLimitsChangeStatusDetails
        """
        ...
    
    def get_member_space_limits_remove_custom_quota_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_remove_custom_quota_details` is true.

        :rtype: MemberSpaceLimitsRemoveCustomQuotaDetails
        """
        ...
    
    def get_member_suggest_details(self): # -> None:
        """
        Only call this if :meth:`is_member_suggest_details` is true.

        :rtype: MemberSuggestDetails
        """
        ...
    
    def get_member_transfer_account_contents_details(self): # -> None:
        """
        Only call this if :meth:`is_member_transfer_account_contents_details` is true.

        :rtype: MemberTransferAccountContentsDetails
        """
        ...
    
    def get_pending_secondary_email_added_details(self): # -> None:
        """
        Only call this if :meth:`is_pending_secondary_email_added_details` is true.

        :rtype: PendingSecondaryEmailAddedDetails
        """
        ...
    
    def get_secondary_email_deleted_details(self): # -> None:
        """
        Only call this if :meth:`is_secondary_email_deleted_details` is true.

        :rtype: SecondaryEmailDeletedDetails
        """
        ...
    
    def get_secondary_email_verified_details(self): # -> None:
        """
        Only call this if :meth:`is_secondary_email_verified_details` is true.

        :rtype: SecondaryEmailVerifiedDetails
        """
        ...
    
    def get_secondary_mails_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_secondary_mails_policy_changed_details` is true.

        :rtype: SecondaryMailsPolicyChangedDetails
        """
        ...
    
    def get_binder_add_page_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_add_page_details` is true.

        :rtype: BinderAddPageDetails
        """
        ...
    
    def get_binder_add_section_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_add_section_details` is true.

        :rtype: BinderAddSectionDetails
        """
        ...
    
    def get_binder_remove_page_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_remove_page_details` is true.

        :rtype: BinderRemovePageDetails
        """
        ...
    
    def get_binder_remove_section_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_remove_section_details` is true.

        :rtype: BinderRemoveSectionDetails
        """
        ...
    
    def get_binder_rename_page_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_rename_page_details` is true.

        :rtype: BinderRenamePageDetails
        """
        ...
    
    def get_binder_rename_section_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_rename_section_details` is true.

        :rtype: BinderRenameSectionDetails
        """
        ...
    
    def get_binder_reorder_page_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_reorder_page_details` is true.

        :rtype: BinderReorderPageDetails
        """
        ...
    
    def get_binder_reorder_section_details(self): # -> None:
        """
        Only call this if :meth:`is_binder_reorder_section_details` is true.

        :rtype: BinderReorderSectionDetails
        """
        ...
    
    def get_paper_content_add_member_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_add_member_details` is true.

        :rtype: PaperContentAddMemberDetails
        """
        ...
    
    def get_paper_content_add_to_folder_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_add_to_folder_details` is true.

        :rtype: PaperContentAddToFolderDetails
        """
        ...
    
    def get_paper_content_archive_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_archive_details` is true.

        :rtype: PaperContentArchiveDetails
        """
        ...
    
    def get_paper_content_create_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_create_details` is true.

        :rtype: PaperContentCreateDetails
        """
        ...
    
    def get_paper_content_permanently_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_permanently_delete_details` is true.

        :rtype: PaperContentPermanentlyDeleteDetails
        """
        ...
    
    def get_paper_content_remove_from_folder_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_remove_from_folder_details` is true.

        :rtype: PaperContentRemoveFromFolderDetails
        """
        ...
    
    def get_paper_content_remove_member_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_remove_member_details` is true.

        :rtype: PaperContentRemoveMemberDetails
        """
        ...
    
    def get_paper_content_rename_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_rename_details` is true.

        :rtype: PaperContentRenameDetails
        """
        ...
    
    def get_paper_content_restore_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_content_restore_details` is true.

        :rtype: PaperContentRestoreDetails
        """
        ...
    
    def get_paper_doc_add_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_add_comment_details` is true.

        :rtype: PaperDocAddCommentDetails
        """
        ...
    
    def get_paper_doc_change_member_role_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_change_member_role_details` is true.

        :rtype: PaperDocChangeMemberRoleDetails
        """
        ...
    
    def get_paper_doc_change_sharing_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_change_sharing_policy_details` is true.

        :rtype: PaperDocChangeSharingPolicyDetails
        """
        ...
    
    def get_paper_doc_change_subscription_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_change_subscription_details` is true.

        :rtype: PaperDocChangeSubscriptionDetails
        """
        ...
    
    def get_paper_doc_deleted_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_deleted_details` is true.

        :rtype: PaperDocDeletedDetails
        """
        ...
    
    def get_paper_doc_delete_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_delete_comment_details` is true.

        :rtype: PaperDocDeleteCommentDetails
        """
        ...
    
    def get_paper_doc_download_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_download_details` is true.

        :rtype: PaperDocDownloadDetails
        """
        ...
    
    def get_paper_doc_edit_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_edit_details` is true.

        :rtype: PaperDocEditDetails
        """
        ...
    
    def get_paper_doc_edit_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_edit_comment_details` is true.

        :rtype: PaperDocEditCommentDetails
        """
        ...
    
    def get_paper_doc_followed_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_followed_details` is true.

        :rtype: PaperDocFollowedDetails
        """
        ...
    
    def get_paper_doc_mention_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_mention_details` is true.

        :rtype: PaperDocMentionDetails
        """
        ...
    
    def get_paper_doc_ownership_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_ownership_changed_details` is true.

        :rtype: PaperDocOwnershipChangedDetails
        """
        ...
    
    def get_paper_doc_request_access_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_request_access_details` is true.

        :rtype: PaperDocRequestAccessDetails
        """
        ...
    
    def get_paper_doc_resolve_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_resolve_comment_details` is true.

        :rtype: PaperDocResolveCommentDetails
        """
        ...
    
    def get_paper_doc_revert_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_revert_details` is true.

        :rtype: PaperDocRevertDetails
        """
        ...
    
    def get_paper_doc_slack_share_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_slack_share_details` is true.

        :rtype: PaperDocSlackShareDetails
        """
        ...
    
    def get_paper_doc_team_invite_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_team_invite_details` is true.

        :rtype: PaperDocTeamInviteDetails
        """
        ...
    
    def get_paper_doc_trashed_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_trashed_details` is true.

        :rtype: PaperDocTrashedDetails
        """
        ...
    
    def get_paper_doc_unresolve_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_unresolve_comment_details` is true.

        :rtype: PaperDocUnresolveCommentDetails
        """
        ...
    
    def get_paper_doc_untrashed_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_untrashed_details` is true.

        :rtype: PaperDocUntrashedDetails
        """
        ...
    
    def get_paper_doc_view_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_doc_view_details` is true.

        :rtype: PaperDocViewDetails
        """
        ...
    
    def get_paper_external_view_allow_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_external_view_allow_details` is true.

        :rtype: PaperExternalViewAllowDetails
        """
        ...
    
    def get_paper_external_view_default_team_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_external_view_default_team_details` is true.

        :rtype: PaperExternalViewDefaultTeamDetails
        """
        ...
    
    def get_paper_external_view_forbid_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_external_view_forbid_details` is true.

        :rtype: PaperExternalViewForbidDetails
        """
        ...
    
    def get_paper_folder_change_subscription_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_folder_change_subscription_details` is true.

        :rtype: PaperFolderChangeSubscriptionDetails
        """
        ...
    
    def get_paper_folder_deleted_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_folder_deleted_details` is true.

        :rtype: PaperFolderDeletedDetails
        """
        ...
    
    def get_paper_folder_followed_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_folder_followed_details` is true.

        :rtype: PaperFolderFollowedDetails
        """
        ...
    
    def get_paper_folder_team_invite_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_folder_team_invite_details` is true.

        :rtype: PaperFolderTeamInviteDetails
        """
        ...
    
    def get_paper_published_link_change_permission_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_published_link_change_permission_details` is true.

        :rtype: PaperPublishedLinkChangePermissionDetails
        """
        ...
    
    def get_paper_published_link_create_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_published_link_create_details` is true.

        :rtype: PaperPublishedLinkCreateDetails
        """
        ...
    
    def get_paper_published_link_disabled_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_published_link_disabled_details` is true.

        :rtype: PaperPublishedLinkDisabledDetails
        """
        ...
    
    def get_paper_published_link_view_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_published_link_view_details` is true.

        :rtype: PaperPublishedLinkViewDetails
        """
        ...
    
    def get_password_change_details(self): # -> None:
        """
        Only call this if :meth:`is_password_change_details` is true.

        :rtype: PasswordChangeDetails
        """
        ...
    
    def get_password_reset_details(self): # -> None:
        """
        Only call this if :meth:`is_password_reset_details` is true.

        :rtype: PasswordResetDetails
        """
        ...
    
    def get_password_reset_all_details(self): # -> None:
        """
        Only call this if :meth:`is_password_reset_all_details` is true.

        :rtype: PasswordResetAllDetails
        """
        ...
    
    def get_classification_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_classification_create_report_details` is true.

        :rtype: ClassificationCreateReportDetails
        """
        ...
    
    def get_classification_create_report_fail_details(self): # -> None:
        """
        Only call this if :meth:`is_classification_create_report_fail_details` is true.

        :rtype: ClassificationCreateReportFailDetails
        """
        ...
    
    def get_emm_create_exceptions_report_details(self): # -> None:
        """
        Only call this if :meth:`is_emm_create_exceptions_report_details` is true.

        :rtype: EmmCreateExceptionsReportDetails
        """
        ...
    
    def get_emm_create_usage_report_details(self): # -> None:
        """
        Only call this if :meth:`is_emm_create_usage_report_details` is true.

        :rtype: EmmCreateUsageReportDetails
        """
        ...
    
    def get_export_members_report_details(self): # -> None:
        """
        Only call this if :meth:`is_export_members_report_details` is true.

        :rtype: ExportMembersReportDetails
        """
        ...
    
    def get_export_members_report_fail_details(self): # -> None:
        """
        Only call this if :meth:`is_export_members_report_fail_details` is true.

        :rtype: ExportMembersReportFailDetails
        """
        ...
    
    def get_external_sharing_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_external_sharing_create_report_details` is true.

        :rtype: ExternalSharingCreateReportDetails
        """
        ...
    
    def get_external_sharing_report_failed_details(self): # -> None:
        """
        Only call this if :meth:`is_external_sharing_report_failed_details` is true.

        :rtype: ExternalSharingReportFailedDetails
        """
        ...
    
    def get_no_expiration_link_gen_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_no_expiration_link_gen_create_report_details` is true.

        :rtype: NoExpirationLinkGenCreateReportDetails
        """
        ...
    
    def get_no_expiration_link_gen_report_failed_details(self): # -> None:
        """
        Only call this if :meth:`is_no_expiration_link_gen_report_failed_details` is true.

        :rtype: NoExpirationLinkGenReportFailedDetails
        """
        ...
    
    def get_no_password_link_gen_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_no_password_link_gen_create_report_details` is true.

        :rtype: NoPasswordLinkGenCreateReportDetails
        """
        ...
    
    def get_no_password_link_gen_report_failed_details(self): # -> None:
        """
        Only call this if :meth:`is_no_password_link_gen_report_failed_details` is true.

        :rtype: NoPasswordLinkGenReportFailedDetails
        """
        ...
    
    def get_no_password_link_view_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_no_password_link_view_create_report_details` is true.

        :rtype: NoPasswordLinkViewCreateReportDetails
        """
        ...
    
    def get_no_password_link_view_report_failed_details(self): # -> None:
        """
        Only call this if :meth:`is_no_password_link_view_report_failed_details` is true.

        :rtype: NoPasswordLinkViewReportFailedDetails
        """
        ...
    
    def get_outdated_link_view_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_outdated_link_view_create_report_details` is true.

        :rtype: OutdatedLinkViewCreateReportDetails
        """
        ...
    
    def get_outdated_link_view_report_failed_details(self): # -> None:
        """
        Only call this if :meth:`is_outdated_link_view_report_failed_details` is true.

        :rtype: OutdatedLinkViewReportFailedDetails
        """
        ...
    
    def get_paper_admin_export_start_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_admin_export_start_details` is true.

        :rtype: PaperAdminExportStartDetails
        """
        ...
    
    def get_ransomware_alert_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_ransomware_alert_create_report_details` is true.

        :rtype: RansomwareAlertCreateReportDetails
        """
        ...
    
    def get_ransomware_alert_create_report_failed_details(self): # -> None:
        """
        Only call this if :meth:`is_ransomware_alert_create_report_failed_details` is true.

        :rtype: RansomwareAlertCreateReportFailedDetails
        """
        ...
    
    def get_smart_sync_create_admin_privilege_report_details(self): # -> None:
        """
        Only call this if :meth:`is_smart_sync_create_admin_privilege_report_details` is true.

        :rtype: SmartSyncCreateAdminPrivilegeReportDetails
        """
        ...
    
    def get_team_activity_create_report_details(self): # -> None:
        """
        Only call this if :meth:`is_team_activity_create_report_details` is true.

        :rtype: TeamActivityCreateReportDetails
        """
        ...
    
    def get_team_activity_create_report_fail_details(self): # -> None:
        """
        Only call this if :meth:`is_team_activity_create_report_fail_details` is true.

        :rtype: TeamActivityCreateReportFailDetails
        """
        ...
    
    def get_collection_share_details(self): # -> None:
        """
        Only call this if :meth:`is_collection_share_details` is true.

        :rtype: CollectionShareDetails
        """
        ...
    
    def get_file_transfers_file_add_details(self): # -> None:
        """
        Only call this if :meth:`is_file_transfers_file_add_details` is true.

        :rtype: FileTransfersFileAddDetails
        """
        ...
    
    def get_file_transfers_transfer_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_file_transfers_transfer_delete_details` is true.

        :rtype: FileTransfersTransferDeleteDetails
        """
        ...
    
    def get_file_transfers_transfer_download_details(self): # -> None:
        """
        Only call this if :meth:`is_file_transfers_transfer_download_details` is true.

        :rtype: FileTransfersTransferDownloadDetails
        """
        ...
    
    def get_file_transfers_transfer_send_details(self): # -> None:
        """
        Only call this if :meth:`is_file_transfers_transfer_send_details` is true.

        :rtype: FileTransfersTransferSendDetails
        """
        ...
    
    def get_file_transfers_transfer_view_details(self): # -> None:
        """
        Only call this if :meth:`is_file_transfers_transfer_view_details` is true.

        :rtype: FileTransfersTransferViewDetails
        """
        ...
    
    def get_note_acl_invite_only_details(self): # -> None:
        """
        Only call this if :meth:`is_note_acl_invite_only_details` is true.

        :rtype: NoteAclInviteOnlyDetails
        """
        ...
    
    def get_note_acl_link_details(self): # -> None:
        """
        Only call this if :meth:`is_note_acl_link_details` is true.

        :rtype: NoteAclLinkDetails
        """
        ...
    
    def get_note_acl_team_link_details(self): # -> None:
        """
        Only call this if :meth:`is_note_acl_team_link_details` is true.

        :rtype: NoteAclTeamLinkDetails
        """
        ...
    
    def get_note_shared_details(self): # -> None:
        """
        Only call this if :meth:`is_note_shared_details` is true.

        :rtype: NoteSharedDetails
        """
        ...
    
    def get_note_share_receive_details(self): # -> None:
        """
        Only call this if :meth:`is_note_share_receive_details` is true.

        :rtype: NoteShareReceiveDetails
        """
        ...
    
    def get_open_note_shared_details(self): # -> None:
        """
        Only call this if :meth:`is_open_note_shared_details` is true.

        :rtype: OpenNoteSharedDetails
        """
        ...
    
    def get_replay_file_shared_link_created_details(self): # -> None:
        """
        Only call this if :meth:`is_replay_file_shared_link_created_details` is true.

        :rtype: ReplayFileSharedLinkCreatedDetails
        """
        ...
    
    def get_replay_file_shared_link_modified_details(self): # -> None:
        """
        Only call this if :meth:`is_replay_file_shared_link_modified_details` is true.

        :rtype: ReplayFileSharedLinkModifiedDetails
        """
        ...
    
    def get_replay_project_team_add_details(self): # -> None:
        """
        Only call this if :meth:`is_replay_project_team_add_details` is true.

        :rtype: ReplayProjectTeamAddDetails
        """
        ...
    
    def get_replay_project_team_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_replay_project_team_delete_details` is true.

        :rtype: ReplayProjectTeamDeleteDetails
        """
        ...
    
    def get_sf_add_group_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_add_group_details` is true.

        :rtype: SfAddGroupDetails
        """
        ...
    
    def get_sf_allow_non_members_to_view_shared_links_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_allow_non_members_to_view_shared_links_details` is true.

        :rtype: SfAllowNonMembersToViewSharedLinksDetails
        """
        ...
    
    def get_sf_external_invite_warn_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_external_invite_warn_details` is true.

        :rtype: SfExternalInviteWarnDetails
        """
        ...
    
    def get_sf_fb_invite_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_fb_invite_details` is true.

        :rtype: SfFbInviteDetails
        """
        ...
    
    def get_sf_fb_invite_change_role_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_fb_invite_change_role_details` is true.

        :rtype: SfFbInviteChangeRoleDetails
        """
        ...
    
    def get_sf_fb_uninvite_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_fb_uninvite_details` is true.

        :rtype: SfFbUninviteDetails
        """
        ...
    
    def get_sf_invite_group_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_invite_group_details` is true.

        :rtype: SfInviteGroupDetails
        """
        ...
    
    def get_sf_team_grant_access_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_team_grant_access_details` is true.

        :rtype: SfTeamGrantAccessDetails
        """
        ...
    
    def get_sf_team_invite_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_team_invite_details` is true.

        :rtype: SfTeamInviteDetails
        """
        ...
    
    def get_sf_team_invite_change_role_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_team_invite_change_role_details` is true.

        :rtype: SfTeamInviteChangeRoleDetails
        """
        ...
    
    def get_sf_team_join_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_team_join_details` is true.

        :rtype: SfTeamJoinDetails
        """
        ...
    
    def get_sf_team_join_from_oob_link_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_team_join_from_oob_link_details` is true.

        :rtype: SfTeamJoinFromOobLinkDetails
        """
        ...
    
    def get_sf_team_uninvite_details(self): # -> None:
        """
        Only call this if :meth:`is_sf_team_uninvite_details` is true.

        :rtype: SfTeamUninviteDetails
        """
        ...
    
    def get_shared_content_add_invitees_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_add_invitees_details` is true.

        :rtype: SharedContentAddInviteesDetails
        """
        ...
    
    def get_shared_content_add_link_expiry_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_add_link_expiry_details` is true.

        :rtype: SharedContentAddLinkExpiryDetails
        """
        ...
    
    def get_shared_content_add_link_password_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_add_link_password_details` is true.

        :rtype: SharedContentAddLinkPasswordDetails
        """
        ...
    
    def get_shared_content_add_member_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_add_member_details` is true.

        :rtype: SharedContentAddMemberDetails
        """
        ...
    
    def get_shared_content_change_downloads_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_change_downloads_policy_details` is true.

        :rtype: SharedContentChangeDownloadsPolicyDetails
        """
        ...
    
    def get_shared_content_change_invitee_role_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_change_invitee_role_details` is true.

        :rtype: SharedContentChangeInviteeRoleDetails
        """
        ...
    
    def get_shared_content_change_link_audience_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_change_link_audience_details` is true.

        :rtype: SharedContentChangeLinkAudienceDetails
        """
        ...
    
    def get_shared_content_change_link_expiry_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_change_link_expiry_details` is true.

        :rtype: SharedContentChangeLinkExpiryDetails
        """
        ...
    
    def get_shared_content_change_link_password_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_change_link_password_details` is true.

        :rtype: SharedContentChangeLinkPasswordDetails
        """
        ...
    
    def get_shared_content_change_member_role_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_change_member_role_details` is true.

        :rtype: SharedContentChangeMemberRoleDetails
        """
        ...
    
    def get_shared_content_change_viewer_info_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_change_viewer_info_policy_details` is true.

        :rtype: SharedContentChangeViewerInfoPolicyDetails
        """
        ...
    
    def get_shared_content_claim_invitation_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_claim_invitation_details` is true.

        :rtype: SharedContentClaimInvitationDetails
        """
        ...
    
    def get_shared_content_copy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_copy_details` is true.

        :rtype: SharedContentCopyDetails
        """
        ...
    
    def get_shared_content_download_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_download_details` is true.

        :rtype: SharedContentDownloadDetails
        """
        ...
    
    def get_shared_content_relinquish_membership_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_relinquish_membership_details` is true.

        :rtype: SharedContentRelinquishMembershipDetails
        """
        ...
    
    def get_shared_content_remove_invitees_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_remove_invitees_details` is true.

        :rtype: SharedContentRemoveInviteesDetails
        """
        ...
    
    def get_shared_content_remove_link_expiry_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_remove_link_expiry_details` is true.

        :rtype: SharedContentRemoveLinkExpiryDetails
        """
        ...
    
    def get_shared_content_remove_link_password_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_remove_link_password_details` is true.

        :rtype: SharedContentRemoveLinkPasswordDetails
        """
        ...
    
    def get_shared_content_remove_member_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_remove_member_details` is true.

        :rtype: SharedContentRemoveMemberDetails
        """
        ...
    
    def get_shared_content_request_access_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_request_access_details` is true.

        :rtype: SharedContentRequestAccessDetails
        """
        ...
    
    def get_shared_content_restore_invitees_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_restore_invitees_details` is true.

        :rtype: SharedContentRestoreInviteesDetails
        """
        ...
    
    def get_shared_content_restore_member_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_restore_member_details` is true.

        :rtype: SharedContentRestoreMemberDetails
        """
        ...
    
    def get_shared_content_unshare_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_unshare_details` is true.

        :rtype: SharedContentUnshareDetails
        """
        ...
    
    def get_shared_content_view_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_content_view_details` is true.

        :rtype: SharedContentViewDetails
        """
        ...
    
    def get_shared_folder_change_link_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_change_link_policy_details` is true.

        :rtype: SharedFolderChangeLinkPolicyDetails
        """
        ...
    
    def get_shared_folder_change_members_inheritance_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_change_members_inheritance_policy_details` is true.

        :rtype: SharedFolderChangeMembersInheritancePolicyDetails
        """
        ...
    
    def get_shared_folder_change_members_management_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_change_members_management_policy_details` is true.

        :rtype: SharedFolderChangeMembersManagementPolicyDetails
        """
        ...
    
    def get_shared_folder_change_members_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_change_members_policy_details` is true.

        :rtype: SharedFolderChangeMembersPolicyDetails
        """
        ...
    
    def get_shared_folder_create_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_create_details` is true.

        :rtype: SharedFolderCreateDetails
        """
        ...
    
    def get_shared_folder_decline_invitation_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_decline_invitation_details` is true.

        :rtype: SharedFolderDeclineInvitationDetails
        """
        ...
    
    def get_shared_folder_mount_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_mount_details` is true.

        :rtype: SharedFolderMountDetails
        """
        ...
    
    def get_shared_folder_nest_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_nest_details` is true.

        :rtype: SharedFolderNestDetails
        """
        ...
    
    def get_shared_folder_transfer_ownership_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_transfer_ownership_details` is true.

        :rtype: SharedFolderTransferOwnershipDetails
        """
        ...
    
    def get_shared_folder_unmount_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_folder_unmount_details` is true.

        :rtype: SharedFolderUnmountDetails
        """
        ...
    
    def get_shared_link_add_expiry_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_add_expiry_details` is true.

        :rtype: SharedLinkAddExpiryDetails
        """
        ...
    
    def get_shared_link_change_expiry_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_change_expiry_details` is true.

        :rtype: SharedLinkChangeExpiryDetails
        """
        ...
    
    def get_shared_link_change_visibility_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_change_visibility_details` is true.

        :rtype: SharedLinkChangeVisibilityDetails
        """
        ...
    
    def get_shared_link_copy_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_copy_details` is true.

        :rtype: SharedLinkCopyDetails
        """
        ...
    
    def get_shared_link_create_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_create_details` is true.

        :rtype: SharedLinkCreateDetails
        """
        ...
    
    def get_shared_link_disable_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_disable_details` is true.

        :rtype: SharedLinkDisableDetails
        """
        ...
    
    def get_shared_link_download_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_download_details` is true.

        :rtype: SharedLinkDownloadDetails
        """
        ...
    
    def get_shared_link_remove_expiry_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_remove_expiry_details` is true.

        :rtype: SharedLinkRemoveExpiryDetails
        """
        ...
    
    def get_shared_link_settings_add_expiration_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_add_expiration_details` is true.

        :rtype: SharedLinkSettingsAddExpirationDetails
        """
        ...
    
    def get_shared_link_settings_add_password_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_add_password_details` is true.

        :rtype: SharedLinkSettingsAddPasswordDetails
        """
        ...
    
    def get_shared_link_settings_allow_download_disabled_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_allow_download_disabled_details` is true.

        :rtype: SharedLinkSettingsAllowDownloadDisabledDetails
        """
        ...
    
    def get_shared_link_settings_allow_download_enabled_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_allow_download_enabled_details` is true.

        :rtype: SharedLinkSettingsAllowDownloadEnabledDetails
        """
        ...
    
    def get_shared_link_settings_change_audience_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_change_audience_details` is true.

        :rtype: SharedLinkSettingsChangeAudienceDetails
        """
        ...
    
    def get_shared_link_settings_change_expiration_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_change_expiration_details` is true.

        :rtype: SharedLinkSettingsChangeExpirationDetails
        """
        ...
    
    def get_shared_link_settings_change_password_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_change_password_details` is true.

        :rtype: SharedLinkSettingsChangePasswordDetails
        """
        ...
    
    def get_shared_link_settings_remove_expiration_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_remove_expiration_details` is true.

        :rtype: SharedLinkSettingsRemoveExpirationDetails
        """
        ...
    
    def get_shared_link_settings_remove_password_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_settings_remove_password_details` is true.

        :rtype: SharedLinkSettingsRemovePasswordDetails
        """
        ...
    
    def get_shared_link_share_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_share_details` is true.

        :rtype: SharedLinkShareDetails
        """
        ...
    
    def get_shared_link_view_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_link_view_details` is true.

        :rtype: SharedLinkViewDetails
        """
        ...
    
    def get_shared_note_opened_details(self): # -> None:
        """
        Only call this if :meth:`is_shared_note_opened_details` is true.

        :rtype: SharedNoteOpenedDetails
        """
        ...
    
    def get_shmodel_disable_downloads_details(self): # -> None:
        """
        Only call this if :meth:`is_shmodel_disable_downloads_details` is true.

        :rtype: ShmodelDisableDownloadsDetails
        """
        ...
    
    def get_shmodel_enable_downloads_details(self): # -> None:
        """
        Only call this if :meth:`is_shmodel_enable_downloads_details` is true.

        :rtype: ShmodelEnableDownloadsDetails
        """
        ...
    
    def get_shmodel_group_share_details(self): # -> None:
        """
        Only call this if :meth:`is_shmodel_group_share_details` is true.

        :rtype: ShmodelGroupShareDetails
        """
        ...
    
    def get_showcase_access_granted_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_access_granted_details` is true.

        :rtype: ShowcaseAccessGrantedDetails
        """
        ...
    
    def get_showcase_add_member_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_add_member_details` is true.

        :rtype: ShowcaseAddMemberDetails
        """
        ...
    
    def get_showcase_archived_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_archived_details` is true.

        :rtype: ShowcaseArchivedDetails
        """
        ...
    
    def get_showcase_created_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_created_details` is true.

        :rtype: ShowcaseCreatedDetails
        """
        ...
    
    def get_showcase_delete_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_delete_comment_details` is true.

        :rtype: ShowcaseDeleteCommentDetails
        """
        ...
    
    def get_showcase_edited_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_edited_details` is true.

        :rtype: ShowcaseEditedDetails
        """
        ...
    
    def get_showcase_edit_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_edit_comment_details` is true.

        :rtype: ShowcaseEditCommentDetails
        """
        ...
    
    def get_showcase_file_added_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_file_added_details` is true.

        :rtype: ShowcaseFileAddedDetails
        """
        ...
    
    def get_showcase_file_download_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_file_download_details` is true.

        :rtype: ShowcaseFileDownloadDetails
        """
        ...
    
    def get_showcase_file_removed_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_file_removed_details` is true.

        :rtype: ShowcaseFileRemovedDetails
        """
        ...
    
    def get_showcase_file_view_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_file_view_details` is true.

        :rtype: ShowcaseFileViewDetails
        """
        ...
    
    def get_showcase_permanently_deleted_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_permanently_deleted_details` is true.

        :rtype: ShowcasePermanentlyDeletedDetails
        """
        ...
    
    def get_showcase_post_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_post_comment_details` is true.

        :rtype: ShowcasePostCommentDetails
        """
        ...
    
    def get_showcase_remove_member_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_remove_member_details` is true.

        :rtype: ShowcaseRemoveMemberDetails
        """
        ...
    
    def get_showcase_renamed_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_renamed_details` is true.

        :rtype: ShowcaseRenamedDetails
        """
        ...
    
    def get_showcase_request_access_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_request_access_details` is true.

        :rtype: ShowcaseRequestAccessDetails
        """
        ...
    
    def get_showcase_resolve_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_resolve_comment_details` is true.

        :rtype: ShowcaseResolveCommentDetails
        """
        ...
    
    def get_showcase_restored_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_restored_details` is true.

        :rtype: ShowcaseRestoredDetails
        """
        ...
    
    def get_showcase_trashed_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_trashed_details` is true.

        :rtype: ShowcaseTrashedDetails
        """
        ...
    
    def get_showcase_trashed_deprecated_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_trashed_deprecated_details` is true.

        :rtype: ShowcaseTrashedDeprecatedDetails
        """
        ...
    
    def get_showcase_unresolve_comment_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_unresolve_comment_details` is true.

        :rtype: ShowcaseUnresolveCommentDetails
        """
        ...
    
    def get_showcase_untrashed_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_untrashed_details` is true.

        :rtype: ShowcaseUntrashedDetails
        """
        ...
    
    def get_showcase_untrashed_deprecated_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_untrashed_deprecated_details` is true.

        :rtype: ShowcaseUntrashedDeprecatedDetails
        """
        ...
    
    def get_showcase_view_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_view_details` is true.

        :rtype: ShowcaseViewDetails
        """
        ...
    
    def get_sso_add_cert_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_add_cert_details` is true.

        :rtype: SsoAddCertDetails
        """
        ...
    
    def get_sso_add_login_url_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_add_login_url_details` is true.

        :rtype: SsoAddLoginUrlDetails
        """
        ...
    
    def get_sso_add_logout_url_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_add_logout_url_details` is true.

        :rtype: SsoAddLogoutUrlDetails
        """
        ...
    
    def get_sso_change_cert_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_change_cert_details` is true.

        :rtype: SsoChangeCertDetails
        """
        ...
    
    def get_sso_change_login_url_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_change_login_url_details` is true.

        :rtype: SsoChangeLoginUrlDetails
        """
        ...
    
    def get_sso_change_logout_url_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_change_logout_url_details` is true.

        :rtype: SsoChangeLogoutUrlDetails
        """
        ...
    
    def get_sso_change_saml_identity_mode_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_change_saml_identity_mode_details` is true.

        :rtype: SsoChangeSamlIdentityModeDetails
        """
        ...
    
    def get_sso_remove_cert_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_remove_cert_details` is true.

        :rtype: SsoRemoveCertDetails
        """
        ...
    
    def get_sso_remove_login_url_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_remove_login_url_details` is true.

        :rtype: SsoRemoveLoginUrlDetails
        """
        ...
    
    def get_sso_remove_logout_url_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_remove_logout_url_details` is true.

        :rtype: SsoRemoveLogoutUrlDetails
        """
        ...
    
    def get_team_folder_change_status_details(self): # -> None:
        """
        Only call this if :meth:`is_team_folder_change_status_details` is true.

        :rtype: TeamFolderChangeStatusDetails
        """
        ...
    
    def get_team_folder_create_details(self): # -> None:
        """
        Only call this if :meth:`is_team_folder_create_details` is true.

        :rtype: TeamFolderCreateDetails
        """
        ...
    
    def get_team_folder_downgrade_details(self): # -> None:
        """
        Only call this if :meth:`is_team_folder_downgrade_details` is true.

        :rtype: TeamFolderDowngradeDetails
        """
        ...
    
    def get_team_folder_permanently_delete_details(self): # -> None:
        """
        Only call this if :meth:`is_team_folder_permanently_delete_details` is true.

        :rtype: TeamFolderPermanentlyDeleteDetails
        """
        ...
    
    def get_team_folder_rename_details(self): # -> None:
        """
        Only call this if :meth:`is_team_folder_rename_details` is true.

        :rtype: TeamFolderRenameDetails
        """
        ...
    
    def get_team_selective_sync_settings_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_team_selective_sync_settings_changed_details` is true.

        :rtype: TeamSelectiveSyncSettingsChangedDetails
        """
        ...
    
    def get_account_capture_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_account_capture_change_policy_details` is true.

        :rtype: AccountCaptureChangePolicyDetails
        """
        ...
    
    def get_admin_email_reminders_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_admin_email_reminders_changed_details` is true.

        :rtype: AdminEmailRemindersChangedDetails
        """
        ...
    
    def get_allow_download_disabled_details(self): # -> None:
        """
        Only call this if :meth:`is_allow_download_disabled_details` is true.

        :rtype: AllowDownloadDisabledDetails
        """
        ...
    
    def get_allow_download_enabled_details(self): # -> None:
        """
        Only call this if :meth:`is_allow_download_enabled_details` is true.

        :rtype: AllowDownloadEnabledDetails
        """
        ...
    
    def get_app_permissions_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_app_permissions_changed_details` is true.

        :rtype: AppPermissionsChangedDetails
        """
        ...
    
    def get_camera_uploads_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_camera_uploads_policy_changed_details` is true.

        :rtype: CameraUploadsPolicyChangedDetails
        """
        ...
    
    def get_capture_transcript_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_capture_transcript_policy_changed_details` is true.

        :rtype: CaptureTranscriptPolicyChangedDetails
        """
        ...
    
    def get_classification_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_classification_change_policy_details` is true.

        :rtype: ClassificationChangePolicyDetails
        """
        ...
    
    def get_computer_backup_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_computer_backup_policy_changed_details` is true.

        :rtype: ComputerBackupPolicyChangedDetails
        """
        ...
    
    def get_content_administration_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_content_administration_policy_changed_details` is true.

        :rtype: ContentAdministrationPolicyChangedDetails
        """
        ...
    
    def get_data_placement_restriction_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_data_placement_restriction_change_policy_details` is true.

        :rtype: DataPlacementRestrictionChangePolicyDetails
        """
        ...
    
    def get_data_placement_restriction_satisfy_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_data_placement_restriction_satisfy_policy_details` is true.

        :rtype: DataPlacementRestrictionSatisfyPolicyDetails
        """
        ...
    
    def get_device_approvals_add_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_device_approvals_add_exception_details` is true.

        :rtype: DeviceApprovalsAddExceptionDetails
        """
        ...
    
    def get_device_approvals_change_desktop_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_device_approvals_change_desktop_policy_details` is true.

        :rtype: DeviceApprovalsChangeDesktopPolicyDetails
        """
        ...
    
    def get_device_approvals_change_mobile_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_device_approvals_change_mobile_policy_details` is true.

        :rtype: DeviceApprovalsChangeMobilePolicyDetails
        """
        ...
    
    def get_device_approvals_change_overage_action_details(self): # -> None:
        """
        Only call this if :meth:`is_device_approvals_change_overage_action_details` is true.

        :rtype: DeviceApprovalsChangeOverageActionDetails
        """
        ...
    
    def get_device_approvals_change_unlink_action_details(self): # -> None:
        """
        Only call this if :meth:`is_device_approvals_change_unlink_action_details` is true.

        :rtype: DeviceApprovalsChangeUnlinkActionDetails
        """
        ...
    
    def get_device_approvals_remove_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_device_approvals_remove_exception_details` is true.

        :rtype: DeviceApprovalsRemoveExceptionDetails
        """
        ...
    
    def get_directory_restrictions_add_members_details(self): # -> None:
        """
        Only call this if :meth:`is_directory_restrictions_add_members_details` is true.

        :rtype: DirectoryRestrictionsAddMembersDetails
        """
        ...
    
    def get_directory_restrictions_remove_members_details(self): # -> None:
        """
        Only call this if :meth:`is_directory_restrictions_remove_members_details` is true.

        :rtype: DirectoryRestrictionsRemoveMembersDetails
        """
        ...
    
    def get_dropbox_passwords_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_dropbox_passwords_policy_changed_details` is true.

        :rtype: DropboxPasswordsPolicyChangedDetails
        """
        ...
    
    def get_email_ingest_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_email_ingest_policy_changed_details` is true.

        :rtype: EmailIngestPolicyChangedDetails
        """
        ...
    
    def get_emm_add_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_emm_add_exception_details` is true.

        :rtype: EmmAddExceptionDetails
        """
        ...
    
    def get_emm_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_emm_change_policy_details` is true.

        :rtype: EmmChangePolicyDetails
        """
        ...
    
    def get_emm_remove_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_emm_remove_exception_details` is true.

        :rtype: EmmRemoveExceptionDetails
        """
        ...
    
    def get_extended_version_history_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_extended_version_history_change_policy_details` is true.

        :rtype: ExtendedVersionHistoryChangePolicyDetails
        """
        ...
    
    def get_external_drive_backup_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_external_drive_backup_policy_changed_details` is true.

        :rtype: ExternalDriveBackupPolicyChangedDetails
        """
        ...
    
    def get_file_comments_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_file_comments_change_policy_details` is true.

        :rtype: FileCommentsChangePolicyDetails
        """
        ...
    
    def get_file_locking_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_file_locking_policy_changed_details` is true.

        :rtype: FileLockingPolicyChangedDetails
        """
        ...
    
    def get_file_provider_migration_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_file_provider_migration_policy_changed_details` is true.

        :rtype: FileProviderMigrationPolicyChangedDetails
        """
        ...
    
    def get_file_requests_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_file_requests_change_policy_details` is true.

        :rtype: FileRequestsChangePolicyDetails
        """
        ...
    
    def get_file_requests_emails_enabled_details(self): # -> None:
        """
        Only call this if :meth:`is_file_requests_emails_enabled_details` is true.

        :rtype: FileRequestsEmailsEnabledDetails
        """
        ...
    
    def get_file_requests_emails_restricted_to_team_only_details(self): # -> None:
        """
        Only call this if :meth:`is_file_requests_emails_restricted_to_team_only_details` is true.

        :rtype: FileRequestsEmailsRestrictedToTeamOnlyDetails
        """
        ...
    
    def get_file_transfers_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_file_transfers_policy_changed_details` is true.

        :rtype: FileTransfersPolicyChangedDetails
        """
        ...
    
    def get_folder_link_restriction_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_folder_link_restriction_policy_changed_details` is true.

        :rtype: FolderLinkRestrictionPolicyChangedDetails
        """
        ...
    
    def get_google_sso_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_google_sso_change_policy_details` is true.

        :rtype: GoogleSsoChangePolicyDetails
        """
        ...
    
    def get_group_user_management_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_group_user_management_change_policy_details` is true.

        :rtype: GroupUserManagementChangePolicyDetails
        """
        ...
    
    def get_integration_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_integration_policy_changed_details` is true.

        :rtype: IntegrationPolicyChangedDetails
        """
        ...
    
    def get_invite_acceptance_email_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_invite_acceptance_email_policy_changed_details` is true.

        :rtype: InviteAcceptanceEmailPolicyChangedDetails
        """
        ...
    
    def get_member_requests_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_member_requests_change_policy_details` is true.

        :rtype: MemberRequestsChangePolicyDetails
        """
        ...
    
    def get_member_send_invite_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_member_send_invite_policy_changed_details` is true.

        :rtype: MemberSendInvitePolicyChangedDetails
        """
        ...
    
    def get_member_space_limits_add_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_add_exception_details` is true.

        :rtype: MemberSpaceLimitsAddExceptionDetails
        """
        ...
    
    def get_member_space_limits_change_caps_type_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_change_caps_type_policy_details` is true.

        :rtype: MemberSpaceLimitsChangeCapsTypePolicyDetails
        """
        ...
    
    def get_member_space_limits_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_change_policy_details` is true.

        :rtype: MemberSpaceLimitsChangePolicyDetails
        """
        ...
    
    def get_member_space_limits_remove_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_member_space_limits_remove_exception_details` is true.

        :rtype: MemberSpaceLimitsRemoveExceptionDetails
        """
        ...
    
    def get_member_suggestions_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_member_suggestions_change_policy_details` is true.

        :rtype: MemberSuggestionsChangePolicyDetails
        """
        ...
    
    def get_microsoft_office_addin_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_microsoft_office_addin_change_policy_details` is true.

        :rtype: MicrosoftOfficeAddinChangePolicyDetails
        """
        ...
    
    def get_network_control_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_network_control_change_policy_details` is true.

        :rtype: NetworkControlChangePolicyDetails
        """
        ...
    
    def get_paper_change_deployment_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_change_deployment_policy_details` is true.

        :rtype: PaperChangeDeploymentPolicyDetails
        """
        ...
    
    def get_paper_change_member_link_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_change_member_link_policy_details` is true.

        :rtype: PaperChangeMemberLinkPolicyDetails
        """
        ...
    
    def get_paper_change_member_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_change_member_policy_details` is true.

        :rtype: PaperChangeMemberPolicyDetails
        """
        ...
    
    def get_paper_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_change_policy_details` is true.

        :rtype: PaperChangePolicyDetails
        """
        ...
    
    def get_paper_default_folder_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_default_folder_policy_changed_details` is true.

        :rtype: PaperDefaultFolderPolicyChangedDetails
        """
        ...
    
    def get_paper_desktop_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_desktop_policy_changed_details` is true.

        :rtype: PaperDesktopPolicyChangedDetails
        """
        ...
    
    def get_paper_enabled_users_group_addition_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_enabled_users_group_addition_details` is true.

        :rtype: PaperEnabledUsersGroupAdditionDetails
        """
        ...
    
    def get_paper_enabled_users_group_removal_details(self): # -> None:
        """
        Only call this if :meth:`is_paper_enabled_users_group_removal_details` is true.

        :rtype: PaperEnabledUsersGroupRemovalDetails
        """
        ...
    
    def get_password_strength_requirements_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_password_strength_requirements_change_policy_details` is true.

        :rtype: PasswordStrengthRequirementsChangePolicyDetails
        """
        ...
    
    def get_permanent_delete_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_permanent_delete_change_policy_details` is true.

        :rtype: PermanentDeleteChangePolicyDetails
        """
        ...
    
    def get_reseller_support_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_reseller_support_change_policy_details` is true.

        :rtype: ResellerSupportChangePolicyDetails
        """
        ...
    
    def get_rewind_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_rewind_policy_changed_details` is true.

        :rtype: RewindPolicyChangedDetails
        """
        ...
    
    def get_send_for_signature_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_send_for_signature_policy_changed_details` is true.

        :rtype: SendForSignaturePolicyChangedDetails
        """
        ...
    
    def get_sharing_change_folder_join_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_sharing_change_folder_join_policy_details` is true.

        :rtype: SharingChangeFolderJoinPolicyDetails
        """
        ...
    
    def get_sharing_change_link_allow_change_expiration_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_sharing_change_link_allow_change_expiration_policy_details` is true.

        :rtype: SharingChangeLinkAllowChangeExpirationPolicyDetails
        """
        ...
    
    def get_sharing_change_link_default_expiration_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_sharing_change_link_default_expiration_policy_details` is true.

        :rtype: SharingChangeLinkDefaultExpirationPolicyDetails
        """
        ...
    
    def get_sharing_change_link_enforce_password_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_sharing_change_link_enforce_password_policy_details` is true.

        :rtype: SharingChangeLinkEnforcePasswordPolicyDetails
        """
        ...
    
    def get_sharing_change_link_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_sharing_change_link_policy_details` is true.

        :rtype: SharingChangeLinkPolicyDetails
        """
        ...
    
    def get_sharing_change_member_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_sharing_change_member_policy_details` is true.

        :rtype: SharingChangeMemberPolicyDetails
        """
        ...
    
    def get_showcase_change_download_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_change_download_policy_details` is true.

        :rtype: ShowcaseChangeDownloadPolicyDetails
        """
        ...
    
    def get_showcase_change_enabled_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_change_enabled_policy_details` is true.

        :rtype: ShowcaseChangeEnabledPolicyDetails
        """
        ...
    
    def get_showcase_change_external_sharing_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_showcase_change_external_sharing_policy_details` is true.

        :rtype: ShowcaseChangeExternalSharingPolicyDetails
        """
        ...
    
    def get_smarter_smart_sync_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_smarter_smart_sync_policy_changed_details` is true.

        :rtype: SmarterSmartSyncPolicyChangedDetails
        """
        ...
    
    def get_smart_sync_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_smart_sync_change_policy_details` is true.

        :rtype: SmartSyncChangePolicyDetails
        """
        ...
    
    def get_smart_sync_not_opt_out_details(self): # -> None:
        """
        Only call this if :meth:`is_smart_sync_not_opt_out_details` is true.

        :rtype: SmartSyncNotOptOutDetails
        """
        ...
    
    def get_smart_sync_opt_out_details(self): # -> None:
        """
        Only call this if :meth:`is_smart_sync_opt_out_details` is true.

        :rtype: SmartSyncOptOutDetails
        """
        ...
    
    def get_sso_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_sso_change_policy_details` is true.

        :rtype: SsoChangePolicyDetails
        """
        ...
    
    def get_team_branding_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_team_branding_policy_changed_details` is true.

        :rtype: TeamBrandingPolicyChangedDetails
        """
        ...
    
    def get_team_extensions_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_team_extensions_policy_changed_details` is true.

        :rtype: TeamExtensionsPolicyChangedDetails
        """
        ...
    
    def get_team_selective_sync_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_team_selective_sync_policy_changed_details` is true.

        :rtype: TeamSelectiveSyncPolicyChangedDetails
        """
        ...
    
    def get_team_sharing_whitelist_subjects_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_team_sharing_whitelist_subjects_changed_details` is true.

        :rtype: TeamSharingWhitelistSubjectsChangedDetails
        """
        ...
    
    def get_tfa_add_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_add_exception_details` is true.

        :rtype: TfaAddExceptionDetails
        """
        ...
    
    def get_tfa_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_change_policy_details` is true.

        :rtype: TfaChangePolicyDetails
        """
        ...
    
    def get_tfa_remove_exception_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_remove_exception_details` is true.

        :rtype: TfaRemoveExceptionDetails
        """
        ...
    
    def get_two_account_change_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_two_account_change_policy_details` is true.

        :rtype: TwoAccountChangePolicyDetails
        """
        ...
    
    def get_viewer_info_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_viewer_info_policy_changed_details` is true.

        :rtype: ViewerInfoPolicyChangedDetails
        """
        ...
    
    def get_watermarking_policy_changed_details(self): # -> None:
        """
        Only call this if :meth:`is_watermarking_policy_changed_details` is true.

        :rtype: WatermarkingPolicyChangedDetails
        """
        ...
    
    def get_web_sessions_change_active_session_limit_details(self): # -> None:
        """
        Only call this if :meth:`is_web_sessions_change_active_session_limit_details` is true.

        :rtype: WebSessionsChangeActiveSessionLimitDetails
        """
        ...
    
    def get_web_sessions_change_fixed_length_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_web_sessions_change_fixed_length_policy_details` is true.

        :rtype: WebSessionsChangeFixedLengthPolicyDetails
        """
        ...
    
    def get_web_sessions_change_idle_length_policy_details(self): # -> None:
        """
        Only call this if :meth:`is_web_sessions_change_idle_length_policy_details` is true.

        :rtype: WebSessionsChangeIdleLengthPolicyDetails
        """
        ...
    
    def get_data_residency_migration_request_successful_details(self): # -> None:
        """
        Only call this if :meth:`is_data_residency_migration_request_successful_details` is true.

        :rtype: DataResidencyMigrationRequestSuccessfulDetails
        """
        ...
    
    def get_data_residency_migration_request_unsuccessful_details(self): # -> None:
        """
        Only call this if :meth:`is_data_residency_migration_request_unsuccessful_details` is true.

        :rtype: DataResidencyMigrationRequestUnsuccessfulDetails
        """
        ...
    
    def get_team_merge_from_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_from_details` is true.

        :rtype: TeamMergeFromDetails
        """
        ...
    
    def get_team_merge_to_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_to_details` is true.

        :rtype: TeamMergeToDetails
        """
        ...
    
    def get_team_profile_add_background_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_add_background_details` is true.

        :rtype: TeamProfileAddBackgroundDetails
        """
        ...
    
    def get_team_profile_add_logo_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_add_logo_details` is true.

        :rtype: TeamProfileAddLogoDetails
        """
        ...
    
    def get_team_profile_change_background_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_change_background_details` is true.

        :rtype: TeamProfileChangeBackgroundDetails
        """
        ...
    
    def get_team_profile_change_default_language_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_change_default_language_details` is true.

        :rtype: TeamProfileChangeDefaultLanguageDetails
        """
        ...
    
    def get_team_profile_change_logo_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_change_logo_details` is true.

        :rtype: TeamProfileChangeLogoDetails
        """
        ...
    
    def get_team_profile_change_name_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_change_name_details` is true.

        :rtype: TeamProfileChangeNameDetails
        """
        ...
    
    def get_team_profile_remove_background_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_remove_background_details` is true.

        :rtype: TeamProfileRemoveBackgroundDetails
        """
        ...
    
    def get_team_profile_remove_logo_details(self): # -> None:
        """
        Only call this if :meth:`is_team_profile_remove_logo_details` is true.

        :rtype: TeamProfileRemoveLogoDetails
        """
        ...
    
    def get_tfa_add_backup_phone_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_add_backup_phone_details` is true.

        :rtype: TfaAddBackupPhoneDetails
        """
        ...
    
    def get_tfa_add_security_key_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_add_security_key_details` is true.

        :rtype: TfaAddSecurityKeyDetails
        """
        ...
    
    def get_tfa_change_backup_phone_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_change_backup_phone_details` is true.

        :rtype: TfaChangeBackupPhoneDetails
        """
        ...
    
    def get_tfa_change_status_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_change_status_details` is true.

        :rtype: TfaChangeStatusDetails
        """
        ...
    
    def get_tfa_remove_backup_phone_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_remove_backup_phone_details` is true.

        :rtype: TfaRemoveBackupPhoneDetails
        """
        ...
    
    def get_tfa_remove_security_key_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_remove_security_key_details` is true.

        :rtype: TfaRemoveSecurityKeyDetails
        """
        ...
    
    def get_tfa_reset_details(self): # -> None:
        """
        Only call this if :meth:`is_tfa_reset_details` is true.

        :rtype: TfaResetDetails
        """
        ...
    
    def get_changed_enterprise_admin_role_details(self): # -> None:
        """
        Only call this if :meth:`is_changed_enterprise_admin_role_details` is true.

        :rtype: ChangedEnterpriseAdminRoleDetails
        """
        ...
    
    def get_changed_enterprise_connected_team_status_details(self): # -> None:
        """
        Only call this if :meth:`is_changed_enterprise_connected_team_status_details` is true.

        :rtype: ChangedEnterpriseConnectedTeamStatusDetails
        """
        ...
    
    def get_ended_enterprise_admin_session_details(self): # -> None:
        """
        Only call this if :meth:`is_ended_enterprise_admin_session_details` is true.

        :rtype: EndedEnterpriseAdminSessionDetails
        """
        ...
    
    def get_ended_enterprise_admin_session_deprecated_details(self): # -> None:
        """
        Only call this if :meth:`is_ended_enterprise_admin_session_deprecated_details` is true.

        :rtype: EndedEnterpriseAdminSessionDeprecatedDetails
        """
        ...
    
    def get_enterprise_settings_locking_details(self): # -> None:
        """
        Only call this if :meth:`is_enterprise_settings_locking_details` is true.

        :rtype: EnterpriseSettingsLockingDetails
        """
        ...
    
    def get_guest_admin_change_status_details(self): # -> None:
        """
        Only call this if :meth:`is_guest_admin_change_status_details` is true.

        :rtype: GuestAdminChangeStatusDetails
        """
        ...
    
    def get_started_enterprise_admin_session_details(self): # -> None:
        """
        Only call this if :meth:`is_started_enterprise_admin_session_details` is true.

        :rtype: StartedEnterpriseAdminSessionDetails
        """
        ...
    
    def get_team_merge_request_accepted_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_accepted_details` is true.

        :rtype: TeamMergeRequestAcceptedDetails
        """
        ...
    
    def get_team_merge_request_accepted_shown_to_primary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_accepted_shown_to_primary_team_details` is true.

        :rtype: TeamMergeRequestAcceptedShownToPrimaryTeamDetails
        """
        ...
    
    def get_team_merge_request_accepted_shown_to_secondary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_accepted_shown_to_secondary_team_details` is true.

        :rtype: TeamMergeRequestAcceptedShownToSecondaryTeamDetails
        """
        ...
    
    def get_team_merge_request_auto_canceled_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_auto_canceled_details` is true.

        :rtype: TeamMergeRequestAutoCanceledDetails
        """
        ...
    
    def get_team_merge_request_canceled_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_canceled_details` is true.

        :rtype: TeamMergeRequestCanceledDetails
        """
        ...
    
    def get_team_merge_request_canceled_shown_to_primary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_canceled_shown_to_primary_team_details` is true.

        :rtype: TeamMergeRequestCanceledShownToPrimaryTeamDetails
        """
        ...
    
    def get_team_merge_request_canceled_shown_to_secondary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_canceled_shown_to_secondary_team_details` is true.

        :rtype: TeamMergeRequestCanceledShownToSecondaryTeamDetails
        """
        ...
    
    def get_team_merge_request_expired_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_expired_details` is true.

        :rtype: TeamMergeRequestExpiredDetails
        """
        ...
    
    def get_team_merge_request_expired_shown_to_primary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_expired_shown_to_primary_team_details` is true.

        :rtype: TeamMergeRequestExpiredShownToPrimaryTeamDetails
        """
        ...
    
    def get_team_merge_request_expired_shown_to_secondary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_expired_shown_to_secondary_team_details` is true.

        :rtype: TeamMergeRequestExpiredShownToSecondaryTeamDetails
        """
        ...
    
    def get_team_merge_request_rejected_shown_to_primary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_rejected_shown_to_primary_team_details` is true.

        :rtype: TeamMergeRequestRejectedShownToPrimaryTeamDetails
        """
        ...
    
    def get_team_merge_request_rejected_shown_to_secondary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_rejected_shown_to_secondary_team_details` is true.

        :rtype: TeamMergeRequestRejectedShownToSecondaryTeamDetails
        """
        ...
    
    def get_team_merge_request_reminder_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_reminder_details` is true.

        :rtype: TeamMergeRequestReminderDetails
        """
        ...
    
    def get_team_merge_request_reminder_shown_to_primary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_reminder_shown_to_primary_team_details` is true.

        :rtype: TeamMergeRequestReminderShownToPrimaryTeamDetails
        """
        ...
    
    def get_team_merge_request_reminder_shown_to_secondary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_reminder_shown_to_secondary_team_details` is true.

        :rtype: TeamMergeRequestReminderShownToSecondaryTeamDetails
        """
        ...
    
    def get_team_merge_request_revoked_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_revoked_details` is true.

        :rtype: TeamMergeRequestRevokedDetails
        """
        ...
    
    def get_team_merge_request_sent_shown_to_primary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_sent_shown_to_primary_team_details` is true.

        :rtype: TeamMergeRequestSentShownToPrimaryTeamDetails
        """
        ...
    
    def get_team_merge_request_sent_shown_to_secondary_team_details(self): # -> None:
        """
        Only call this if :meth:`is_team_merge_request_sent_shown_to_secondary_team_details` is true.

        :rtype: TeamMergeRequestSentShownToSecondaryTeamDetails
        """
        ...
    
    def get_missing_details(self): # -> None:
        """
        Hints that this event was returned with missing details due to an
        internal error.

        Only call this if :meth:`is_missing_details` is true.

        :rtype: MissingDetails
        """
        ...
    


EventDetails_validator = ...
class EventType(bb.Union):
    """
    The type of the event with description.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar AdminAlertingAlertStateChangedType
        EventType.admin_alerting_alert_state_changed: (admin_alerting) Changed
        an alert state
    :ivar AdminAlertingChangedAlertConfigType
        EventType.admin_alerting_changed_alert_config: (admin_alerting) Changed
        an alert setting
    :ivar AdminAlertingTriggeredAlertType
        EventType.admin_alerting_triggered_alert: (admin_alerting) Triggered
        security alert
    :ivar RansomwareRestoreProcessCompletedType
        EventType.ransomware_restore_process_completed: (admin_alerting)
        Completed ransomware restore process
    :ivar RansomwareRestoreProcessStartedType
        EventType.ransomware_restore_process_started: (admin_alerting) Started
        ransomware restore process
    :ivar AppBlockedByPermissionsType EventType.app_blocked_by_permissions:
        (apps) Failed to connect app for member
    :ivar AppLinkTeamType EventType.app_link_team: (apps) Linked app for team
    :ivar AppLinkUserType EventType.app_link_user: (apps) Linked app for member
    :ivar AppUnlinkTeamType EventType.app_unlink_team: (apps) Unlinked app for
        team
    :ivar AppUnlinkUserType EventType.app_unlink_user: (apps) Unlinked app for
        member
    :ivar IntegrationConnectedType EventType.integration_connected: (apps)
        Connected integration for member
    :ivar IntegrationDisconnectedType EventType.integration_disconnected: (apps)
        Disconnected integration for member
    :ivar FileAddCommentType EventType.file_add_comment: (comments) Added file
        comment
    :ivar FileChangeCommentSubscriptionType
        EventType.file_change_comment_subscription: (comments) Subscribed to or
        unsubscribed from comment notifications for file
    :ivar FileDeleteCommentType EventType.file_delete_comment: (comments)
        Deleted file comment
    :ivar FileEditCommentType EventType.file_edit_comment: (comments) Edited
        file comment
    :ivar FileLikeCommentType EventType.file_like_comment: (comments) Liked file
        comment (deprecated, no longer logged)
    :ivar FileResolveCommentType EventType.file_resolve_comment: (comments)
        Resolved file comment
    :ivar FileUnlikeCommentType EventType.file_unlike_comment: (comments)
        Unliked file comment (deprecated, no longer logged)
    :ivar FileUnresolveCommentType EventType.file_unresolve_comment: (comments)
        Unresolved file comment
    :ivar GovernancePolicyAddFoldersType
        EventType.governance_policy_add_folders: (data_governance) Added folders
        to policy
    :ivar GovernancePolicyAddFolderFailedType
        EventType.governance_policy_add_folder_failed: (data_governance)
        Couldn't add a folder to a policy
    :ivar GovernancePolicyContentDisposedType
        EventType.governance_policy_content_disposed: (data_governance) Content
        disposed
    :ivar GovernancePolicyCreateType EventType.governance_policy_create:
        (data_governance) Activated a new policy
    :ivar GovernancePolicyDeleteType EventType.governance_policy_delete:
        (data_governance) Deleted a policy
    :ivar GovernancePolicyEditDetailsType
        EventType.governance_policy_edit_details: (data_governance) Edited
        policy
    :ivar GovernancePolicyEditDurationType
        EventType.governance_policy_edit_duration: (data_governance) Changed
        policy duration
    :ivar GovernancePolicyExportCreatedType
        EventType.governance_policy_export_created: (data_governance) Created a
        policy download
    :ivar GovernancePolicyExportRemovedType
        EventType.governance_policy_export_removed: (data_governance) Removed a
        policy download
    :ivar GovernancePolicyRemoveFoldersType
        EventType.governance_policy_remove_folders: (data_governance) Removed
        folders from policy
    :ivar GovernancePolicyReportCreatedType
        EventType.governance_policy_report_created: (data_governance) Created a
        summary report for a policy
    :ivar GovernancePolicyZipPartDownloadedType
        EventType.governance_policy_zip_part_downloaded: (data_governance)
        Downloaded content from a policy
    :ivar LegalHoldsActivateAHoldType EventType.legal_holds_activate_a_hold:
        (data_governance) Activated a hold
    :ivar LegalHoldsAddMembersType EventType.legal_holds_add_members:
        (data_governance) Added members to a hold
    :ivar LegalHoldsChangeHoldDetailsType
        EventType.legal_holds_change_hold_details: (data_governance) Edited
        details for a hold
    :ivar LegalHoldsChangeHoldNameType EventType.legal_holds_change_hold_name:
        (data_governance) Renamed a hold
    :ivar LegalHoldsExportAHoldType EventType.legal_holds_export_a_hold:
        (data_governance) Exported hold
    :ivar LegalHoldsExportCancelledType EventType.legal_holds_export_cancelled:
        (data_governance) Canceled export for a hold
    :ivar LegalHoldsExportDownloadedType
        EventType.legal_holds_export_downloaded: (data_governance) Downloaded
        export for a hold
    :ivar LegalHoldsExportRemovedType EventType.legal_holds_export_removed:
        (data_governance) Removed export for a hold
    :ivar LegalHoldsReleaseAHoldType EventType.legal_holds_release_a_hold:
        (data_governance) Released a hold
    :ivar LegalHoldsRemoveMembersType EventType.legal_holds_remove_members:
        (data_governance) Removed members from a hold
    :ivar LegalHoldsReportAHoldType EventType.legal_holds_report_a_hold:
        (data_governance) Created a summary report for a hold
    :ivar DeviceChangeIpDesktopType EventType.device_change_ip_desktop:
        (devices) Changed IP address associated with active desktop session
    :ivar DeviceChangeIpMobileType EventType.device_change_ip_mobile: (devices)
        Changed IP address associated with active mobile session
    :ivar DeviceChangeIpWebType EventType.device_change_ip_web: (devices)
        Changed IP address associated with active web session
    :ivar DeviceDeleteOnUnlinkFailType EventType.device_delete_on_unlink_fail:
        (devices) Failed to delete all files from unlinked device
    :ivar DeviceDeleteOnUnlinkSuccessType
        EventType.device_delete_on_unlink_success: (devices) Deleted all files
        from unlinked device
    :ivar DeviceLinkFailType EventType.device_link_fail: (devices) Failed to
        link device
    :ivar DeviceLinkSuccessType EventType.device_link_success: (devices) Linked
        device
    :ivar DeviceManagementDisabledType EventType.device_management_disabled:
        (devices) Disabled device management (deprecated, no longer logged)
    :ivar DeviceManagementEnabledType EventType.device_management_enabled:
        (devices) Enabled device management (deprecated, no longer logged)
    :ivar DeviceSyncBackupStatusChangedType
        EventType.device_sync_backup_status_changed: (devices) Enabled/disabled
        backup for computer
    :ivar DeviceUnlinkType EventType.device_unlink: (devices) Disconnected
        device
    :ivar DropboxPasswordsExportedType EventType.dropbox_passwords_exported:
        (devices) Exported passwords
    :ivar DropboxPasswordsNewDeviceEnrolledType
        EventType.dropbox_passwords_new_device_enrolled: (devices) Enrolled new
        Dropbox Passwords device
    :ivar EmmRefreshAuthTokenType EventType.emm_refresh_auth_token: (devices)
        Refreshed auth token used for setting up EMM
    :ivar ExternalDriveBackupEligibilityStatusCheckedType
        EventType.external_drive_backup_eligibility_status_checked: (devices)
        Checked external drive backup eligibility status
    :ivar ExternalDriveBackupStatusChangedType
        EventType.external_drive_backup_status_changed: (devices) Modified
        external drive backup
    :ivar AccountCaptureChangeAvailabilityType
        EventType.account_capture_change_availability: (domains) Granted/revoked
        option to enable account capture on team domains
    :ivar AccountCaptureMigrateAccountType
        EventType.account_capture_migrate_account: (domains) Account-captured
        user migrated account to team
    :ivar AccountCaptureNotificationEmailsSentType
        EventType.account_capture_notification_emails_sent: (domains) Sent
        account capture email to all unmanaged members
    :ivar AccountCaptureRelinquishAccountType
        EventType.account_capture_relinquish_account: (domains) Account-captured
        user changed account email to personal email
    :ivar DisabledDomainInvitesType EventType.disabled_domain_invites: (domains)
        Disabled domain invites (deprecated, no longer logged)
    :ivar DomainInvitesApproveRequestToJoinTeamType
        EventType.domain_invites_approve_request_to_join_team: (domains)
        Approved user's request to join team
    :ivar DomainInvitesDeclineRequestToJoinTeamType
        EventType.domain_invites_decline_request_to_join_team: (domains)
        Declined user's request to join team
    :ivar DomainInvitesEmailExistingUsersType
        EventType.domain_invites_email_existing_users: (domains) Sent domain
        invites to existing domain accounts (deprecated, no longer logged)
    :ivar DomainInvitesRequestToJoinTeamType
        EventType.domain_invites_request_to_join_team: (domains) Requested to
        join team
    :ivar DomainInvitesSetInviteNewUserPrefToNoType
        EventType.domain_invites_set_invite_new_user_pref_to_no: (domains)
        Disabled "Automatically invite new users" (deprecated, no longer logged)
    :ivar DomainInvitesSetInviteNewUserPrefToYesType
        EventType.domain_invites_set_invite_new_user_pref_to_yes: (domains)
        Enabled "Automatically invite new users" (deprecated, no longer logged)
    :ivar DomainVerificationAddDomainFailType
        EventType.domain_verification_add_domain_fail: (domains) Failed to
        verify team domain
    :ivar DomainVerificationAddDomainSuccessType
        EventType.domain_verification_add_domain_success: (domains) Verified
        team domain
    :ivar DomainVerificationRemoveDomainType
        EventType.domain_verification_remove_domain: (domains) Removed domain
        from list of verified team domains
    :ivar EnabledDomainInvitesType EventType.enabled_domain_invites: (domains)
        Enabled domain invites (deprecated, no longer logged)
    :ivar TeamEncryptionKeyCancelKeyDeletionType
        EventType.team_encryption_key_cancel_key_deletion: (encryption) Canceled
        team encryption key deletion
    :ivar TeamEncryptionKeyCreateKeyType
        EventType.team_encryption_key_create_key: (encryption) Created team
        encryption key
    :ivar TeamEncryptionKeyDeleteKeyType
        EventType.team_encryption_key_delete_key: (encryption) Deleted team
        encryption key
    :ivar TeamEncryptionKeyDisableKeyType
        EventType.team_encryption_key_disable_key: (encryption) Disabled team
        encryption key
    :ivar TeamEncryptionKeyEnableKeyType
        EventType.team_encryption_key_enable_key: (encryption) Enabled team
        encryption key
    :ivar TeamEncryptionKeyRotateKeyType
        EventType.team_encryption_key_rotate_key: (encryption) Rotated team
        encryption key (deprecated, no longer logged)
    :ivar TeamEncryptionKeyScheduleKeyDeletionType
        EventType.team_encryption_key_schedule_key_deletion: (encryption)
        Scheduled encryption key deletion
    :ivar ApplyNamingConventionType EventType.apply_naming_convention:
        (file_operations) Applied naming convention
    :ivar CreateFolderType EventType.create_folder: (file_operations) Created
        folders (deprecated, no longer logged)
    :ivar FileAddType EventType.file_add: (file_operations) Added files and/or
        folders
    :ivar FileAddFromAutomationType EventType.file_add_from_automation:
        (file_operations) Added files and/or folders from automation
    :ivar FileCopyType EventType.file_copy: (file_operations) Copied files
        and/or folders
    :ivar FileDeleteType EventType.file_delete: (file_operations) Deleted files
        and/or folders
    :ivar FileDownloadType EventType.file_download: (file_operations) Downloaded
        files and/or folders
    :ivar FileEditType EventType.file_edit: (file_operations) Edited files
    :ivar FileGetCopyReferenceType EventType.file_get_copy_reference:
        (file_operations) Created copy reference to file/folder
    :ivar FileLockingLockStatusChangedType
        EventType.file_locking_lock_status_changed: (file_operations)
        Locked/unlocked editing for a file
    :ivar FileMoveType EventType.file_move: (file_operations) Moved files and/or
        folders
    :ivar FilePermanentlyDeleteType EventType.file_permanently_delete:
        (file_operations) Permanently deleted files and/or folders
    :ivar FilePreviewType EventType.file_preview: (file_operations) Previewed
        files and/or folders
    :ivar FileRenameType EventType.file_rename: (file_operations) Renamed files
        and/or folders
    :ivar FileRestoreType EventType.file_restore: (file_operations) Restored
        deleted files and/or folders
    :ivar FileRevertType EventType.file_revert: (file_operations) Reverted files
        to previous version
    :ivar FileRollbackChangesType EventType.file_rollback_changes:
        (file_operations) Rolled back file actions
    :ivar FileSaveCopyReferenceType EventType.file_save_copy_reference:
        (file_operations) Saved file/folder using copy reference
    :ivar FolderOverviewDescriptionChangedType
        EventType.folder_overview_description_changed: (file_operations) Updated
        folder overview
    :ivar FolderOverviewItemPinnedType EventType.folder_overview_item_pinned:
        (file_operations) Pinned item to folder overview
    :ivar FolderOverviewItemUnpinnedType
        EventType.folder_overview_item_unpinned: (file_operations) Unpinned item
        from folder overview
    :ivar ObjectLabelAddedType EventType.object_label_added: (file_operations)
        Added a label
    :ivar ObjectLabelRemovedType EventType.object_label_removed:
        (file_operations) Removed a label
    :ivar ObjectLabelUpdatedValueType EventType.object_label_updated_value:
        (file_operations) Updated a label's value
    :ivar OrganizeFolderWithTidyType EventType.organize_folder_with_tidy:
        (file_operations) Organized a folder with multi-file organize
    :ivar ReplayFileDeleteType EventType.replay_file_delete: (file_operations)
        Deleted files in Replay
    :ivar RewindFolderType EventType.rewind_folder: (file_operations) Rewound a
        folder
    :ivar UndoNamingConventionType EventType.undo_naming_convention:
        (file_operations) Reverted naming convention
    :ivar UndoOrganizeFolderWithTidyType
        EventType.undo_organize_folder_with_tidy: (file_operations) Removed
        multi-file organize
    :ivar UserTagsAddedType EventType.user_tags_added: (file_operations) Tagged
        a file
    :ivar UserTagsRemovedType EventType.user_tags_removed: (file_operations)
        Removed tags
    :ivar EmailIngestReceiveFileType EventType.email_ingest_receive_file:
        (file_requests) Received files via Email to Dropbox
    :ivar FileRequestChangeType EventType.file_request_change: (file_requests)
        Changed file request
    :ivar FileRequestCloseType EventType.file_request_close: (file_requests)
        Closed file request
    :ivar FileRequestCreateType EventType.file_request_create: (file_requests)
        Created file request
    :ivar FileRequestDeleteType EventType.file_request_delete: (file_requests)
        Delete file request
    :ivar FileRequestReceiveFileType EventType.file_request_receive_file:
        (file_requests) Received files for file request
    :ivar GroupAddExternalIdType EventType.group_add_external_id: (groups) Added
        external ID for group
    :ivar GroupAddMemberType EventType.group_add_member: (groups) Added team
        members to group
    :ivar GroupChangeExternalIdType EventType.group_change_external_id: (groups)
        Changed external ID for group
    :ivar GroupChangeManagementTypeType EventType.group_change_management_type:
        (groups) Changed group management type
    :ivar GroupChangeMemberRoleType EventType.group_change_member_role: (groups)
        Changed manager permissions of group member
    :ivar GroupCreateType EventType.group_create: (groups) Created group
    :ivar GroupDeleteType EventType.group_delete: (groups) Deleted group
    :ivar GroupDescriptionUpdatedType EventType.group_description_updated:
        (groups) Updated group (deprecated, no longer logged)
    :ivar GroupJoinPolicyUpdatedType EventType.group_join_policy_updated:
        (groups) Updated group join policy (deprecated, no longer logged)
    :ivar GroupMovedType EventType.group_moved: (groups) Moved group
        (deprecated, no longer logged)
    :ivar GroupRemoveExternalIdType EventType.group_remove_external_id: (groups)
        Removed external ID for group
    :ivar GroupRemoveMemberType EventType.group_remove_member: (groups) Removed
        team members from group
    :ivar GroupRenameType EventType.group_rename: (groups) Renamed group
    :ivar AccountLockOrUnlockedType EventType.account_lock_or_unlocked: (logins)
        Unlocked/locked account after failed sign in attempts
    :ivar EmmErrorType EventType.emm_error: (logins) Failed to sign in via EMM
        (deprecated, replaced by 'Failed to sign in')
    :ivar GuestAdminSignedInViaTrustedTeamsType
        EventType.guest_admin_signed_in_via_trusted_teams: (logins) Started
        trusted team admin session
    :ivar GuestAdminSignedOutViaTrustedTeamsType
        EventType.guest_admin_signed_out_via_trusted_teams: (logins) Ended
        trusted team admin session
    :ivar LoginFailType EventType.login_fail: (logins) Failed to sign in
    :ivar LoginSuccessType EventType.login_success: (logins) Signed in
    :ivar LogoutType EventType.logout: (logins) Signed out
    :ivar ResellerSupportSessionEndType EventType.reseller_support_session_end:
        (logins) Ended reseller support session
    :ivar ResellerSupportSessionStartType
        EventType.reseller_support_session_start: (logins) Started reseller
        support session
    :ivar SignInAsSessionEndType EventType.sign_in_as_session_end: (logins)
        Ended admin sign-in-as session
    :ivar SignInAsSessionStartType EventType.sign_in_as_session_start: (logins)
        Started admin sign-in-as session
    :ivar SsoErrorType EventType.sso_error: (logins) Failed to sign in via SSO
        (deprecated, replaced by 'Failed to sign in')
    :ivar BackupAdminInvitationSentType EventType.backup_admin_invitation_sent:
        (members) Invited members to activate Backup
    :ivar BackupInvitationOpenedType EventType.backup_invitation_opened:
        (members) Opened Backup invite
    :ivar CreateTeamInviteLinkType EventType.create_team_invite_link: (members)
        Created team invite link
    :ivar DeleteTeamInviteLinkType EventType.delete_team_invite_link: (members)
        Deleted team invite link
    :ivar MemberAddExternalIdType EventType.member_add_external_id: (members)
        Added an external ID for team member
    :ivar MemberAddNameType EventType.member_add_name: (members) Added team
        member name
    :ivar MemberChangeAdminRoleType EventType.member_change_admin_role:
        (members) Changed team member admin role
    :ivar MemberChangeEmailType EventType.member_change_email: (members) Changed
        team member email
    :ivar MemberChangeExternalIdType EventType.member_change_external_id:
        (members) Changed the external ID for team member
    :ivar MemberChangeMembershipTypeType
        EventType.member_change_membership_type: (members) Changed membership
        type (limited/full) of member (deprecated, no longer logged)
    :ivar MemberChangeNameType EventType.member_change_name: (members) Changed
        team member name
    :ivar MemberChangeResellerRoleType EventType.member_change_reseller_role:
        (members) Changed team member reseller role
    :ivar MemberChangeStatusType EventType.member_change_status: (members)
        Changed member status (invited, joined, suspended, etc.)
    :ivar MemberDeleteManualContactsType
        EventType.member_delete_manual_contacts: (members) Cleared manually
        added contacts
    :ivar MemberDeleteProfilePhotoType EventType.member_delete_profile_photo:
        (members) Deleted team member profile photo
    :ivar MemberPermanentlyDeleteAccountContentsType
        EventType.member_permanently_delete_account_contents: (members)
        Permanently deleted contents of deleted team member account
    :ivar MemberRemoveExternalIdType EventType.member_remove_external_id:
        (members) Removed the external ID for team member
    :ivar MemberSetProfilePhotoType EventType.member_set_profile_photo:
        (members) Set team member profile photo
    :ivar MemberSpaceLimitsAddCustomQuotaType
        EventType.member_space_limits_add_custom_quota: (members) Set custom
        member space limit
    :ivar MemberSpaceLimitsChangeCustomQuotaType
        EventType.member_space_limits_change_custom_quota: (members) Changed
        custom member space limit
    :ivar MemberSpaceLimitsChangeStatusType
        EventType.member_space_limits_change_status: (members) Changed space
        limit status
    :ivar MemberSpaceLimitsRemoveCustomQuotaType
        EventType.member_space_limits_remove_custom_quota: (members) Removed
        custom member space limit
    :ivar MemberSuggestType EventType.member_suggest: (members) Suggested person
        to add to team
    :ivar MemberTransferAccountContentsType
        EventType.member_transfer_account_contents: (members) Transferred
        contents of deleted member account to another member
    :ivar PendingSecondaryEmailAddedType
        EventType.pending_secondary_email_added: (members) Added pending
        secondary email
    :ivar SecondaryEmailDeletedType EventType.secondary_email_deleted: (members)
        Deleted secondary email
    :ivar SecondaryEmailVerifiedType EventType.secondary_email_verified:
        (members) Verified secondary email
    :ivar SecondaryMailsPolicyChangedType
        EventType.secondary_mails_policy_changed: (members) Secondary mails
        policy changed
    :ivar BinderAddPageType EventType.binder_add_page: (paper) Added Binder page
        (deprecated, replaced by 'Edited files')
    :ivar BinderAddSectionType EventType.binder_add_section: (paper) Added
        Binder section (deprecated, replaced by 'Edited files')
    :ivar BinderRemovePageType EventType.binder_remove_page: (paper) Removed
        Binder page (deprecated, replaced by 'Edited files')
    :ivar BinderRemoveSectionType EventType.binder_remove_section: (paper)
        Removed Binder section (deprecated, replaced by 'Edited files')
    :ivar BinderRenamePageType EventType.binder_rename_page: (paper) Renamed
        Binder page (deprecated, replaced by 'Edited files')
    :ivar BinderRenameSectionType EventType.binder_rename_section: (paper)
        Renamed Binder section (deprecated, replaced by 'Edited files')
    :ivar BinderReorderPageType EventType.binder_reorder_page: (paper) Reordered
        Binder page (deprecated, replaced by 'Edited files')
    :ivar BinderReorderSectionType EventType.binder_reorder_section: (paper)
        Reordered Binder section (deprecated, replaced by 'Edited files')
    :ivar PaperContentAddMemberType EventType.paper_content_add_member: (paper)
        Added users and/or groups to Paper doc/folder
    :ivar PaperContentAddToFolderType EventType.paper_content_add_to_folder:
        (paper) Added Paper doc/folder to folder
    :ivar PaperContentArchiveType EventType.paper_content_archive: (paper)
        Archived Paper doc/folder
    :ivar PaperContentCreateType EventType.paper_content_create: (paper) Created
        Paper doc/folder
    :ivar PaperContentPermanentlyDeleteType
        EventType.paper_content_permanently_delete: (paper) Permanently deleted
        Paper doc/folder
    :ivar PaperContentRemoveFromFolderType
        EventType.paper_content_remove_from_folder: (paper) Removed Paper
        doc/folder from folder
    :ivar PaperContentRemoveMemberType EventType.paper_content_remove_member:
        (paper) Removed users and/or groups from Paper doc/folder
    :ivar PaperContentRenameType EventType.paper_content_rename: (paper) Renamed
        Paper doc/folder
    :ivar PaperContentRestoreType EventType.paper_content_restore: (paper)
        Restored archived Paper doc/folder
    :ivar PaperDocAddCommentType EventType.paper_doc_add_comment: (paper) Added
        Paper doc comment
    :ivar PaperDocChangeMemberRoleType EventType.paper_doc_change_member_role:
        (paper) Changed member permissions for Paper doc
    :ivar PaperDocChangeSharingPolicyType
        EventType.paper_doc_change_sharing_policy: (paper) Changed sharing
        setting for Paper doc
    :ivar PaperDocChangeSubscriptionType
        EventType.paper_doc_change_subscription: (paper) Followed/unfollowed
        Paper doc
    :ivar PaperDocDeletedType EventType.paper_doc_deleted: (paper) Archived
        Paper doc (deprecated, no longer logged)
    :ivar PaperDocDeleteCommentType EventType.paper_doc_delete_comment: (paper)
        Deleted Paper doc comment
    :ivar PaperDocDownloadType EventType.paper_doc_download: (paper) Downloaded
        Paper doc in specific format
    :ivar PaperDocEditType EventType.paper_doc_edit: (paper) Edited Paper doc
    :ivar PaperDocEditCommentType EventType.paper_doc_edit_comment: (paper)
        Edited Paper doc comment
    :ivar PaperDocFollowedType EventType.paper_doc_followed: (paper) Followed
        Paper doc (deprecated, replaced by 'Followed/unfollowed Paper doc')
    :ivar PaperDocMentionType EventType.paper_doc_mention: (paper) Mentioned
        user in Paper doc
    :ivar PaperDocOwnershipChangedType EventType.paper_doc_ownership_changed:
        (paper) Transferred ownership of Paper doc
    :ivar PaperDocRequestAccessType EventType.paper_doc_request_access: (paper)
        Requested access to Paper doc
    :ivar PaperDocResolveCommentType EventType.paper_doc_resolve_comment:
        (paper) Resolved Paper doc comment
    :ivar PaperDocRevertType EventType.paper_doc_revert: (paper) Restored Paper
        doc to previous version
    :ivar PaperDocSlackShareType EventType.paper_doc_slack_share: (paper) Shared
        Paper doc via Slack
    :ivar PaperDocTeamInviteType EventType.paper_doc_team_invite: (paper) Shared
        Paper doc with users and/or groups (deprecated, no longer logged)
    :ivar PaperDocTrashedType EventType.paper_doc_trashed: (paper) Deleted Paper
        doc
    :ivar PaperDocUnresolveCommentType EventType.paper_doc_unresolve_comment:
        (paper) Unresolved Paper doc comment
    :ivar PaperDocUntrashedType EventType.paper_doc_untrashed: (paper) Restored
        Paper doc
    :ivar PaperDocViewType EventType.paper_doc_view: (paper) Viewed Paper doc
    :ivar PaperExternalViewAllowType EventType.paper_external_view_allow:
        (paper) Changed Paper external sharing setting to anyone (deprecated, no
        longer logged)
    :ivar PaperExternalViewDefaultTeamType
        EventType.paper_external_view_default_team: (paper) Changed Paper
        external sharing setting to default team (deprecated, no longer logged)
    :ivar PaperExternalViewForbidType EventType.paper_external_view_forbid:
        (paper) Changed Paper external sharing setting to team-only (deprecated,
        no longer logged)
    :ivar PaperFolderChangeSubscriptionType
        EventType.paper_folder_change_subscription: (paper) Followed/unfollowed
        Paper folder
    :ivar PaperFolderDeletedType EventType.paper_folder_deleted: (paper)
        Archived Paper folder (deprecated, no longer logged)
    :ivar PaperFolderFollowedType EventType.paper_folder_followed: (paper)
        Followed Paper folder (deprecated, replaced by 'Followed/unfollowed
        Paper folder')
    :ivar PaperFolderTeamInviteType EventType.paper_folder_team_invite: (paper)
        Shared Paper folder with users and/or groups (deprecated, no longer
        logged)
    :ivar PaperPublishedLinkChangePermissionType
        EventType.paper_published_link_change_permission: (paper) Changed
        permissions for published doc
    :ivar PaperPublishedLinkCreateType EventType.paper_published_link_create:
        (paper) Published doc
    :ivar PaperPublishedLinkDisabledType
        EventType.paper_published_link_disabled: (paper) Unpublished doc
    :ivar PaperPublishedLinkViewType EventType.paper_published_link_view:
        (paper) Viewed published doc
    :ivar PasswordChangeType EventType.password_change: (passwords) Changed
        password
    :ivar PasswordResetType EventType.password_reset: (passwords) Reset password
    :ivar PasswordResetAllType EventType.password_reset_all: (passwords) Reset
        all team member passwords
    :ivar ClassificationCreateReportType EventType.classification_create_report:
        (reports) Created Classification report
    :ivar ClassificationCreateReportFailType
        EventType.classification_create_report_fail: (reports) Couldn't create
        Classification report
    :ivar EmmCreateExceptionsReportType EventType.emm_create_exceptions_report:
        (reports) Created EMM-excluded users report
    :ivar EmmCreateUsageReportType EventType.emm_create_usage_report: (reports)
        Created EMM mobile app usage report
    :ivar ExportMembersReportType EventType.export_members_report: (reports)
        Created member data report
    :ivar ExportMembersReportFailType EventType.export_members_report_fail:
        (reports) Failed to create members data report
    :ivar ExternalSharingCreateReportType
        EventType.external_sharing_create_report: (reports) Created External
        sharing report
    :ivar ExternalSharingReportFailedType
        EventType.external_sharing_report_failed: (reports) Couldn't create
        External sharing report
    :ivar NoExpirationLinkGenCreateReportType
        EventType.no_expiration_link_gen_create_report: (reports) Report
        created: Links created with no expiration
    :ivar NoExpirationLinkGenReportFailedType
        EventType.no_expiration_link_gen_report_failed: (reports) Couldn't
        create report: Links created with no expiration
    :ivar NoPasswordLinkGenCreateReportType
        EventType.no_password_link_gen_create_report: (reports) Report created:
        Links created without passwords
    :ivar NoPasswordLinkGenReportFailedType
        EventType.no_password_link_gen_report_failed: (reports) Couldn't create
        report: Links created without passwords
    :ivar NoPasswordLinkViewCreateReportType
        EventType.no_password_link_view_create_report: (reports) Report created:
        Views of links without passwords
    :ivar NoPasswordLinkViewReportFailedType
        EventType.no_password_link_view_report_failed: (reports) Couldn't create
        report: Views of links without passwords
    :ivar OutdatedLinkViewCreateReportType
        EventType.outdated_link_view_create_report: (reports) Report created:
        Views of old links
    :ivar OutdatedLinkViewReportFailedType
        EventType.outdated_link_view_report_failed: (reports) Couldn't create
        report: Views of old links
    :ivar PaperAdminExportStartType EventType.paper_admin_export_start:
        (reports) Exported all team Paper docs
    :ivar RansomwareAlertCreateReportType
        EventType.ransomware_alert_create_report: (reports) Created ransomware
        report
    :ivar RansomwareAlertCreateReportFailedType
        EventType.ransomware_alert_create_report_failed: (reports) Couldn't
        generate ransomware report
    :ivar SmartSyncCreateAdminPrivilegeReportType
        EventType.smart_sync_create_admin_privilege_report: (reports) Created
        Smart Sync non-admin devices report
    :ivar TeamActivityCreateReportType EventType.team_activity_create_report:
        (reports) Created team activity report
    :ivar TeamActivityCreateReportFailType
        EventType.team_activity_create_report_fail: (reports) Couldn't generate
        team activity report
    :ivar CollectionShareType EventType.collection_share: (sharing) Shared album
    :ivar FileTransfersFileAddType EventType.file_transfers_file_add: (sharing)
        Transfer files added
    :ivar FileTransfersTransferDeleteType
        EventType.file_transfers_transfer_delete: (sharing) Deleted transfer
    :ivar FileTransfersTransferDownloadType
        EventType.file_transfers_transfer_download: (sharing) Transfer
        downloaded
    :ivar FileTransfersTransferSendType EventType.file_transfers_transfer_send:
        (sharing) Sent transfer
    :ivar FileTransfersTransferViewType EventType.file_transfers_transfer_view:
        (sharing) Viewed transfer
    :ivar NoteAclInviteOnlyType EventType.note_acl_invite_only: (sharing)
        Changed Paper doc to invite-only (deprecated, no longer logged)
    :ivar NoteAclLinkType EventType.note_acl_link: (sharing) Changed Paper doc
        to link-accessible (deprecated, no longer logged)
    :ivar NoteAclTeamLinkType EventType.note_acl_team_link: (sharing) Changed
        Paper doc to link-accessible for team (deprecated, no longer logged)
    :ivar NoteSharedType EventType.note_shared: (sharing) Shared Paper doc
        (deprecated, no longer logged)
    :ivar NoteShareReceiveType EventType.note_share_receive: (sharing) Shared
        received Paper doc (deprecated, no longer logged)
    :ivar OpenNoteSharedType EventType.open_note_shared: (sharing) Opened shared
        Paper doc (deprecated, no longer logged)
    :ivar ReplayFileSharedLinkCreatedType
        EventType.replay_file_shared_link_created: (sharing) Created shared link
        in Replay
    :ivar ReplayFileSharedLinkModifiedType
        EventType.replay_file_shared_link_modified: (sharing) Modified shared
        link in Replay
    :ivar ReplayProjectTeamAddType EventType.replay_project_team_add: (sharing)
        Added member to Replay Project
    :ivar ReplayProjectTeamDeleteType EventType.replay_project_team_delete:
        (sharing) Removed member from Replay Project
    :ivar SfAddGroupType EventType.sf_add_group: (sharing) Added team to shared
        folder (deprecated, no longer logged)
    :ivar SfAllowNonMembersToViewSharedLinksType
        EventType.sf_allow_non_members_to_view_shared_links: (sharing) Allowed
        non-collaborators to view links to files in shared folder (deprecated,
        no longer logged)
    :ivar SfExternalInviteWarnType EventType.sf_external_invite_warn: (sharing)
        Set team members to see warning before sharing folders outside team
        (deprecated, no longer logged)
    :ivar SfFbInviteType EventType.sf_fb_invite: (sharing) Invited Facebook
        users to shared folder (deprecated, no longer logged)
    :ivar SfFbInviteChangeRoleType EventType.sf_fb_invite_change_role: (sharing)
        Changed Facebook user's role in shared folder (deprecated, no longer
        logged)
    :ivar SfFbUninviteType EventType.sf_fb_uninvite: (sharing) Uninvited
        Facebook user from shared folder (deprecated, no longer logged)
    :ivar SfInviteGroupType EventType.sf_invite_group: (sharing) Invited group
        to shared folder (deprecated, no longer logged)
    :ivar SfTeamGrantAccessType EventType.sf_team_grant_access: (sharing)
        Granted access to shared folder (deprecated, no longer logged)
    :ivar SfTeamInviteType EventType.sf_team_invite: (sharing) Invited team
        members to shared folder (deprecated, replaced by 'Invited user to
        Dropbox and added them to shared file/folder')
    :ivar SfTeamInviteChangeRoleType EventType.sf_team_invite_change_role:
        (sharing) Changed team member's role in shared folder (deprecated, no
        longer logged)
    :ivar SfTeamJoinType EventType.sf_team_join: (sharing) Joined team member's
        shared folder (deprecated, no longer logged)
    :ivar SfTeamJoinFromOobLinkType EventType.sf_team_join_from_oob_link:
        (sharing) Joined team member's shared folder from link (deprecated, no
        longer logged)
    :ivar SfTeamUninviteType EventType.sf_team_uninvite: (sharing) Unshared
        folder with team member (deprecated, replaced by 'Removed invitee from
        shared file/folder before invite was accepted')
    :ivar SharedContentAddInviteesType EventType.shared_content_add_invitees:
        (sharing) Invited user to Dropbox and added them to shared file/folder
    :ivar SharedContentAddLinkExpiryType
        EventType.shared_content_add_link_expiry: (sharing) Added expiration
        date to link for shared file/folder (deprecated, no longer logged)
    :ivar SharedContentAddLinkPasswordType
        EventType.shared_content_add_link_password: (sharing) Added password to
        link for shared file/folder (deprecated, no longer logged)
    :ivar SharedContentAddMemberType EventType.shared_content_add_member:
        (sharing) Added users and/or groups to shared file/folder
    :ivar SharedContentChangeDownloadsPolicyType
        EventType.shared_content_change_downloads_policy: (sharing) Changed
        whether members can download shared file/folder (deprecated, no longer
        logged)
    :ivar SharedContentChangeInviteeRoleType
        EventType.shared_content_change_invitee_role: (sharing) Changed access
        type of invitee to shared file/folder before invite was accepted
    :ivar SharedContentChangeLinkAudienceType
        EventType.shared_content_change_link_audience: (sharing) Changed link
        audience of shared file/folder (deprecated, no longer logged)
    :ivar SharedContentChangeLinkExpiryType
        EventType.shared_content_change_link_expiry: (sharing) Changed link
        expiration of shared file/folder (deprecated, no longer logged)
    :ivar SharedContentChangeLinkPasswordType
        EventType.shared_content_change_link_password: (sharing) Changed link
        password of shared file/folder (deprecated, no longer logged)
    :ivar SharedContentChangeMemberRoleType
        EventType.shared_content_change_member_role: (sharing) Changed access
        type of shared file/folder member
    :ivar SharedContentChangeViewerInfoPolicyType
        EventType.shared_content_change_viewer_info_policy: (sharing) Changed
        whether members can see who viewed shared file/folder
    :ivar SharedContentClaimInvitationType
        EventType.shared_content_claim_invitation: (sharing) Acquired membership
        of shared file/folder by accepting invite
    :ivar SharedContentCopyType EventType.shared_content_copy: (sharing) Copied
        shared file/folder to own Dropbox
    :ivar SharedContentDownloadType EventType.shared_content_download: (sharing)
        Downloaded shared file/folder
    :ivar SharedContentRelinquishMembershipType
        EventType.shared_content_relinquish_membership: (sharing) Left shared
        file/folder
    :ivar SharedContentRemoveInviteesType
        EventType.shared_content_remove_invitees: (sharing) Removed invitee from
        shared file/folder before invite was accepted
    :ivar SharedContentRemoveLinkExpiryType
        EventType.shared_content_remove_link_expiry: (sharing) Removed link
        expiration date of shared file/folder (deprecated, no longer logged)
    :ivar SharedContentRemoveLinkPasswordType
        EventType.shared_content_remove_link_password: (sharing) Removed link
        password of shared file/folder (deprecated, no longer logged)
    :ivar SharedContentRemoveMemberType EventType.shared_content_remove_member:
        (sharing) Removed user/group from shared file/folder
    :ivar SharedContentRequestAccessType
        EventType.shared_content_request_access: (sharing) Requested access to
        shared file/folder
    :ivar SharedContentRestoreInviteesType
        EventType.shared_content_restore_invitees: (sharing) Restored shared
        file/folder invitees
    :ivar SharedContentRestoreMemberType
        EventType.shared_content_restore_member: (sharing) Restored users and/or
        groups to membership of shared file/folder
    :ivar SharedContentUnshareType EventType.shared_content_unshare: (sharing)
        Unshared file/folder by clearing membership
    :ivar SharedContentViewType EventType.shared_content_view: (sharing)
        Previewed shared file/folder
    :ivar SharedFolderChangeLinkPolicyType
        EventType.shared_folder_change_link_policy: (sharing) Changed who can
        access shared folder via link
    :ivar SharedFolderChangeMembersInheritancePolicyType
        EventType.shared_folder_change_members_inheritance_policy: (sharing)
        Changed whether shared folder inherits members from parent folder
    :ivar SharedFolderChangeMembersManagementPolicyType
        EventType.shared_folder_change_members_management_policy: (sharing)
        Changed who can add/remove members of shared folder
    :ivar SharedFolderChangeMembersPolicyType
        EventType.shared_folder_change_members_policy: (sharing) Changed who can
        become member of shared folder
    :ivar SharedFolderCreateType EventType.shared_folder_create: (sharing)
        Created shared folder
    :ivar SharedFolderDeclineInvitationType
        EventType.shared_folder_decline_invitation: (sharing) Declined team
        member's invite to shared folder
    :ivar SharedFolderMountType EventType.shared_folder_mount: (sharing) Added
        shared folder to own Dropbox
    :ivar SharedFolderNestType EventType.shared_folder_nest: (sharing) Changed
        parent of shared folder
    :ivar SharedFolderTransferOwnershipType
        EventType.shared_folder_transfer_ownership: (sharing) Transferred
        ownership of shared folder to another member
    :ivar SharedFolderUnmountType EventType.shared_folder_unmount: (sharing)
        Deleted shared folder from Dropbox
    :ivar SharedLinkAddExpiryType EventType.shared_link_add_expiry: (sharing)
        Added shared link expiration date
    :ivar SharedLinkChangeExpiryType EventType.shared_link_change_expiry:
        (sharing) Changed shared link expiration date
    :ivar SharedLinkChangeVisibilityType
        EventType.shared_link_change_visibility: (sharing) Changed visibility of
        shared link
    :ivar SharedLinkCopyType EventType.shared_link_copy: (sharing) Added
        file/folder to Dropbox from shared link
    :ivar SharedLinkCreateType EventType.shared_link_create: (sharing) Created
        shared link
    :ivar SharedLinkDisableType EventType.shared_link_disable: (sharing) Removed
        shared link
    :ivar SharedLinkDownloadType EventType.shared_link_download: (sharing)
        Downloaded file/folder from shared link
    :ivar SharedLinkRemoveExpiryType EventType.shared_link_remove_expiry:
        (sharing) Removed shared link expiration date
    :ivar SharedLinkSettingsAddExpirationType
        EventType.shared_link_settings_add_expiration: (sharing) Added an
        expiration date to the shared link
    :ivar SharedLinkSettingsAddPasswordType
        EventType.shared_link_settings_add_password: (sharing) Added a password
        to the shared link
    :ivar SharedLinkSettingsAllowDownloadDisabledType
        EventType.shared_link_settings_allow_download_disabled: (sharing)
        Disabled downloads
    :ivar SharedLinkSettingsAllowDownloadEnabledType
        EventType.shared_link_settings_allow_download_enabled: (sharing) Enabled
        downloads
    :ivar SharedLinkSettingsChangeAudienceType
        EventType.shared_link_settings_change_audience: (sharing) Changed the
        audience of the shared link
    :ivar SharedLinkSettingsChangeExpirationType
        EventType.shared_link_settings_change_expiration: (sharing) Changed the
        expiration date of the shared link
    :ivar SharedLinkSettingsChangePasswordType
        EventType.shared_link_settings_change_password: (sharing) Changed the
        password of the shared link
    :ivar SharedLinkSettingsRemoveExpirationType
        EventType.shared_link_settings_remove_expiration: (sharing) Removed the
        expiration date from the shared link
    :ivar SharedLinkSettingsRemovePasswordType
        EventType.shared_link_settings_remove_password: (sharing) Removed the
        password from the shared link
    :ivar SharedLinkShareType EventType.shared_link_share: (sharing) Added
        members as audience of shared link
    :ivar SharedLinkViewType EventType.shared_link_view: (sharing) Opened shared
        link
    :ivar SharedNoteOpenedType EventType.shared_note_opened: (sharing) Opened
        shared Paper doc (deprecated, no longer logged)
    :ivar ShmodelDisableDownloadsType EventType.shmodel_disable_downloads:
        (sharing) Disabled downloads for link (deprecated, no longer logged)
    :ivar ShmodelEnableDownloadsType EventType.shmodel_enable_downloads:
        (sharing) Enabled downloads for link (deprecated, no longer logged)
    :ivar ShmodelGroupShareType EventType.shmodel_group_share: (sharing) Shared
        link with group (deprecated, no longer logged)
    :ivar ShowcaseAccessGrantedType EventType.showcase_access_granted:
        (showcase) Granted access to showcase
    :ivar ShowcaseAddMemberType EventType.showcase_add_member: (showcase) Added
        member to showcase
    :ivar ShowcaseArchivedType EventType.showcase_archived: (showcase) Archived
        showcase
    :ivar ShowcaseCreatedType EventType.showcase_created: (showcase) Created
        showcase
    :ivar ShowcaseDeleteCommentType EventType.showcase_delete_comment:
        (showcase) Deleted showcase comment
    :ivar ShowcaseEditedType EventType.showcase_edited: (showcase) Edited
        showcase
    :ivar ShowcaseEditCommentType EventType.showcase_edit_comment: (showcase)
        Edited showcase comment
    :ivar ShowcaseFileAddedType EventType.showcase_file_added: (showcase) Added
        file to showcase
    :ivar ShowcaseFileDownloadType EventType.showcase_file_download: (showcase)
        Downloaded file from showcase
    :ivar ShowcaseFileRemovedType EventType.showcase_file_removed: (showcase)
        Removed file from showcase
    :ivar ShowcaseFileViewType EventType.showcase_file_view: (showcase) Viewed
        file in showcase
    :ivar ShowcasePermanentlyDeletedType EventType.showcase_permanently_deleted:
        (showcase) Permanently deleted showcase
    :ivar ShowcasePostCommentType EventType.showcase_post_comment: (showcase)
        Added showcase comment
    :ivar ShowcaseRemoveMemberType EventType.showcase_remove_member: (showcase)
        Removed member from showcase
    :ivar ShowcaseRenamedType EventType.showcase_renamed: (showcase) Renamed
        showcase
    :ivar ShowcaseRequestAccessType EventType.showcase_request_access:
        (showcase) Requested access to showcase
    :ivar ShowcaseResolveCommentType EventType.showcase_resolve_comment:
        (showcase) Resolved showcase comment
    :ivar ShowcaseRestoredType EventType.showcase_restored: (showcase)
        Unarchived showcase
    :ivar ShowcaseTrashedType EventType.showcase_trashed: (showcase) Deleted
        showcase
    :ivar ShowcaseTrashedDeprecatedType EventType.showcase_trashed_deprecated:
        (showcase) Deleted showcase (old version) (deprecated, replaced by
        'Deleted showcase')
    :ivar ShowcaseUnresolveCommentType EventType.showcase_unresolve_comment:
        (showcase) Unresolved showcase comment
    :ivar ShowcaseUntrashedType EventType.showcase_untrashed: (showcase)
        Restored showcase
    :ivar ShowcaseUntrashedDeprecatedType
        EventType.showcase_untrashed_deprecated: (showcase) Restored showcase
        (old version) (deprecated, replaced by 'Restored showcase')
    :ivar ShowcaseViewType EventType.showcase_view: (showcase) Viewed showcase
    :ivar SsoAddCertType EventType.sso_add_cert: (sso) Added X.509 certificate
        for SSO
    :ivar SsoAddLoginUrlType EventType.sso_add_login_url: (sso) Added sign-in
        URL for SSO
    :ivar SsoAddLogoutUrlType EventType.sso_add_logout_url: (sso) Added sign-out
        URL for SSO
    :ivar SsoChangeCertType EventType.sso_change_cert: (sso) Changed X.509
        certificate for SSO
    :ivar SsoChangeLoginUrlType EventType.sso_change_login_url: (sso) Changed
        sign-in URL for SSO
    :ivar SsoChangeLogoutUrlType EventType.sso_change_logout_url: (sso) Changed
        sign-out URL for SSO
    :ivar SsoChangeSamlIdentityModeType EventType.sso_change_saml_identity_mode:
        (sso) Changed SAML identity mode for SSO
    :ivar SsoRemoveCertType EventType.sso_remove_cert: (sso) Removed X.509
        certificate for SSO
    :ivar SsoRemoveLoginUrlType EventType.sso_remove_login_url: (sso) Removed
        sign-in URL for SSO
    :ivar SsoRemoveLogoutUrlType EventType.sso_remove_logout_url: (sso) Removed
        sign-out URL for SSO
    :ivar TeamFolderChangeStatusType EventType.team_folder_change_status:
        (team_folders) Changed archival status of team folder
    :ivar TeamFolderCreateType EventType.team_folder_create: (team_folders)
        Created team folder in active status
    :ivar TeamFolderDowngradeType EventType.team_folder_downgrade:
        (team_folders) Downgraded team folder to regular shared folder
    :ivar TeamFolderPermanentlyDeleteType
        EventType.team_folder_permanently_delete: (team_folders) Permanently
        deleted archived team folder
    :ivar TeamFolderRenameType EventType.team_folder_rename: (team_folders)
        Renamed active/archived team folder
    :ivar TeamSelectiveSyncSettingsChangedType
        EventType.team_selective_sync_settings_changed: (team_folders) Changed
        sync default
    :ivar AccountCaptureChangePolicyType
        EventType.account_capture_change_policy: (team_policies) Changed account
        capture setting on team domain
    :ivar AdminEmailRemindersChangedType
        EventType.admin_email_reminders_changed: (team_policies) Changed admin
        reminder settings for requests to join the team
    :ivar AllowDownloadDisabledType EventType.allow_download_disabled:
        (team_policies) Disabled downloads (deprecated, no longer logged)
    :ivar AllowDownloadEnabledType EventType.allow_download_enabled:
        (team_policies) Enabled downloads (deprecated, no longer logged)
    :ivar AppPermissionsChangedType EventType.app_permissions_changed:
        (team_policies) Changed app permissions
    :ivar CameraUploadsPolicyChangedType
        EventType.camera_uploads_policy_changed: (team_policies) Changed camera
        uploads setting for team
    :ivar CaptureTranscriptPolicyChangedType
        EventType.capture_transcript_policy_changed: (team_policies) Changed
        Capture transcription policy for team
    :ivar ClassificationChangePolicyType EventType.classification_change_policy:
        (team_policies) Changed classification policy for team
    :ivar ComputerBackupPolicyChangedType
        EventType.computer_backup_policy_changed: (team_policies) Changed
        computer backup policy for team
    :ivar ContentAdministrationPolicyChangedType
        EventType.content_administration_policy_changed: (team_policies) Changed
        content management setting
    :ivar DataPlacementRestrictionChangePolicyType
        EventType.data_placement_restriction_change_policy: (team_policies) Set
        restrictions on data center locations where team data resides
    :ivar DataPlacementRestrictionSatisfyPolicyType
        EventType.data_placement_restriction_satisfy_policy: (team_policies)
        Completed restrictions on data center locations where team data resides
    :ivar DeviceApprovalsAddExceptionType
        EventType.device_approvals_add_exception: (team_policies) Added members
        to device approvals exception list
    :ivar DeviceApprovalsChangeDesktopPolicyType
        EventType.device_approvals_change_desktop_policy: (team_policies)
        Set/removed limit on number of computers member can link to team Dropbox
        account
    :ivar DeviceApprovalsChangeMobilePolicyType
        EventType.device_approvals_change_mobile_policy: (team_policies)
        Set/removed limit on number of mobile devices member can link to team
        Dropbox account
    :ivar DeviceApprovalsChangeOverageActionType
        EventType.device_approvals_change_overage_action: (team_policies)
        Changed device approvals setting when member is over limit
    :ivar DeviceApprovalsChangeUnlinkActionType
        EventType.device_approvals_change_unlink_action: (team_policies) Changed
        device approvals setting when member unlinks approved device
    :ivar DeviceApprovalsRemoveExceptionType
        EventType.device_approvals_remove_exception: (team_policies) Removed
        members from device approvals exception list
    :ivar DirectoryRestrictionsAddMembersType
        EventType.directory_restrictions_add_members: (team_policies) Added
        members to directory restrictions list
    :ivar DirectoryRestrictionsRemoveMembersType
        EventType.directory_restrictions_remove_members: (team_policies) Removed
        members from directory restrictions list
    :ivar DropboxPasswordsPolicyChangedType
        EventType.dropbox_passwords_policy_changed: (team_policies) Changed
        Dropbox Passwords policy for team
    :ivar EmailIngestPolicyChangedType EventType.email_ingest_policy_changed:
        (team_policies) Changed email to Dropbox policy for team
    :ivar EmmAddExceptionType EventType.emm_add_exception: (team_policies) Added
        members to EMM exception list
    :ivar EmmChangePolicyType EventType.emm_change_policy: (team_policies)
        Enabled/disabled enterprise mobility management for members
    :ivar EmmRemoveExceptionType EventType.emm_remove_exception: (team_policies)
        Removed members from EMM exception list
    :ivar ExtendedVersionHistoryChangePolicyType
        EventType.extended_version_history_change_policy: (team_policies)
        Accepted/opted out of extended version history
    :ivar ExternalDriveBackupPolicyChangedType
        EventType.external_drive_backup_policy_changed: (team_policies) Changed
        external drive backup policy for team
    :ivar FileCommentsChangePolicyType EventType.file_comments_change_policy:
        (team_policies) Enabled/disabled commenting on team files
    :ivar FileLockingPolicyChangedType EventType.file_locking_policy_changed:
        (team_policies) Changed file locking policy for team
    :ivar FileProviderMigrationPolicyChangedType
        EventType.file_provider_migration_policy_changed: (team_policies)
        Changed File Provider Migration policy for team
    :ivar FileRequestsChangePolicyType EventType.file_requests_change_policy:
        (team_policies) Enabled/disabled file requests
    :ivar FileRequestsEmailsEnabledType EventType.file_requests_emails_enabled:
        (team_policies) Enabled file request emails for everyone (deprecated, no
        longer logged)
    :ivar FileRequestsEmailsRestrictedToTeamOnlyType
        EventType.file_requests_emails_restricted_to_team_only: (team_policies)
        Enabled file request emails for team (deprecated, no longer logged)
    :ivar FileTransfersPolicyChangedType
        EventType.file_transfers_policy_changed: (team_policies) Changed file
        transfers policy for team
    :ivar FolderLinkRestrictionPolicyChangedType
        EventType.folder_link_restriction_policy_changed: (team_policies)
        Changed folder link restrictions policy for team
    :ivar GoogleSsoChangePolicyType EventType.google_sso_change_policy:
        (team_policies) Enabled/disabled Google single sign-on for team
    :ivar GroupUserManagementChangePolicyType
        EventType.group_user_management_change_policy: (team_policies) Changed
        who can create groups
    :ivar IntegrationPolicyChangedType EventType.integration_policy_changed:
        (team_policies) Changed integration policy for team
    :ivar InviteAcceptanceEmailPolicyChangedType
        EventType.invite_acceptance_email_policy_changed: (team_policies)
        Changed invite accept email policy for team
    :ivar MemberRequestsChangePolicyType
        EventType.member_requests_change_policy: (team_policies) Changed whether
        users can find team when not invited
    :ivar MemberSendInvitePolicyChangedType
        EventType.member_send_invite_policy_changed: (team_policies) Changed
        member send invite policy for team
    :ivar MemberSpaceLimitsAddExceptionType
        EventType.member_space_limits_add_exception: (team_policies) Added
        members to member space limit exception list
    :ivar MemberSpaceLimitsChangeCapsTypePolicyType
        EventType.member_space_limits_change_caps_type_policy: (team_policies)
        Changed member space limit type for team
    :ivar MemberSpaceLimitsChangePolicyType
        EventType.member_space_limits_change_policy: (team_policies) Changed
        team default member space limit
    :ivar MemberSpaceLimitsRemoveExceptionType
        EventType.member_space_limits_remove_exception: (team_policies) Removed
        members from member space limit exception list
    :ivar MemberSuggestionsChangePolicyType
        EventType.member_suggestions_change_policy: (team_policies)
        Enabled/disabled option for team members to suggest people to add to
        team
    :ivar MicrosoftOfficeAddinChangePolicyType
        EventType.microsoft_office_addin_change_policy: (team_policies)
        Enabled/disabled Microsoft Office add-in
    :ivar NetworkControlChangePolicyType
        EventType.network_control_change_policy: (team_policies)
        Enabled/disabled network control
    :ivar PaperChangeDeploymentPolicyType
        EventType.paper_change_deployment_policy: (team_policies) Changed
        whether Dropbox Paper, when enabled, is deployed to all members or to
        specific members
    :ivar PaperChangeMemberLinkPolicyType
        EventType.paper_change_member_link_policy: (team_policies) Changed
        whether non-members can view Paper docs with link (deprecated, no longer
        logged)
    :ivar PaperChangeMemberPolicyType EventType.paper_change_member_policy:
        (team_policies) Changed whether members can share Paper docs outside
        team, and if docs are accessible only by team members or anyone by
        default
    :ivar PaperChangePolicyType EventType.paper_change_policy: (team_policies)
        Enabled/disabled Dropbox Paper for team
    :ivar PaperDefaultFolderPolicyChangedType
        EventType.paper_default_folder_policy_changed: (team_policies) Changed
        Paper Default Folder Policy setting for team
    :ivar PaperDesktopPolicyChangedType EventType.paper_desktop_policy_changed:
        (team_policies) Enabled/disabled Paper Desktop for team
    :ivar PaperEnabledUsersGroupAdditionType
        EventType.paper_enabled_users_group_addition: (team_policies) Added
        users to Paper-enabled users list
    :ivar PaperEnabledUsersGroupRemovalType
        EventType.paper_enabled_users_group_removal: (team_policies) Removed
        users from Paper-enabled users list
    :ivar PasswordStrengthRequirementsChangePolicyType
        EventType.password_strength_requirements_change_policy: (team_policies)
        Changed team password strength requirements
    :ivar PermanentDeleteChangePolicyType
        EventType.permanent_delete_change_policy: (team_policies)
        Enabled/disabled ability of team members to permanently delete content
    :ivar ResellerSupportChangePolicyType
        EventType.reseller_support_change_policy: (team_policies)
        Enabled/disabled reseller support
    :ivar RewindPolicyChangedType EventType.rewind_policy_changed:
        (team_policies) Changed Rewind policy for team
    :ivar SendForSignaturePolicyChangedType
        EventType.send_for_signature_policy_changed: (team_policies) Changed
        send for signature policy for team
    :ivar SharingChangeFolderJoinPolicyType
        EventType.sharing_change_folder_join_policy: (team_policies) Changed
        whether team members can join shared folders owned outside team
    :ivar SharingChangeLinkAllowChangeExpirationPolicyType
        EventType.sharing_change_link_allow_change_expiration_policy:
        (team_policies) Changed the allow remove or change expiration policy for
        the links shared outside of the team
    :ivar SharingChangeLinkDefaultExpirationPolicyType
        EventType.sharing_change_link_default_expiration_policy: (team_policies)
        Changed the default expiration for the links shared outside of the team
    :ivar SharingChangeLinkEnforcePasswordPolicyType
        EventType.sharing_change_link_enforce_password_policy: (team_policies)
        Changed the password requirement for the links shared outside of the
        team
    :ivar SharingChangeLinkPolicyType EventType.sharing_change_link_policy:
        (team_policies) Changed whether members can share links outside team,
        and if links are accessible only by team members or anyone by default
    :ivar SharingChangeMemberPolicyType EventType.sharing_change_member_policy:
        (team_policies) Changed whether members can share files/folders outside
        team
    :ivar ShowcaseChangeDownloadPolicyType
        EventType.showcase_change_download_policy: (team_policies)
        Enabled/disabled downloading files from Dropbox Showcase for team
    :ivar ShowcaseChangeEnabledPolicyType
        EventType.showcase_change_enabled_policy: (team_policies)
        Enabled/disabled Dropbox Showcase for team
    :ivar ShowcaseChangeExternalSharingPolicyType
        EventType.showcase_change_external_sharing_policy: (team_policies)
        Enabled/disabled sharing Dropbox Showcase externally for team
    :ivar SmarterSmartSyncPolicyChangedType
        EventType.smarter_smart_sync_policy_changed: (team_policies) Changed
        automatic Smart Sync setting for team
    :ivar SmartSyncChangePolicyType EventType.smart_sync_change_policy:
        (team_policies) Changed default Smart Sync setting for team members
    :ivar SmartSyncNotOptOutType EventType.smart_sync_not_opt_out:
        (team_policies) Opted team into Smart Sync
    :ivar SmartSyncOptOutType EventType.smart_sync_opt_out: (team_policies)
        Opted team out of Smart Sync
    :ivar SsoChangePolicyType EventType.sso_change_policy: (team_policies)
        Changed single sign-on setting for team
    :ivar TeamBrandingPolicyChangedType EventType.team_branding_policy_changed:
        (team_policies) Changed team branding policy for team
    :ivar TeamExtensionsPolicyChangedType
        EventType.team_extensions_policy_changed: (team_policies) Changed App
        Integrations setting for team
    :ivar TeamSelectiveSyncPolicyChangedType
        EventType.team_selective_sync_policy_changed: (team_policies)
        Enabled/disabled Team Selective Sync for team
    :ivar TeamSharingWhitelistSubjectsChangedType
        EventType.team_sharing_whitelist_subjects_changed: (team_policies)
        Edited the approved list for sharing externally
    :ivar TfaAddExceptionType EventType.tfa_add_exception: (team_policies) Added
        members to two factor authentication exception list
    :ivar TfaChangePolicyType EventType.tfa_change_policy: (team_policies)
        Changed two-step verification setting for team
    :ivar TfaRemoveExceptionType EventType.tfa_remove_exception: (team_policies)
        Removed members from two factor authentication exception list
    :ivar TwoAccountChangePolicyType EventType.two_account_change_policy:
        (team_policies) Enabled/disabled option for members to link personal
        Dropbox account and team account to same computer
    :ivar ViewerInfoPolicyChangedType EventType.viewer_info_policy_changed:
        (team_policies) Changed team policy for viewer info
    :ivar WatermarkingPolicyChangedType EventType.watermarking_policy_changed:
        (team_policies) Changed watermarking policy for team
    :ivar WebSessionsChangeActiveSessionLimitType
        EventType.web_sessions_change_active_session_limit: (team_policies)
        Changed limit on active sessions per member
    :ivar WebSessionsChangeFixedLengthPolicyType
        EventType.web_sessions_change_fixed_length_policy: (team_policies)
        Changed how long members can stay signed in to Dropbox.com
    :ivar WebSessionsChangeIdleLengthPolicyType
        EventType.web_sessions_change_idle_length_policy: (team_policies)
        Changed how long team members can be idle while signed in to Dropbox.com
    :ivar DataResidencyMigrationRequestSuccessfulType
        EventType.data_residency_migration_request_successful: (team_profile)
        Requested data residency migration for team data
    :ivar DataResidencyMigrationRequestUnsuccessfulType
        EventType.data_residency_migration_request_unsuccessful: (team_profile)
        Request for data residency migration for team data has failed
    :ivar TeamMergeFromType EventType.team_merge_from: (team_profile) Merged
        another team into this team
    :ivar TeamMergeToType EventType.team_merge_to: (team_profile) Merged this
        team into another team
    :ivar TeamProfileAddBackgroundType EventType.team_profile_add_background:
        (team_profile) Added team background to display on shared link headers
    :ivar TeamProfileAddLogoType EventType.team_profile_add_logo: (team_profile)
        Added team logo to display on shared link headers
    :ivar TeamProfileChangeBackgroundType
        EventType.team_profile_change_background: (team_profile) Changed team
        background displayed on shared link headers
    :ivar TeamProfileChangeDefaultLanguageType
        EventType.team_profile_change_default_language: (team_profile) Changed
        default language for team
    :ivar TeamProfileChangeLogoType EventType.team_profile_change_logo:
        (team_profile) Changed team logo displayed on shared link headers
    :ivar TeamProfileChangeNameType EventType.team_profile_change_name:
        (team_profile) Changed team name
    :ivar TeamProfileRemoveBackgroundType
        EventType.team_profile_remove_background: (team_profile) Removed team
        background displayed on shared link headers
    :ivar TeamProfileRemoveLogoType EventType.team_profile_remove_logo:
        (team_profile) Removed team logo displayed on shared link headers
    :ivar TfaAddBackupPhoneType EventType.tfa_add_backup_phone: (tfa) Added
        backup phone for two-step verification
    :ivar TfaAddSecurityKeyType EventType.tfa_add_security_key: (tfa) Added
        security key for two-step verification
    :ivar TfaChangeBackupPhoneType EventType.tfa_change_backup_phone: (tfa)
        Changed backup phone for two-step verification
    :ivar TfaChangeStatusType EventType.tfa_change_status: (tfa)
        Enabled/disabled/changed two-step verification setting
    :ivar TfaRemoveBackupPhoneType EventType.tfa_remove_backup_phone: (tfa)
        Removed backup phone for two-step verification
    :ivar TfaRemoveSecurityKeyType EventType.tfa_remove_security_key: (tfa)
        Removed security key for two-step verification
    :ivar TfaResetType EventType.tfa_reset: (tfa) Reset two-step verification
        for team member
    :ivar ChangedEnterpriseAdminRoleType
        EventType.changed_enterprise_admin_role: (trusted_teams) Changed
        enterprise admin role
    :ivar ChangedEnterpriseConnectedTeamStatusType
        EventType.changed_enterprise_connected_team_status: (trusted_teams)
        Changed enterprise-connected team status
    :ivar EndedEnterpriseAdminSessionType
        EventType.ended_enterprise_admin_session: (trusted_teams) Ended
        enterprise admin session
    :ivar EndedEnterpriseAdminSessionDeprecatedType
        EventType.ended_enterprise_admin_session_deprecated: (trusted_teams)
        Ended enterprise admin session (deprecated, replaced by 'Ended
        enterprise admin session')
    :ivar EnterpriseSettingsLockingType EventType.enterprise_settings_locking:
        (trusted_teams) Changed who can update a setting
    :ivar GuestAdminChangeStatusType EventType.guest_admin_change_status:
        (trusted_teams) Changed guest team admin status
    :ivar StartedEnterpriseAdminSessionType
        EventType.started_enterprise_admin_session: (trusted_teams) Started
        enterprise admin session
    :ivar TeamMergeRequestAcceptedType EventType.team_merge_request_accepted:
        (trusted_teams) Accepted a team merge request
    :ivar TeamMergeRequestAcceptedShownToPrimaryTeamType
        EventType.team_merge_request_accepted_shown_to_primary_team:
        (trusted_teams) Accepted a team merge request (deprecated, replaced by
        'Accepted a team merge request')
    :ivar TeamMergeRequestAcceptedShownToSecondaryTeamType
        EventType.team_merge_request_accepted_shown_to_secondary_team:
        (trusted_teams) Accepted a team merge request (deprecated, replaced by
        'Accepted a team merge request')
    :ivar TeamMergeRequestAutoCanceledType
        EventType.team_merge_request_auto_canceled: (trusted_teams)
        Automatically canceled team merge request
    :ivar TeamMergeRequestCanceledType EventType.team_merge_request_canceled:
        (trusted_teams) Canceled a team merge request
    :ivar TeamMergeRequestCanceledShownToPrimaryTeamType
        EventType.team_merge_request_canceled_shown_to_primary_team:
        (trusted_teams) Canceled a team merge request (deprecated, replaced by
        'Canceled a team merge request')
    :ivar TeamMergeRequestCanceledShownToSecondaryTeamType
        EventType.team_merge_request_canceled_shown_to_secondary_team:
        (trusted_teams) Canceled a team merge request (deprecated, replaced by
        'Canceled a team merge request')
    :ivar TeamMergeRequestExpiredType EventType.team_merge_request_expired:
        (trusted_teams) Team merge request expired
    :ivar TeamMergeRequestExpiredShownToPrimaryTeamType
        EventType.team_merge_request_expired_shown_to_primary_team:
        (trusted_teams) Team merge request expired (deprecated, replaced by
        'Team merge request expired')
    :ivar TeamMergeRequestExpiredShownToSecondaryTeamType
        EventType.team_merge_request_expired_shown_to_secondary_team:
        (trusted_teams) Team merge request expired (deprecated, replaced by
        'Team merge request expired')
    :ivar TeamMergeRequestRejectedShownToPrimaryTeamType
        EventType.team_merge_request_rejected_shown_to_primary_team:
        (trusted_teams) Rejected a team merge request (deprecated, no longer
        logged)
    :ivar TeamMergeRequestRejectedShownToSecondaryTeamType
        EventType.team_merge_request_rejected_shown_to_secondary_team:
        (trusted_teams) Rejected a team merge request (deprecated, no longer
        logged)
    :ivar TeamMergeRequestReminderType EventType.team_merge_request_reminder:
        (trusted_teams) Sent a team merge request reminder
    :ivar TeamMergeRequestReminderShownToPrimaryTeamType
        EventType.team_merge_request_reminder_shown_to_primary_team:
        (trusted_teams) Sent a team merge request reminder (deprecated, replaced
        by 'Sent a team merge request reminder')
    :ivar TeamMergeRequestReminderShownToSecondaryTeamType
        EventType.team_merge_request_reminder_shown_to_secondary_team:
        (trusted_teams) Sent a team merge request reminder (deprecated, replaced
        by 'Sent a team merge request reminder')
    :ivar TeamMergeRequestRevokedType EventType.team_merge_request_revoked:
        (trusted_teams) Canceled the team merge
    :ivar TeamMergeRequestSentShownToPrimaryTeamType
        EventType.team_merge_request_sent_shown_to_primary_team: (trusted_teams)
        Requested to merge their Dropbox team into yours
    :ivar TeamMergeRequestSentShownToSecondaryTeamType
        EventType.team_merge_request_sent_shown_to_secondary_team:
        (trusted_teams) Requested to merge your team into another Dropbox team
    """
    _catch_all = ...
    other = ...
    @classmethod
    def admin_alerting_alert_state_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_alerting_alert_state_changed`` tag with value ``val``.

        :param AdminAlertingAlertStateChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def admin_alerting_changed_alert_config(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_alerting_changed_alert_config`` tag with value ``val``.

        :param AdminAlertingChangedAlertConfigType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def admin_alerting_triggered_alert(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_alerting_triggered_alert`` tag with value ``val``.

        :param AdminAlertingTriggeredAlertType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def ransomware_restore_process_completed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_restore_process_completed`` tag with value ``val``.

        :param RansomwareRestoreProcessCompletedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def ransomware_restore_process_started(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_restore_process_started`` tag with value ``val``.

        :param RansomwareRestoreProcessStartedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def app_blocked_by_permissions(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``app_blocked_by_permissions`` tag with value ``val``.

        :param AppBlockedByPermissionsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def app_link_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_link_team`` tag with
        value ``val``.

        :param AppLinkTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def app_link_user(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_link_user`` tag with
        value ``val``.

        :param AppLinkUserType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def app_unlink_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_unlink_team`` tag with
        value ``val``.

        :param AppUnlinkTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def app_unlink_user(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_unlink_user`` tag with
        value ``val``.

        :param AppUnlinkUserType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def integration_connected(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``integration_connected``
        tag with value ``val``.

        :param IntegrationConnectedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def integration_disconnected(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``integration_disconnected``
        tag with value ``val``.

        :param IntegrationDisconnectedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_add_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_add_comment`` tag
        with value ``val``.

        :param FileAddCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_change_comment_subscription(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_change_comment_subscription`` tag with value ``val``.

        :param FileChangeCommentSubscriptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_delete_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_delete_comment`` tag
        with value ``val``.

        :param FileDeleteCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_edit_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_edit_comment`` tag
        with value ``val``.

        :param FileEditCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_like_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_like_comment`` tag
        with value ``val``.

        :param FileLikeCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_resolve_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_resolve_comment`` tag
        with value ``val``.

        :param FileResolveCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_unlike_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_unlike_comment`` tag
        with value ``val``.

        :param FileUnlikeCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_unresolve_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_unresolve_comment``
        tag with value ``val``.

        :param FileUnresolveCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_add_folders(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_add_folders`` tag with value ``val``.

        :param GovernancePolicyAddFoldersType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_add_folder_failed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_add_folder_failed`` tag with value ``val``.

        :param GovernancePolicyAddFolderFailedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_content_disposed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_content_disposed`` tag with value ``val``.

        :param GovernancePolicyContentDisposedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``governance_policy_create``
        tag with value ``val``.

        :param GovernancePolicyCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``governance_policy_delete``
        tag with value ``val``.

        :param GovernancePolicyDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_edit_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_edit_details`` tag with value ``val``.

        :param GovernancePolicyEditDetailsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_edit_duration(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_edit_duration`` tag with value ``val``.

        :param GovernancePolicyEditDurationType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_export_created(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_export_created`` tag with value ``val``.

        :param GovernancePolicyExportCreatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_export_removed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_export_removed`` tag with value ``val``.

        :param GovernancePolicyExportRemovedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_remove_folders(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_remove_folders`` tag with value ``val``.

        :param GovernancePolicyRemoveFoldersType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_report_created(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_report_created`` tag with value ``val``.

        :param GovernancePolicyReportCreatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def governance_policy_zip_part_downloaded(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``governance_policy_zip_part_downloaded`` tag with value ``val``.

        :param GovernancePolicyZipPartDownloadedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_activate_a_hold(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_activate_a_hold`` tag with value ``val``.

        :param LegalHoldsActivateAHoldType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_add_members(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``legal_holds_add_members``
        tag with value ``val``.

        :param LegalHoldsAddMembersType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_change_hold_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_change_hold_details`` tag with value ``val``.

        :param LegalHoldsChangeHoldDetailsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_change_hold_name(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_change_hold_name`` tag with value ``val``.

        :param LegalHoldsChangeHoldNameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_export_a_hold(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_a_hold`` tag with value ``val``.

        :param LegalHoldsExportAHoldType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_export_cancelled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_cancelled`` tag with value ``val``.

        :param LegalHoldsExportCancelledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_export_downloaded(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_downloaded`` tag with value ``val``.

        :param LegalHoldsExportDownloadedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_export_removed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_export_removed`` tag with value ``val``.

        :param LegalHoldsExportRemovedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_release_a_hold(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_release_a_hold`` tag with value ``val``.

        :param LegalHoldsReleaseAHoldType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_remove_members(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_remove_members`` tag with value ``val``.

        :param LegalHoldsRemoveMembersType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def legal_holds_report_a_hold(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``legal_holds_report_a_hold`` tag with value ``val``.

        :param LegalHoldsReportAHoldType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_change_ip_desktop(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_change_ip_desktop``
        tag with value ``val``.

        :param DeviceChangeIpDesktopType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_change_ip_mobile(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_change_ip_mobile``
        tag with value ``val``.

        :param DeviceChangeIpMobileType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_change_ip_web(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_change_ip_web`` tag
        with value ``val``.

        :param DeviceChangeIpWebType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_delete_on_unlink_fail(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_delete_on_unlink_fail`` tag with value ``val``.

        :param DeviceDeleteOnUnlinkFailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_delete_on_unlink_success(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_delete_on_unlink_success`` tag with value ``val``.

        :param DeviceDeleteOnUnlinkSuccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_link_fail(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_link_fail`` tag
        with value ``val``.

        :param DeviceLinkFailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_link_success(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_link_success`` tag
        with value ``val``.

        :param DeviceLinkSuccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_management_disabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_management_disabled`` tag with value ``val``.

        :param DeviceManagementDisabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_management_enabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_management_enabled`` tag with value ``val``.

        :param DeviceManagementEnabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_sync_backup_status_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_sync_backup_status_changed`` tag with value ``val``.

        :param DeviceSyncBackupStatusChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_unlink(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``device_unlink`` tag with
        value ``val``.

        :param DeviceUnlinkType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def dropbox_passwords_exported(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``dropbox_passwords_exported`` tag with value ``val``.

        :param DropboxPasswordsExportedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def dropbox_passwords_new_device_enrolled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``dropbox_passwords_new_device_enrolled`` tag with value ``val``.

        :param DropboxPasswordsNewDeviceEnrolledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def emm_refresh_auth_token(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``emm_refresh_auth_token``
        tag with value ``val``.

        :param EmmRefreshAuthTokenType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def external_drive_backup_eligibility_status_checked(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_drive_backup_eligibility_status_checked`` tag with value
        ``val``.

        :param ExternalDriveBackupEligibilityStatusCheckedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def external_drive_backup_status_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_drive_backup_status_changed`` tag with value ``val``.

        :param ExternalDriveBackupStatusChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def account_capture_change_availability(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_change_availability`` tag with value ``val``.

        :param AccountCaptureChangeAvailabilityType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def account_capture_migrate_account(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_migrate_account`` tag with value ``val``.

        :param AccountCaptureMigrateAccountType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def account_capture_notification_emails_sent(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_notification_emails_sent`` tag with value ``val``.

        :param AccountCaptureNotificationEmailsSentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def account_capture_relinquish_account(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_relinquish_account`` tag with value ``val``.

        :param AccountCaptureRelinquishAccountType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def disabled_domain_invites(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``disabled_domain_invites``
        tag with value ``val``.

        :param DisabledDomainInvitesType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_invites_approve_request_to_join_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_approve_request_to_join_team`` tag with value ``val``.

        :param DomainInvitesApproveRequestToJoinTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_invites_decline_request_to_join_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_decline_request_to_join_team`` tag with value ``val``.

        :param DomainInvitesDeclineRequestToJoinTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_invites_email_existing_users(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_email_existing_users`` tag with value ``val``.

        :param DomainInvitesEmailExistingUsersType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_invites_request_to_join_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_request_to_join_team`` tag with value ``val``.

        :param DomainInvitesRequestToJoinTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_invites_set_invite_new_user_pref_to_no(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_set_invite_new_user_pref_to_no`` tag with value
        ``val``.

        :param DomainInvitesSetInviteNewUserPrefToNoType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_invites_set_invite_new_user_pref_to_yes(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_invites_set_invite_new_user_pref_to_yes`` tag with value
        ``val``.

        :param DomainInvitesSetInviteNewUserPrefToYesType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_verification_add_domain_fail(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_verification_add_domain_fail`` tag with value ``val``.

        :param DomainVerificationAddDomainFailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_verification_add_domain_success(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_verification_add_domain_success`` tag with value ``val``.

        :param DomainVerificationAddDomainSuccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def domain_verification_remove_domain(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``domain_verification_remove_domain`` tag with value ``val``.

        :param DomainVerificationRemoveDomainType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def enabled_domain_invites(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``enabled_domain_invites``
        tag with value ``val``.

        :param EnabledDomainInvitesType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_encryption_key_cancel_key_deletion(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_cancel_key_deletion`` tag with value ``val``.

        :param TeamEncryptionKeyCancelKeyDeletionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_encryption_key_create_key(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_create_key`` tag with value ``val``.

        :param TeamEncryptionKeyCreateKeyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_encryption_key_delete_key(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_delete_key`` tag with value ``val``.

        :param TeamEncryptionKeyDeleteKeyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_encryption_key_disable_key(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_disable_key`` tag with value ``val``.

        :param TeamEncryptionKeyDisableKeyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_encryption_key_enable_key(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_enable_key`` tag with value ``val``.

        :param TeamEncryptionKeyEnableKeyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_encryption_key_rotate_key(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_rotate_key`` tag with value ``val``.

        :param TeamEncryptionKeyRotateKeyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_encryption_key_schedule_key_deletion(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_encryption_key_schedule_key_deletion`` tag with value ``val``.

        :param TeamEncryptionKeyScheduleKeyDeletionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def apply_naming_convention(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``apply_naming_convention``
        tag with value ``val``.

        :param ApplyNamingConventionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def create_folder(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``create_folder`` tag with
        value ``val``.

        :param CreateFolderType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_add(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_add`` tag with value
        ``val``.

        :param FileAddType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_add_from_automation(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_add_from_automation``
        tag with value ``val``.

        :param FileAddFromAutomationType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_copy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_copy`` tag with value
        ``val``.

        :param FileCopyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_delete`` tag with
        value ``val``.

        :param FileDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_download(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_download`` tag with
        value ``val``.

        :param FileDownloadType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_edit(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_edit`` tag with value
        ``val``.

        :param FileEditType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_get_copy_reference(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_get_copy_reference``
        tag with value ``val``.

        :param FileGetCopyReferenceType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_locking_lock_status_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_locking_lock_status_changed`` tag with value ``val``.

        :param FileLockingLockStatusChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_move(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_move`` tag with value
        ``val``.

        :param FileMoveType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_permanently_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_permanently_delete``
        tag with value ``val``.

        :param FilePermanentlyDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_preview(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_preview`` tag with
        value ``val``.

        :param FilePreviewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_rename(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_rename`` tag with
        value ``val``.

        :param FileRenameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_restore(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_restore`` tag with
        value ``val``.

        :param FileRestoreType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_revert(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_revert`` tag with
        value ``val``.

        :param FileRevertType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_rollback_changes(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_rollback_changes``
        tag with value ``val``.

        :param FileRollbackChangesType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_save_copy_reference(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_save_copy_reference``
        tag with value ``val``.

        :param FileSaveCopyReferenceType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def folder_overview_description_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_overview_description_changed`` tag with value ``val``.

        :param FolderOverviewDescriptionChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def folder_overview_item_pinned(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_overview_item_pinned`` tag with value ``val``.

        :param FolderOverviewItemPinnedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def folder_overview_item_unpinned(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_overview_item_unpinned`` tag with value ``val``.

        :param FolderOverviewItemUnpinnedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def object_label_added(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``object_label_added`` tag
        with value ``val``.

        :param ObjectLabelAddedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def object_label_removed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``object_label_removed`` tag
        with value ``val``.

        :param ObjectLabelRemovedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def object_label_updated_value(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``object_label_updated_value`` tag with value ``val``.

        :param ObjectLabelUpdatedValueType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def organize_folder_with_tidy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``organize_folder_with_tidy`` tag with value ``val``.

        :param OrganizeFolderWithTidyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def replay_file_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``replay_file_delete`` tag
        with value ``val``.

        :param ReplayFileDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def rewind_folder(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``rewind_folder`` tag with
        value ``val``.

        :param RewindFolderType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def undo_naming_convention(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``undo_naming_convention``
        tag with value ``val``.

        :param UndoNamingConventionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def undo_organize_folder_with_tidy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``undo_organize_folder_with_tidy`` tag with value ``val``.

        :param UndoOrganizeFolderWithTidyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def user_tags_added(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``user_tags_added`` tag with
        value ``val``.

        :param UserTagsAddedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def user_tags_removed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``user_tags_removed`` tag
        with value ``val``.

        :param UserTagsRemovedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def email_ingest_receive_file(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``email_ingest_receive_file`` tag with value ``val``.

        :param EmailIngestReceiveFileType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_request_change(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_request_change`` tag
        with value ``val``.

        :param FileRequestChangeType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_request_close(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_request_close`` tag
        with value ``val``.

        :param FileRequestCloseType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_request_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_request_create`` tag
        with value ``val``.

        :param FileRequestCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_request_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_request_delete`` tag
        with value ``val``.

        :param FileRequestDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_request_receive_file(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_request_receive_file`` tag with value ``val``.

        :param FileRequestReceiveFileType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_add_external_id(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_add_external_id``
        tag with value ``val``.

        :param GroupAddExternalIdType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_add_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_add_member`` tag
        with value ``val``.

        :param GroupAddMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_change_external_id(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_change_external_id``
        tag with value ``val``.

        :param GroupChangeExternalIdType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_change_management_type(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_change_management_type`` tag with value ``val``.

        :param GroupChangeManagementTypeType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_change_member_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_change_member_role``
        tag with value ``val``.

        :param GroupChangeMemberRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_create`` tag with
        value ``val``.

        :param GroupCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_delete`` tag with
        value ``val``.

        :param GroupDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_description_updated(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_description_updated`` tag with value ``val``.

        :param GroupDescriptionUpdatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_join_policy_updated(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_join_policy_updated`` tag with value ``val``.

        :param GroupJoinPolicyUpdatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_moved(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_moved`` tag with
        value ``val``.

        :param GroupMovedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_remove_external_id(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_remove_external_id``
        tag with value ``val``.

        :param GroupRemoveExternalIdType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_remove_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_remove_member`` tag
        with value ``val``.

        :param GroupRemoveMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_rename(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group_rename`` tag with
        value ``val``.

        :param GroupRenameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def account_lock_or_unlocked(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``account_lock_or_unlocked``
        tag with value ``val``.

        :param AccountLockOrUnlockedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def emm_error(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``emm_error`` tag with value
        ``val``.

        :param EmmErrorType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def guest_admin_signed_in_via_trusted_teams(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``guest_admin_signed_in_via_trusted_teams`` tag with value ``val``.

        :param GuestAdminSignedInViaTrustedTeamsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def guest_admin_signed_out_via_trusted_teams(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``guest_admin_signed_out_via_trusted_teams`` tag with value ``val``.

        :param GuestAdminSignedOutViaTrustedTeamsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def login_fail(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``login_fail`` tag with
        value ``val``.

        :param LoginFailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def login_success(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``login_success`` tag with
        value ``val``.

        :param LoginSuccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def logout(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``logout`` tag with value
        ``val``.

        :param LogoutType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def reseller_support_session_end(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``reseller_support_session_end`` tag with value ``val``.

        :param ResellerSupportSessionEndType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def reseller_support_session_start(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``reseller_support_session_start`` tag with value ``val``.

        :param ResellerSupportSessionStartType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sign_in_as_session_end(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sign_in_as_session_end``
        tag with value ``val``.

        :param SignInAsSessionEndType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sign_in_as_session_start(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sign_in_as_session_start``
        tag with value ``val``.

        :param SignInAsSessionStartType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_error(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_error`` tag with value
        ``val``.

        :param SsoErrorType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def backup_admin_invitation_sent(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``backup_admin_invitation_sent`` tag with value ``val``.

        :param BackupAdminInvitationSentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def backup_invitation_opened(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``backup_invitation_opened``
        tag with value ``val``.

        :param BackupInvitationOpenedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def create_team_invite_link(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``create_team_invite_link``
        tag with value ``val``.

        :param CreateTeamInviteLinkType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def delete_team_invite_link(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``delete_team_invite_link``
        tag with value ``val``.

        :param DeleteTeamInviteLinkType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_add_external_id(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_add_external_id``
        tag with value ``val``.

        :param MemberAddExternalIdType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_add_name(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_add_name`` tag with
        value ``val``.

        :param MemberAddNameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_change_admin_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_change_admin_role``
        tag with value ``val``.

        :param MemberChangeAdminRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_change_email(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_change_email`` tag
        with value ``val``.

        :param MemberChangeEmailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_change_external_id(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_external_id`` tag with value ``val``.

        :param MemberChangeExternalIdType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_change_membership_type(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_membership_type`` tag with value ``val``.

        :param MemberChangeMembershipTypeType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_change_name(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_change_name`` tag
        with value ``val``.

        :param MemberChangeNameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_change_reseller_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_change_reseller_role`` tag with value ``val``.

        :param MemberChangeResellerRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_change_status(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_change_status`` tag
        with value ``val``.

        :param MemberChangeStatusType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_delete_manual_contacts(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_delete_manual_contacts`` tag with value ``val``.

        :param MemberDeleteManualContactsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_delete_profile_photo(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_delete_profile_photo`` tag with value ``val``.

        :param MemberDeleteProfilePhotoType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_permanently_delete_account_contents(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_permanently_delete_account_contents`` tag with value ``val``.

        :param MemberPermanentlyDeleteAccountContentsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_remove_external_id(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_remove_external_id`` tag with value ``val``.

        :param MemberRemoveExternalIdType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_set_profile_photo(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_set_profile_photo``
        tag with value ``val``.

        :param MemberSetProfilePhotoType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_add_custom_quota(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_add_custom_quota`` tag with value ``val``.

        :param MemberSpaceLimitsAddCustomQuotaType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_change_custom_quota(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_custom_quota`` tag with value ``val``.

        :param MemberSpaceLimitsChangeCustomQuotaType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_change_status(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_status`` tag with value ``val``.

        :param MemberSpaceLimitsChangeStatusType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_remove_custom_quota(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_remove_custom_quota`` tag with value ``val``.

        :param MemberSpaceLimitsRemoveCustomQuotaType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_suggest(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``member_suggest`` tag with
        value ``val``.

        :param MemberSuggestType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_transfer_account_contents(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_transfer_account_contents`` tag with value ``val``.

        :param MemberTransferAccountContentsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def pending_secondary_email_added(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``pending_secondary_email_added`` tag with value ``val``.

        :param PendingSecondaryEmailAddedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def secondary_email_deleted(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``secondary_email_deleted``
        tag with value ``val``.

        :param SecondaryEmailDeletedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def secondary_email_verified(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``secondary_email_verified``
        tag with value ``val``.

        :param SecondaryEmailVerifiedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def secondary_mails_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``secondary_mails_policy_changed`` tag with value ``val``.

        :param SecondaryMailsPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_add_page(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_add_page`` tag with
        value ``val``.

        :param BinderAddPageType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_add_section(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_add_section`` tag
        with value ``val``.

        :param BinderAddSectionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_remove_page(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_remove_page`` tag
        with value ``val``.

        :param BinderRemovePageType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_remove_section(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_remove_section``
        tag with value ``val``.

        :param BinderRemoveSectionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_rename_page(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_rename_page`` tag
        with value ``val``.

        :param BinderRenamePageType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_rename_section(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_rename_section``
        tag with value ``val``.

        :param BinderRenameSectionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_reorder_page(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_reorder_page`` tag
        with value ``val``.

        :param BinderReorderPageType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def binder_reorder_section(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``binder_reorder_section``
        tag with value ``val``.

        :param BinderReorderSectionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_add_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_content_add_member``
        tag with value ``val``.

        :param PaperContentAddMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_add_to_folder(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_add_to_folder`` tag with value ``val``.

        :param PaperContentAddToFolderType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_archive(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_content_archive``
        tag with value ``val``.

        :param PaperContentArchiveType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_content_create`` tag
        with value ``val``.

        :param PaperContentCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_permanently_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_permanently_delete`` tag with value ``val``.

        :param PaperContentPermanentlyDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_remove_from_folder(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_remove_from_folder`` tag with value ``val``.

        :param PaperContentRemoveFromFolderType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_remove_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_content_remove_member`` tag with value ``val``.

        :param PaperContentRemoveMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_rename(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_content_rename`` tag
        with value ``val``.

        :param PaperContentRenameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_content_restore(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_content_restore``
        tag with value ``val``.

        :param PaperContentRestoreType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_add_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_add_comment``
        tag with value ``val``.

        :param PaperDocAddCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_change_member_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_change_member_role`` tag with value ``val``.

        :param PaperDocChangeMemberRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_change_sharing_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_change_sharing_policy`` tag with value ``val``.

        :param PaperDocChangeSharingPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_change_subscription(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_change_subscription`` tag with value ``val``.

        :param PaperDocChangeSubscriptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_deleted(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_deleted`` tag
        with value ``val``.

        :param PaperDocDeletedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_delete_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_delete_comment``
        tag with value ``val``.

        :param PaperDocDeleteCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_download(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_download`` tag
        with value ``val``.

        :param PaperDocDownloadType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_edit(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_edit`` tag with
        value ``val``.

        :param PaperDocEditType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_edit_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_edit_comment``
        tag with value ``val``.

        :param PaperDocEditCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_followed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_followed`` tag
        with value ``val``.

        :param PaperDocFollowedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_mention(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_mention`` tag
        with value ``val``.

        :param PaperDocMentionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_ownership_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_ownership_changed`` tag with value ``val``.

        :param PaperDocOwnershipChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_request_access(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_request_access``
        tag with value ``val``.

        :param PaperDocRequestAccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_resolve_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_resolve_comment`` tag with value ``val``.

        :param PaperDocResolveCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_revert(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_revert`` tag
        with value ``val``.

        :param PaperDocRevertType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_slack_share(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_slack_share``
        tag with value ``val``.

        :param PaperDocSlackShareType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_team_invite(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_team_invite``
        tag with value ``val``.

        :param PaperDocTeamInviteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_trashed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_trashed`` tag
        with value ``val``.

        :param PaperDocTrashedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_unresolve_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_doc_unresolve_comment`` tag with value ``val``.

        :param PaperDocUnresolveCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_untrashed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_untrashed`` tag
        with value ``val``.

        :param PaperDocUntrashedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_doc_view(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_doc_view`` tag with
        value ``val``.

        :param PaperDocViewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_external_view_allow(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_external_view_allow`` tag with value ``val``.

        :param PaperExternalViewAllowType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_external_view_default_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_external_view_default_team`` tag with value ``val``.

        :param PaperExternalViewDefaultTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_external_view_forbid(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_external_view_forbid`` tag with value ``val``.

        :param PaperExternalViewForbidType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_folder_change_subscription(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_folder_change_subscription`` tag with value ``val``.

        :param PaperFolderChangeSubscriptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_folder_deleted(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_folder_deleted`` tag
        with value ``val``.

        :param PaperFolderDeletedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_folder_followed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_folder_followed``
        tag with value ``val``.

        :param PaperFolderFollowedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_folder_team_invite(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_folder_team_invite``
        tag with value ``val``.

        :param PaperFolderTeamInviteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_published_link_change_permission(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_change_permission`` tag with value ``val``.

        :param PaperPublishedLinkChangePermissionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_published_link_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_create`` tag with value ``val``.

        :param PaperPublishedLinkCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_published_link_disabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_disabled`` tag with value ``val``.

        :param PaperPublishedLinkDisabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_published_link_view(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_published_link_view`` tag with value ``val``.

        :param PaperPublishedLinkViewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def password_change(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``password_change`` tag with
        value ``val``.

        :param PasswordChangeType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def password_reset(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``password_reset`` tag with
        value ``val``.

        :param PasswordResetType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def password_reset_all(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``password_reset_all`` tag
        with value ``val``.

        :param PasswordResetAllType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def classification_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``classification_create_report`` tag with value ``val``.

        :param ClassificationCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def classification_create_report_fail(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``classification_create_report_fail`` tag with value ``val``.

        :param ClassificationCreateReportFailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def emm_create_exceptions_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``emm_create_exceptions_report`` tag with value ``val``.

        :param EmmCreateExceptionsReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def emm_create_usage_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``emm_create_usage_report``
        tag with value ``val``.

        :param EmmCreateUsageReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def export_members_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``export_members_report``
        tag with value ``val``.

        :param ExportMembersReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def export_members_report_fail(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``export_members_report_fail`` tag with value ``val``.

        :param ExportMembersReportFailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def external_sharing_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_sharing_create_report`` tag with value ``val``.

        :param ExternalSharingCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def external_sharing_report_failed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_sharing_report_failed`` tag with value ``val``.

        :param ExternalSharingReportFailedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def no_expiration_link_gen_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_expiration_link_gen_create_report`` tag with value ``val``.

        :param NoExpirationLinkGenCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def no_expiration_link_gen_report_failed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_expiration_link_gen_report_failed`` tag with value ``val``.

        :param NoExpirationLinkGenReportFailedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def no_password_link_gen_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_gen_create_report`` tag with value ``val``.

        :param NoPasswordLinkGenCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def no_password_link_gen_report_failed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_gen_report_failed`` tag with value ``val``.

        :param NoPasswordLinkGenReportFailedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def no_password_link_view_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_view_create_report`` tag with value ``val``.

        :param NoPasswordLinkViewCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def no_password_link_view_report_failed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``no_password_link_view_report_failed`` tag with value ``val``.

        :param NoPasswordLinkViewReportFailedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def outdated_link_view_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``outdated_link_view_create_report`` tag with value ``val``.

        :param OutdatedLinkViewCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def outdated_link_view_report_failed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``outdated_link_view_report_failed`` tag with value ``val``.

        :param OutdatedLinkViewReportFailedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_admin_export_start(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_admin_export_start``
        tag with value ``val``.

        :param PaperAdminExportStartType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def ransomware_alert_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_alert_create_report`` tag with value ``val``.

        :param RansomwareAlertCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def ransomware_alert_create_report_failed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ransomware_alert_create_report_failed`` tag with value ``val``.

        :param RansomwareAlertCreateReportFailedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def smart_sync_create_admin_privilege_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``smart_sync_create_admin_privilege_report`` tag with value ``val``.

        :param SmartSyncCreateAdminPrivilegeReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_activity_create_report(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_activity_create_report`` tag with value ``val``.

        :param TeamActivityCreateReportType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_activity_create_report_fail(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_activity_create_report_fail`` tag with value ``val``.

        :param TeamActivityCreateReportFailType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def collection_share(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``collection_share`` tag
        with value ``val``.

        :param CollectionShareType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_transfers_file_add(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``file_transfers_file_add``
        tag with value ``val``.

        :param FileTransfersFileAddType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_transfers_transfer_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_delete`` tag with value ``val``.

        :param FileTransfersTransferDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_transfers_transfer_download(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_download`` tag with value ``val``.

        :param FileTransfersTransferDownloadType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_transfers_transfer_send(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_send`` tag with value ``val``.

        :param FileTransfersTransferSendType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_transfers_transfer_view(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_transfer_view`` tag with value ``val``.

        :param FileTransfersTransferViewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def note_acl_invite_only(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``note_acl_invite_only`` tag
        with value ``val``.

        :param NoteAclInviteOnlyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def note_acl_link(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``note_acl_link`` tag with
        value ``val``.

        :param NoteAclLinkType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def note_acl_team_link(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``note_acl_team_link`` tag
        with value ``val``.

        :param NoteAclTeamLinkType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def note_shared(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``note_shared`` tag with
        value ``val``.

        :param NoteSharedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def note_share_receive(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``note_share_receive`` tag
        with value ``val``.

        :param NoteShareReceiveType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def open_note_shared(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``open_note_shared`` tag
        with value ``val``.

        :param OpenNoteSharedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def replay_file_shared_link_created(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_file_shared_link_created`` tag with value ``val``.

        :param ReplayFileSharedLinkCreatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def replay_file_shared_link_modified(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_file_shared_link_modified`` tag with value ``val``.

        :param ReplayFileSharedLinkModifiedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def replay_project_team_add(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``replay_project_team_add``
        tag with value ``val``.

        :param ReplayProjectTeamAddType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def replay_project_team_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``replay_project_team_delete`` tag with value ``val``.

        :param ReplayProjectTeamDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_add_group(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_add_group`` tag with
        value ``val``.

        :param SfAddGroupType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_allow_non_members_to_view_shared_links(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_allow_non_members_to_view_shared_links`` tag with value ``val``.

        :param SfAllowNonMembersToViewSharedLinksType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_external_invite_warn(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_external_invite_warn``
        tag with value ``val``.

        :param SfExternalInviteWarnType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_fb_invite(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_fb_invite`` tag with
        value ``val``.

        :param SfFbInviteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_fb_invite_change_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_fb_invite_change_role``
        tag with value ``val``.

        :param SfFbInviteChangeRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_fb_uninvite(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_fb_uninvite`` tag with
        value ``val``.

        :param SfFbUninviteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_invite_group(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_invite_group`` tag with
        value ``val``.

        :param SfInviteGroupType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_team_grant_access(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_team_grant_access`` tag
        with value ``val``.

        :param SfTeamGrantAccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_team_invite(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_team_invite`` tag with
        value ``val``.

        :param SfTeamInviteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_team_invite_change_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_team_invite_change_role`` tag with value ``val``.

        :param SfTeamInviteChangeRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_team_join(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_team_join`` tag with
        value ``val``.

        :param SfTeamJoinType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_team_join_from_oob_link(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sf_team_join_from_oob_link`` tag with value ``val``.

        :param SfTeamJoinFromOobLinkType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sf_team_uninvite(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sf_team_uninvite`` tag
        with value ``val``.

        :param SfTeamUninviteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_add_invitees(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_invitees`` tag with value ``val``.

        :param SharedContentAddInviteesType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_add_link_expiry(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_link_expiry`` tag with value ``val``.

        :param SharedContentAddLinkExpiryType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_add_link_password(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_link_password`` tag with value ``val``.

        :param SharedContentAddLinkPasswordType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_add_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_add_member`` tag with value ``val``.

        :param SharedContentAddMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_change_downloads_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_downloads_policy`` tag with value ``val``.

        :param SharedContentChangeDownloadsPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_change_invitee_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_invitee_role`` tag with value ``val``.

        :param SharedContentChangeInviteeRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_change_link_audience(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_link_audience`` tag with value ``val``.

        :param SharedContentChangeLinkAudienceType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_change_link_expiry(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_link_expiry`` tag with value ``val``.

        :param SharedContentChangeLinkExpiryType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_change_link_password(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_link_password`` tag with value ``val``.

        :param SharedContentChangeLinkPasswordType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_change_member_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_member_role`` tag with value ``val``.

        :param SharedContentChangeMemberRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_change_viewer_info_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_change_viewer_info_policy`` tag with value ``val``.

        :param SharedContentChangeViewerInfoPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_claim_invitation(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_claim_invitation`` tag with value ``val``.

        :param SharedContentClaimInvitationType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_copy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_content_copy`` tag
        with value ``val``.

        :param SharedContentCopyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_download(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_content_download``
        tag with value ``val``.

        :param SharedContentDownloadType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_relinquish_membership(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_relinquish_membership`` tag with value ``val``.

        :param SharedContentRelinquishMembershipType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_remove_invitees(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_invitees`` tag with value ``val``.

        :param SharedContentRemoveInviteesType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_remove_link_expiry(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_link_expiry`` tag with value ``val``.

        :param SharedContentRemoveLinkExpiryType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_remove_link_password(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_link_password`` tag with value ``val``.

        :param SharedContentRemoveLinkPasswordType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_remove_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_remove_member`` tag with value ``val``.

        :param SharedContentRemoveMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_request_access(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_request_access`` tag with value ``val``.

        :param SharedContentRequestAccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_restore_invitees(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_restore_invitees`` tag with value ``val``.

        :param SharedContentRestoreInviteesType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_restore_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_content_restore_member`` tag with value ``val``.

        :param SharedContentRestoreMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_unshare(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_content_unshare``
        tag with value ``val``.

        :param SharedContentUnshareType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_content_view(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_content_view`` tag
        with value ``val``.

        :param SharedContentViewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_change_link_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_link_policy`` tag with value ``val``.

        :param SharedFolderChangeLinkPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_change_members_inheritance_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_members_inheritance_policy`` tag with value
        ``val``.

        :param SharedFolderChangeMembersInheritancePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_change_members_management_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_members_management_policy`` tag with value
        ``val``.

        :param SharedFolderChangeMembersManagementPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_change_members_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_change_members_policy`` tag with value ``val``.

        :param SharedFolderChangeMembersPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_folder_create`` tag
        with value ``val``.

        :param SharedFolderCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_decline_invitation(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_decline_invitation`` tag with value ``val``.

        :param SharedFolderDeclineInvitationType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_mount(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_folder_mount`` tag
        with value ``val``.

        :param SharedFolderMountType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_nest(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_folder_nest`` tag
        with value ``val``.

        :param SharedFolderNestType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_transfer_ownership(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_folder_transfer_ownership`` tag with value ``val``.

        :param SharedFolderTransferOwnershipType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_folder_unmount(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_folder_unmount``
        tag with value ``val``.

        :param SharedFolderUnmountType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_add_expiry(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_add_expiry``
        tag with value ``val``.

        :param SharedLinkAddExpiryType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_change_expiry(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_change_expiry`` tag with value ``val``.

        :param SharedLinkChangeExpiryType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_change_visibility(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_change_visibility`` tag with value ``val``.

        :param SharedLinkChangeVisibilityType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_copy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_copy`` tag
        with value ``val``.

        :param SharedLinkCopyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_create`` tag
        with value ``val``.

        :param SharedLinkCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_disable(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_disable`` tag
        with value ``val``.

        :param SharedLinkDisableType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_download(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_download`` tag
        with value ``val``.

        :param SharedLinkDownloadType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_remove_expiry(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_remove_expiry`` tag with value ``val``.

        :param SharedLinkRemoveExpiryType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_add_expiration(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_add_expiration`` tag with value ``val``.

        :param SharedLinkSettingsAddExpirationType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_add_password(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_add_password`` tag with value ``val``.

        :param SharedLinkSettingsAddPasswordType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_allow_download_disabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_allow_download_disabled`` tag with value ``val``.

        :param SharedLinkSettingsAllowDownloadDisabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_allow_download_enabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_allow_download_enabled`` tag with value ``val``.

        :param SharedLinkSettingsAllowDownloadEnabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_change_audience(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_change_audience`` tag with value ``val``.

        :param SharedLinkSettingsChangeAudienceType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_change_expiration(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_change_expiration`` tag with value ``val``.

        :param SharedLinkSettingsChangeExpirationType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_change_password(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_change_password`` tag with value ``val``.

        :param SharedLinkSettingsChangePasswordType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_remove_expiration(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_remove_expiration`` tag with value ``val``.

        :param SharedLinkSettingsRemoveExpirationType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_settings_remove_password(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shared_link_settings_remove_password`` tag with value ``val``.

        :param SharedLinkSettingsRemovePasswordType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_share(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_share`` tag
        with value ``val``.

        :param SharedLinkShareType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_link_view(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_link_view`` tag
        with value ``val``.

        :param SharedLinkViewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shared_note_opened(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shared_note_opened`` tag
        with value ``val``.

        :param SharedNoteOpenedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shmodel_disable_downloads(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``shmodel_disable_downloads`` tag with value ``val``.

        :param ShmodelDisableDownloadsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shmodel_enable_downloads(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shmodel_enable_downloads``
        tag with value ``val``.

        :param ShmodelEnableDownloadsType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def shmodel_group_share(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``shmodel_group_share`` tag
        with value ``val``.

        :param ShmodelGroupShareType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_access_granted(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_access_granted``
        tag with value ``val``.

        :param ShowcaseAccessGrantedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_add_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_add_member`` tag
        with value ``val``.

        :param ShowcaseAddMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_archived(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_archived`` tag
        with value ``val``.

        :param ShowcaseArchivedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_created(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_created`` tag
        with value ``val``.

        :param ShowcaseCreatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_delete_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_delete_comment``
        tag with value ``val``.

        :param ShowcaseDeleteCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_edited(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_edited`` tag with
        value ``val``.

        :param ShowcaseEditedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_edit_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_edit_comment``
        tag with value ``val``.

        :param ShowcaseEditCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_file_added(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_file_added`` tag
        with value ``val``.

        :param ShowcaseFileAddedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_file_download(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_file_download``
        tag with value ``val``.

        :param ShowcaseFileDownloadType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_file_removed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_file_removed``
        tag with value ``val``.

        :param ShowcaseFileRemovedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_file_view(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_file_view`` tag
        with value ``val``.

        :param ShowcaseFileViewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_permanently_deleted(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_permanently_deleted`` tag with value ``val``.

        :param ShowcasePermanentlyDeletedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_post_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_post_comment``
        tag with value ``val``.

        :param ShowcasePostCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_remove_member(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_remove_member``
        tag with value ``val``.

        :param ShowcaseRemoveMemberType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_renamed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_renamed`` tag
        with value ``val``.

        :param ShowcaseRenamedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_request_access(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_request_access``
        tag with value ``val``.

        :param ShowcaseRequestAccessType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_resolve_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_resolve_comment``
        tag with value ``val``.

        :param ShowcaseResolveCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_restored(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_restored`` tag
        with value ``val``.

        :param ShowcaseRestoredType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_trashed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_trashed`` tag
        with value ``val``.

        :param ShowcaseTrashedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_trashed_deprecated(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_trashed_deprecated`` tag with value ``val``.

        :param ShowcaseTrashedDeprecatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_unresolve_comment(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_unresolve_comment`` tag with value ``val``.

        :param ShowcaseUnresolveCommentType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_untrashed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_untrashed`` tag
        with value ``val``.

        :param ShowcaseUntrashedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_untrashed_deprecated(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_untrashed_deprecated`` tag with value ``val``.

        :param ShowcaseUntrashedDeprecatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_view(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``showcase_view`` tag with
        value ``val``.

        :param ShowcaseViewType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_add_cert(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_add_cert`` tag with
        value ``val``.

        :param SsoAddCertType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_add_login_url(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_add_login_url`` tag
        with value ``val``.

        :param SsoAddLoginUrlType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_add_logout_url(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_add_logout_url`` tag
        with value ``val``.

        :param SsoAddLogoutUrlType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_change_cert(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_change_cert`` tag with
        value ``val``.

        :param SsoChangeCertType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_change_login_url(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_change_login_url`` tag
        with value ``val``.

        :param SsoChangeLoginUrlType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_change_logout_url(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_change_logout_url``
        tag with value ``val``.

        :param SsoChangeLogoutUrlType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_change_saml_identity_mode(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sso_change_saml_identity_mode`` tag with value ``val``.

        :param SsoChangeSamlIdentityModeType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_remove_cert(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_remove_cert`` tag with
        value ``val``.

        :param SsoRemoveCertType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_remove_login_url(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_remove_login_url`` tag
        with value ``val``.

        :param SsoRemoveLoginUrlType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_remove_logout_url(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_remove_logout_url``
        tag with value ``val``.

        :param SsoRemoveLogoutUrlType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_folder_change_status(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_folder_change_status`` tag with value ``val``.

        :param TeamFolderChangeStatusType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_folder_create(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_folder_create`` tag
        with value ``val``.

        :param TeamFolderCreateType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_folder_downgrade(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_folder_downgrade``
        tag with value ``val``.

        :param TeamFolderDowngradeType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_folder_permanently_delete(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_folder_permanently_delete`` tag with value ``val``.

        :param TeamFolderPermanentlyDeleteType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_folder_rename(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_folder_rename`` tag
        with value ``val``.

        :param TeamFolderRenameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_selective_sync_settings_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_selective_sync_settings_changed`` tag with value ``val``.

        :param TeamSelectiveSyncSettingsChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def account_capture_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``account_capture_change_policy`` tag with value ``val``.

        :param AccountCaptureChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def admin_email_reminders_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``admin_email_reminders_changed`` tag with value ``val``.

        :param AdminEmailRemindersChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def allow_download_disabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``allow_download_disabled``
        tag with value ``val``.

        :param AllowDownloadDisabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def allow_download_enabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``allow_download_enabled``
        tag with value ``val``.

        :param AllowDownloadEnabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def app_permissions_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``app_permissions_changed``
        tag with value ``val``.

        :param AppPermissionsChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def camera_uploads_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``camera_uploads_policy_changed`` tag with value ``val``.

        :param CameraUploadsPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def capture_transcript_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``capture_transcript_policy_changed`` tag with value ``val``.

        :param CaptureTranscriptPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def classification_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``classification_change_policy`` tag with value ``val``.

        :param ClassificationChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def computer_backup_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``computer_backup_policy_changed`` tag with value ``val``.

        :param ComputerBackupPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def content_administration_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``content_administration_policy_changed`` tag with value ``val``.

        :param ContentAdministrationPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def data_placement_restriction_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_placement_restriction_change_policy`` tag with value ``val``.

        :param DataPlacementRestrictionChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def data_placement_restriction_satisfy_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_placement_restriction_satisfy_policy`` tag with value ``val``.

        :param DataPlacementRestrictionSatisfyPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_approvals_add_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_add_exception`` tag with value ``val``.

        :param DeviceApprovalsAddExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_approvals_change_desktop_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_desktop_policy`` tag with value ``val``.

        :param DeviceApprovalsChangeDesktopPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_approvals_change_mobile_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_mobile_policy`` tag with value ``val``.

        :param DeviceApprovalsChangeMobilePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_approvals_change_overage_action(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_overage_action`` tag with value ``val``.

        :param DeviceApprovalsChangeOverageActionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_approvals_change_unlink_action(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_change_unlink_action`` tag with value ``val``.

        :param DeviceApprovalsChangeUnlinkActionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def device_approvals_remove_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``device_approvals_remove_exception`` tag with value ``val``.

        :param DeviceApprovalsRemoveExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def directory_restrictions_add_members(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``directory_restrictions_add_members`` tag with value ``val``.

        :param DirectoryRestrictionsAddMembersType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def directory_restrictions_remove_members(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``directory_restrictions_remove_members`` tag with value ``val``.

        :param DirectoryRestrictionsRemoveMembersType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def dropbox_passwords_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``dropbox_passwords_policy_changed`` tag with value ``val``.

        :param DropboxPasswordsPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def email_ingest_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``email_ingest_policy_changed`` tag with value ``val``.

        :param EmailIngestPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def emm_add_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``emm_add_exception`` tag
        with value ``val``.

        :param EmmAddExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def emm_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``emm_change_policy`` tag
        with value ``val``.

        :param EmmChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def emm_remove_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``emm_remove_exception`` tag
        with value ``val``.

        :param EmmRemoveExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def extended_version_history_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``extended_version_history_change_policy`` tag with value ``val``.

        :param ExtendedVersionHistoryChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def external_drive_backup_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``external_drive_backup_policy_changed`` tag with value ``val``.

        :param ExternalDriveBackupPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_comments_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_comments_change_policy`` tag with value ``val``.

        :param FileCommentsChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_locking_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_locking_policy_changed`` tag with value ``val``.

        :param FileLockingPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_provider_migration_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_provider_migration_policy_changed`` tag with value ``val``.

        :param FileProviderMigrationPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_requests_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_requests_change_policy`` tag with value ``val``.

        :param FileRequestsChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_requests_emails_enabled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_requests_emails_enabled`` tag with value ``val``.

        :param FileRequestsEmailsEnabledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_requests_emails_restricted_to_team_only(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_requests_emails_restricted_to_team_only`` tag with value ``val``.

        :param FileRequestsEmailsRestrictedToTeamOnlyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def file_transfers_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``file_transfers_policy_changed`` tag with value ``val``.

        :param FileTransfersPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def folder_link_restriction_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``folder_link_restriction_policy_changed`` tag with value ``val``.

        :param FolderLinkRestrictionPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def google_sso_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``google_sso_change_policy``
        tag with value ``val``.

        :param GoogleSsoChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def group_user_management_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``group_user_management_change_policy`` tag with value ``val``.

        :param GroupUserManagementChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def integration_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``integration_policy_changed`` tag with value ``val``.

        :param IntegrationPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def invite_acceptance_email_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``invite_acceptance_email_policy_changed`` tag with value ``val``.

        :param InviteAcceptanceEmailPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_requests_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_requests_change_policy`` tag with value ``val``.

        :param MemberRequestsChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_send_invite_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_send_invite_policy_changed`` tag with value ``val``.

        :param MemberSendInvitePolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_add_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_add_exception`` tag with value ``val``.

        :param MemberSpaceLimitsAddExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_change_caps_type_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_caps_type_policy`` tag with value ``val``.

        :param MemberSpaceLimitsChangeCapsTypePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_change_policy`` tag with value ``val``.

        :param MemberSpaceLimitsChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_space_limits_remove_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_space_limits_remove_exception`` tag with value ``val``.

        :param MemberSpaceLimitsRemoveExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def member_suggestions_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``member_suggestions_change_policy`` tag with value ``val``.

        :param MemberSuggestionsChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def microsoft_office_addin_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``microsoft_office_addin_change_policy`` tag with value ``val``.

        :param MicrosoftOfficeAddinChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def network_control_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``network_control_change_policy`` tag with value ``val``.

        :param NetworkControlChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_change_deployment_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_change_deployment_policy`` tag with value ``val``.

        :param PaperChangeDeploymentPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_change_member_link_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_change_member_link_policy`` tag with value ``val``.

        :param PaperChangeMemberLinkPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_change_member_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_change_member_policy`` tag with value ``val``.

        :param PaperChangeMemberPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``paper_change_policy`` tag
        with value ``val``.

        :param PaperChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_default_folder_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_default_folder_policy_changed`` tag with value ``val``.

        :param PaperDefaultFolderPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_desktop_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_desktop_policy_changed`` tag with value ``val``.

        :param PaperDesktopPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_enabled_users_group_addition(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_enabled_users_group_addition`` tag with value ``val``.

        :param PaperEnabledUsersGroupAdditionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def paper_enabled_users_group_removal(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``paper_enabled_users_group_removal`` tag with value ``val``.

        :param PaperEnabledUsersGroupRemovalType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def password_strength_requirements_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``password_strength_requirements_change_policy`` tag with value ``val``.

        :param PasswordStrengthRequirementsChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def permanent_delete_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``permanent_delete_change_policy`` tag with value ``val``.

        :param PermanentDeleteChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def reseller_support_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``reseller_support_change_policy`` tag with value ``val``.

        :param ResellerSupportChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def rewind_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``rewind_policy_changed``
        tag with value ``val``.

        :param RewindPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def send_for_signature_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``send_for_signature_policy_changed`` tag with value ``val``.

        :param SendForSignaturePolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sharing_change_folder_join_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_folder_join_policy`` tag with value ``val``.

        :param SharingChangeFolderJoinPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sharing_change_link_allow_change_expiration_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_allow_change_expiration_policy`` tag with value
        ``val``.

        :param SharingChangeLinkAllowChangeExpirationPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sharing_change_link_default_expiration_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_default_expiration_policy`` tag with value
        ``val``.

        :param SharingChangeLinkDefaultExpirationPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sharing_change_link_enforce_password_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_enforce_password_policy`` tag with value ``val``.

        :param SharingChangeLinkEnforcePasswordPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sharing_change_link_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_link_policy`` tag with value ``val``.

        :param SharingChangeLinkPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sharing_change_member_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``sharing_change_member_policy`` tag with value ``val``.

        :param SharingChangeMemberPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_change_download_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_change_download_policy`` tag with value ``val``.

        :param ShowcaseChangeDownloadPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_change_enabled_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_change_enabled_policy`` tag with value ``val``.

        :param ShowcaseChangeEnabledPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def showcase_change_external_sharing_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``showcase_change_external_sharing_policy`` tag with value ``val``.

        :param ShowcaseChangeExternalSharingPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def smarter_smart_sync_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``smarter_smart_sync_policy_changed`` tag with value ``val``.

        :param SmarterSmartSyncPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def smart_sync_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``smart_sync_change_policy``
        tag with value ``val``.

        :param SmartSyncChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def smart_sync_not_opt_out(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``smart_sync_not_opt_out``
        tag with value ``val``.

        :param SmartSyncNotOptOutType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def smart_sync_opt_out(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``smart_sync_opt_out`` tag
        with value ``val``.

        :param SmartSyncOptOutType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def sso_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``sso_change_policy`` tag
        with value ``val``.

        :param SsoChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_branding_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_branding_policy_changed`` tag with value ``val``.

        :param TeamBrandingPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_extensions_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_extensions_policy_changed`` tag with value ``val``.

        :param TeamExtensionsPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_selective_sync_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_selective_sync_policy_changed`` tag with value ``val``.

        :param TeamSelectiveSyncPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_sharing_whitelist_subjects_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_sharing_whitelist_subjects_changed`` tag with value ``val``.

        :param TeamSharingWhitelistSubjectsChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_add_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_add_exception`` tag
        with value ``val``.

        :param TfaAddExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_change_policy`` tag
        with value ``val``.

        :param TfaChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_remove_exception(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_remove_exception`` tag
        with value ``val``.

        :param TfaRemoveExceptionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def two_account_change_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``two_account_change_policy`` tag with value ``val``.

        :param TwoAccountChangePolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def viewer_info_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``viewer_info_policy_changed`` tag with value ``val``.

        :param ViewerInfoPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def watermarking_policy_changed(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``watermarking_policy_changed`` tag with value ``val``.

        :param WatermarkingPolicyChangedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def web_sessions_change_active_session_limit(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``web_sessions_change_active_session_limit`` tag with value ``val``.

        :param WebSessionsChangeActiveSessionLimitType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def web_sessions_change_fixed_length_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``web_sessions_change_fixed_length_policy`` tag with value ``val``.

        :param WebSessionsChangeFixedLengthPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def web_sessions_change_idle_length_policy(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``web_sessions_change_idle_length_policy`` tag with value ``val``.

        :param WebSessionsChangeIdleLengthPolicyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def data_residency_migration_request_successful(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_residency_migration_request_successful`` tag with value ``val``.

        :param DataResidencyMigrationRequestSuccessfulType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def data_residency_migration_request_unsuccessful(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``data_residency_migration_request_unsuccessful`` tag with value
        ``val``.

        :param DataResidencyMigrationRequestUnsuccessfulType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_from(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_merge_from`` tag with
        value ``val``.

        :param TeamMergeFromType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_to(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_merge_to`` tag with
        value ``val``.

        :param TeamMergeToType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_add_background(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_add_background`` tag with value ``val``.

        :param TeamProfileAddBackgroundType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_add_logo(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_profile_add_logo``
        tag with value ``val``.

        :param TeamProfileAddLogoType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_change_background(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_change_background`` tag with value ``val``.

        :param TeamProfileChangeBackgroundType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_change_default_language(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_change_default_language`` tag with value ``val``.

        :param TeamProfileChangeDefaultLanguageType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_change_logo(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_profile_change_logo``
        tag with value ``val``.

        :param TeamProfileChangeLogoType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_change_name(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_profile_change_name``
        tag with value ``val``.

        :param TeamProfileChangeNameType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_remove_background(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_profile_remove_background`` tag with value ``val``.

        :param TeamProfileRemoveBackgroundType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_profile_remove_logo(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team_profile_remove_logo``
        tag with value ``val``.

        :param TeamProfileRemoveLogoType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_add_backup_phone(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_add_backup_phone`` tag
        with value ``val``.

        :param TfaAddBackupPhoneType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_add_security_key(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_add_security_key`` tag
        with value ``val``.

        :param TfaAddSecurityKeyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_change_backup_phone(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_change_backup_phone``
        tag with value ``val``.

        :param TfaChangeBackupPhoneType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_change_status(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_change_status`` tag
        with value ``val``.

        :param TfaChangeStatusType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_remove_backup_phone(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_remove_backup_phone``
        tag with value ``val``.

        :param TfaRemoveBackupPhoneType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_remove_security_key(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_remove_security_key``
        tag with value ``val``.

        :param TfaRemoveSecurityKeyType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def tfa_reset(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``tfa_reset`` tag with value
        ``val``.

        :param TfaResetType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def changed_enterprise_admin_role(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``changed_enterprise_admin_role`` tag with value ``val``.

        :param ChangedEnterpriseAdminRoleType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def changed_enterprise_connected_team_status(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``changed_enterprise_connected_team_status`` tag with value ``val``.

        :param ChangedEnterpriseConnectedTeamStatusType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def ended_enterprise_admin_session(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ended_enterprise_admin_session`` tag with value ``val``.

        :param EndedEnterpriseAdminSessionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def ended_enterprise_admin_session_deprecated(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``ended_enterprise_admin_session_deprecated`` tag with value ``val``.

        :param EndedEnterpriseAdminSessionDeprecatedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def enterprise_settings_locking(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``enterprise_settings_locking`` tag with value ``val``.

        :param EnterpriseSettingsLockingType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def guest_admin_change_status(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``guest_admin_change_status`` tag with value ``val``.

        :param GuestAdminChangeStatusType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def started_enterprise_admin_session(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``started_enterprise_admin_session`` tag with value ``val``.

        :param StartedEnterpriseAdminSessionType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_accepted(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_accepted`` tag with value ``val``.

        :param TeamMergeRequestAcceptedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_accepted_shown_to_primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_accepted_shown_to_primary_team`` tag with value
        ``val``.

        :param TeamMergeRequestAcceptedShownToPrimaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_accepted_shown_to_secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_accepted_shown_to_secondary_team`` tag with value
        ``val``.

        :param TeamMergeRequestAcceptedShownToSecondaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_auto_canceled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_auto_canceled`` tag with value ``val``.

        :param TeamMergeRequestAutoCanceledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_canceled(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_canceled`` tag with value ``val``.

        :param TeamMergeRequestCanceledType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_canceled_shown_to_primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_canceled_shown_to_primary_team`` tag with value
        ``val``.

        :param TeamMergeRequestCanceledShownToPrimaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_canceled_shown_to_secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_canceled_shown_to_secondary_team`` tag with value
        ``val``.

        :param TeamMergeRequestCanceledShownToSecondaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_expired(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_expired`` tag with value ``val``.

        :param TeamMergeRequestExpiredType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_expired_shown_to_primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_expired_shown_to_primary_team`` tag with value
        ``val``.

        :param TeamMergeRequestExpiredShownToPrimaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_expired_shown_to_secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_expired_shown_to_secondary_team`` tag with value
        ``val``.

        :param TeamMergeRequestExpiredShownToSecondaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_rejected_shown_to_primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_rejected_shown_to_primary_team`` tag with value
        ``val``.

        :param TeamMergeRequestRejectedShownToPrimaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_rejected_shown_to_secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_rejected_shown_to_secondary_team`` tag with value
        ``val``.

        :param TeamMergeRequestRejectedShownToSecondaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_reminder(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_reminder`` tag with value ``val``.

        :param TeamMergeRequestReminderType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_reminder_shown_to_primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_reminder_shown_to_primary_team`` tag with value
        ``val``.

        :param TeamMergeRequestReminderShownToPrimaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_reminder_shown_to_secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_reminder_shown_to_secondary_team`` tag with value
        ``val``.

        :param TeamMergeRequestReminderShownToSecondaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_revoked(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_revoked`` tag with value ``val``.

        :param TeamMergeRequestRevokedType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_sent_shown_to_primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_sent_shown_to_primary_team`` tag with value
        ``val``.

        :param TeamMergeRequestSentShownToPrimaryTeamType val:
        :rtype: EventType
        """
        ...
    
    @classmethod
    def team_merge_request_sent_shown_to_secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the
        ``team_merge_request_sent_shown_to_secondary_team`` tag with value
        ``val``.

        :param TeamMergeRequestSentShownToSecondaryTeamType val:
        :rtype: EventType
        """
        ...
    
    def is_admin_alerting_alert_state_changed(self):
        """
        Check if the union tag is ``admin_alerting_alert_state_changed``.

        :rtype: bool
        """
        ...
    
    def is_admin_alerting_changed_alert_config(self):
        """
        Check if the union tag is ``admin_alerting_changed_alert_config``.

        :rtype: bool
        """
        ...
    
    def is_admin_alerting_triggered_alert(self):
        """
        Check if the union tag is ``admin_alerting_triggered_alert``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_restore_process_completed(self):
        """
        Check if the union tag is ``ransomware_restore_process_completed``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_restore_process_started(self):
        """
        Check if the union tag is ``ransomware_restore_process_started``.

        :rtype: bool
        """
        ...
    
    def is_app_blocked_by_permissions(self):
        """
        Check if the union tag is ``app_blocked_by_permissions``.

        :rtype: bool
        """
        ...
    
    def is_app_link_team(self):
        """
        Check if the union tag is ``app_link_team``.

        :rtype: bool
        """
        ...
    
    def is_app_link_user(self):
        """
        Check if the union tag is ``app_link_user``.

        :rtype: bool
        """
        ...
    
    def is_app_unlink_team(self):
        """
        Check if the union tag is ``app_unlink_team``.

        :rtype: bool
        """
        ...
    
    def is_app_unlink_user(self):
        """
        Check if the union tag is ``app_unlink_user``.

        :rtype: bool
        """
        ...
    
    def is_integration_connected(self):
        """
        Check if the union tag is ``integration_connected``.

        :rtype: bool
        """
        ...
    
    def is_integration_disconnected(self):
        """
        Check if the union tag is ``integration_disconnected``.

        :rtype: bool
        """
        ...
    
    def is_file_add_comment(self):
        """
        Check if the union tag is ``file_add_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_change_comment_subscription(self):
        """
        Check if the union tag is ``file_change_comment_subscription``.

        :rtype: bool
        """
        ...
    
    def is_file_delete_comment(self):
        """
        Check if the union tag is ``file_delete_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_edit_comment(self):
        """
        Check if the union tag is ``file_edit_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_like_comment(self):
        """
        Check if the union tag is ``file_like_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_resolve_comment(self):
        """
        Check if the union tag is ``file_resolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_unlike_comment(self):
        """
        Check if the union tag is ``file_unlike_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_unresolve_comment(self):
        """
        Check if the union tag is ``file_unresolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_add_folders(self):
        """
        Check if the union tag is ``governance_policy_add_folders``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_add_folder_failed(self):
        """
        Check if the union tag is ``governance_policy_add_folder_failed``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_content_disposed(self):
        """
        Check if the union tag is ``governance_policy_content_disposed``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_create(self):
        """
        Check if the union tag is ``governance_policy_create``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_delete(self):
        """
        Check if the union tag is ``governance_policy_delete``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_edit_details(self):
        """
        Check if the union tag is ``governance_policy_edit_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_edit_duration(self):
        """
        Check if the union tag is ``governance_policy_edit_duration``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_export_created(self):
        """
        Check if the union tag is ``governance_policy_export_created``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_export_removed(self):
        """
        Check if the union tag is ``governance_policy_export_removed``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_remove_folders(self):
        """
        Check if the union tag is ``governance_policy_remove_folders``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_report_created(self):
        """
        Check if the union tag is ``governance_policy_report_created``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_zip_part_downloaded(self):
        """
        Check if the union tag is ``governance_policy_zip_part_downloaded``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_activate_a_hold(self):
        """
        Check if the union tag is ``legal_holds_activate_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_add_members(self):
        """
        Check if the union tag is ``legal_holds_add_members``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_change_hold_details(self):
        """
        Check if the union tag is ``legal_holds_change_hold_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_change_hold_name(self):
        """
        Check if the union tag is ``legal_holds_change_hold_name``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_a_hold(self):
        """
        Check if the union tag is ``legal_holds_export_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_cancelled(self):
        """
        Check if the union tag is ``legal_holds_export_cancelled``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_downloaded(self):
        """
        Check if the union tag is ``legal_holds_export_downloaded``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_removed(self):
        """
        Check if the union tag is ``legal_holds_export_removed``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_release_a_hold(self):
        """
        Check if the union tag is ``legal_holds_release_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_remove_members(self):
        """
        Check if the union tag is ``legal_holds_remove_members``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_report_a_hold(self):
        """
        Check if the union tag is ``legal_holds_report_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_desktop(self):
        """
        Check if the union tag is ``device_change_ip_desktop``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_mobile(self):
        """
        Check if the union tag is ``device_change_ip_mobile``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_web(self):
        """
        Check if the union tag is ``device_change_ip_web``.

        :rtype: bool
        """
        ...
    
    def is_device_delete_on_unlink_fail(self):
        """
        Check if the union tag is ``device_delete_on_unlink_fail``.

        :rtype: bool
        """
        ...
    
    def is_device_delete_on_unlink_success(self):
        """
        Check if the union tag is ``device_delete_on_unlink_success``.

        :rtype: bool
        """
        ...
    
    def is_device_link_fail(self):
        """
        Check if the union tag is ``device_link_fail``.

        :rtype: bool
        """
        ...
    
    def is_device_link_success(self):
        """
        Check if the union tag is ``device_link_success``.

        :rtype: bool
        """
        ...
    
    def is_device_management_disabled(self):
        """
        Check if the union tag is ``device_management_disabled``.

        :rtype: bool
        """
        ...
    
    def is_device_management_enabled(self):
        """
        Check if the union tag is ``device_management_enabled``.

        :rtype: bool
        """
        ...
    
    def is_device_sync_backup_status_changed(self):
        """
        Check if the union tag is ``device_sync_backup_status_changed``.

        :rtype: bool
        """
        ...
    
    def is_device_unlink(self):
        """
        Check if the union tag is ``device_unlink``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_exported(self):
        """
        Check if the union tag is ``dropbox_passwords_exported``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_new_device_enrolled(self):
        """
        Check if the union tag is ``dropbox_passwords_new_device_enrolled``.

        :rtype: bool
        """
        ...
    
    def is_emm_refresh_auth_token(self):
        """
        Check if the union tag is ``emm_refresh_auth_token``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_eligibility_status_checked(self):
        """
        Check if the union tag is ``external_drive_backup_eligibility_status_checked``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_status_changed(self):
        """
        Check if the union tag is ``external_drive_backup_status_changed``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_change_availability(self):
        """
        Check if the union tag is ``account_capture_change_availability``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_migrate_account(self):
        """
        Check if the union tag is ``account_capture_migrate_account``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_notification_emails_sent(self):
        """
        Check if the union tag is ``account_capture_notification_emails_sent``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_relinquish_account(self):
        """
        Check if the union tag is ``account_capture_relinquish_account``.

        :rtype: bool
        """
        ...
    
    def is_disabled_domain_invites(self):
        """
        Check if the union tag is ``disabled_domain_invites``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_approve_request_to_join_team(self):
        """
        Check if the union tag is ``domain_invites_approve_request_to_join_team``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_decline_request_to_join_team(self):
        """
        Check if the union tag is ``domain_invites_decline_request_to_join_team``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_email_existing_users(self):
        """
        Check if the union tag is ``domain_invites_email_existing_users``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_request_to_join_team(self):
        """
        Check if the union tag is ``domain_invites_request_to_join_team``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_set_invite_new_user_pref_to_no(self):
        """
        Check if the union tag is ``domain_invites_set_invite_new_user_pref_to_no``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_set_invite_new_user_pref_to_yes(self):
        """
        Check if the union tag is ``domain_invites_set_invite_new_user_pref_to_yes``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_add_domain_fail(self):
        """
        Check if the union tag is ``domain_verification_add_domain_fail``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_add_domain_success(self):
        """
        Check if the union tag is ``domain_verification_add_domain_success``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_remove_domain(self):
        """
        Check if the union tag is ``domain_verification_remove_domain``.

        :rtype: bool
        """
        ...
    
    def is_enabled_domain_invites(self):
        """
        Check if the union tag is ``enabled_domain_invites``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_cancel_key_deletion(self):
        """
        Check if the union tag is ``team_encryption_key_cancel_key_deletion``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_create_key(self):
        """
        Check if the union tag is ``team_encryption_key_create_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_delete_key(self):
        """
        Check if the union tag is ``team_encryption_key_delete_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_disable_key(self):
        """
        Check if the union tag is ``team_encryption_key_disable_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_enable_key(self):
        """
        Check if the union tag is ``team_encryption_key_enable_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_rotate_key(self):
        """
        Check if the union tag is ``team_encryption_key_rotate_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_schedule_key_deletion(self):
        """
        Check if the union tag is ``team_encryption_key_schedule_key_deletion``.

        :rtype: bool
        """
        ...
    
    def is_apply_naming_convention(self):
        """
        Check if the union tag is ``apply_naming_convention``.

        :rtype: bool
        """
        ...
    
    def is_create_folder(self):
        """
        Check if the union tag is ``create_folder``.

        :rtype: bool
        """
        ...
    
    def is_file_add(self):
        """
        Check if the union tag is ``file_add``.

        :rtype: bool
        """
        ...
    
    def is_file_add_from_automation(self):
        """
        Check if the union tag is ``file_add_from_automation``.

        :rtype: bool
        """
        ...
    
    def is_file_copy(self):
        """
        Check if the union tag is ``file_copy``.

        :rtype: bool
        """
        ...
    
    def is_file_delete(self):
        """
        Check if the union tag is ``file_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_download(self):
        """
        Check if the union tag is ``file_download``.

        :rtype: bool
        """
        ...
    
    def is_file_edit(self):
        """
        Check if the union tag is ``file_edit``.

        :rtype: bool
        """
        ...
    
    def is_file_get_copy_reference(self):
        """
        Check if the union tag is ``file_get_copy_reference``.

        :rtype: bool
        """
        ...
    
    def is_file_locking_lock_status_changed(self):
        """
        Check if the union tag is ``file_locking_lock_status_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_move(self):
        """
        Check if the union tag is ``file_move``.

        :rtype: bool
        """
        ...
    
    def is_file_permanently_delete(self):
        """
        Check if the union tag is ``file_permanently_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_preview(self):
        """
        Check if the union tag is ``file_preview``.

        :rtype: bool
        """
        ...
    
    def is_file_rename(self):
        """
        Check if the union tag is ``file_rename``.

        :rtype: bool
        """
        ...
    
    def is_file_restore(self):
        """
        Check if the union tag is ``file_restore``.

        :rtype: bool
        """
        ...
    
    def is_file_revert(self):
        """
        Check if the union tag is ``file_revert``.

        :rtype: bool
        """
        ...
    
    def is_file_rollback_changes(self):
        """
        Check if the union tag is ``file_rollback_changes``.

        :rtype: bool
        """
        ...
    
    def is_file_save_copy_reference(self):
        """
        Check if the union tag is ``file_save_copy_reference``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_description_changed(self):
        """
        Check if the union tag is ``folder_overview_description_changed``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_item_pinned(self):
        """
        Check if the union tag is ``folder_overview_item_pinned``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_item_unpinned(self):
        """
        Check if the union tag is ``folder_overview_item_unpinned``.

        :rtype: bool
        """
        ...
    
    def is_object_label_added(self):
        """
        Check if the union tag is ``object_label_added``.

        :rtype: bool
        """
        ...
    
    def is_object_label_removed(self):
        """
        Check if the union tag is ``object_label_removed``.

        :rtype: bool
        """
        ...
    
    def is_object_label_updated_value(self):
        """
        Check if the union tag is ``object_label_updated_value``.

        :rtype: bool
        """
        ...
    
    def is_organize_folder_with_tidy(self):
        """
        Check if the union tag is ``organize_folder_with_tidy``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_delete(self):
        """
        Check if the union tag is ``replay_file_delete``.

        :rtype: bool
        """
        ...
    
    def is_rewind_folder(self):
        """
        Check if the union tag is ``rewind_folder``.

        :rtype: bool
        """
        ...
    
    def is_undo_naming_convention(self):
        """
        Check if the union tag is ``undo_naming_convention``.

        :rtype: bool
        """
        ...
    
    def is_undo_organize_folder_with_tidy(self):
        """
        Check if the union tag is ``undo_organize_folder_with_tidy``.

        :rtype: bool
        """
        ...
    
    def is_user_tags_added(self):
        """
        Check if the union tag is ``user_tags_added``.

        :rtype: bool
        """
        ...
    
    def is_user_tags_removed(self):
        """
        Check if the union tag is ``user_tags_removed``.

        :rtype: bool
        """
        ...
    
    def is_email_ingest_receive_file(self):
        """
        Check if the union tag is ``email_ingest_receive_file``.

        :rtype: bool
        """
        ...
    
    def is_file_request_change(self):
        """
        Check if the union tag is ``file_request_change``.

        :rtype: bool
        """
        ...
    
    def is_file_request_close(self):
        """
        Check if the union tag is ``file_request_close``.

        :rtype: bool
        """
        ...
    
    def is_file_request_create(self):
        """
        Check if the union tag is ``file_request_create``.

        :rtype: bool
        """
        ...
    
    def is_file_request_delete(self):
        """
        Check if the union tag is ``file_request_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_request_receive_file(self):
        """
        Check if the union tag is ``file_request_receive_file``.

        :rtype: bool
        """
        ...
    
    def is_group_add_external_id(self):
        """
        Check if the union tag is ``group_add_external_id``.

        :rtype: bool
        """
        ...
    
    def is_group_add_member(self):
        """
        Check if the union tag is ``group_add_member``.

        :rtype: bool
        """
        ...
    
    def is_group_change_external_id(self):
        """
        Check if the union tag is ``group_change_external_id``.

        :rtype: bool
        """
        ...
    
    def is_group_change_management_type(self):
        """
        Check if the union tag is ``group_change_management_type``.

        :rtype: bool
        """
        ...
    
    def is_group_change_member_role(self):
        """
        Check if the union tag is ``group_change_member_role``.

        :rtype: bool
        """
        ...
    
    def is_group_create(self):
        """
        Check if the union tag is ``group_create``.

        :rtype: bool
        """
        ...
    
    def is_group_delete(self):
        """
        Check if the union tag is ``group_delete``.

        :rtype: bool
        """
        ...
    
    def is_group_description_updated(self):
        """
        Check if the union tag is ``group_description_updated``.

        :rtype: bool
        """
        ...
    
    def is_group_join_policy_updated(self):
        """
        Check if the union tag is ``group_join_policy_updated``.

        :rtype: bool
        """
        ...
    
    def is_group_moved(self):
        """
        Check if the union tag is ``group_moved``.

        :rtype: bool
        """
        ...
    
    def is_group_remove_external_id(self):
        """
        Check if the union tag is ``group_remove_external_id``.

        :rtype: bool
        """
        ...
    
    def is_group_remove_member(self):
        """
        Check if the union tag is ``group_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_group_rename(self):
        """
        Check if the union tag is ``group_rename``.

        :rtype: bool
        """
        ...
    
    def is_account_lock_or_unlocked(self):
        """
        Check if the union tag is ``account_lock_or_unlocked``.

        :rtype: bool
        """
        ...
    
    def is_emm_error(self):
        """
        Check if the union tag is ``emm_error``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_signed_in_via_trusted_teams(self):
        """
        Check if the union tag is ``guest_admin_signed_in_via_trusted_teams``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_signed_out_via_trusted_teams(self):
        """
        Check if the union tag is ``guest_admin_signed_out_via_trusted_teams``.

        :rtype: bool
        """
        ...
    
    def is_login_fail(self):
        """
        Check if the union tag is ``login_fail``.

        :rtype: bool
        """
        ...
    
    def is_login_success(self):
        """
        Check if the union tag is ``login_success``.

        :rtype: bool
        """
        ...
    
    def is_logout(self):
        """
        Check if the union tag is ``logout``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_session_end(self):
        """
        Check if the union tag is ``reseller_support_session_end``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_session_start(self):
        """
        Check if the union tag is ``reseller_support_session_start``.

        :rtype: bool
        """
        ...
    
    def is_sign_in_as_session_end(self):
        """
        Check if the union tag is ``sign_in_as_session_end``.

        :rtype: bool
        """
        ...
    
    def is_sign_in_as_session_start(self):
        """
        Check if the union tag is ``sign_in_as_session_start``.

        :rtype: bool
        """
        ...
    
    def is_sso_error(self):
        """
        Check if the union tag is ``sso_error``.

        :rtype: bool
        """
        ...
    
    def is_backup_admin_invitation_sent(self):
        """
        Check if the union tag is ``backup_admin_invitation_sent``.

        :rtype: bool
        """
        ...
    
    def is_backup_invitation_opened(self):
        """
        Check if the union tag is ``backup_invitation_opened``.

        :rtype: bool
        """
        ...
    
    def is_create_team_invite_link(self):
        """
        Check if the union tag is ``create_team_invite_link``.

        :rtype: bool
        """
        ...
    
    def is_delete_team_invite_link(self):
        """
        Check if the union tag is ``delete_team_invite_link``.

        :rtype: bool
        """
        ...
    
    def is_member_add_external_id(self):
        """
        Check if the union tag is ``member_add_external_id``.

        :rtype: bool
        """
        ...
    
    def is_member_add_name(self):
        """
        Check if the union tag is ``member_add_name``.

        :rtype: bool
        """
        ...
    
    def is_member_change_admin_role(self):
        """
        Check if the union tag is ``member_change_admin_role``.

        :rtype: bool
        """
        ...
    
    def is_member_change_email(self):
        """
        Check if the union tag is ``member_change_email``.

        :rtype: bool
        """
        ...
    
    def is_member_change_external_id(self):
        """
        Check if the union tag is ``member_change_external_id``.

        :rtype: bool
        """
        ...
    
    def is_member_change_membership_type(self):
        """
        Check if the union tag is ``member_change_membership_type``.

        :rtype: bool
        """
        ...
    
    def is_member_change_name(self):
        """
        Check if the union tag is ``member_change_name``.

        :rtype: bool
        """
        ...
    
    def is_member_change_reseller_role(self):
        """
        Check if the union tag is ``member_change_reseller_role``.

        :rtype: bool
        """
        ...
    
    def is_member_change_status(self):
        """
        Check if the union tag is ``member_change_status``.

        :rtype: bool
        """
        ...
    
    def is_member_delete_manual_contacts(self):
        """
        Check if the union tag is ``member_delete_manual_contacts``.

        :rtype: bool
        """
        ...
    
    def is_member_delete_profile_photo(self):
        """
        Check if the union tag is ``member_delete_profile_photo``.

        :rtype: bool
        """
        ...
    
    def is_member_permanently_delete_account_contents(self):
        """
        Check if the union tag is ``member_permanently_delete_account_contents``.

        :rtype: bool
        """
        ...
    
    def is_member_remove_external_id(self):
        """
        Check if the union tag is ``member_remove_external_id``.

        :rtype: bool
        """
        ...
    
    def is_member_set_profile_photo(self):
        """
        Check if the union tag is ``member_set_profile_photo``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_add_custom_quota(self):
        """
        Check if the union tag is ``member_space_limits_add_custom_quota``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_custom_quota(self):
        """
        Check if the union tag is ``member_space_limits_change_custom_quota``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_status(self):
        """
        Check if the union tag is ``member_space_limits_change_status``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_remove_custom_quota(self):
        """
        Check if the union tag is ``member_space_limits_remove_custom_quota``.

        :rtype: bool
        """
        ...
    
    def is_member_suggest(self):
        """
        Check if the union tag is ``member_suggest``.

        :rtype: bool
        """
        ...
    
    def is_member_transfer_account_contents(self):
        """
        Check if the union tag is ``member_transfer_account_contents``.

        :rtype: bool
        """
        ...
    
    def is_pending_secondary_email_added(self):
        """
        Check if the union tag is ``pending_secondary_email_added``.

        :rtype: bool
        """
        ...
    
    def is_secondary_email_deleted(self):
        """
        Check if the union tag is ``secondary_email_deleted``.

        :rtype: bool
        """
        ...
    
    def is_secondary_email_verified(self):
        """
        Check if the union tag is ``secondary_email_verified``.

        :rtype: bool
        """
        ...
    
    def is_secondary_mails_policy_changed(self):
        """
        Check if the union tag is ``secondary_mails_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_binder_add_page(self):
        """
        Check if the union tag is ``binder_add_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_add_section(self):
        """
        Check if the union tag is ``binder_add_section``.

        :rtype: bool
        """
        ...
    
    def is_binder_remove_page(self):
        """
        Check if the union tag is ``binder_remove_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_remove_section(self):
        """
        Check if the union tag is ``binder_remove_section``.

        :rtype: bool
        """
        ...
    
    def is_binder_rename_page(self):
        """
        Check if the union tag is ``binder_rename_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_rename_section(self):
        """
        Check if the union tag is ``binder_rename_section``.

        :rtype: bool
        """
        ...
    
    def is_binder_reorder_page(self):
        """
        Check if the union tag is ``binder_reorder_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_reorder_section(self):
        """
        Check if the union tag is ``binder_reorder_section``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_add_member(self):
        """
        Check if the union tag is ``paper_content_add_member``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_add_to_folder(self):
        """
        Check if the union tag is ``paper_content_add_to_folder``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_archive(self):
        """
        Check if the union tag is ``paper_content_archive``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_create(self):
        """
        Check if the union tag is ``paper_content_create``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_permanently_delete(self):
        """
        Check if the union tag is ``paper_content_permanently_delete``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_remove_from_folder(self):
        """
        Check if the union tag is ``paper_content_remove_from_folder``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_remove_member(self):
        """
        Check if the union tag is ``paper_content_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_rename(self):
        """
        Check if the union tag is ``paper_content_rename``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_restore(self):
        """
        Check if the union tag is ``paper_content_restore``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_add_comment(self):
        """
        Check if the union tag is ``paper_doc_add_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_member_role(self):
        """
        Check if the union tag is ``paper_doc_change_member_role``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_sharing_policy(self):
        """
        Check if the union tag is ``paper_doc_change_sharing_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_subscription(self):
        """
        Check if the union tag is ``paper_doc_change_subscription``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_deleted(self):
        """
        Check if the union tag is ``paper_doc_deleted``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_delete_comment(self):
        """
        Check if the union tag is ``paper_doc_delete_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_download(self):
        """
        Check if the union tag is ``paper_doc_download``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_edit(self):
        """
        Check if the union tag is ``paper_doc_edit``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_edit_comment(self):
        """
        Check if the union tag is ``paper_doc_edit_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_followed(self):
        """
        Check if the union tag is ``paper_doc_followed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_mention(self):
        """
        Check if the union tag is ``paper_doc_mention``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_ownership_changed(self):
        """
        Check if the union tag is ``paper_doc_ownership_changed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_request_access(self):
        """
        Check if the union tag is ``paper_doc_request_access``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_resolve_comment(self):
        """
        Check if the union tag is ``paper_doc_resolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_revert(self):
        """
        Check if the union tag is ``paper_doc_revert``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_slack_share(self):
        """
        Check if the union tag is ``paper_doc_slack_share``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_team_invite(self):
        """
        Check if the union tag is ``paper_doc_team_invite``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_trashed(self):
        """
        Check if the union tag is ``paper_doc_trashed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_unresolve_comment(self):
        """
        Check if the union tag is ``paper_doc_unresolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_untrashed(self):
        """
        Check if the union tag is ``paper_doc_untrashed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_view(self):
        """
        Check if the union tag is ``paper_doc_view``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_allow(self):
        """
        Check if the union tag is ``paper_external_view_allow``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_default_team(self):
        """
        Check if the union tag is ``paper_external_view_default_team``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_forbid(self):
        """
        Check if the union tag is ``paper_external_view_forbid``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_change_subscription(self):
        """
        Check if the union tag is ``paper_folder_change_subscription``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_deleted(self):
        """
        Check if the union tag is ``paper_folder_deleted``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_followed(self):
        """
        Check if the union tag is ``paper_folder_followed``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_team_invite(self):
        """
        Check if the union tag is ``paper_folder_team_invite``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_change_permission(self):
        """
        Check if the union tag is ``paper_published_link_change_permission``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_create(self):
        """
        Check if the union tag is ``paper_published_link_create``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_disabled(self):
        """
        Check if the union tag is ``paper_published_link_disabled``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_view(self):
        """
        Check if the union tag is ``paper_published_link_view``.

        :rtype: bool
        """
        ...
    
    def is_password_change(self):
        """
        Check if the union tag is ``password_change``.

        :rtype: bool
        """
        ...
    
    def is_password_reset(self):
        """
        Check if the union tag is ``password_reset``.

        :rtype: bool
        """
        ...
    
    def is_password_reset_all(self):
        """
        Check if the union tag is ``password_reset_all``.

        :rtype: bool
        """
        ...
    
    def is_classification_create_report(self):
        """
        Check if the union tag is ``classification_create_report``.

        :rtype: bool
        """
        ...
    
    def is_classification_create_report_fail(self):
        """
        Check if the union tag is ``classification_create_report_fail``.

        :rtype: bool
        """
        ...
    
    def is_emm_create_exceptions_report(self):
        """
        Check if the union tag is ``emm_create_exceptions_report``.

        :rtype: bool
        """
        ...
    
    def is_emm_create_usage_report(self):
        """
        Check if the union tag is ``emm_create_usage_report``.

        :rtype: bool
        """
        ...
    
    def is_export_members_report(self):
        """
        Check if the union tag is ``export_members_report``.

        :rtype: bool
        """
        ...
    
    def is_export_members_report_fail(self):
        """
        Check if the union tag is ``export_members_report_fail``.

        :rtype: bool
        """
        ...
    
    def is_external_sharing_create_report(self):
        """
        Check if the union tag is ``external_sharing_create_report``.

        :rtype: bool
        """
        ...
    
    def is_external_sharing_report_failed(self):
        """
        Check if the union tag is ``external_sharing_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_no_expiration_link_gen_create_report(self):
        """
        Check if the union tag is ``no_expiration_link_gen_create_report``.

        :rtype: bool
        """
        ...
    
    def is_no_expiration_link_gen_report_failed(self):
        """
        Check if the union tag is ``no_expiration_link_gen_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_gen_create_report(self):
        """
        Check if the union tag is ``no_password_link_gen_create_report``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_gen_report_failed(self):
        """
        Check if the union tag is ``no_password_link_gen_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_view_create_report(self):
        """
        Check if the union tag is ``no_password_link_view_create_report``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_view_report_failed(self):
        """
        Check if the union tag is ``no_password_link_view_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_outdated_link_view_create_report(self):
        """
        Check if the union tag is ``outdated_link_view_create_report``.

        :rtype: bool
        """
        ...
    
    def is_outdated_link_view_report_failed(self):
        """
        Check if the union tag is ``outdated_link_view_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_paper_admin_export_start(self):
        """
        Check if the union tag is ``paper_admin_export_start``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_alert_create_report(self):
        """
        Check if the union tag is ``ransomware_alert_create_report``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_alert_create_report_failed(self):
        """
        Check if the union tag is ``ransomware_alert_create_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_create_admin_privilege_report(self):
        """
        Check if the union tag is ``smart_sync_create_admin_privilege_report``.

        :rtype: bool
        """
        ...
    
    def is_team_activity_create_report(self):
        """
        Check if the union tag is ``team_activity_create_report``.

        :rtype: bool
        """
        ...
    
    def is_team_activity_create_report_fail(self):
        """
        Check if the union tag is ``team_activity_create_report_fail``.

        :rtype: bool
        """
        ...
    
    def is_collection_share(self):
        """
        Check if the union tag is ``collection_share``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_file_add(self):
        """
        Check if the union tag is ``file_transfers_file_add``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_delete(self):
        """
        Check if the union tag is ``file_transfers_transfer_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_download(self):
        """
        Check if the union tag is ``file_transfers_transfer_download``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_send(self):
        """
        Check if the union tag is ``file_transfers_transfer_send``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_view(self):
        """
        Check if the union tag is ``file_transfers_transfer_view``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_invite_only(self):
        """
        Check if the union tag is ``note_acl_invite_only``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_link(self):
        """
        Check if the union tag is ``note_acl_link``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_team_link(self):
        """
        Check if the union tag is ``note_acl_team_link``.

        :rtype: bool
        """
        ...
    
    def is_note_shared(self):
        """
        Check if the union tag is ``note_shared``.

        :rtype: bool
        """
        ...
    
    def is_note_share_receive(self):
        """
        Check if the union tag is ``note_share_receive``.

        :rtype: bool
        """
        ...
    
    def is_open_note_shared(self):
        """
        Check if the union tag is ``open_note_shared``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_shared_link_created(self):
        """
        Check if the union tag is ``replay_file_shared_link_created``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_shared_link_modified(self):
        """
        Check if the union tag is ``replay_file_shared_link_modified``.

        :rtype: bool
        """
        ...
    
    def is_replay_project_team_add(self):
        """
        Check if the union tag is ``replay_project_team_add``.

        :rtype: bool
        """
        ...
    
    def is_replay_project_team_delete(self):
        """
        Check if the union tag is ``replay_project_team_delete``.

        :rtype: bool
        """
        ...
    
    def is_sf_add_group(self):
        """
        Check if the union tag is ``sf_add_group``.

        :rtype: bool
        """
        ...
    
    def is_sf_allow_non_members_to_view_shared_links(self):
        """
        Check if the union tag is ``sf_allow_non_members_to_view_shared_links``.

        :rtype: bool
        """
        ...
    
    def is_sf_external_invite_warn(self):
        """
        Check if the union tag is ``sf_external_invite_warn``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_invite(self):
        """
        Check if the union tag is ``sf_fb_invite``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_invite_change_role(self):
        """
        Check if the union tag is ``sf_fb_invite_change_role``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_uninvite(self):
        """
        Check if the union tag is ``sf_fb_uninvite``.

        :rtype: bool
        """
        ...
    
    def is_sf_invite_group(self):
        """
        Check if the union tag is ``sf_invite_group``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_grant_access(self):
        """
        Check if the union tag is ``sf_team_grant_access``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_invite(self):
        """
        Check if the union tag is ``sf_team_invite``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_invite_change_role(self):
        """
        Check if the union tag is ``sf_team_invite_change_role``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_join(self):
        """
        Check if the union tag is ``sf_team_join``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_join_from_oob_link(self):
        """
        Check if the union tag is ``sf_team_join_from_oob_link``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_uninvite(self):
        """
        Check if the union tag is ``sf_team_uninvite``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_invitees(self):
        """
        Check if the union tag is ``shared_content_add_invitees``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_link_expiry(self):
        """
        Check if the union tag is ``shared_content_add_link_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_link_password(self):
        """
        Check if the union tag is ``shared_content_add_link_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_member(self):
        """
        Check if the union tag is ``shared_content_add_member``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_downloads_policy(self):
        """
        Check if the union tag is ``shared_content_change_downloads_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_invitee_role(self):
        """
        Check if the union tag is ``shared_content_change_invitee_role``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_audience(self):
        """
        Check if the union tag is ``shared_content_change_link_audience``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_expiry(self):
        """
        Check if the union tag is ``shared_content_change_link_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_password(self):
        """
        Check if the union tag is ``shared_content_change_link_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_member_role(self):
        """
        Check if the union tag is ``shared_content_change_member_role``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_viewer_info_policy(self):
        """
        Check if the union tag is ``shared_content_change_viewer_info_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_claim_invitation(self):
        """
        Check if the union tag is ``shared_content_claim_invitation``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_copy(self):
        """
        Check if the union tag is ``shared_content_copy``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_download(self):
        """
        Check if the union tag is ``shared_content_download``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_relinquish_membership(self):
        """
        Check if the union tag is ``shared_content_relinquish_membership``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_invitees(self):
        """
        Check if the union tag is ``shared_content_remove_invitees``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_link_expiry(self):
        """
        Check if the union tag is ``shared_content_remove_link_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_link_password(self):
        """
        Check if the union tag is ``shared_content_remove_link_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_member(self):
        """
        Check if the union tag is ``shared_content_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_request_access(self):
        """
        Check if the union tag is ``shared_content_request_access``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_restore_invitees(self):
        """
        Check if the union tag is ``shared_content_restore_invitees``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_restore_member(self):
        """
        Check if the union tag is ``shared_content_restore_member``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_unshare(self):
        """
        Check if the union tag is ``shared_content_unshare``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_view(self):
        """
        Check if the union tag is ``shared_content_view``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_link_policy(self):
        """
        Check if the union tag is ``shared_folder_change_link_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_inheritance_policy(self):
        """
        Check if the union tag is ``shared_folder_change_members_inheritance_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_management_policy(self):
        """
        Check if the union tag is ``shared_folder_change_members_management_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_policy(self):
        """
        Check if the union tag is ``shared_folder_change_members_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_create(self):
        """
        Check if the union tag is ``shared_folder_create``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_decline_invitation(self):
        """
        Check if the union tag is ``shared_folder_decline_invitation``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_mount(self):
        """
        Check if the union tag is ``shared_folder_mount``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_nest(self):
        """
        Check if the union tag is ``shared_folder_nest``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_transfer_ownership(self):
        """
        Check if the union tag is ``shared_folder_transfer_ownership``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_unmount(self):
        """
        Check if the union tag is ``shared_folder_unmount``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_add_expiry(self):
        """
        Check if the union tag is ``shared_link_add_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_change_expiry(self):
        """
        Check if the union tag is ``shared_link_change_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_change_visibility(self):
        """
        Check if the union tag is ``shared_link_change_visibility``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_copy(self):
        """
        Check if the union tag is ``shared_link_copy``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_create(self):
        """
        Check if the union tag is ``shared_link_create``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_disable(self):
        """
        Check if the union tag is ``shared_link_disable``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_download(self):
        """
        Check if the union tag is ``shared_link_download``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_remove_expiry(self):
        """
        Check if the union tag is ``shared_link_remove_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_add_expiration(self):
        """
        Check if the union tag is ``shared_link_settings_add_expiration``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_add_password(self):
        """
        Check if the union tag is ``shared_link_settings_add_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_allow_download_disabled(self):
        """
        Check if the union tag is ``shared_link_settings_allow_download_disabled``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_allow_download_enabled(self):
        """
        Check if the union tag is ``shared_link_settings_allow_download_enabled``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_audience(self):
        """
        Check if the union tag is ``shared_link_settings_change_audience``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_expiration(self):
        """
        Check if the union tag is ``shared_link_settings_change_expiration``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_password(self):
        """
        Check if the union tag is ``shared_link_settings_change_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_remove_expiration(self):
        """
        Check if the union tag is ``shared_link_settings_remove_expiration``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_remove_password(self):
        """
        Check if the union tag is ``shared_link_settings_remove_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_share(self):
        """
        Check if the union tag is ``shared_link_share``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_view(self):
        """
        Check if the union tag is ``shared_link_view``.

        :rtype: bool
        """
        ...
    
    def is_shared_note_opened(self):
        """
        Check if the union tag is ``shared_note_opened``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_disable_downloads(self):
        """
        Check if the union tag is ``shmodel_disable_downloads``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_enable_downloads(self):
        """
        Check if the union tag is ``shmodel_enable_downloads``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_group_share(self):
        """
        Check if the union tag is ``shmodel_group_share``.

        :rtype: bool
        """
        ...
    
    def is_showcase_access_granted(self):
        """
        Check if the union tag is ``showcase_access_granted``.

        :rtype: bool
        """
        ...
    
    def is_showcase_add_member(self):
        """
        Check if the union tag is ``showcase_add_member``.

        :rtype: bool
        """
        ...
    
    def is_showcase_archived(self):
        """
        Check if the union tag is ``showcase_archived``.

        :rtype: bool
        """
        ...
    
    def is_showcase_created(self):
        """
        Check if the union tag is ``showcase_created``.

        :rtype: bool
        """
        ...
    
    def is_showcase_delete_comment(self):
        """
        Check if the union tag is ``showcase_delete_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_edited(self):
        """
        Check if the union tag is ``showcase_edited``.

        :rtype: bool
        """
        ...
    
    def is_showcase_edit_comment(self):
        """
        Check if the union tag is ``showcase_edit_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_added(self):
        """
        Check if the union tag is ``showcase_file_added``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_download(self):
        """
        Check if the union tag is ``showcase_file_download``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_removed(self):
        """
        Check if the union tag is ``showcase_file_removed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_view(self):
        """
        Check if the union tag is ``showcase_file_view``.

        :rtype: bool
        """
        ...
    
    def is_showcase_permanently_deleted(self):
        """
        Check if the union tag is ``showcase_permanently_deleted``.

        :rtype: bool
        """
        ...
    
    def is_showcase_post_comment(self):
        """
        Check if the union tag is ``showcase_post_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_remove_member(self):
        """
        Check if the union tag is ``showcase_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_showcase_renamed(self):
        """
        Check if the union tag is ``showcase_renamed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_request_access(self):
        """
        Check if the union tag is ``showcase_request_access``.

        :rtype: bool
        """
        ...
    
    def is_showcase_resolve_comment(self):
        """
        Check if the union tag is ``showcase_resolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_restored(self):
        """
        Check if the union tag is ``showcase_restored``.

        :rtype: bool
        """
        ...
    
    def is_showcase_trashed(self):
        """
        Check if the union tag is ``showcase_trashed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_trashed_deprecated(self):
        """
        Check if the union tag is ``showcase_trashed_deprecated``.

        :rtype: bool
        """
        ...
    
    def is_showcase_unresolve_comment(self):
        """
        Check if the union tag is ``showcase_unresolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_untrashed(self):
        """
        Check if the union tag is ``showcase_untrashed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_untrashed_deprecated(self):
        """
        Check if the union tag is ``showcase_untrashed_deprecated``.

        :rtype: bool
        """
        ...
    
    def is_showcase_view(self):
        """
        Check if the union tag is ``showcase_view``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_cert(self):
        """
        Check if the union tag is ``sso_add_cert``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_login_url(self):
        """
        Check if the union tag is ``sso_add_login_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_logout_url(self):
        """
        Check if the union tag is ``sso_add_logout_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_cert(self):
        """
        Check if the union tag is ``sso_change_cert``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_login_url(self):
        """
        Check if the union tag is ``sso_change_login_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_logout_url(self):
        """
        Check if the union tag is ``sso_change_logout_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_saml_identity_mode(self):
        """
        Check if the union tag is ``sso_change_saml_identity_mode``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_cert(self):
        """
        Check if the union tag is ``sso_remove_cert``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_login_url(self):
        """
        Check if the union tag is ``sso_remove_login_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_logout_url(self):
        """
        Check if the union tag is ``sso_remove_logout_url``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_change_status(self):
        """
        Check if the union tag is ``team_folder_change_status``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_create(self):
        """
        Check if the union tag is ``team_folder_create``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_downgrade(self):
        """
        Check if the union tag is ``team_folder_downgrade``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_permanently_delete(self):
        """
        Check if the union tag is ``team_folder_permanently_delete``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_rename(self):
        """
        Check if the union tag is ``team_folder_rename``.

        :rtype: bool
        """
        ...
    
    def is_team_selective_sync_settings_changed(self):
        """
        Check if the union tag is ``team_selective_sync_settings_changed``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_change_policy(self):
        """
        Check if the union tag is ``account_capture_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_admin_email_reminders_changed(self):
        """
        Check if the union tag is ``admin_email_reminders_changed``.

        :rtype: bool
        """
        ...
    
    def is_allow_download_disabled(self):
        """
        Check if the union tag is ``allow_download_disabled``.

        :rtype: bool
        """
        ...
    
    def is_allow_download_enabled(self):
        """
        Check if the union tag is ``allow_download_enabled``.

        :rtype: bool
        """
        ...
    
    def is_app_permissions_changed(self):
        """
        Check if the union tag is ``app_permissions_changed``.

        :rtype: bool
        """
        ...
    
    def is_camera_uploads_policy_changed(self):
        """
        Check if the union tag is ``camera_uploads_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_capture_transcript_policy_changed(self):
        """
        Check if the union tag is ``capture_transcript_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_classification_change_policy(self):
        """
        Check if the union tag is ``classification_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_computer_backup_policy_changed(self):
        """
        Check if the union tag is ``computer_backup_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_content_administration_policy_changed(self):
        """
        Check if the union tag is ``content_administration_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_data_placement_restriction_change_policy(self):
        """
        Check if the union tag is ``data_placement_restriction_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_data_placement_restriction_satisfy_policy(self):
        """
        Check if the union tag is ``data_placement_restriction_satisfy_policy``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_add_exception(self):
        """
        Check if the union tag is ``device_approvals_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_desktop_policy(self):
        """
        Check if the union tag is ``device_approvals_change_desktop_policy``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_mobile_policy(self):
        """
        Check if the union tag is ``device_approvals_change_mobile_policy``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_overage_action(self):
        """
        Check if the union tag is ``device_approvals_change_overage_action``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_unlink_action(self):
        """
        Check if the union tag is ``device_approvals_change_unlink_action``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_remove_exception(self):
        """
        Check if the union tag is ``device_approvals_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_directory_restrictions_add_members(self):
        """
        Check if the union tag is ``directory_restrictions_add_members``.

        :rtype: bool
        """
        ...
    
    def is_directory_restrictions_remove_members(self):
        """
        Check if the union tag is ``directory_restrictions_remove_members``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_policy_changed(self):
        """
        Check if the union tag is ``dropbox_passwords_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_email_ingest_policy_changed(self):
        """
        Check if the union tag is ``email_ingest_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_emm_add_exception(self):
        """
        Check if the union tag is ``emm_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_emm_change_policy(self):
        """
        Check if the union tag is ``emm_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_emm_remove_exception(self):
        """
        Check if the union tag is ``emm_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_extended_version_history_change_policy(self):
        """
        Check if the union tag is ``extended_version_history_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_policy_changed(self):
        """
        Check if the union tag is ``external_drive_backup_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_comments_change_policy(self):
        """
        Check if the union tag is ``file_comments_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_file_locking_policy_changed(self):
        """
        Check if the union tag is ``file_locking_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_provider_migration_policy_changed(self):
        """
        Check if the union tag is ``file_provider_migration_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_change_policy(self):
        """
        Check if the union tag is ``file_requests_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_emails_enabled(self):
        """
        Check if the union tag is ``file_requests_emails_enabled``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_emails_restricted_to_team_only(self):
        """
        Check if the union tag is ``file_requests_emails_restricted_to_team_only``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_policy_changed(self):
        """
        Check if the union tag is ``file_transfers_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_folder_link_restriction_policy_changed(self):
        """
        Check if the union tag is ``folder_link_restriction_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_google_sso_change_policy(self):
        """
        Check if the union tag is ``google_sso_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_group_user_management_change_policy(self):
        """
        Check if the union tag is ``group_user_management_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_integration_policy_changed(self):
        """
        Check if the union tag is ``integration_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_invite_acceptance_email_policy_changed(self):
        """
        Check if the union tag is ``invite_acceptance_email_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_member_requests_change_policy(self):
        """
        Check if the union tag is ``member_requests_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_member_send_invite_policy_changed(self):
        """
        Check if the union tag is ``member_send_invite_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_add_exception(self):
        """
        Check if the union tag is ``member_space_limits_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_caps_type_policy(self):
        """
        Check if the union tag is ``member_space_limits_change_caps_type_policy``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_policy(self):
        """
        Check if the union tag is ``member_space_limits_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_remove_exception(self):
        """
        Check if the union tag is ``member_space_limits_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_member_suggestions_change_policy(self):
        """
        Check if the union tag is ``member_suggestions_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_microsoft_office_addin_change_policy(self):
        """
        Check if the union tag is ``microsoft_office_addin_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_network_control_change_policy(self):
        """
        Check if the union tag is ``network_control_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_deployment_policy(self):
        """
        Check if the union tag is ``paper_change_deployment_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_member_link_policy(self):
        """
        Check if the union tag is ``paper_change_member_link_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_member_policy(self):
        """
        Check if the union tag is ``paper_change_member_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_policy(self):
        """
        Check if the union tag is ``paper_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_default_folder_policy_changed(self):
        """
        Check if the union tag is ``paper_default_folder_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_paper_desktop_policy_changed(self):
        """
        Check if the union tag is ``paper_desktop_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_paper_enabled_users_group_addition(self):
        """
        Check if the union tag is ``paper_enabled_users_group_addition``.

        :rtype: bool
        """
        ...
    
    def is_paper_enabled_users_group_removal(self):
        """
        Check if the union tag is ``paper_enabled_users_group_removal``.

        :rtype: bool
        """
        ...
    
    def is_password_strength_requirements_change_policy(self):
        """
        Check if the union tag is ``password_strength_requirements_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_permanent_delete_change_policy(self):
        """
        Check if the union tag is ``permanent_delete_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_change_policy(self):
        """
        Check if the union tag is ``reseller_support_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_rewind_policy_changed(self):
        """
        Check if the union tag is ``rewind_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_send_for_signature_policy_changed(self):
        """
        Check if the union tag is ``send_for_signature_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_folder_join_policy(self):
        """
        Check if the union tag is ``sharing_change_folder_join_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_allow_change_expiration_policy(self):
        """
        Check if the union tag is ``sharing_change_link_allow_change_expiration_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_default_expiration_policy(self):
        """
        Check if the union tag is ``sharing_change_link_default_expiration_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_enforce_password_policy(self):
        """
        Check if the union tag is ``sharing_change_link_enforce_password_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_policy(self):
        """
        Check if the union tag is ``sharing_change_link_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_member_policy(self):
        """
        Check if the union tag is ``sharing_change_member_policy``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_download_policy(self):
        """
        Check if the union tag is ``showcase_change_download_policy``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_enabled_policy(self):
        """
        Check if the union tag is ``showcase_change_enabled_policy``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_external_sharing_policy(self):
        """
        Check if the union tag is ``showcase_change_external_sharing_policy``.

        :rtype: bool
        """
        ...
    
    def is_smarter_smart_sync_policy_changed(self):
        """
        Check if the union tag is ``smarter_smart_sync_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_change_policy(self):
        """
        Check if the union tag is ``smart_sync_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_not_opt_out(self):
        """
        Check if the union tag is ``smart_sync_not_opt_out``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_opt_out(self):
        """
        Check if the union tag is ``smart_sync_opt_out``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_policy(self):
        """
        Check if the union tag is ``sso_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_team_branding_policy_changed(self):
        """
        Check if the union tag is ``team_branding_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_team_extensions_policy_changed(self):
        """
        Check if the union tag is ``team_extensions_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_team_selective_sync_policy_changed(self):
        """
        Check if the union tag is ``team_selective_sync_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_team_sharing_whitelist_subjects_changed(self):
        """
        Check if the union tag is ``team_sharing_whitelist_subjects_changed``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_exception(self):
        """
        Check if the union tag is ``tfa_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_policy(self):
        """
        Check if the union tag is ``tfa_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_exception(self):
        """
        Check if the union tag is ``tfa_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_two_account_change_policy(self):
        """
        Check if the union tag is ``two_account_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_viewer_info_policy_changed(self):
        """
        Check if the union tag is ``viewer_info_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_watermarking_policy_changed(self):
        """
        Check if the union tag is ``watermarking_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_active_session_limit(self):
        """
        Check if the union tag is ``web_sessions_change_active_session_limit``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_fixed_length_policy(self):
        """
        Check if the union tag is ``web_sessions_change_fixed_length_policy``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_idle_length_policy(self):
        """
        Check if the union tag is ``web_sessions_change_idle_length_policy``.

        :rtype: bool
        """
        ...
    
    def is_data_residency_migration_request_successful(self):
        """
        Check if the union tag is ``data_residency_migration_request_successful``.

        :rtype: bool
        """
        ...
    
    def is_data_residency_migration_request_unsuccessful(self):
        """
        Check if the union tag is ``data_residency_migration_request_unsuccessful``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_from(self):
        """
        Check if the union tag is ``team_merge_from``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_to(self):
        """
        Check if the union tag is ``team_merge_to``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_add_background(self):
        """
        Check if the union tag is ``team_profile_add_background``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_add_logo(self):
        """
        Check if the union tag is ``team_profile_add_logo``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_background(self):
        """
        Check if the union tag is ``team_profile_change_background``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_default_language(self):
        """
        Check if the union tag is ``team_profile_change_default_language``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_logo(self):
        """
        Check if the union tag is ``team_profile_change_logo``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_name(self):
        """
        Check if the union tag is ``team_profile_change_name``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_remove_background(self):
        """
        Check if the union tag is ``team_profile_remove_background``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_remove_logo(self):
        """
        Check if the union tag is ``team_profile_remove_logo``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_backup_phone(self):
        """
        Check if the union tag is ``tfa_add_backup_phone``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_security_key(self):
        """
        Check if the union tag is ``tfa_add_security_key``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_backup_phone(self):
        """
        Check if the union tag is ``tfa_change_backup_phone``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_status(self):
        """
        Check if the union tag is ``tfa_change_status``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_backup_phone(self):
        """
        Check if the union tag is ``tfa_remove_backup_phone``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_security_key(self):
        """
        Check if the union tag is ``tfa_remove_security_key``.

        :rtype: bool
        """
        ...
    
    def is_tfa_reset(self):
        """
        Check if the union tag is ``tfa_reset``.

        :rtype: bool
        """
        ...
    
    def is_changed_enterprise_admin_role(self):
        """
        Check if the union tag is ``changed_enterprise_admin_role``.

        :rtype: bool
        """
        ...
    
    def is_changed_enterprise_connected_team_status(self):
        """
        Check if the union tag is ``changed_enterprise_connected_team_status``.

        :rtype: bool
        """
        ...
    
    def is_ended_enterprise_admin_session(self):
        """
        Check if the union tag is ``ended_enterprise_admin_session``.

        :rtype: bool
        """
        ...
    
    def is_ended_enterprise_admin_session_deprecated(self):
        """
        Check if the union tag is ``ended_enterprise_admin_session_deprecated``.

        :rtype: bool
        """
        ...
    
    def is_enterprise_settings_locking(self):
        """
        Check if the union tag is ``enterprise_settings_locking``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_change_status(self):
        """
        Check if the union tag is ``guest_admin_change_status``.

        :rtype: bool
        """
        ...
    
    def is_started_enterprise_admin_session(self):
        """
        Check if the union tag is ``started_enterprise_admin_session``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted(self):
        """
        Check if the union tag is ``team_merge_request_accepted``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_accepted_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_accepted_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_auto_canceled(self):
        """
        Check if the union tag is ``team_merge_request_auto_canceled``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled(self):
        """
        Check if the union tag is ``team_merge_request_canceled``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_canceled_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_canceled_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired(self):
        """
        Check if the union tag is ``team_merge_request_expired``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_expired_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_expired_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_rejected_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_rejected_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_rejected_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_rejected_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder(self):
        """
        Check if the union tag is ``team_merge_request_reminder``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_reminder_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_reminder_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_revoked(self):
        """
        Check if the union tag is ``team_merge_request_revoked``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_sent_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_sent_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_sent_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_sent_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_admin_alerting_alert_state_changed(self): # -> None:
        """
        (admin_alerting) Changed an alert state

        Only call this if :meth:`is_admin_alerting_alert_state_changed` is true.

        :rtype: AdminAlertingAlertStateChangedType
        """
        ...
    
    def get_admin_alerting_changed_alert_config(self): # -> None:
        """
        (admin_alerting) Changed an alert setting

        Only call this if :meth:`is_admin_alerting_changed_alert_config` is true.

        :rtype: AdminAlertingChangedAlertConfigType
        """
        ...
    
    def get_admin_alerting_triggered_alert(self): # -> None:
        """
        (admin_alerting) Triggered security alert

        Only call this if :meth:`is_admin_alerting_triggered_alert` is true.

        :rtype: AdminAlertingTriggeredAlertType
        """
        ...
    
    def get_ransomware_restore_process_completed(self): # -> None:
        """
        (admin_alerting) Completed ransomware restore process

        Only call this if :meth:`is_ransomware_restore_process_completed` is true.

        :rtype: RansomwareRestoreProcessCompletedType
        """
        ...
    
    def get_ransomware_restore_process_started(self): # -> None:
        """
        (admin_alerting) Started ransomware restore process

        Only call this if :meth:`is_ransomware_restore_process_started` is true.

        :rtype: RansomwareRestoreProcessStartedType
        """
        ...
    
    def get_app_blocked_by_permissions(self): # -> None:
        """
        (apps) Failed to connect app for member

        Only call this if :meth:`is_app_blocked_by_permissions` is true.

        :rtype: AppBlockedByPermissionsType
        """
        ...
    
    def get_app_link_team(self): # -> None:
        """
        (apps) Linked app for team

        Only call this if :meth:`is_app_link_team` is true.

        :rtype: AppLinkTeamType
        """
        ...
    
    def get_app_link_user(self): # -> None:
        """
        (apps) Linked app for member

        Only call this if :meth:`is_app_link_user` is true.

        :rtype: AppLinkUserType
        """
        ...
    
    def get_app_unlink_team(self): # -> None:
        """
        (apps) Unlinked app for team

        Only call this if :meth:`is_app_unlink_team` is true.

        :rtype: AppUnlinkTeamType
        """
        ...
    
    def get_app_unlink_user(self): # -> None:
        """
        (apps) Unlinked app for member

        Only call this if :meth:`is_app_unlink_user` is true.

        :rtype: AppUnlinkUserType
        """
        ...
    
    def get_integration_connected(self): # -> None:
        """
        (apps) Connected integration for member

        Only call this if :meth:`is_integration_connected` is true.

        :rtype: IntegrationConnectedType
        """
        ...
    
    def get_integration_disconnected(self): # -> None:
        """
        (apps) Disconnected integration for member

        Only call this if :meth:`is_integration_disconnected` is true.

        :rtype: IntegrationDisconnectedType
        """
        ...
    
    def get_file_add_comment(self): # -> None:
        """
        (comments) Added file comment

        Only call this if :meth:`is_file_add_comment` is true.

        :rtype: FileAddCommentType
        """
        ...
    
    def get_file_change_comment_subscription(self): # -> None:
        """
        (comments) Subscribed to or unsubscribed from comment notifications for
        file

        Only call this if :meth:`is_file_change_comment_subscription` is true.

        :rtype: FileChangeCommentSubscriptionType
        """
        ...
    
    def get_file_delete_comment(self): # -> None:
        """
        (comments) Deleted file comment

        Only call this if :meth:`is_file_delete_comment` is true.

        :rtype: FileDeleteCommentType
        """
        ...
    
    def get_file_edit_comment(self): # -> None:
        """
        (comments) Edited file comment

        Only call this if :meth:`is_file_edit_comment` is true.

        :rtype: FileEditCommentType
        """
        ...
    
    def get_file_like_comment(self): # -> None:
        """
        (comments) Liked file comment (deprecated, no longer logged)

        Only call this if :meth:`is_file_like_comment` is true.

        :rtype: FileLikeCommentType
        """
        ...
    
    def get_file_resolve_comment(self): # -> None:
        """
        (comments) Resolved file comment

        Only call this if :meth:`is_file_resolve_comment` is true.

        :rtype: FileResolveCommentType
        """
        ...
    
    def get_file_unlike_comment(self): # -> None:
        """
        (comments) Unliked file comment (deprecated, no longer logged)

        Only call this if :meth:`is_file_unlike_comment` is true.

        :rtype: FileUnlikeCommentType
        """
        ...
    
    def get_file_unresolve_comment(self): # -> None:
        """
        (comments) Unresolved file comment

        Only call this if :meth:`is_file_unresolve_comment` is true.

        :rtype: FileUnresolveCommentType
        """
        ...
    
    def get_governance_policy_add_folders(self): # -> None:
        """
        (data_governance) Added folders to policy

        Only call this if :meth:`is_governance_policy_add_folders` is true.

        :rtype: GovernancePolicyAddFoldersType
        """
        ...
    
    def get_governance_policy_add_folder_failed(self): # -> None:
        """
        (data_governance) Couldn't add a folder to a policy

        Only call this if :meth:`is_governance_policy_add_folder_failed` is true.

        :rtype: GovernancePolicyAddFolderFailedType
        """
        ...
    
    def get_governance_policy_content_disposed(self): # -> None:
        """
        (data_governance) Content disposed

        Only call this if :meth:`is_governance_policy_content_disposed` is true.

        :rtype: GovernancePolicyContentDisposedType
        """
        ...
    
    def get_governance_policy_create(self): # -> None:
        """
        (data_governance) Activated a new policy

        Only call this if :meth:`is_governance_policy_create` is true.

        :rtype: GovernancePolicyCreateType
        """
        ...
    
    def get_governance_policy_delete(self): # -> None:
        """
        (data_governance) Deleted a policy

        Only call this if :meth:`is_governance_policy_delete` is true.

        :rtype: GovernancePolicyDeleteType
        """
        ...
    
    def get_governance_policy_edit_details(self): # -> None:
        """
        (data_governance) Edited policy

        Only call this if :meth:`is_governance_policy_edit_details` is true.

        :rtype: GovernancePolicyEditDetailsType
        """
        ...
    
    def get_governance_policy_edit_duration(self): # -> None:
        """
        (data_governance) Changed policy duration

        Only call this if :meth:`is_governance_policy_edit_duration` is true.

        :rtype: GovernancePolicyEditDurationType
        """
        ...
    
    def get_governance_policy_export_created(self): # -> None:
        """
        (data_governance) Created a policy download

        Only call this if :meth:`is_governance_policy_export_created` is true.

        :rtype: GovernancePolicyExportCreatedType
        """
        ...
    
    def get_governance_policy_export_removed(self): # -> None:
        """
        (data_governance) Removed a policy download

        Only call this if :meth:`is_governance_policy_export_removed` is true.

        :rtype: GovernancePolicyExportRemovedType
        """
        ...
    
    def get_governance_policy_remove_folders(self): # -> None:
        """
        (data_governance) Removed folders from policy

        Only call this if :meth:`is_governance_policy_remove_folders` is true.

        :rtype: GovernancePolicyRemoveFoldersType
        """
        ...
    
    def get_governance_policy_report_created(self): # -> None:
        """
        (data_governance) Created a summary report for a policy

        Only call this if :meth:`is_governance_policy_report_created` is true.

        :rtype: GovernancePolicyReportCreatedType
        """
        ...
    
    def get_governance_policy_zip_part_downloaded(self): # -> None:
        """
        (data_governance) Downloaded content from a policy

        Only call this if :meth:`is_governance_policy_zip_part_downloaded` is true.

        :rtype: GovernancePolicyZipPartDownloadedType
        """
        ...
    
    def get_legal_holds_activate_a_hold(self): # -> None:
        """
        (data_governance) Activated a hold

        Only call this if :meth:`is_legal_holds_activate_a_hold` is true.

        :rtype: LegalHoldsActivateAHoldType
        """
        ...
    
    def get_legal_holds_add_members(self): # -> None:
        """
        (data_governance) Added members to a hold

        Only call this if :meth:`is_legal_holds_add_members` is true.

        :rtype: LegalHoldsAddMembersType
        """
        ...
    
    def get_legal_holds_change_hold_details(self): # -> None:
        """
        (data_governance) Edited details for a hold

        Only call this if :meth:`is_legal_holds_change_hold_details` is true.

        :rtype: LegalHoldsChangeHoldDetailsType
        """
        ...
    
    def get_legal_holds_change_hold_name(self): # -> None:
        """
        (data_governance) Renamed a hold

        Only call this if :meth:`is_legal_holds_change_hold_name` is true.

        :rtype: LegalHoldsChangeHoldNameType
        """
        ...
    
    def get_legal_holds_export_a_hold(self): # -> None:
        """
        (data_governance) Exported hold

        Only call this if :meth:`is_legal_holds_export_a_hold` is true.

        :rtype: LegalHoldsExportAHoldType
        """
        ...
    
    def get_legal_holds_export_cancelled(self): # -> None:
        """
        (data_governance) Canceled export for a hold

        Only call this if :meth:`is_legal_holds_export_cancelled` is true.

        :rtype: LegalHoldsExportCancelledType
        """
        ...
    
    def get_legal_holds_export_downloaded(self): # -> None:
        """
        (data_governance) Downloaded export for a hold

        Only call this if :meth:`is_legal_holds_export_downloaded` is true.

        :rtype: LegalHoldsExportDownloadedType
        """
        ...
    
    def get_legal_holds_export_removed(self): # -> None:
        """
        (data_governance) Removed export for a hold

        Only call this if :meth:`is_legal_holds_export_removed` is true.

        :rtype: LegalHoldsExportRemovedType
        """
        ...
    
    def get_legal_holds_release_a_hold(self): # -> None:
        """
        (data_governance) Released a hold

        Only call this if :meth:`is_legal_holds_release_a_hold` is true.

        :rtype: LegalHoldsReleaseAHoldType
        """
        ...
    
    def get_legal_holds_remove_members(self): # -> None:
        """
        (data_governance) Removed members from a hold

        Only call this if :meth:`is_legal_holds_remove_members` is true.

        :rtype: LegalHoldsRemoveMembersType
        """
        ...
    
    def get_legal_holds_report_a_hold(self): # -> None:
        """
        (data_governance) Created a summary report for a hold

        Only call this if :meth:`is_legal_holds_report_a_hold` is true.

        :rtype: LegalHoldsReportAHoldType
        """
        ...
    
    def get_device_change_ip_desktop(self): # -> None:
        """
        (devices) Changed IP address associated with active desktop session

        Only call this if :meth:`is_device_change_ip_desktop` is true.

        :rtype: DeviceChangeIpDesktopType
        """
        ...
    
    def get_device_change_ip_mobile(self): # -> None:
        """
        (devices) Changed IP address associated with active mobile session

        Only call this if :meth:`is_device_change_ip_mobile` is true.

        :rtype: DeviceChangeIpMobileType
        """
        ...
    
    def get_device_change_ip_web(self): # -> None:
        """
        (devices) Changed IP address associated with active web session

        Only call this if :meth:`is_device_change_ip_web` is true.

        :rtype: DeviceChangeIpWebType
        """
        ...
    
    def get_device_delete_on_unlink_fail(self): # -> None:
        """
        (devices) Failed to delete all files from unlinked device

        Only call this if :meth:`is_device_delete_on_unlink_fail` is true.

        :rtype: DeviceDeleteOnUnlinkFailType
        """
        ...
    
    def get_device_delete_on_unlink_success(self): # -> None:
        """
        (devices) Deleted all files from unlinked device

        Only call this if :meth:`is_device_delete_on_unlink_success` is true.

        :rtype: DeviceDeleteOnUnlinkSuccessType
        """
        ...
    
    def get_device_link_fail(self): # -> None:
        """
        (devices) Failed to link device

        Only call this if :meth:`is_device_link_fail` is true.

        :rtype: DeviceLinkFailType
        """
        ...
    
    def get_device_link_success(self): # -> None:
        """
        (devices) Linked device

        Only call this if :meth:`is_device_link_success` is true.

        :rtype: DeviceLinkSuccessType
        """
        ...
    
    def get_device_management_disabled(self): # -> None:
        """
        (devices) Disabled device management (deprecated, no longer logged)

        Only call this if :meth:`is_device_management_disabled` is true.

        :rtype: DeviceManagementDisabledType
        """
        ...
    
    def get_device_management_enabled(self): # -> None:
        """
        (devices) Enabled device management (deprecated, no longer logged)

        Only call this if :meth:`is_device_management_enabled` is true.

        :rtype: DeviceManagementEnabledType
        """
        ...
    
    def get_device_sync_backup_status_changed(self): # -> None:
        """
        (devices) Enabled/disabled backup for computer

        Only call this if :meth:`is_device_sync_backup_status_changed` is true.

        :rtype: DeviceSyncBackupStatusChangedType
        """
        ...
    
    def get_device_unlink(self): # -> None:
        """
        (devices) Disconnected device

        Only call this if :meth:`is_device_unlink` is true.

        :rtype: DeviceUnlinkType
        """
        ...
    
    def get_dropbox_passwords_exported(self): # -> None:
        """
        (devices) Exported passwords

        Only call this if :meth:`is_dropbox_passwords_exported` is true.

        :rtype: DropboxPasswordsExportedType
        """
        ...
    
    def get_dropbox_passwords_new_device_enrolled(self): # -> None:
        """
        (devices) Enrolled new Dropbox Passwords device

        Only call this if :meth:`is_dropbox_passwords_new_device_enrolled` is true.

        :rtype: DropboxPasswordsNewDeviceEnrolledType
        """
        ...
    
    def get_emm_refresh_auth_token(self): # -> None:
        """
        (devices) Refreshed auth token used for setting up EMM

        Only call this if :meth:`is_emm_refresh_auth_token` is true.

        :rtype: EmmRefreshAuthTokenType
        """
        ...
    
    def get_external_drive_backup_eligibility_status_checked(self): # -> None:
        """
        (devices) Checked external drive backup eligibility status

        Only call this if :meth:`is_external_drive_backup_eligibility_status_checked` is true.

        :rtype: ExternalDriveBackupEligibilityStatusCheckedType
        """
        ...
    
    def get_external_drive_backup_status_changed(self): # -> None:
        """
        (devices) Modified external drive backup

        Only call this if :meth:`is_external_drive_backup_status_changed` is true.

        :rtype: ExternalDriveBackupStatusChangedType
        """
        ...
    
    def get_account_capture_change_availability(self): # -> None:
        """
        (domains) Granted/revoked option to enable account capture on team
        domains

        Only call this if :meth:`is_account_capture_change_availability` is true.

        :rtype: AccountCaptureChangeAvailabilityType
        """
        ...
    
    def get_account_capture_migrate_account(self): # -> None:
        """
        (domains) Account-captured user migrated account to team

        Only call this if :meth:`is_account_capture_migrate_account` is true.

        :rtype: AccountCaptureMigrateAccountType
        """
        ...
    
    def get_account_capture_notification_emails_sent(self): # -> None:
        """
        (domains) Sent account capture email to all unmanaged members

        Only call this if :meth:`is_account_capture_notification_emails_sent` is true.

        :rtype: AccountCaptureNotificationEmailsSentType
        """
        ...
    
    def get_account_capture_relinquish_account(self): # -> None:
        """
        (domains) Account-captured user changed account email to personal email

        Only call this if :meth:`is_account_capture_relinquish_account` is true.

        :rtype: AccountCaptureRelinquishAccountType
        """
        ...
    
    def get_disabled_domain_invites(self): # -> None:
        """
        (domains) Disabled domain invites (deprecated, no longer logged)

        Only call this if :meth:`is_disabled_domain_invites` is true.

        :rtype: DisabledDomainInvitesType
        """
        ...
    
    def get_domain_invites_approve_request_to_join_team(self): # -> None:
        """
        (domains) Approved user's request to join team

        Only call this if :meth:`is_domain_invites_approve_request_to_join_team` is true.

        :rtype: DomainInvitesApproveRequestToJoinTeamType
        """
        ...
    
    def get_domain_invites_decline_request_to_join_team(self): # -> None:
        """
        (domains) Declined user's request to join team

        Only call this if :meth:`is_domain_invites_decline_request_to_join_team` is true.

        :rtype: DomainInvitesDeclineRequestToJoinTeamType
        """
        ...
    
    def get_domain_invites_email_existing_users(self): # -> None:
        """
        (domains) Sent domain invites to existing domain accounts (deprecated,
        no longer logged)

        Only call this if :meth:`is_domain_invites_email_existing_users` is true.

        :rtype: DomainInvitesEmailExistingUsersType
        """
        ...
    
    def get_domain_invites_request_to_join_team(self): # -> None:
        """
        (domains) Requested to join team

        Only call this if :meth:`is_domain_invites_request_to_join_team` is true.

        :rtype: DomainInvitesRequestToJoinTeamType
        """
        ...
    
    def get_domain_invites_set_invite_new_user_pref_to_no(self): # -> None:
        """
        (domains) Disabled "Automatically invite new users" (deprecated, no
        longer logged)

        Only call this if :meth:`is_domain_invites_set_invite_new_user_pref_to_no` is true.

        :rtype: DomainInvitesSetInviteNewUserPrefToNoType
        """
        ...
    
    def get_domain_invites_set_invite_new_user_pref_to_yes(self): # -> None:
        """
        (domains) Enabled "Automatically invite new users" (deprecated, no
        longer logged)

        Only call this if :meth:`is_domain_invites_set_invite_new_user_pref_to_yes` is true.

        :rtype: DomainInvitesSetInviteNewUserPrefToYesType
        """
        ...
    
    def get_domain_verification_add_domain_fail(self): # -> None:
        """
        (domains) Failed to verify team domain

        Only call this if :meth:`is_domain_verification_add_domain_fail` is true.

        :rtype: DomainVerificationAddDomainFailType
        """
        ...
    
    def get_domain_verification_add_domain_success(self): # -> None:
        """
        (domains) Verified team domain

        Only call this if :meth:`is_domain_verification_add_domain_success` is true.

        :rtype: DomainVerificationAddDomainSuccessType
        """
        ...
    
    def get_domain_verification_remove_domain(self): # -> None:
        """
        (domains) Removed domain from list of verified team domains

        Only call this if :meth:`is_domain_verification_remove_domain` is true.

        :rtype: DomainVerificationRemoveDomainType
        """
        ...
    
    def get_enabled_domain_invites(self): # -> None:
        """
        (domains) Enabled domain invites (deprecated, no longer logged)

        Only call this if :meth:`is_enabled_domain_invites` is true.

        :rtype: EnabledDomainInvitesType
        """
        ...
    
    def get_team_encryption_key_cancel_key_deletion(self): # -> None:
        """
        (encryption) Canceled team encryption key deletion

        Only call this if :meth:`is_team_encryption_key_cancel_key_deletion` is true.

        :rtype: TeamEncryptionKeyCancelKeyDeletionType
        """
        ...
    
    def get_team_encryption_key_create_key(self): # -> None:
        """
        (encryption) Created team encryption key

        Only call this if :meth:`is_team_encryption_key_create_key` is true.

        :rtype: TeamEncryptionKeyCreateKeyType
        """
        ...
    
    def get_team_encryption_key_delete_key(self): # -> None:
        """
        (encryption) Deleted team encryption key

        Only call this if :meth:`is_team_encryption_key_delete_key` is true.

        :rtype: TeamEncryptionKeyDeleteKeyType
        """
        ...
    
    def get_team_encryption_key_disable_key(self): # -> None:
        """
        (encryption) Disabled team encryption key

        Only call this if :meth:`is_team_encryption_key_disable_key` is true.

        :rtype: TeamEncryptionKeyDisableKeyType
        """
        ...
    
    def get_team_encryption_key_enable_key(self): # -> None:
        """
        (encryption) Enabled team encryption key

        Only call this if :meth:`is_team_encryption_key_enable_key` is true.

        :rtype: TeamEncryptionKeyEnableKeyType
        """
        ...
    
    def get_team_encryption_key_rotate_key(self): # -> None:
        """
        (encryption) Rotated team encryption key (deprecated, no longer logged)

        Only call this if :meth:`is_team_encryption_key_rotate_key` is true.

        :rtype: TeamEncryptionKeyRotateKeyType
        """
        ...
    
    def get_team_encryption_key_schedule_key_deletion(self): # -> None:
        """
        (encryption) Scheduled encryption key deletion

        Only call this if :meth:`is_team_encryption_key_schedule_key_deletion` is true.

        :rtype: TeamEncryptionKeyScheduleKeyDeletionType
        """
        ...
    
    def get_apply_naming_convention(self): # -> None:
        """
        (file_operations) Applied naming convention

        Only call this if :meth:`is_apply_naming_convention` is true.

        :rtype: ApplyNamingConventionType
        """
        ...
    
    def get_create_folder(self): # -> None:
        """
        (file_operations) Created folders (deprecated, no longer logged)

        Only call this if :meth:`is_create_folder` is true.

        :rtype: CreateFolderType
        """
        ...
    
    def get_file_add(self): # -> None:
        """
        (file_operations) Added files and/or folders

        Only call this if :meth:`is_file_add` is true.

        :rtype: FileAddType
        """
        ...
    
    def get_file_add_from_automation(self): # -> None:
        """
        (file_operations) Added files and/or folders from automation

        Only call this if :meth:`is_file_add_from_automation` is true.

        :rtype: FileAddFromAutomationType
        """
        ...
    
    def get_file_copy(self): # -> None:
        """
        (file_operations) Copied files and/or folders

        Only call this if :meth:`is_file_copy` is true.

        :rtype: FileCopyType
        """
        ...
    
    def get_file_delete(self): # -> None:
        """
        (file_operations) Deleted files and/or folders

        Only call this if :meth:`is_file_delete` is true.

        :rtype: FileDeleteType
        """
        ...
    
    def get_file_download(self): # -> None:
        """
        (file_operations) Downloaded files and/or folders

        Only call this if :meth:`is_file_download` is true.

        :rtype: FileDownloadType
        """
        ...
    
    def get_file_edit(self): # -> None:
        """
        (file_operations) Edited files

        Only call this if :meth:`is_file_edit` is true.

        :rtype: FileEditType
        """
        ...
    
    def get_file_get_copy_reference(self): # -> None:
        """
        (file_operations) Created copy reference to file/folder

        Only call this if :meth:`is_file_get_copy_reference` is true.

        :rtype: FileGetCopyReferenceType
        """
        ...
    
    def get_file_locking_lock_status_changed(self): # -> None:
        """
        (file_operations) Locked/unlocked editing for a file

        Only call this if :meth:`is_file_locking_lock_status_changed` is true.

        :rtype: FileLockingLockStatusChangedType
        """
        ...
    
    def get_file_move(self): # -> None:
        """
        (file_operations) Moved files and/or folders

        Only call this if :meth:`is_file_move` is true.

        :rtype: FileMoveType
        """
        ...
    
    def get_file_permanently_delete(self): # -> None:
        """
        (file_operations) Permanently deleted files and/or folders

        Only call this if :meth:`is_file_permanently_delete` is true.

        :rtype: FilePermanentlyDeleteType
        """
        ...
    
    def get_file_preview(self): # -> None:
        """
        (file_operations) Previewed files and/or folders

        Only call this if :meth:`is_file_preview` is true.

        :rtype: FilePreviewType
        """
        ...
    
    def get_file_rename(self): # -> None:
        """
        (file_operations) Renamed files and/or folders

        Only call this if :meth:`is_file_rename` is true.

        :rtype: FileRenameType
        """
        ...
    
    def get_file_restore(self): # -> None:
        """
        (file_operations) Restored deleted files and/or folders

        Only call this if :meth:`is_file_restore` is true.

        :rtype: FileRestoreType
        """
        ...
    
    def get_file_revert(self): # -> None:
        """
        (file_operations) Reverted files to previous version

        Only call this if :meth:`is_file_revert` is true.

        :rtype: FileRevertType
        """
        ...
    
    def get_file_rollback_changes(self): # -> None:
        """
        (file_operations) Rolled back file actions

        Only call this if :meth:`is_file_rollback_changes` is true.

        :rtype: FileRollbackChangesType
        """
        ...
    
    def get_file_save_copy_reference(self): # -> None:
        """
        (file_operations) Saved file/folder using copy reference

        Only call this if :meth:`is_file_save_copy_reference` is true.

        :rtype: FileSaveCopyReferenceType
        """
        ...
    
    def get_folder_overview_description_changed(self): # -> None:
        """
        (file_operations) Updated folder overview

        Only call this if :meth:`is_folder_overview_description_changed` is true.

        :rtype: FolderOverviewDescriptionChangedType
        """
        ...
    
    def get_folder_overview_item_pinned(self): # -> None:
        """
        (file_operations) Pinned item to folder overview

        Only call this if :meth:`is_folder_overview_item_pinned` is true.

        :rtype: FolderOverviewItemPinnedType
        """
        ...
    
    def get_folder_overview_item_unpinned(self): # -> None:
        """
        (file_operations) Unpinned item from folder overview

        Only call this if :meth:`is_folder_overview_item_unpinned` is true.

        :rtype: FolderOverviewItemUnpinnedType
        """
        ...
    
    def get_object_label_added(self): # -> None:
        """
        (file_operations) Added a label

        Only call this if :meth:`is_object_label_added` is true.

        :rtype: ObjectLabelAddedType
        """
        ...
    
    def get_object_label_removed(self): # -> None:
        """
        (file_operations) Removed a label

        Only call this if :meth:`is_object_label_removed` is true.

        :rtype: ObjectLabelRemovedType
        """
        ...
    
    def get_object_label_updated_value(self): # -> None:
        """
        (file_operations) Updated a label's value

        Only call this if :meth:`is_object_label_updated_value` is true.

        :rtype: ObjectLabelUpdatedValueType
        """
        ...
    
    def get_organize_folder_with_tidy(self): # -> None:
        """
        (file_operations) Organized a folder with multi-file organize

        Only call this if :meth:`is_organize_folder_with_tidy` is true.

        :rtype: OrganizeFolderWithTidyType
        """
        ...
    
    def get_replay_file_delete(self): # -> None:
        """
        (file_operations) Deleted files in Replay

        Only call this if :meth:`is_replay_file_delete` is true.

        :rtype: ReplayFileDeleteType
        """
        ...
    
    def get_rewind_folder(self): # -> None:
        """
        (file_operations) Rewound a folder

        Only call this if :meth:`is_rewind_folder` is true.

        :rtype: RewindFolderType
        """
        ...
    
    def get_undo_naming_convention(self): # -> None:
        """
        (file_operations) Reverted naming convention

        Only call this if :meth:`is_undo_naming_convention` is true.

        :rtype: UndoNamingConventionType
        """
        ...
    
    def get_undo_organize_folder_with_tidy(self): # -> None:
        """
        (file_operations) Removed multi-file organize

        Only call this if :meth:`is_undo_organize_folder_with_tidy` is true.

        :rtype: UndoOrganizeFolderWithTidyType
        """
        ...
    
    def get_user_tags_added(self): # -> None:
        """
        (file_operations) Tagged a file

        Only call this if :meth:`is_user_tags_added` is true.

        :rtype: UserTagsAddedType
        """
        ...
    
    def get_user_tags_removed(self): # -> None:
        """
        (file_operations) Removed tags

        Only call this if :meth:`is_user_tags_removed` is true.

        :rtype: UserTagsRemovedType
        """
        ...
    
    def get_email_ingest_receive_file(self): # -> None:
        """
        (file_requests) Received files via Email to Dropbox

        Only call this if :meth:`is_email_ingest_receive_file` is true.

        :rtype: EmailIngestReceiveFileType
        """
        ...
    
    def get_file_request_change(self): # -> None:
        """
        (file_requests) Changed file request

        Only call this if :meth:`is_file_request_change` is true.

        :rtype: FileRequestChangeType
        """
        ...
    
    def get_file_request_close(self): # -> None:
        """
        (file_requests) Closed file request

        Only call this if :meth:`is_file_request_close` is true.

        :rtype: FileRequestCloseType
        """
        ...
    
    def get_file_request_create(self): # -> None:
        """
        (file_requests) Created file request

        Only call this if :meth:`is_file_request_create` is true.

        :rtype: FileRequestCreateType
        """
        ...
    
    def get_file_request_delete(self): # -> None:
        """
        (file_requests) Delete file request

        Only call this if :meth:`is_file_request_delete` is true.

        :rtype: FileRequestDeleteType
        """
        ...
    
    def get_file_request_receive_file(self): # -> None:
        """
        (file_requests) Received files for file request

        Only call this if :meth:`is_file_request_receive_file` is true.

        :rtype: FileRequestReceiveFileType
        """
        ...
    
    def get_group_add_external_id(self): # -> None:
        """
        (groups) Added external ID for group

        Only call this if :meth:`is_group_add_external_id` is true.

        :rtype: GroupAddExternalIdType
        """
        ...
    
    def get_group_add_member(self): # -> None:
        """
        (groups) Added team members to group

        Only call this if :meth:`is_group_add_member` is true.

        :rtype: GroupAddMemberType
        """
        ...
    
    def get_group_change_external_id(self): # -> None:
        """
        (groups) Changed external ID for group

        Only call this if :meth:`is_group_change_external_id` is true.

        :rtype: GroupChangeExternalIdType
        """
        ...
    
    def get_group_change_management_type(self): # -> None:
        """
        (groups) Changed group management type

        Only call this if :meth:`is_group_change_management_type` is true.

        :rtype: GroupChangeManagementTypeType
        """
        ...
    
    def get_group_change_member_role(self): # -> None:
        """
        (groups) Changed manager permissions of group member

        Only call this if :meth:`is_group_change_member_role` is true.

        :rtype: GroupChangeMemberRoleType
        """
        ...
    
    def get_group_create(self): # -> None:
        """
        (groups) Created group

        Only call this if :meth:`is_group_create` is true.

        :rtype: GroupCreateType
        """
        ...
    
    def get_group_delete(self): # -> None:
        """
        (groups) Deleted group

        Only call this if :meth:`is_group_delete` is true.

        :rtype: GroupDeleteType
        """
        ...
    
    def get_group_description_updated(self): # -> None:
        """
        (groups) Updated group (deprecated, no longer logged)

        Only call this if :meth:`is_group_description_updated` is true.

        :rtype: GroupDescriptionUpdatedType
        """
        ...
    
    def get_group_join_policy_updated(self): # -> None:
        """
        (groups) Updated group join policy (deprecated, no longer logged)

        Only call this if :meth:`is_group_join_policy_updated` is true.

        :rtype: GroupJoinPolicyUpdatedType
        """
        ...
    
    def get_group_moved(self): # -> None:
        """
        (groups) Moved group (deprecated, no longer logged)

        Only call this if :meth:`is_group_moved` is true.

        :rtype: GroupMovedType
        """
        ...
    
    def get_group_remove_external_id(self): # -> None:
        """
        (groups) Removed external ID for group

        Only call this if :meth:`is_group_remove_external_id` is true.

        :rtype: GroupRemoveExternalIdType
        """
        ...
    
    def get_group_remove_member(self): # -> None:
        """
        (groups) Removed team members from group

        Only call this if :meth:`is_group_remove_member` is true.

        :rtype: GroupRemoveMemberType
        """
        ...
    
    def get_group_rename(self): # -> None:
        """
        (groups) Renamed group

        Only call this if :meth:`is_group_rename` is true.

        :rtype: GroupRenameType
        """
        ...
    
    def get_account_lock_or_unlocked(self): # -> None:
        """
        (logins) Unlocked/locked account after failed sign in attempts

        Only call this if :meth:`is_account_lock_or_unlocked` is true.

        :rtype: AccountLockOrUnlockedType
        """
        ...
    
    def get_emm_error(self): # -> None:
        """
        (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to
        sign in')

        Only call this if :meth:`is_emm_error` is true.

        :rtype: EmmErrorType
        """
        ...
    
    def get_guest_admin_signed_in_via_trusted_teams(self): # -> None:
        """
        (logins) Started trusted team admin session

        Only call this if :meth:`is_guest_admin_signed_in_via_trusted_teams` is true.

        :rtype: GuestAdminSignedInViaTrustedTeamsType
        """
        ...
    
    def get_guest_admin_signed_out_via_trusted_teams(self): # -> None:
        """
        (logins) Ended trusted team admin session

        Only call this if :meth:`is_guest_admin_signed_out_via_trusted_teams` is true.

        :rtype: GuestAdminSignedOutViaTrustedTeamsType
        """
        ...
    
    def get_login_fail(self): # -> None:
        """
        (logins) Failed to sign in

        Only call this if :meth:`is_login_fail` is true.

        :rtype: LoginFailType
        """
        ...
    
    def get_login_success(self): # -> None:
        """
        (logins) Signed in

        Only call this if :meth:`is_login_success` is true.

        :rtype: LoginSuccessType
        """
        ...
    
    def get_logout(self): # -> None:
        """
        (logins) Signed out

        Only call this if :meth:`is_logout` is true.

        :rtype: LogoutType
        """
        ...
    
    def get_reseller_support_session_end(self): # -> None:
        """
        (logins) Ended reseller support session

        Only call this if :meth:`is_reseller_support_session_end` is true.

        :rtype: ResellerSupportSessionEndType
        """
        ...
    
    def get_reseller_support_session_start(self): # -> None:
        """
        (logins) Started reseller support session

        Only call this if :meth:`is_reseller_support_session_start` is true.

        :rtype: ResellerSupportSessionStartType
        """
        ...
    
    def get_sign_in_as_session_end(self): # -> None:
        """
        (logins) Ended admin sign-in-as session

        Only call this if :meth:`is_sign_in_as_session_end` is true.

        :rtype: SignInAsSessionEndType
        """
        ...
    
    def get_sign_in_as_session_start(self): # -> None:
        """
        (logins) Started admin sign-in-as session

        Only call this if :meth:`is_sign_in_as_session_start` is true.

        :rtype: SignInAsSessionStartType
        """
        ...
    
    def get_sso_error(self): # -> None:
        """
        (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to
        sign in')

        Only call this if :meth:`is_sso_error` is true.

        :rtype: SsoErrorType
        """
        ...
    
    def get_backup_admin_invitation_sent(self): # -> None:
        """
        (members) Invited members to activate Backup

        Only call this if :meth:`is_backup_admin_invitation_sent` is true.

        :rtype: BackupAdminInvitationSentType
        """
        ...
    
    def get_backup_invitation_opened(self): # -> None:
        """
        (members) Opened Backup invite

        Only call this if :meth:`is_backup_invitation_opened` is true.

        :rtype: BackupInvitationOpenedType
        """
        ...
    
    def get_create_team_invite_link(self): # -> None:
        """
        (members) Created team invite link

        Only call this if :meth:`is_create_team_invite_link` is true.

        :rtype: CreateTeamInviteLinkType
        """
        ...
    
    def get_delete_team_invite_link(self): # -> None:
        """
        (members) Deleted team invite link

        Only call this if :meth:`is_delete_team_invite_link` is true.

        :rtype: DeleteTeamInviteLinkType
        """
        ...
    
    def get_member_add_external_id(self): # -> None:
        """
        (members) Added an external ID for team member

        Only call this if :meth:`is_member_add_external_id` is true.

        :rtype: MemberAddExternalIdType
        """
        ...
    
    def get_member_add_name(self): # -> None:
        """
        (members) Added team member name

        Only call this if :meth:`is_member_add_name` is true.

        :rtype: MemberAddNameType
        """
        ...
    
    def get_member_change_admin_role(self): # -> None:
        """
        (members) Changed team member admin role

        Only call this if :meth:`is_member_change_admin_role` is true.

        :rtype: MemberChangeAdminRoleType
        """
        ...
    
    def get_member_change_email(self): # -> None:
        """
        (members) Changed team member email

        Only call this if :meth:`is_member_change_email` is true.

        :rtype: MemberChangeEmailType
        """
        ...
    
    def get_member_change_external_id(self): # -> None:
        """
        (members) Changed the external ID for team member

        Only call this if :meth:`is_member_change_external_id` is true.

        :rtype: MemberChangeExternalIdType
        """
        ...
    
    def get_member_change_membership_type(self): # -> None:
        """
        (members) Changed membership type (limited/full) of member (deprecated,
        no longer logged)

        Only call this if :meth:`is_member_change_membership_type` is true.

        :rtype: MemberChangeMembershipTypeType
        """
        ...
    
    def get_member_change_name(self): # -> None:
        """
        (members) Changed team member name

        Only call this if :meth:`is_member_change_name` is true.

        :rtype: MemberChangeNameType
        """
        ...
    
    def get_member_change_reseller_role(self): # -> None:
        """
        (members) Changed team member reseller role

        Only call this if :meth:`is_member_change_reseller_role` is true.

        :rtype: MemberChangeResellerRoleType
        """
        ...
    
    def get_member_change_status(self): # -> None:
        """
        (members) Changed member status (invited, joined, suspended, etc.)

        Only call this if :meth:`is_member_change_status` is true.

        :rtype: MemberChangeStatusType
        """
        ...
    
    def get_member_delete_manual_contacts(self): # -> None:
        """
        (members) Cleared manually added contacts

        Only call this if :meth:`is_member_delete_manual_contacts` is true.

        :rtype: MemberDeleteManualContactsType
        """
        ...
    
    def get_member_delete_profile_photo(self): # -> None:
        """
        (members) Deleted team member profile photo

        Only call this if :meth:`is_member_delete_profile_photo` is true.

        :rtype: MemberDeleteProfilePhotoType
        """
        ...
    
    def get_member_permanently_delete_account_contents(self): # -> None:
        """
        (members) Permanently deleted contents of deleted team member account

        Only call this if :meth:`is_member_permanently_delete_account_contents` is true.

        :rtype: MemberPermanentlyDeleteAccountContentsType
        """
        ...
    
    def get_member_remove_external_id(self): # -> None:
        """
        (members) Removed the external ID for team member

        Only call this if :meth:`is_member_remove_external_id` is true.

        :rtype: MemberRemoveExternalIdType
        """
        ...
    
    def get_member_set_profile_photo(self): # -> None:
        """
        (members) Set team member profile photo

        Only call this if :meth:`is_member_set_profile_photo` is true.

        :rtype: MemberSetProfilePhotoType
        """
        ...
    
    def get_member_space_limits_add_custom_quota(self): # -> None:
        """
        (members) Set custom member space limit

        Only call this if :meth:`is_member_space_limits_add_custom_quota` is true.

        :rtype: MemberSpaceLimitsAddCustomQuotaType
        """
        ...
    
    def get_member_space_limits_change_custom_quota(self): # -> None:
        """
        (members) Changed custom member space limit

        Only call this if :meth:`is_member_space_limits_change_custom_quota` is true.

        :rtype: MemberSpaceLimitsChangeCustomQuotaType
        """
        ...
    
    def get_member_space_limits_change_status(self): # -> None:
        """
        (members) Changed space limit status

        Only call this if :meth:`is_member_space_limits_change_status` is true.

        :rtype: MemberSpaceLimitsChangeStatusType
        """
        ...
    
    def get_member_space_limits_remove_custom_quota(self): # -> None:
        """
        (members) Removed custom member space limit

        Only call this if :meth:`is_member_space_limits_remove_custom_quota` is true.

        :rtype: MemberSpaceLimitsRemoveCustomQuotaType
        """
        ...
    
    def get_member_suggest(self): # -> None:
        """
        (members) Suggested person to add to team

        Only call this if :meth:`is_member_suggest` is true.

        :rtype: MemberSuggestType
        """
        ...
    
    def get_member_transfer_account_contents(self): # -> None:
        """
        (members) Transferred contents of deleted member account to another
        member

        Only call this if :meth:`is_member_transfer_account_contents` is true.

        :rtype: MemberTransferAccountContentsType
        """
        ...
    
    def get_pending_secondary_email_added(self): # -> None:
        """
        (members) Added pending secondary email

        Only call this if :meth:`is_pending_secondary_email_added` is true.

        :rtype: PendingSecondaryEmailAddedType
        """
        ...
    
    def get_secondary_email_deleted(self): # -> None:
        """
        (members) Deleted secondary email

        Only call this if :meth:`is_secondary_email_deleted` is true.

        :rtype: SecondaryEmailDeletedType
        """
        ...
    
    def get_secondary_email_verified(self): # -> None:
        """
        (members) Verified secondary email

        Only call this if :meth:`is_secondary_email_verified` is true.

        :rtype: SecondaryEmailVerifiedType
        """
        ...
    
    def get_secondary_mails_policy_changed(self): # -> None:
        """
        (members) Secondary mails policy changed

        Only call this if :meth:`is_secondary_mails_policy_changed` is true.

        :rtype: SecondaryMailsPolicyChangedType
        """
        ...
    
    def get_binder_add_page(self): # -> None:
        """
        (paper) Added Binder page (deprecated, replaced by 'Edited files')

        Only call this if :meth:`is_binder_add_page` is true.

        :rtype: BinderAddPageType
        """
        ...
    
    def get_binder_add_section(self): # -> None:
        """
        (paper) Added Binder section (deprecated, replaced by 'Edited files')

        Only call this if :meth:`is_binder_add_section` is true.

        :rtype: BinderAddSectionType
        """
        ...
    
    def get_binder_remove_page(self): # -> None:
        """
        (paper) Removed Binder page (deprecated, replaced by 'Edited files')

        Only call this if :meth:`is_binder_remove_page` is true.

        :rtype: BinderRemovePageType
        """
        ...
    
    def get_binder_remove_section(self): # -> None:
        """
        (paper) Removed Binder section (deprecated, replaced by 'Edited files')

        Only call this if :meth:`is_binder_remove_section` is true.

        :rtype: BinderRemoveSectionType
        """
        ...
    
    def get_binder_rename_page(self): # -> None:
        """
        (paper) Renamed Binder page (deprecated, replaced by 'Edited files')

        Only call this if :meth:`is_binder_rename_page` is true.

        :rtype: BinderRenamePageType
        """
        ...
    
    def get_binder_rename_section(self): # -> None:
        """
        (paper) Renamed Binder section (deprecated, replaced by 'Edited files')

        Only call this if :meth:`is_binder_rename_section` is true.

        :rtype: BinderRenameSectionType
        """
        ...
    
    def get_binder_reorder_page(self): # -> None:
        """
        (paper) Reordered Binder page (deprecated, replaced by 'Edited files')

        Only call this if :meth:`is_binder_reorder_page` is true.

        :rtype: BinderReorderPageType
        """
        ...
    
    def get_binder_reorder_section(self): # -> None:
        """
        (paper) Reordered Binder section (deprecated, replaced by 'Edited
        files')

        Only call this if :meth:`is_binder_reorder_section` is true.

        :rtype: BinderReorderSectionType
        """
        ...
    
    def get_paper_content_add_member(self): # -> None:
        """
        (paper) Added users and/or groups to Paper doc/folder

        Only call this if :meth:`is_paper_content_add_member` is true.

        :rtype: PaperContentAddMemberType
        """
        ...
    
    def get_paper_content_add_to_folder(self): # -> None:
        """
        (paper) Added Paper doc/folder to folder

        Only call this if :meth:`is_paper_content_add_to_folder` is true.

        :rtype: PaperContentAddToFolderType
        """
        ...
    
    def get_paper_content_archive(self): # -> None:
        """
        (paper) Archived Paper doc/folder

        Only call this if :meth:`is_paper_content_archive` is true.

        :rtype: PaperContentArchiveType
        """
        ...
    
    def get_paper_content_create(self): # -> None:
        """
        (paper) Created Paper doc/folder

        Only call this if :meth:`is_paper_content_create` is true.

        :rtype: PaperContentCreateType
        """
        ...
    
    def get_paper_content_permanently_delete(self): # -> None:
        """
        (paper) Permanently deleted Paper doc/folder

        Only call this if :meth:`is_paper_content_permanently_delete` is true.

        :rtype: PaperContentPermanentlyDeleteType
        """
        ...
    
    def get_paper_content_remove_from_folder(self): # -> None:
        """
        (paper) Removed Paper doc/folder from folder

        Only call this if :meth:`is_paper_content_remove_from_folder` is true.

        :rtype: PaperContentRemoveFromFolderType
        """
        ...
    
    def get_paper_content_remove_member(self): # -> None:
        """
        (paper) Removed users and/or groups from Paper doc/folder

        Only call this if :meth:`is_paper_content_remove_member` is true.

        :rtype: PaperContentRemoveMemberType
        """
        ...
    
    def get_paper_content_rename(self): # -> None:
        """
        (paper) Renamed Paper doc/folder

        Only call this if :meth:`is_paper_content_rename` is true.

        :rtype: PaperContentRenameType
        """
        ...
    
    def get_paper_content_restore(self): # -> None:
        """
        (paper) Restored archived Paper doc/folder

        Only call this if :meth:`is_paper_content_restore` is true.

        :rtype: PaperContentRestoreType
        """
        ...
    
    def get_paper_doc_add_comment(self): # -> None:
        """
        (paper) Added Paper doc comment

        Only call this if :meth:`is_paper_doc_add_comment` is true.

        :rtype: PaperDocAddCommentType
        """
        ...
    
    def get_paper_doc_change_member_role(self): # -> None:
        """
        (paper) Changed member permissions for Paper doc

        Only call this if :meth:`is_paper_doc_change_member_role` is true.

        :rtype: PaperDocChangeMemberRoleType
        """
        ...
    
    def get_paper_doc_change_sharing_policy(self): # -> None:
        """
        (paper) Changed sharing setting for Paper doc

        Only call this if :meth:`is_paper_doc_change_sharing_policy` is true.

        :rtype: PaperDocChangeSharingPolicyType
        """
        ...
    
    def get_paper_doc_change_subscription(self): # -> None:
        """
        (paper) Followed/unfollowed Paper doc

        Only call this if :meth:`is_paper_doc_change_subscription` is true.

        :rtype: PaperDocChangeSubscriptionType
        """
        ...
    
    def get_paper_doc_deleted(self): # -> None:
        """
        (paper) Archived Paper doc (deprecated, no longer logged)

        Only call this if :meth:`is_paper_doc_deleted` is true.

        :rtype: PaperDocDeletedType
        """
        ...
    
    def get_paper_doc_delete_comment(self): # -> None:
        """
        (paper) Deleted Paper doc comment

        Only call this if :meth:`is_paper_doc_delete_comment` is true.

        :rtype: PaperDocDeleteCommentType
        """
        ...
    
    def get_paper_doc_download(self): # -> None:
        """
        (paper) Downloaded Paper doc in specific format

        Only call this if :meth:`is_paper_doc_download` is true.

        :rtype: PaperDocDownloadType
        """
        ...
    
    def get_paper_doc_edit(self): # -> None:
        """
        (paper) Edited Paper doc

        Only call this if :meth:`is_paper_doc_edit` is true.

        :rtype: PaperDocEditType
        """
        ...
    
    def get_paper_doc_edit_comment(self): # -> None:
        """
        (paper) Edited Paper doc comment

        Only call this if :meth:`is_paper_doc_edit_comment` is true.

        :rtype: PaperDocEditCommentType
        """
        ...
    
    def get_paper_doc_followed(self): # -> None:
        """
        (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed
        Paper doc')

        Only call this if :meth:`is_paper_doc_followed` is true.

        :rtype: PaperDocFollowedType
        """
        ...
    
    def get_paper_doc_mention(self): # -> None:
        """
        (paper) Mentioned user in Paper doc

        Only call this if :meth:`is_paper_doc_mention` is true.

        :rtype: PaperDocMentionType
        """
        ...
    
    def get_paper_doc_ownership_changed(self): # -> None:
        """
        (paper) Transferred ownership of Paper doc

        Only call this if :meth:`is_paper_doc_ownership_changed` is true.

        :rtype: PaperDocOwnershipChangedType
        """
        ...
    
    def get_paper_doc_request_access(self): # -> None:
        """
        (paper) Requested access to Paper doc

        Only call this if :meth:`is_paper_doc_request_access` is true.

        :rtype: PaperDocRequestAccessType
        """
        ...
    
    def get_paper_doc_resolve_comment(self): # -> None:
        """
        (paper) Resolved Paper doc comment

        Only call this if :meth:`is_paper_doc_resolve_comment` is true.

        :rtype: PaperDocResolveCommentType
        """
        ...
    
    def get_paper_doc_revert(self): # -> None:
        """
        (paper) Restored Paper doc to previous version

        Only call this if :meth:`is_paper_doc_revert` is true.

        :rtype: PaperDocRevertType
        """
        ...
    
    def get_paper_doc_slack_share(self): # -> None:
        """
        (paper) Shared Paper doc via Slack

        Only call this if :meth:`is_paper_doc_slack_share` is true.

        :rtype: PaperDocSlackShareType
        """
        ...
    
    def get_paper_doc_team_invite(self): # -> None:
        """
        (paper) Shared Paper doc with users and/or groups (deprecated, no longer
        logged)

        Only call this if :meth:`is_paper_doc_team_invite` is true.

        :rtype: PaperDocTeamInviteType
        """
        ...
    
    def get_paper_doc_trashed(self): # -> None:
        """
        (paper) Deleted Paper doc

        Only call this if :meth:`is_paper_doc_trashed` is true.

        :rtype: PaperDocTrashedType
        """
        ...
    
    def get_paper_doc_unresolve_comment(self): # -> None:
        """
        (paper) Unresolved Paper doc comment

        Only call this if :meth:`is_paper_doc_unresolve_comment` is true.

        :rtype: PaperDocUnresolveCommentType
        """
        ...
    
    def get_paper_doc_untrashed(self): # -> None:
        """
        (paper) Restored Paper doc

        Only call this if :meth:`is_paper_doc_untrashed` is true.

        :rtype: PaperDocUntrashedType
        """
        ...
    
    def get_paper_doc_view(self): # -> None:
        """
        (paper) Viewed Paper doc

        Only call this if :meth:`is_paper_doc_view` is true.

        :rtype: PaperDocViewType
        """
        ...
    
    def get_paper_external_view_allow(self): # -> None:
        """
        (paper) Changed Paper external sharing setting to anyone (deprecated, no
        longer logged)

        Only call this if :meth:`is_paper_external_view_allow` is true.

        :rtype: PaperExternalViewAllowType
        """
        ...
    
    def get_paper_external_view_default_team(self): # -> None:
        """
        (paper) Changed Paper external sharing setting to default team
        (deprecated, no longer logged)

        Only call this if :meth:`is_paper_external_view_default_team` is true.

        :rtype: PaperExternalViewDefaultTeamType
        """
        ...
    
    def get_paper_external_view_forbid(self): # -> None:
        """
        (paper) Changed Paper external sharing setting to team-only (deprecated,
        no longer logged)

        Only call this if :meth:`is_paper_external_view_forbid` is true.

        :rtype: PaperExternalViewForbidType
        """
        ...
    
    def get_paper_folder_change_subscription(self): # -> None:
        """
        (paper) Followed/unfollowed Paper folder

        Only call this if :meth:`is_paper_folder_change_subscription` is true.

        :rtype: PaperFolderChangeSubscriptionType
        """
        ...
    
    def get_paper_folder_deleted(self): # -> None:
        """
        (paper) Archived Paper folder (deprecated, no longer logged)

        Only call this if :meth:`is_paper_folder_deleted` is true.

        :rtype: PaperFolderDeletedType
        """
        ...
    
    def get_paper_folder_followed(self): # -> None:
        """
        (paper) Followed Paper folder (deprecated, replaced by
        'Followed/unfollowed Paper folder')

        Only call this if :meth:`is_paper_folder_followed` is true.

        :rtype: PaperFolderFollowedType
        """
        ...
    
    def get_paper_folder_team_invite(self): # -> None:
        """
        (paper) Shared Paper folder with users and/or groups (deprecated, no
        longer logged)

        Only call this if :meth:`is_paper_folder_team_invite` is true.

        :rtype: PaperFolderTeamInviteType
        """
        ...
    
    def get_paper_published_link_change_permission(self): # -> None:
        """
        (paper) Changed permissions for published doc

        Only call this if :meth:`is_paper_published_link_change_permission` is true.

        :rtype: PaperPublishedLinkChangePermissionType
        """
        ...
    
    def get_paper_published_link_create(self): # -> None:
        """
        (paper) Published doc

        Only call this if :meth:`is_paper_published_link_create` is true.

        :rtype: PaperPublishedLinkCreateType
        """
        ...
    
    def get_paper_published_link_disabled(self): # -> None:
        """
        (paper) Unpublished doc

        Only call this if :meth:`is_paper_published_link_disabled` is true.

        :rtype: PaperPublishedLinkDisabledType
        """
        ...
    
    def get_paper_published_link_view(self): # -> None:
        """
        (paper) Viewed published doc

        Only call this if :meth:`is_paper_published_link_view` is true.

        :rtype: PaperPublishedLinkViewType
        """
        ...
    
    def get_password_change(self): # -> None:
        """
        (passwords) Changed password

        Only call this if :meth:`is_password_change` is true.

        :rtype: PasswordChangeType
        """
        ...
    
    def get_password_reset(self): # -> None:
        """
        (passwords) Reset password

        Only call this if :meth:`is_password_reset` is true.

        :rtype: PasswordResetType
        """
        ...
    
    def get_password_reset_all(self): # -> None:
        """
        (passwords) Reset all team member passwords

        Only call this if :meth:`is_password_reset_all` is true.

        :rtype: PasswordResetAllType
        """
        ...
    
    def get_classification_create_report(self): # -> None:
        """
        (reports) Created Classification report

        Only call this if :meth:`is_classification_create_report` is true.

        :rtype: ClassificationCreateReportType
        """
        ...
    
    def get_classification_create_report_fail(self): # -> None:
        """
        (reports) Couldn't create Classification report

        Only call this if :meth:`is_classification_create_report_fail` is true.

        :rtype: ClassificationCreateReportFailType
        """
        ...
    
    def get_emm_create_exceptions_report(self): # -> None:
        """
        (reports) Created EMM-excluded users report

        Only call this if :meth:`is_emm_create_exceptions_report` is true.

        :rtype: EmmCreateExceptionsReportType
        """
        ...
    
    def get_emm_create_usage_report(self): # -> None:
        """
        (reports) Created EMM mobile app usage report

        Only call this if :meth:`is_emm_create_usage_report` is true.

        :rtype: EmmCreateUsageReportType
        """
        ...
    
    def get_export_members_report(self): # -> None:
        """
        (reports) Created member data report

        Only call this if :meth:`is_export_members_report` is true.

        :rtype: ExportMembersReportType
        """
        ...
    
    def get_export_members_report_fail(self): # -> None:
        """
        (reports) Failed to create members data report

        Only call this if :meth:`is_export_members_report_fail` is true.

        :rtype: ExportMembersReportFailType
        """
        ...
    
    def get_external_sharing_create_report(self): # -> None:
        """
        (reports) Created External sharing report

        Only call this if :meth:`is_external_sharing_create_report` is true.

        :rtype: ExternalSharingCreateReportType
        """
        ...
    
    def get_external_sharing_report_failed(self): # -> None:
        """
        (reports) Couldn't create External sharing report

        Only call this if :meth:`is_external_sharing_report_failed` is true.

        :rtype: ExternalSharingReportFailedType
        """
        ...
    
    def get_no_expiration_link_gen_create_report(self): # -> None:
        """
        (reports) Report created: Links created with no expiration

        Only call this if :meth:`is_no_expiration_link_gen_create_report` is true.

        :rtype: NoExpirationLinkGenCreateReportType
        """
        ...
    
    def get_no_expiration_link_gen_report_failed(self): # -> None:
        """
        (reports) Couldn't create report: Links created with no expiration

        Only call this if :meth:`is_no_expiration_link_gen_report_failed` is true.

        :rtype: NoExpirationLinkGenReportFailedType
        """
        ...
    
    def get_no_password_link_gen_create_report(self): # -> None:
        """
        (reports) Report created: Links created without passwords

        Only call this if :meth:`is_no_password_link_gen_create_report` is true.

        :rtype: NoPasswordLinkGenCreateReportType
        """
        ...
    
    def get_no_password_link_gen_report_failed(self): # -> None:
        """
        (reports) Couldn't create report: Links created without passwords

        Only call this if :meth:`is_no_password_link_gen_report_failed` is true.

        :rtype: NoPasswordLinkGenReportFailedType
        """
        ...
    
    def get_no_password_link_view_create_report(self): # -> None:
        """
        (reports) Report created: Views of links without passwords

        Only call this if :meth:`is_no_password_link_view_create_report` is true.

        :rtype: NoPasswordLinkViewCreateReportType
        """
        ...
    
    def get_no_password_link_view_report_failed(self): # -> None:
        """
        (reports) Couldn't create report: Views of links without passwords

        Only call this if :meth:`is_no_password_link_view_report_failed` is true.

        :rtype: NoPasswordLinkViewReportFailedType
        """
        ...
    
    def get_outdated_link_view_create_report(self): # -> None:
        """
        (reports) Report created: Views of old links

        Only call this if :meth:`is_outdated_link_view_create_report` is true.

        :rtype: OutdatedLinkViewCreateReportType
        """
        ...
    
    def get_outdated_link_view_report_failed(self): # -> None:
        """
        (reports) Couldn't create report: Views of old links

        Only call this if :meth:`is_outdated_link_view_report_failed` is true.

        :rtype: OutdatedLinkViewReportFailedType
        """
        ...
    
    def get_paper_admin_export_start(self): # -> None:
        """
        (reports) Exported all team Paper docs

        Only call this if :meth:`is_paper_admin_export_start` is true.

        :rtype: PaperAdminExportStartType
        """
        ...
    
    def get_ransomware_alert_create_report(self): # -> None:
        """
        (reports) Created ransomware report

        Only call this if :meth:`is_ransomware_alert_create_report` is true.

        :rtype: RansomwareAlertCreateReportType
        """
        ...
    
    def get_ransomware_alert_create_report_failed(self): # -> None:
        """
        (reports) Couldn't generate ransomware report

        Only call this if :meth:`is_ransomware_alert_create_report_failed` is true.

        :rtype: RansomwareAlertCreateReportFailedType
        """
        ...
    
    def get_smart_sync_create_admin_privilege_report(self): # -> None:
        """
        (reports) Created Smart Sync non-admin devices report

        Only call this if :meth:`is_smart_sync_create_admin_privilege_report` is true.

        :rtype: SmartSyncCreateAdminPrivilegeReportType
        """
        ...
    
    def get_team_activity_create_report(self): # -> None:
        """
        (reports) Created team activity report

        Only call this if :meth:`is_team_activity_create_report` is true.

        :rtype: TeamActivityCreateReportType
        """
        ...
    
    def get_team_activity_create_report_fail(self): # -> None:
        """
        (reports) Couldn't generate team activity report

        Only call this if :meth:`is_team_activity_create_report_fail` is true.

        :rtype: TeamActivityCreateReportFailType
        """
        ...
    
    def get_collection_share(self): # -> None:
        """
        (sharing) Shared album

        Only call this if :meth:`is_collection_share` is true.

        :rtype: CollectionShareType
        """
        ...
    
    def get_file_transfers_file_add(self): # -> None:
        """
        (sharing) Transfer files added

        Only call this if :meth:`is_file_transfers_file_add` is true.

        :rtype: FileTransfersFileAddType
        """
        ...
    
    def get_file_transfers_transfer_delete(self): # -> None:
        """
        (sharing) Deleted transfer

        Only call this if :meth:`is_file_transfers_transfer_delete` is true.

        :rtype: FileTransfersTransferDeleteType
        """
        ...
    
    def get_file_transfers_transfer_download(self): # -> None:
        """
        (sharing) Transfer downloaded

        Only call this if :meth:`is_file_transfers_transfer_download` is true.

        :rtype: FileTransfersTransferDownloadType
        """
        ...
    
    def get_file_transfers_transfer_send(self): # -> None:
        """
        (sharing) Sent transfer

        Only call this if :meth:`is_file_transfers_transfer_send` is true.

        :rtype: FileTransfersTransferSendType
        """
        ...
    
    def get_file_transfers_transfer_view(self): # -> None:
        """
        (sharing) Viewed transfer

        Only call this if :meth:`is_file_transfers_transfer_view` is true.

        :rtype: FileTransfersTransferViewType
        """
        ...
    
    def get_note_acl_invite_only(self): # -> None:
        """
        (sharing) Changed Paper doc to invite-only (deprecated, no longer
        logged)

        Only call this if :meth:`is_note_acl_invite_only` is true.

        :rtype: NoteAclInviteOnlyType
        """
        ...
    
    def get_note_acl_link(self): # -> None:
        """
        (sharing) Changed Paper doc to link-accessible (deprecated, no longer
        logged)

        Only call this if :meth:`is_note_acl_link` is true.

        :rtype: NoteAclLinkType
        """
        ...
    
    def get_note_acl_team_link(self): # -> None:
        """
        (sharing) Changed Paper doc to link-accessible for team (deprecated, no
        longer logged)

        Only call this if :meth:`is_note_acl_team_link` is true.

        :rtype: NoteAclTeamLinkType
        """
        ...
    
    def get_note_shared(self): # -> None:
        """
        (sharing) Shared Paper doc (deprecated, no longer logged)

        Only call this if :meth:`is_note_shared` is true.

        :rtype: NoteSharedType
        """
        ...
    
    def get_note_share_receive(self): # -> None:
        """
        (sharing) Shared received Paper doc (deprecated, no longer logged)

        Only call this if :meth:`is_note_share_receive` is true.

        :rtype: NoteShareReceiveType
        """
        ...
    
    def get_open_note_shared(self): # -> None:
        """
        (sharing) Opened shared Paper doc (deprecated, no longer logged)

        Only call this if :meth:`is_open_note_shared` is true.

        :rtype: OpenNoteSharedType
        """
        ...
    
    def get_replay_file_shared_link_created(self): # -> None:
        """
        (sharing) Created shared link in Replay

        Only call this if :meth:`is_replay_file_shared_link_created` is true.

        :rtype: ReplayFileSharedLinkCreatedType
        """
        ...
    
    def get_replay_file_shared_link_modified(self): # -> None:
        """
        (sharing) Modified shared link in Replay

        Only call this if :meth:`is_replay_file_shared_link_modified` is true.

        :rtype: ReplayFileSharedLinkModifiedType
        """
        ...
    
    def get_replay_project_team_add(self): # -> None:
        """
        (sharing) Added member to Replay Project

        Only call this if :meth:`is_replay_project_team_add` is true.

        :rtype: ReplayProjectTeamAddType
        """
        ...
    
    def get_replay_project_team_delete(self): # -> None:
        """
        (sharing) Removed member from Replay Project

        Only call this if :meth:`is_replay_project_team_delete` is true.

        :rtype: ReplayProjectTeamDeleteType
        """
        ...
    
    def get_sf_add_group(self): # -> None:
        """
        (sharing) Added team to shared folder (deprecated, no longer logged)

        Only call this if :meth:`is_sf_add_group` is true.

        :rtype: SfAddGroupType
        """
        ...
    
    def get_sf_allow_non_members_to_view_shared_links(self): # -> None:
        """
        (sharing) Allowed non-collaborators to view links to files in shared
        folder (deprecated, no longer logged)

        Only call this if :meth:`is_sf_allow_non_members_to_view_shared_links` is true.

        :rtype: SfAllowNonMembersToViewSharedLinksType
        """
        ...
    
    def get_sf_external_invite_warn(self): # -> None:
        """
        (sharing) Set team members to see warning before sharing folders outside
        team (deprecated, no longer logged)

        Only call this if :meth:`is_sf_external_invite_warn` is true.

        :rtype: SfExternalInviteWarnType
        """
        ...
    
    def get_sf_fb_invite(self): # -> None:
        """
        (sharing) Invited Facebook users to shared folder (deprecated, no longer
        logged)

        Only call this if :meth:`is_sf_fb_invite` is true.

        :rtype: SfFbInviteType
        """
        ...
    
    def get_sf_fb_invite_change_role(self): # -> None:
        """
        (sharing) Changed Facebook user's role in shared folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_sf_fb_invite_change_role` is true.

        :rtype: SfFbInviteChangeRoleType
        """
        ...
    
    def get_sf_fb_uninvite(self): # -> None:
        """
        (sharing) Uninvited Facebook user from shared folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_sf_fb_uninvite` is true.

        :rtype: SfFbUninviteType
        """
        ...
    
    def get_sf_invite_group(self): # -> None:
        """
        (sharing) Invited group to shared folder (deprecated, no longer logged)

        Only call this if :meth:`is_sf_invite_group` is true.

        :rtype: SfInviteGroupType
        """
        ...
    
    def get_sf_team_grant_access(self): # -> None:
        """
        (sharing) Granted access to shared folder (deprecated, no longer logged)

        Only call this if :meth:`is_sf_team_grant_access` is true.

        :rtype: SfTeamGrantAccessType
        """
        ...
    
    def get_sf_team_invite(self): # -> None:
        """
        (sharing) Invited team members to shared folder (deprecated, replaced by
        'Invited user to Dropbox and added them to shared file/folder')

        Only call this if :meth:`is_sf_team_invite` is true.

        :rtype: SfTeamInviteType
        """
        ...
    
    def get_sf_team_invite_change_role(self): # -> None:
        """
        (sharing) Changed team member's role in shared folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_sf_team_invite_change_role` is true.

        :rtype: SfTeamInviteChangeRoleType
        """
        ...
    
    def get_sf_team_join(self): # -> None:
        """
        (sharing) Joined team member's shared folder (deprecated, no longer
        logged)

        Only call this if :meth:`is_sf_team_join` is true.

        :rtype: SfTeamJoinType
        """
        ...
    
    def get_sf_team_join_from_oob_link(self): # -> None:
        """
        (sharing) Joined team member's shared folder from link (deprecated, no
        longer logged)

        Only call this if :meth:`is_sf_team_join_from_oob_link` is true.

        :rtype: SfTeamJoinFromOobLinkType
        """
        ...
    
    def get_sf_team_uninvite(self): # -> None:
        """
        (sharing) Unshared folder with team member (deprecated, replaced by
        'Removed invitee from shared file/folder before invite was accepted')

        Only call this if :meth:`is_sf_team_uninvite` is true.

        :rtype: SfTeamUninviteType
        """
        ...
    
    def get_shared_content_add_invitees(self): # -> None:
        """
        (sharing) Invited user to Dropbox and added them to shared file/folder

        Only call this if :meth:`is_shared_content_add_invitees` is true.

        :rtype: SharedContentAddInviteesType
        """
        ...
    
    def get_shared_content_add_link_expiry(self): # -> None:
        """
        (sharing) Added expiration date to link for shared file/folder
        (deprecated, no longer logged)

        Only call this if :meth:`is_shared_content_add_link_expiry` is true.

        :rtype: SharedContentAddLinkExpiryType
        """
        ...
    
    def get_shared_content_add_link_password(self): # -> None:
        """
        (sharing) Added password to link for shared file/folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_shared_content_add_link_password` is true.

        :rtype: SharedContentAddLinkPasswordType
        """
        ...
    
    def get_shared_content_add_member(self): # -> None:
        """
        (sharing) Added users and/or groups to shared file/folder

        Only call this if :meth:`is_shared_content_add_member` is true.

        :rtype: SharedContentAddMemberType
        """
        ...
    
    def get_shared_content_change_downloads_policy(self): # -> None:
        """
        (sharing) Changed whether members can download shared file/folder
        (deprecated, no longer logged)

        Only call this if :meth:`is_shared_content_change_downloads_policy` is true.

        :rtype: SharedContentChangeDownloadsPolicyType
        """
        ...
    
    def get_shared_content_change_invitee_role(self): # -> None:
        """
        (sharing) Changed access type of invitee to shared file/folder before
        invite was accepted

        Only call this if :meth:`is_shared_content_change_invitee_role` is true.

        :rtype: SharedContentChangeInviteeRoleType
        """
        ...
    
    def get_shared_content_change_link_audience(self): # -> None:
        """
        (sharing) Changed link audience of shared file/folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_shared_content_change_link_audience` is true.

        :rtype: SharedContentChangeLinkAudienceType
        """
        ...
    
    def get_shared_content_change_link_expiry(self): # -> None:
        """
        (sharing) Changed link expiration of shared file/folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_shared_content_change_link_expiry` is true.

        :rtype: SharedContentChangeLinkExpiryType
        """
        ...
    
    def get_shared_content_change_link_password(self): # -> None:
        """
        (sharing) Changed link password of shared file/folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_shared_content_change_link_password` is true.

        :rtype: SharedContentChangeLinkPasswordType
        """
        ...
    
    def get_shared_content_change_member_role(self): # -> None:
        """
        (sharing) Changed access type of shared file/folder member

        Only call this if :meth:`is_shared_content_change_member_role` is true.

        :rtype: SharedContentChangeMemberRoleType
        """
        ...
    
    def get_shared_content_change_viewer_info_policy(self): # -> None:
        """
        (sharing) Changed whether members can see who viewed shared file/folder

        Only call this if :meth:`is_shared_content_change_viewer_info_policy` is true.

        :rtype: SharedContentChangeViewerInfoPolicyType
        """
        ...
    
    def get_shared_content_claim_invitation(self): # -> None:
        """
        (sharing) Acquired membership of shared file/folder by accepting invite

        Only call this if :meth:`is_shared_content_claim_invitation` is true.

        :rtype: SharedContentClaimInvitationType
        """
        ...
    
    def get_shared_content_copy(self): # -> None:
        """
        (sharing) Copied shared file/folder to own Dropbox

        Only call this if :meth:`is_shared_content_copy` is true.

        :rtype: SharedContentCopyType
        """
        ...
    
    def get_shared_content_download(self): # -> None:
        """
        (sharing) Downloaded shared file/folder

        Only call this if :meth:`is_shared_content_download` is true.

        :rtype: SharedContentDownloadType
        """
        ...
    
    def get_shared_content_relinquish_membership(self): # -> None:
        """
        (sharing) Left shared file/folder

        Only call this if :meth:`is_shared_content_relinquish_membership` is true.

        :rtype: SharedContentRelinquishMembershipType
        """
        ...
    
    def get_shared_content_remove_invitees(self): # -> None:
        """
        (sharing) Removed invitee from shared file/folder before invite was
        accepted

        Only call this if :meth:`is_shared_content_remove_invitees` is true.

        :rtype: SharedContentRemoveInviteesType
        """
        ...
    
    def get_shared_content_remove_link_expiry(self): # -> None:
        """
        (sharing) Removed link expiration date of shared file/folder
        (deprecated, no longer logged)

        Only call this if :meth:`is_shared_content_remove_link_expiry` is true.

        :rtype: SharedContentRemoveLinkExpiryType
        """
        ...
    
    def get_shared_content_remove_link_password(self): # -> None:
        """
        (sharing) Removed link password of shared file/folder (deprecated, no
        longer logged)

        Only call this if :meth:`is_shared_content_remove_link_password` is true.

        :rtype: SharedContentRemoveLinkPasswordType
        """
        ...
    
    def get_shared_content_remove_member(self): # -> None:
        """
        (sharing) Removed user/group from shared file/folder

        Only call this if :meth:`is_shared_content_remove_member` is true.

        :rtype: SharedContentRemoveMemberType
        """
        ...
    
    def get_shared_content_request_access(self): # -> None:
        """
        (sharing) Requested access to shared file/folder

        Only call this if :meth:`is_shared_content_request_access` is true.

        :rtype: SharedContentRequestAccessType
        """
        ...
    
    def get_shared_content_restore_invitees(self): # -> None:
        """
        (sharing) Restored shared file/folder invitees

        Only call this if :meth:`is_shared_content_restore_invitees` is true.

        :rtype: SharedContentRestoreInviteesType
        """
        ...
    
    def get_shared_content_restore_member(self): # -> None:
        """
        (sharing) Restored users and/or groups to membership of shared
        file/folder

        Only call this if :meth:`is_shared_content_restore_member` is true.

        :rtype: SharedContentRestoreMemberType
        """
        ...
    
    def get_shared_content_unshare(self): # -> None:
        """
        (sharing) Unshared file/folder by clearing membership

        Only call this if :meth:`is_shared_content_unshare` is true.

        :rtype: SharedContentUnshareType
        """
        ...
    
    def get_shared_content_view(self): # -> None:
        """
        (sharing) Previewed shared file/folder

        Only call this if :meth:`is_shared_content_view` is true.

        :rtype: SharedContentViewType
        """
        ...
    
    def get_shared_folder_change_link_policy(self): # -> None:
        """
        (sharing) Changed who can access shared folder via link

        Only call this if :meth:`is_shared_folder_change_link_policy` is true.

        :rtype: SharedFolderChangeLinkPolicyType
        """
        ...
    
    def get_shared_folder_change_members_inheritance_policy(self): # -> None:
        """
        (sharing) Changed whether shared folder inherits members from parent
        folder

        Only call this if :meth:`is_shared_folder_change_members_inheritance_policy` is true.

        :rtype: SharedFolderChangeMembersInheritancePolicyType
        """
        ...
    
    def get_shared_folder_change_members_management_policy(self): # -> None:
        """
        (sharing) Changed who can add/remove members of shared folder

        Only call this if :meth:`is_shared_folder_change_members_management_policy` is true.

        :rtype: SharedFolderChangeMembersManagementPolicyType
        """
        ...
    
    def get_shared_folder_change_members_policy(self): # -> None:
        """
        (sharing) Changed who can become member of shared folder

        Only call this if :meth:`is_shared_folder_change_members_policy` is true.

        :rtype: SharedFolderChangeMembersPolicyType
        """
        ...
    
    def get_shared_folder_create(self): # -> None:
        """
        (sharing) Created shared folder

        Only call this if :meth:`is_shared_folder_create` is true.

        :rtype: SharedFolderCreateType
        """
        ...
    
    def get_shared_folder_decline_invitation(self): # -> None:
        """
        (sharing) Declined team member's invite to shared folder

        Only call this if :meth:`is_shared_folder_decline_invitation` is true.

        :rtype: SharedFolderDeclineInvitationType
        """
        ...
    
    def get_shared_folder_mount(self): # -> None:
        """
        (sharing) Added shared folder to own Dropbox

        Only call this if :meth:`is_shared_folder_mount` is true.

        :rtype: SharedFolderMountType
        """
        ...
    
    def get_shared_folder_nest(self): # -> None:
        """
        (sharing) Changed parent of shared folder

        Only call this if :meth:`is_shared_folder_nest` is true.

        :rtype: SharedFolderNestType
        """
        ...
    
    def get_shared_folder_transfer_ownership(self): # -> None:
        """
        (sharing) Transferred ownership of shared folder to another member

        Only call this if :meth:`is_shared_folder_transfer_ownership` is true.

        :rtype: SharedFolderTransferOwnershipType
        """
        ...
    
    def get_shared_folder_unmount(self): # -> None:
        """
        (sharing) Deleted shared folder from Dropbox

        Only call this if :meth:`is_shared_folder_unmount` is true.

        :rtype: SharedFolderUnmountType
        """
        ...
    
    def get_shared_link_add_expiry(self): # -> None:
        """
        (sharing) Added shared link expiration date

        Only call this if :meth:`is_shared_link_add_expiry` is true.

        :rtype: SharedLinkAddExpiryType
        """
        ...
    
    def get_shared_link_change_expiry(self): # -> None:
        """
        (sharing) Changed shared link expiration date

        Only call this if :meth:`is_shared_link_change_expiry` is true.

        :rtype: SharedLinkChangeExpiryType
        """
        ...
    
    def get_shared_link_change_visibility(self): # -> None:
        """
        (sharing) Changed visibility of shared link

        Only call this if :meth:`is_shared_link_change_visibility` is true.

        :rtype: SharedLinkChangeVisibilityType
        """
        ...
    
    def get_shared_link_copy(self): # -> None:
        """
        (sharing) Added file/folder to Dropbox from shared link

        Only call this if :meth:`is_shared_link_copy` is true.

        :rtype: SharedLinkCopyType
        """
        ...
    
    def get_shared_link_create(self): # -> None:
        """
        (sharing) Created shared link

        Only call this if :meth:`is_shared_link_create` is true.

        :rtype: SharedLinkCreateType
        """
        ...
    
    def get_shared_link_disable(self): # -> None:
        """
        (sharing) Removed shared link

        Only call this if :meth:`is_shared_link_disable` is true.

        :rtype: SharedLinkDisableType
        """
        ...
    
    def get_shared_link_download(self): # -> None:
        """
        (sharing) Downloaded file/folder from shared link

        Only call this if :meth:`is_shared_link_download` is true.

        :rtype: SharedLinkDownloadType
        """
        ...
    
    def get_shared_link_remove_expiry(self): # -> None:
        """
        (sharing) Removed shared link expiration date

        Only call this if :meth:`is_shared_link_remove_expiry` is true.

        :rtype: SharedLinkRemoveExpiryType
        """
        ...
    
    def get_shared_link_settings_add_expiration(self): # -> None:
        """
        (sharing) Added an expiration date to the shared link

        Only call this if :meth:`is_shared_link_settings_add_expiration` is true.

        :rtype: SharedLinkSettingsAddExpirationType
        """
        ...
    
    def get_shared_link_settings_add_password(self): # -> None:
        """
        (sharing) Added a password to the shared link

        Only call this if :meth:`is_shared_link_settings_add_password` is true.

        :rtype: SharedLinkSettingsAddPasswordType
        """
        ...
    
    def get_shared_link_settings_allow_download_disabled(self): # -> None:
        """
        (sharing) Disabled downloads

        Only call this if :meth:`is_shared_link_settings_allow_download_disabled` is true.

        :rtype: SharedLinkSettingsAllowDownloadDisabledType
        """
        ...
    
    def get_shared_link_settings_allow_download_enabled(self): # -> None:
        """
        (sharing) Enabled downloads

        Only call this if :meth:`is_shared_link_settings_allow_download_enabled` is true.

        :rtype: SharedLinkSettingsAllowDownloadEnabledType
        """
        ...
    
    def get_shared_link_settings_change_audience(self): # -> None:
        """
        (sharing) Changed the audience of the shared link

        Only call this if :meth:`is_shared_link_settings_change_audience` is true.

        :rtype: SharedLinkSettingsChangeAudienceType
        """
        ...
    
    def get_shared_link_settings_change_expiration(self): # -> None:
        """
        (sharing) Changed the expiration date of the shared link

        Only call this if :meth:`is_shared_link_settings_change_expiration` is true.

        :rtype: SharedLinkSettingsChangeExpirationType
        """
        ...
    
    def get_shared_link_settings_change_password(self): # -> None:
        """
        (sharing) Changed the password of the shared link

        Only call this if :meth:`is_shared_link_settings_change_password` is true.

        :rtype: SharedLinkSettingsChangePasswordType
        """
        ...
    
    def get_shared_link_settings_remove_expiration(self): # -> None:
        """
        (sharing) Removed the expiration date from the shared link

        Only call this if :meth:`is_shared_link_settings_remove_expiration` is true.

        :rtype: SharedLinkSettingsRemoveExpirationType
        """
        ...
    
    def get_shared_link_settings_remove_password(self): # -> None:
        """
        (sharing) Removed the password from the shared link

        Only call this if :meth:`is_shared_link_settings_remove_password` is true.

        :rtype: SharedLinkSettingsRemovePasswordType
        """
        ...
    
    def get_shared_link_share(self): # -> None:
        """
        (sharing) Added members as audience of shared link

        Only call this if :meth:`is_shared_link_share` is true.

        :rtype: SharedLinkShareType
        """
        ...
    
    def get_shared_link_view(self): # -> None:
        """
        (sharing) Opened shared link

        Only call this if :meth:`is_shared_link_view` is true.

        :rtype: SharedLinkViewType
        """
        ...
    
    def get_shared_note_opened(self): # -> None:
        """
        (sharing) Opened shared Paper doc (deprecated, no longer logged)

        Only call this if :meth:`is_shared_note_opened` is true.

        :rtype: SharedNoteOpenedType
        """
        ...
    
    def get_shmodel_disable_downloads(self): # -> None:
        """
        (sharing) Disabled downloads for link (deprecated, no longer logged)

        Only call this if :meth:`is_shmodel_disable_downloads` is true.

        :rtype: ShmodelDisableDownloadsType
        """
        ...
    
    def get_shmodel_enable_downloads(self): # -> None:
        """
        (sharing) Enabled downloads for link (deprecated, no longer logged)

        Only call this if :meth:`is_shmodel_enable_downloads` is true.

        :rtype: ShmodelEnableDownloadsType
        """
        ...
    
    def get_shmodel_group_share(self): # -> None:
        """
        (sharing) Shared link with group (deprecated, no longer logged)

        Only call this if :meth:`is_shmodel_group_share` is true.

        :rtype: ShmodelGroupShareType
        """
        ...
    
    def get_showcase_access_granted(self): # -> None:
        """
        (showcase) Granted access to showcase

        Only call this if :meth:`is_showcase_access_granted` is true.

        :rtype: ShowcaseAccessGrantedType
        """
        ...
    
    def get_showcase_add_member(self): # -> None:
        """
        (showcase) Added member to showcase

        Only call this if :meth:`is_showcase_add_member` is true.

        :rtype: ShowcaseAddMemberType
        """
        ...
    
    def get_showcase_archived(self): # -> None:
        """
        (showcase) Archived showcase

        Only call this if :meth:`is_showcase_archived` is true.

        :rtype: ShowcaseArchivedType
        """
        ...
    
    def get_showcase_created(self): # -> None:
        """
        (showcase) Created showcase

        Only call this if :meth:`is_showcase_created` is true.

        :rtype: ShowcaseCreatedType
        """
        ...
    
    def get_showcase_delete_comment(self): # -> None:
        """
        (showcase) Deleted showcase comment

        Only call this if :meth:`is_showcase_delete_comment` is true.

        :rtype: ShowcaseDeleteCommentType
        """
        ...
    
    def get_showcase_edited(self): # -> None:
        """
        (showcase) Edited showcase

        Only call this if :meth:`is_showcase_edited` is true.

        :rtype: ShowcaseEditedType
        """
        ...
    
    def get_showcase_edit_comment(self): # -> None:
        """
        (showcase) Edited showcase comment

        Only call this if :meth:`is_showcase_edit_comment` is true.

        :rtype: ShowcaseEditCommentType
        """
        ...
    
    def get_showcase_file_added(self): # -> None:
        """
        (showcase) Added file to showcase

        Only call this if :meth:`is_showcase_file_added` is true.

        :rtype: ShowcaseFileAddedType
        """
        ...
    
    def get_showcase_file_download(self): # -> None:
        """
        (showcase) Downloaded file from showcase

        Only call this if :meth:`is_showcase_file_download` is true.

        :rtype: ShowcaseFileDownloadType
        """
        ...
    
    def get_showcase_file_removed(self): # -> None:
        """
        (showcase) Removed file from showcase

        Only call this if :meth:`is_showcase_file_removed` is true.

        :rtype: ShowcaseFileRemovedType
        """
        ...
    
    def get_showcase_file_view(self): # -> None:
        """
        (showcase) Viewed file in showcase

        Only call this if :meth:`is_showcase_file_view` is true.

        :rtype: ShowcaseFileViewType
        """
        ...
    
    def get_showcase_permanently_deleted(self): # -> None:
        """
        (showcase) Permanently deleted showcase

        Only call this if :meth:`is_showcase_permanently_deleted` is true.

        :rtype: ShowcasePermanentlyDeletedType
        """
        ...
    
    def get_showcase_post_comment(self): # -> None:
        """
        (showcase) Added showcase comment

        Only call this if :meth:`is_showcase_post_comment` is true.

        :rtype: ShowcasePostCommentType
        """
        ...
    
    def get_showcase_remove_member(self): # -> None:
        """
        (showcase) Removed member from showcase

        Only call this if :meth:`is_showcase_remove_member` is true.

        :rtype: ShowcaseRemoveMemberType
        """
        ...
    
    def get_showcase_renamed(self): # -> None:
        """
        (showcase) Renamed showcase

        Only call this if :meth:`is_showcase_renamed` is true.

        :rtype: ShowcaseRenamedType
        """
        ...
    
    def get_showcase_request_access(self): # -> None:
        """
        (showcase) Requested access to showcase

        Only call this if :meth:`is_showcase_request_access` is true.

        :rtype: ShowcaseRequestAccessType
        """
        ...
    
    def get_showcase_resolve_comment(self): # -> None:
        """
        (showcase) Resolved showcase comment

        Only call this if :meth:`is_showcase_resolve_comment` is true.

        :rtype: ShowcaseResolveCommentType
        """
        ...
    
    def get_showcase_restored(self): # -> None:
        """
        (showcase) Unarchived showcase

        Only call this if :meth:`is_showcase_restored` is true.

        :rtype: ShowcaseRestoredType
        """
        ...
    
    def get_showcase_trashed(self): # -> None:
        """
        (showcase) Deleted showcase

        Only call this if :meth:`is_showcase_trashed` is true.

        :rtype: ShowcaseTrashedType
        """
        ...
    
    def get_showcase_trashed_deprecated(self): # -> None:
        """
        (showcase) Deleted showcase (old version) (deprecated, replaced by
        'Deleted showcase')

        Only call this if :meth:`is_showcase_trashed_deprecated` is true.

        :rtype: ShowcaseTrashedDeprecatedType
        """
        ...
    
    def get_showcase_unresolve_comment(self): # -> None:
        """
        (showcase) Unresolved showcase comment

        Only call this if :meth:`is_showcase_unresolve_comment` is true.

        :rtype: ShowcaseUnresolveCommentType
        """
        ...
    
    def get_showcase_untrashed(self): # -> None:
        """
        (showcase) Restored showcase

        Only call this if :meth:`is_showcase_untrashed` is true.

        :rtype: ShowcaseUntrashedType
        """
        ...
    
    def get_showcase_untrashed_deprecated(self): # -> None:
        """
        (showcase) Restored showcase (old version) (deprecated, replaced by
        'Restored showcase')

        Only call this if :meth:`is_showcase_untrashed_deprecated` is true.

        :rtype: ShowcaseUntrashedDeprecatedType
        """
        ...
    
    def get_showcase_view(self): # -> None:
        """
        (showcase) Viewed showcase

        Only call this if :meth:`is_showcase_view` is true.

        :rtype: ShowcaseViewType
        """
        ...
    
    def get_sso_add_cert(self): # -> None:
        """
        (sso) Added X.509 certificate for SSO

        Only call this if :meth:`is_sso_add_cert` is true.

        :rtype: SsoAddCertType
        """
        ...
    
    def get_sso_add_login_url(self): # -> None:
        """
        (sso) Added sign-in URL for SSO

        Only call this if :meth:`is_sso_add_login_url` is true.

        :rtype: SsoAddLoginUrlType
        """
        ...
    
    def get_sso_add_logout_url(self): # -> None:
        """
        (sso) Added sign-out URL for SSO

        Only call this if :meth:`is_sso_add_logout_url` is true.

        :rtype: SsoAddLogoutUrlType
        """
        ...
    
    def get_sso_change_cert(self): # -> None:
        """
        (sso) Changed X.509 certificate for SSO

        Only call this if :meth:`is_sso_change_cert` is true.

        :rtype: SsoChangeCertType
        """
        ...
    
    def get_sso_change_login_url(self): # -> None:
        """
        (sso) Changed sign-in URL for SSO

        Only call this if :meth:`is_sso_change_login_url` is true.

        :rtype: SsoChangeLoginUrlType
        """
        ...
    
    def get_sso_change_logout_url(self): # -> None:
        """
        (sso) Changed sign-out URL for SSO

        Only call this if :meth:`is_sso_change_logout_url` is true.

        :rtype: SsoChangeLogoutUrlType
        """
        ...
    
    def get_sso_change_saml_identity_mode(self): # -> None:
        """
        (sso) Changed SAML identity mode for SSO

        Only call this if :meth:`is_sso_change_saml_identity_mode` is true.

        :rtype: SsoChangeSamlIdentityModeType
        """
        ...
    
    def get_sso_remove_cert(self): # -> None:
        """
        (sso) Removed X.509 certificate for SSO

        Only call this if :meth:`is_sso_remove_cert` is true.

        :rtype: SsoRemoveCertType
        """
        ...
    
    def get_sso_remove_login_url(self): # -> None:
        """
        (sso) Removed sign-in URL for SSO

        Only call this if :meth:`is_sso_remove_login_url` is true.

        :rtype: SsoRemoveLoginUrlType
        """
        ...
    
    def get_sso_remove_logout_url(self): # -> None:
        """
        (sso) Removed sign-out URL for SSO

        Only call this if :meth:`is_sso_remove_logout_url` is true.

        :rtype: SsoRemoveLogoutUrlType
        """
        ...
    
    def get_team_folder_change_status(self): # -> None:
        """
        (team_folders) Changed archival status of team folder

        Only call this if :meth:`is_team_folder_change_status` is true.

        :rtype: TeamFolderChangeStatusType
        """
        ...
    
    def get_team_folder_create(self): # -> None:
        """
        (team_folders) Created team folder in active status

        Only call this if :meth:`is_team_folder_create` is true.

        :rtype: TeamFolderCreateType
        """
        ...
    
    def get_team_folder_downgrade(self): # -> None:
        """
        (team_folders) Downgraded team folder to regular shared folder

        Only call this if :meth:`is_team_folder_downgrade` is true.

        :rtype: TeamFolderDowngradeType
        """
        ...
    
    def get_team_folder_permanently_delete(self): # -> None:
        """
        (team_folders) Permanently deleted archived team folder

        Only call this if :meth:`is_team_folder_permanently_delete` is true.

        :rtype: TeamFolderPermanentlyDeleteType
        """
        ...
    
    def get_team_folder_rename(self): # -> None:
        """
        (team_folders) Renamed active/archived team folder

        Only call this if :meth:`is_team_folder_rename` is true.

        :rtype: TeamFolderRenameType
        """
        ...
    
    def get_team_selective_sync_settings_changed(self): # -> None:
        """
        (team_folders) Changed sync default

        Only call this if :meth:`is_team_selective_sync_settings_changed` is true.

        :rtype: TeamSelectiveSyncSettingsChangedType
        """
        ...
    
    def get_account_capture_change_policy(self): # -> None:
        """
        (team_policies) Changed account capture setting on team domain

        Only call this if :meth:`is_account_capture_change_policy` is true.

        :rtype: AccountCaptureChangePolicyType
        """
        ...
    
    def get_admin_email_reminders_changed(self): # -> None:
        """
        (team_policies) Changed admin reminder settings for requests to join the
        team

        Only call this if :meth:`is_admin_email_reminders_changed` is true.

        :rtype: AdminEmailRemindersChangedType
        """
        ...
    
    def get_allow_download_disabled(self): # -> None:
        """
        (team_policies) Disabled downloads (deprecated, no longer logged)

        Only call this if :meth:`is_allow_download_disabled` is true.

        :rtype: AllowDownloadDisabledType
        """
        ...
    
    def get_allow_download_enabled(self): # -> None:
        """
        (team_policies) Enabled downloads (deprecated, no longer logged)

        Only call this if :meth:`is_allow_download_enabled` is true.

        :rtype: AllowDownloadEnabledType
        """
        ...
    
    def get_app_permissions_changed(self): # -> None:
        """
        (team_policies) Changed app permissions

        Only call this if :meth:`is_app_permissions_changed` is true.

        :rtype: AppPermissionsChangedType
        """
        ...
    
    def get_camera_uploads_policy_changed(self): # -> None:
        """
        (team_policies) Changed camera uploads setting for team

        Only call this if :meth:`is_camera_uploads_policy_changed` is true.

        :rtype: CameraUploadsPolicyChangedType
        """
        ...
    
    def get_capture_transcript_policy_changed(self): # -> None:
        """
        (team_policies) Changed Capture transcription policy for team

        Only call this if :meth:`is_capture_transcript_policy_changed` is true.

        :rtype: CaptureTranscriptPolicyChangedType
        """
        ...
    
    def get_classification_change_policy(self): # -> None:
        """
        (team_policies) Changed classification policy for team

        Only call this if :meth:`is_classification_change_policy` is true.

        :rtype: ClassificationChangePolicyType
        """
        ...
    
    def get_computer_backup_policy_changed(self): # -> None:
        """
        (team_policies) Changed computer backup policy for team

        Only call this if :meth:`is_computer_backup_policy_changed` is true.

        :rtype: ComputerBackupPolicyChangedType
        """
        ...
    
    def get_content_administration_policy_changed(self): # -> None:
        """
        (team_policies) Changed content management setting

        Only call this if :meth:`is_content_administration_policy_changed` is true.

        :rtype: ContentAdministrationPolicyChangedType
        """
        ...
    
    def get_data_placement_restriction_change_policy(self): # -> None:
        """
        (team_policies) Set restrictions on data center locations where team
        data resides

        Only call this if :meth:`is_data_placement_restriction_change_policy` is true.

        :rtype: DataPlacementRestrictionChangePolicyType
        """
        ...
    
    def get_data_placement_restriction_satisfy_policy(self): # -> None:
        """
        (team_policies) Completed restrictions on data center locations where
        team data resides

        Only call this if :meth:`is_data_placement_restriction_satisfy_policy` is true.

        :rtype: DataPlacementRestrictionSatisfyPolicyType
        """
        ...
    
    def get_device_approvals_add_exception(self): # -> None:
        """
        (team_policies) Added members to device approvals exception list

        Only call this if :meth:`is_device_approvals_add_exception` is true.

        :rtype: DeviceApprovalsAddExceptionType
        """
        ...
    
    def get_device_approvals_change_desktop_policy(self): # -> None:
        """
        (team_policies) Set/removed limit on number of computers member can link
        to team Dropbox account

        Only call this if :meth:`is_device_approvals_change_desktop_policy` is true.

        :rtype: DeviceApprovalsChangeDesktopPolicyType
        """
        ...
    
    def get_device_approvals_change_mobile_policy(self): # -> None:
        """
        (team_policies) Set/removed limit on number of mobile devices member can
        link to team Dropbox account

        Only call this if :meth:`is_device_approvals_change_mobile_policy` is true.

        :rtype: DeviceApprovalsChangeMobilePolicyType
        """
        ...
    
    def get_device_approvals_change_overage_action(self): # -> None:
        """
        (team_policies) Changed device approvals setting when member is over
        limit

        Only call this if :meth:`is_device_approvals_change_overage_action` is true.

        :rtype: DeviceApprovalsChangeOverageActionType
        """
        ...
    
    def get_device_approvals_change_unlink_action(self): # -> None:
        """
        (team_policies) Changed device approvals setting when member unlinks
        approved device

        Only call this if :meth:`is_device_approvals_change_unlink_action` is true.

        :rtype: DeviceApprovalsChangeUnlinkActionType
        """
        ...
    
    def get_device_approvals_remove_exception(self): # -> None:
        """
        (team_policies) Removed members from device approvals exception list

        Only call this if :meth:`is_device_approvals_remove_exception` is true.

        :rtype: DeviceApprovalsRemoveExceptionType
        """
        ...
    
    def get_directory_restrictions_add_members(self): # -> None:
        """
        (team_policies) Added members to directory restrictions list

        Only call this if :meth:`is_directory_restrictions_add_members` is true.

        :rtype: DirectoryRestrictionsAddMembersType
        """
        ...
    
    def get_directory_restrictions_remove_members(self): # -> None:
        """
        (team_policies) Removed members from directory restrictions list

        Only call this if :meth:`is_directory_restrictions_remove_members` is true.

        :rtype: DirectoryRestrictionsRemoveMembersType
        """
        ...
    
    def get_dropbox_passwords_policy_changed(self): # -> None:
        """
        (team_policies) Changed Dropbox Passwords policy for team

        Only call this if :meth:`is_dropbox_passwords_policy_changed` is true.

        :rtype: DropboxPasswordsPolicyChangedType
        """
        ...
    
    def get_email_ingest_policy_changed(self): # -> None:
        """
        (team_policies) Changed email to Dropbox policy for team

        Only call this if :meth:`is_email_ingest_policy_changed` is true.

        :rtype: EmailIngestPolicyChangedType
        """
        ...
    
    def get_emm_add_exception(self): # -> None:
        """
        (team_policies) Added members to EMM exception list

        Only call this if :meth:`is_emm_add_exception` is true.

        :rtype: EmmAddExceptionType
        """
        ...
    
    def get_emm_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled enterprise mobility management for
        members

        Only call this if :meth:`is_emm_change_policy` is true.

        :rtype: EmmChangePolicyType
        """
        ...
    
    def get_emm_remove_exception(self): # -> None:
        """
        (team_policies) Removed members from EMM exception list

        Only call this if :meth:`is_emm_remove_exception` is true.

        :rtype: EmmRemoveExceptionType
        """
        ...
    
    def get_extended_version_history_change_policy(self): # -> None:
        """
        (team_policies) Accepted/opted out of extended version history

        Only call this if :meth:`is_extended_version_history_change_policy` is true.

        :rtype: ExtendedVersionHistoryChangePolicyType
        """
        ...
    
    def get_external_drive_backup_policy_changed(self): # -> None:
        """
        (team_policies) Changed external drive backup policy for team

        Only call this if :meth:`is_external_drive_backup_policy_changed` is true.

        :rtype: ExternalDriveBackupPolicyChangedType
        """
        ...
    
    def get_file_comments_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled commenting on team files

        Only call this if :meth:`is_file_comments_change_policy` is true.

        :rtype: FileCommentsChangePolicyType
        """
        ...
    
    def get_file_locking_policy_changed(self): # -> None:
        """
        (team_policies) Changed file locking policy for team

        Only call this if :meth:`is_file_locking_policy_changed` is true.

        :rtype: FileLockingPolicyChangedType
        """
        ...
    
    def get_file_provider_migration_policy_changed(self): # -> None:
        """
        (team_policies) Changed File Provider Migration policy for team

        Only call this if :meth:`is_file_provider_migration_policy_changed` is true.

        :rtype: FileProviderMigrationPolicyChangedType
        """
        ...
    
    def get_file_requests_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled file requests

        Only call this if :meth:`is_file_requests_change_policy` is true.

        :rtype: FileRequestsChangePolicyType
        """
        ...
    
    def get_file_requests_emails_enabled(self): # -> None:
        """
        (team_policies) Enabled file request emails for everyone (deprecated, no
        longer logged)

        Only call this if :meth:`is_file_requests_emails_enabled` is true.

        :rtype: FileRequestsEmailsEnabledType
        """
        ...
    
    def get_file_requests_emails_restricted_to_team_only(self): # -> None:
        """
        (team_policies) Enabled file request emails for team (deprecated, no
        longer logged)

        Only call this if :meth:`is_file_requests_emails_restricted_to_team_only` is true.

        :rtype: FileRequestsEmailsRestrictedToTeamOnlyType
        """
        ...
    
    def get_file_transfers_policy_changed(self): # -> None:
        """
        (team_policies) Changed file transfers policy for team

        Only call this if :meth:`is_file_transfers_policy_changed` is true.

        :rtype: FileTransfersPolicyChangedType
        """
        ...
    
    def get_folder_link_restriction_policy_changed(self): # -> None:
        """
        (team_policies) Changed folder link restrictions policy for team

        Only call this if :meth:`is_folder_link_restriction_policy_changed` is true.

        :rtype: FolderLinkRestrictionPolicyChangedType
        """
        ...
    
    def get_google_sso_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled Google single sign-on for team

        Only call this if :meth:`is_google_sso_change_policy` is true.

        :rtype: GoogleSsoChangePolicyType
        """
        ...
    
    def get_group_user_management_change_policy(self): # -> None:
        """
        (team_policies) Changed who can create groups

        Only call this if :meth:`is_group_user_management_change_policy` is true.

        :rtype: GroupUserManagementChangePolicyType
        """
        ...
    
    def get_integration_policy_changed(self): # -> None:
        """
        (team_policies) Changed integration policy for team

        Only call this if :meth:`is_integration_policy_changed` is true.

        :rtype: IntegrationPolicyChangedType
        """
        ...
    
    def get_invite_acceptance_email_policy_changed(self): # -> None:
        """
        (team_policies) Changed invite accept email policy for team

        Only call this if :meth:`is_invite_acceptance_email_policy_changed` is true.

        :rtype: InviteAcceptanceEmailPolicyChangedType
        """
        ...
    
    def get_member_requests_change_policy(self): # -> None:
        """
        (team_policies) Changed whether users can find team when not invited

        Only call this if :meth:`is_member_requests_change_policy` is true.

        :rtype: MemberRequestsChangePolicyType
        """
        ...
    
    def get_member_send_invite_policy_changed(self): # -> None:
        """
        (team_policies) Changed member send invite policy for team

        Only call this if :meth:`is_member_send_invite_policy_changed` is true.

        :rtype: MemberSendInvitePolicyChangedType
        """
        ...
    
    def get_member_space_limits_add_exception(self): # -> None:
        """
        (team_policies) Added members to member space limit exception list

        Only call this if :meth:`is_member_space_limits_add_exception` is true.

        :rtype: MemberSpaceLimitsAddExceptionType
        """
        ...
    
    def get_member_space_limits_change_caps_type_policy(self): # -> None:
        """
        (team_policies) Changed member space limit type for team

        Only call this if :meth:`is_member_space_limits_change_caps_type_policy` is true.

        :rtype: MemberSpaceLimitsChangeCapsTypePolicyType
        """
        ...
    
    def get_member_space_limits_change_policy(self): # -> None:
        """
        (team_policies) Changed team default member space limit

        Only call this if :meth:`is_member_space_limits_change_policy` is true.

        :rtype: MemberSpaceLimitsChangePolicyType
        """
        ...
    
    def get_member_space_limits_remove_exception(self): # -> None:
        """
        (team_policies) Removed members from member space limit exception list

        Only call this if :meth:`is_member_space_limits_remove_exception` is true.

        :rtype: MemberSpaceLimitsRemoveExceptionType
        """
        ...
    
    def get_member_suggestions_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled option for team members to suggest
        people to add to team

        Only call this if :meth:`is_member_suggestions_change_policy` is true.

        :rtype: MemberSuggestionsChangePolicyType
        """
        ...
    
    def get_microsoft_office_addin_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled Microsoft Office add-in

        Only call this if :meth:`is_microsoft_office_addin_change_policy` is true.

        :rtype: MicrosoftOfficeAddinChangePolicyType
        """
        ...
    
    def get_network_control_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled network control

        Only call this if :meth:`is_network_control_change_policy` is true.

        :rtype: NetworkControlChangePolicyType
        """
        ...
    
    def get_paper_change_deployment_policy(self): # -> None:
        """
        (team_policies) Changed whether Dropbox Paper, when enabled, is deployed
        to all members or to specific members

        Only call this if :meth:`is_paper_change_deployment_policy` is true.

        :rtype: PaperChangeDeploymentPolicyType
        """
        ...
    
    def get_paper_change_member_link_policy(self): # -> None:
        """
        (team_policies) Changed whether non-members can view Paper docs with
        link (deprecated, no longer logged)

        Only call this if :meth:`is_paper_change_member_link_policy` is true.

        :rtype: PaperChangeMemberLinkPolicyType
        """
        ...
    
    def get_paper_change_member_policy(self): # -> None:
        """
        (team_policies) Changed whether members can share Paper docs outside
        team, and if docs are accessible only by team members or anyone by
        default

        Only call this if :meth:`is_paper_change_member_policy` is true.

        :rtype: PaperChangeMemberPolicyType
        """
        ...
    
    def get_paper_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled Dropbox Paper for team

        Only call this if :meth:`is_paper_change_policy` is true.

        :rtype: PaperChangePolicyType
        """
        ...
    
    def get_paper_default_folder_policy_changed(self): # -> None:
        """
        (team_policies) Changed Paper Default Folder Policy setting for team

        Only call this if :meth:`is_paper_default_folder_policy_changed` is true.

        :rtype: PaperDefaultFolderPolicyChangedType
        """
        ...
    
    def get_paper_desktop_policy_changed(self): # -> None:
        """
        (team_policies) Enabled/disabled Paper Desktop for team

        Only call this if :meth:`is_paper_desktop_policy_changed` is true.

        :rtype: PaperDesktopPolicyChangedType
        """
        ...
    
    def get_paper_enabled_users_group_addition(self): # -> None:
        """
        (team_policies) Added users to Paper-enabled users list

        Only call this if :meth:`is_paper_enabled_users_group_addition` is true.

        :rtype: PaperEnabledUsersGroupAdditionType
        """
        ...
    
    def get_paper_enabled_users_group_removal(self): # -> None:
        """
        (team_policies) Removed users from Paper-enabled users list

        Only call this if :meth:`is_paper_enabled_users_group_removal` is true.

        :rtype: PaperEnabledUsersGroupRemovalType
        """
        ...
    
    def get_password_strength_requirements_change_policy(self): # -> None:
        """
        (team_policies) Changed team password strength requirements

        Only call this if :meth:`is_password_strength_requirements_change_policy` is true.

        :rtype: PasswordStrengthRequirementsChangePolicyType
        """
        ...
    
    def get_permanent_delete_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled ability of team members to permanently
        delete content

        Only call this if :meth:`is_permanent_delete_change_policy` is true.

        :rtype: PermanentDeleteChangePolicyType
        """
        ...
    
    def get_reseller_support_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled reseller support

        Only call this if :meth:`is_reseller_support_change_policy` is true.

        :rtype: ResellerSupportChangePolicyType
        """
        ...
    
    def get_rewind_policy_changed(self): # -> None:
        """
        (team_policies) Changed Rewind policy for team

        Only call this if :meth:`is_rewind_policy_changed` is true.

        :rtype: RewindPolicyChangedType
        """
        ...
    
    def get_send_for_signature_policy_changed(self): # -> None:
        """
        (team_policies) Changed send for signature policy for team

        Only call this if :meth:`is_send_for_signature_policy_changed` is true.

        :rtype: SendForSignaturePolicyChangedType
        """
        ...
    
    def get_sharing_change_folder_join_policy(self): # -> None:
        """
        (team_policies) Changed whether team members can join shared folders
        owned outside team

        Only call this if :meth:`is_sharing_change_folder_join_policy` is true.

        :rtype: SharingChangeFolderJoinPolicyType
        """
        ...
    
    def get_sharing_change_link_allow_change_expiration_policy(self): # -> None:
        """
        (team_policies) Changed the allow remove or change expiration policy for
        the links shared outside of the team

        Only call this if :meth:`is_sharing_change_link_allow_change_expiration_policy` is true.

        :rtype: SharingChangeLinkAllowChangeExpirationPolicyType
        """
        ...
    
    def get_sharing_change_link_default_expiration_policy(self): # -> None:
        """
        (team_policies) Changed the default expiration for the links shared
        outside of the team

        Only call this if :meth:`is_sharing_change_link_default_expiration_policy` is true.

        :rtype: SharingChangeLinkDefaultExpirationPolicyType
        """
        ...
    
    def get_sharing_change_link_enforce_password_policy(self): # -> None:
        """
        (team_policies) Changed the password requirement for the links shared
        outside of the team

        Only call this if :meth:`is_sharing_change_link_enforce_password_policy` is true.

        :rtype: SharingChangeLinkEnforcePasswordPolicyType
        """
        ...
    
    def get_sharing_change_link_policy(self): # -> None:
        """
        (team_policies) Changed whether members can share links outside team,
        and if links are accessible only by team members or anyone by default

        Only call this if :meth:`is_sharing_change_link_policy` is true.

        :rtype: SharingChangeLinkPolicyType
        """
        ...
    
    def get_sharing_change_member_policy(self): # -> None:
        """
        (team_policies) Changed whether members can share files/folders outside
        team

        Only call this if :meth:`is_sharing_change_member_policy` is true.

        :rtype: SharingChangeMemberPolicyType
        """
        ...
    
    def get_showcase_change_download_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled downloading files from Dropbox Showcase
        for team

        Only call this if :meth:`is_showcase_change_download_policy` is true.

        :rtype: ShowcaseChangeDownloadPolicyType
        """
        ...
    
    def get_showcase_change_enabled_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled Dropbox Showcase for team

        Only call this if :meth:`is_showcase_change_enabled_policy` is true.

        :rtype: ShowcaseChangeEnabledPolicyType
        """
        ...
    
    def get_showcase_change_external_sharing_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled sharing Dropbox Showcase externally for
        team

        Only call this if :meth:`is_showcase_change_external_sharing_policy` is true.

        :rtype: ShowcaseChangeExternalSharingPolicyType
        """
        ...
    
    def get_smarter_smart_sync_policy_changed(self): # -> None:
        """
        (team_policies) Changed automatic Smart Sync setting for team

        Only call this if :meth:`is_smarter_smart_sync_policy_changed` is true.

        :rtype: SmarterSmartSyncPolicyChangedType
        """
        ...
    
    def get_smart_sync_change_policy(self): # -> None:
        """
        (team_policies) Changed default Smart Sync setting for team members

        Only call this if :meth:`is_smart_sync_change_policy` is true.

        :rtype: SmartSyncChangePolicyType
        """
        ...
    
    def get_smart_sync_not_opt_out(self): # -> None:
        """
        (team_policies) Opted team into Smart Sync

        Only call this if :meth:`is_smart_sync_not_opt_out` is true.

        :rtype: SmartSyncNotOptOutType
        """
        ...
    
    def get_smart_sync_opt_out(self): # -> None:
        """
        (team_policies) Opted team out of Smart Sync

        Only call this if :meth:`is_smart_sync_opt_out` is true.

        :rtype: SmartSyncOptOutType
        """
        ...
    
    def get_sso_change_policy(self): # -> None:
        """
        (team_policies) Changed single sign-on setting for team

        Only call this if :meth:`is_sso_change_policy` is true.

        :rtype: SsoChangePolicyType
        """
        ...
    
    def get_team_branding_policy_changed(self): # -> None:
        """
        (team_policies) Changed team branding policy for team

        Only call this if :meth:`is_team_branding_policy_changed` is true.

        :rtype: TeamBrandingPolicyChangedType
        """
        ...
    
    def get_team_extensions_policy_changed(self): # -> None:
        """
        (team_policies) Changed App Integrations setting for team

        Only call this if :meth:`is_team_extensions_policy_changed` is true.

        :rtype: TeamExtensionsPolicyChangedType
        """
        ...
    
    def get_team_selective_sync_policy_changed(self): # -> None:
        """
        (team_policies) Enabled/disabled Team Selective Sync for team

        Only call this if :meth:`is_team_selective_sync_policy_changed` is true.

        :rtype: TeamSelectiveSyncPolicyChangedType
        """
        ...
    
    def get_team_sharing_whitelist_subjects_changed(self): # -> None:
        """
        (team_policies) Edited the approved list for sharing externally

        Only call this if :meth:`is_team_sharing_whitelist_subjects_changed` is true.

        :rtype: TeamSharingWhitelistSubjectsChangedType
        """
        ...
    
    def get_tfa_add_exception(self): # -> None:
        """
        (team_policies) Added members to two factor authentication exception
        list

        Only call this if :meth:`is_tfa_add_exception` is true.

        :rtype: TfaAddExceptionType
        """
        ...
    
    def get_tfa_change_policy(self): # -> None:
        """
        (team_policies) Changed two-step verification setting for team

        Only call this if :meth:`is_tfa_change_policy` is true.

        :rtype: TfaChangePolicyType
        """
        ...
    
    def get_tfa_remove_exception(self): # -> None:
        """
        (team_policies) Removed members from two factor authentication exception
        list

        Only call this if :meth:`is_tfa_remove_exception` is true.

        :rtype: TfaRemoveExceptionType
        """
        ...
    
    def get_two_account_change_policy(self): # -> None:
        """
        (team_policies) Enabled/disabled option for members to link personal
        Dropbox account and team account to same computer

        Only call this if :meth:`is_two_account_change_policy` is true.

        :rtype: TwoAccountChangePolicyType
        """
        ...
    
    def get_viewer_info_policy_changed(self): # -> None:
        """
        (team_policies) Changed team policy for viewer info

        Only call this if :meth:`is_viewer_info_policy_changed` is true.

        :rtype: ViewerInfoPolicyChangedType
        """
        ...
    
    def get_watermarking_policy_changed(self): # -> None:
        """
        (team_policies) Changed watermarking policy for team

        Only call this if :meth:`is_watermarking_policy_changed` is true.

        :rtype: WatermarkingPolicyChangedType
        """
        ...
    
    def get_web_sessions_change_active_session_limit(self): # -> None:
        """
        (team_policies) Changed limit on active sessions per member

        Only call this if :meth:`is_web_sessions_change_active_session_limit` is true.

        :rtype: WebSessionsChangeActiveSessionLimitType
        """
        ...
    
    def get_web_sessions_change_fixed_length_policy(self): # -> None:
        """
        (team_policies) Changed how long members can stay signed in to
        Dropbox.com

        Only call this if :meth:`is_web_sessions_change_fixed_length_policy` is true.

        :rtype: WebSessionsChangeFixedLengthPolicyType
        """
        ...
    
    def get_web_sessions_change_idle_length_policy(self): # -> None:
        """
        (team_policies) Changed how long team members can be idle while signed
        in to Dropbox.com

        Only call this if :meth:`is_web_sessions_change_idle_length_policy` is true.

        :rtype: WebSessionsChangeIdleLengthPolicyType
        """
        ...
    
    def get_data_residency_migration_request_successful(self): # -> None:
        """
        (team_profile) Requested data residency migration for team data

        Only call this if :meth:`is_data_residency_migration_request_successful` is true.

        :rtype: DataResidencyMigrationRequestSuccessfulType
        """
        ...
    
    def get_data_residency_migration_request_unsuccessful(self): # -> None:
        """
        (team_profile) Request for data residency migration for team data has
        failed

        Only call this if :meth:`is_data_residency_migration_request_unsuccessful` is true.

        :rtype: DataResidencyMigrationRequestUnsuccessfulType
        """
        ...
    
    def get_team_merge_from(self): # -> None:
        """
        (team_profile) Merged another team into this team

        Only call this if :meth:`is_team_merge_from` is true.

        :rtype: TeamMergeFromType
        """
        ...
    
    def get_team_merge_to(self): # -> None:
        """
        (team_profile) Merged this team into another team

        Only call this if :meth:`is_team_merge_to` is true.

        :rtype: TeamMergeToType
        """
        ...
    
    def get_team_profile_add_background(self): # -> None:
        """
        (team_profile) Added team background to display on shared link headers

        Only call this if :meth:`is_team_profile_add_background` is true.

        :rtype: TeamProfileAddBackgroundType
        """
        ...
    
    def get_team_profile_add_logo(self): # -> None:
        """
        (team_profile) Added team logo to display on shared link headers

        Only call this if :meth:`is_team_profile_add_logo` is true.

        :rtype: TeamProfileAddLogoType
        """
        ...
    
    def get_team_profile_change_background(self): # -> None:
        """
        (team_profile) Changed team background displayed on shared link headers

        Only call this if :meth:`is_team_profile_change_background` is true.

        :rtype: TeamProfileChangeBackgroundType
        """
        ...
    
    def get_team_profile_change_default_language(self): # -> None:
        """
        (team_profile) Changed default language for team

        Only call this if :meth:`is_team_profile_change_default_language` is true.

        :rtype: TeamProfileChangeDefaultLanguageType
        """
        ...
    
    def get_team_profile_change_logo(self): # -> None:
        """
        (team_profile) Changed team logo displayed on shared link headers

        Only call this if :meth:`is_team_profile_change_logo` is true.

        :rtype: TeamProfileChangeLogoType
        """
        ...
    
    def get_team_profile_change_name(self): # -> None:
        """
        (team_profile) Changed team name

        Only call this if :meth:`is_team_profile_change_name` is true.

        :rtype: TeamProfileChangeNameType
        """
        ...
    
    def get_team_profile_remove_background(self): # -> None:
        """
        (team_profile) Removed team background displayed on shared link headers

        Only call this if :meth:`is_team_profile_remove_background` is true.

        :rtype: TeamProfileRemoveBackgroundType
        """
        ...
    
    def get_team_profile_remove_logo(self): # -> None:
        """
        (team_profile) Removed team logo displayed on shared link headers

        Only call this if :meth:`is_team_profile_remove_logo` is true.

        :rtype: TeamProfileRemoveLogoType
        """
        ...
    
    def get_tfa_add_backup_phone(self): # -> None:
        """
        (tfa) Added backup phone for two-step verification

        Only call this if :meth:`is_tfa_add_backup_phone` is true.

        :rtype: TfaAddBackupPhoneType
        """
        ...
    
    def get_tfa_add_security_key(self): # -> None:
        """
        (tfa) Added security key for two-step verification

        Only call this if :meth:`is_tfa_add_security_key` is true.

        :rtype: TfaAddSecurityKeyType
        """
        ...
    
    def get_tfa_change_backup_phone(self): # -> None:
        """
        (tfa) Changed backup phone for two-step verification

        Only call this if :meth:`is_tfa_change_backup_phone` is true.

        :rtype: TfaChangeBackupPhoneType
        """
        ...
    
    def get_tfa_change_status(self): # -> None:
        """
        (tfa) Enabled/disabled/changed two-step verification setting

        Only call this if :meth:`is_tfa_change_status` is true.

        :rtype: TfaChangeStatusType
        """
        ...
    
    def get_tfa_remove_backup_phone(self): # -> None:
        """
        (tfa) Removed backup phone for two-step verification

        Only call this if :meth:`is_tfa_remove_backup_phone` is true.

        :rtype: TfaRemoveBackupPhoneType
        """
        ...
    
    def get_tfa_remove_security_key(self): # -> None:
        """
        (tfa) Removed security key for two-step verification

        Only call this if :meth:`is_tfa_remove_security_key` is true.

        :rtype: TfaRemoveSecurityKeyType
        """
        ...
    
    def get_tfa_reset(self): # -> None:
        """
        (tfa) Reset two-step verification for team member

        Only call this if :meth:`is_tfa_reset` is true.

        :rtype: TfaResetType
        """
        ...
    
    def get_changed_enterprise_admin_role(self): # -> None:
        """
        (trusted_teams) Changed enterprise admin role

        Only call this if :meth:`is_changed_enterprise_admin_role` is true.

        :rtype: ChangedEnterpriseAdminRoleType
        """
        ...
    
    def get_changed_enterprise_connected_team_status(self): # -> None:
        """
        (trusted_teams) Changed enterprise-connected team status

        Only call this if :meth:`is_changed_enterprise_connected_team_status` is true.

        :rtype: ChangedEnterpriseConnectedTeamStatusType
        """
        ...
    
    def get_ended_enterprise_admin_session(self): # -> None:
        """
        (trusted_teams) Ended enterprise admin session

        Only call this if :meth:`is_ended_enterprise_admin_session` is true.

        :rtype: EndedEnterpriseAdminSessionType
        """
        ...
    
    def get_ended_enterprise_admin_session_deprecated(self): # -> None:
        """
        (trusted_teams) Ended enterprise admin session (deprecated, replaced by
        'Ended enterprise admin session')

        Only call this if :meth:`is_ended_enterprise_admin_session_deprecated` is true.

        :rtype: EndedEnterpriseAdminSessionDeprecatedType
        """
        ...
    
    def get_enterprise_settings_locking(self): # -> None:
        """
        (trusted_teams) Changed who can update a setting

        Only call this if :meth:`is_enterprise_settings_locking` is true.

        :rtype: EnterpriseSettingsLockingType
        """
        ...
    
    def get_guest_admin_change_status(self): # -> None:
        """
        (trusted_teams) Changed guest team admin status

        Only call this if :meth:`is_guest_admin_change_status` is true.

        :rtype: GuestAdminChangeStatusType
        """
        ...
    
    def get_started_enterprise_admin_session(self): # -> None:
        """
        (trusted_teams) Started enterprise admin session

        Only call this if :meth:`is_started_enterprise_admin_session` is true.

        :rtype: StartedEnterpriseAdminSessionType
        """
        ...
    
    def get_team_merge_request_accepted(self): # -> None:
        """
        (trusted_teams) Accepted a team merge request

        Only call this if :meth:`is_team_merge_request_accepted` is true.

        :rtype: TeamMergeRequestAcceptedType
        """
        ...
    
    def get_team_merge_request_accepted_shown_to_primary_team(self): # -> None:
        """
        (trusted_teams) Accepted a team merge request (deprecated, replaced by
        'Accepted a team merge request')

        Only call this if :meth:`is_team_merge_request_accepted_shown_to_primary_team` is true.

        :rtype: TeamMergeRequestAcceptedShownToPrimaryTeamType
        """
        ...
    
    def get_team_merge_request_accepted_shown_to_secondary_team(self): # -> None:
        """
        (trusted_teams) Accepted a team merge request (deprecated, replaced by
        'Accepted a team merge request')

        Only call this if :meth:`is_team_merge_request_accepted_shown_to_secondary_team` is true.

        :rtype: TeamMergeRequestAcceptedShownToSecondaryTeamType
        """
        ...
    
    def get_team_merge_request_auto_canceled(self): # -> None:
        """
        (trusted_teams) Automatically canceled team merge request

        Only call this if :meth:`is_team_merge_request_auto_canceled` is true.

        :rtype: TeamMergeRequestAutoCanceledType
        """
        ...
    
    def get_team_merge_request_canceled(self): # -> None:
        """
        (trusted_teams) Canceled a team merge request

        Only call this if :meth:`is_team_merge_request_canceled` is true.

        :rtype: TeamMergeRequestCanceledType
        """
        ...
    
    def get_team_merge_request_canceled_shown_to_primary_team(self): # -> None:
        """
        (trusted_teams) Canceled a team merge request (deprecated, replaced by
        'Canceled a team merge request')

        Only call this if :meth:`is_team_merge_request_canceled_shown_to_primary_team` is true.

        :rtype: TeamMergeRequestCanceledShownToPrimaryTeamType
        """
        ...
    
    def get_team_merge_request_canceled_shown_to_secondary_team(self): # -> None:
        """
        (trusted_teams) Canceled a team merge request (deprecated, replaced by
        'Canceled a team merge request')

        Only call this if :meth:`is_team_merge_request_canceled_shown_to_secondary_team` is true.

        :rtype: TeamMergeRequestCanceledShownToSecondaryTeamType
        """
        ...
    
    def get_team_merge_request_expired(self): # -> None:
        """
        (trusted_teams) Team merge request expired

        Only call this if :meth:`is_team_merge_request_expired` is true.

        :rtype: TeamMergeRequestExpiredType
        """
        ...
    
    def get_team_merge_request_expired_shown_to_primary_team(self): # -> None:
        """
        (trusted_teams) Team merge request expired (deprecated, replaced by
        'Team merge request expired')

        Only call this if :meth:`is_team_merge_request_expired_shown_to_primary_team` is true.

        :rtype: TeamMergeRequestExpiredShownToPrimaryTeamType
        """
        ...
    
    def get_team_merge_request_expired_shown_to_secondary_team(self): # -> None:
        """
        (trusted_teams) Team merge request expired (deprecated, replaced by
        'Team merge request expired')

        Only call this if :meth:`is_team_merge_request_expired_shown_to_secondary_team` is true.

        :rtype: TeamMergeRequestExpiredShownToSecondaryTeamType
        """
        ...
    
    def get_team_merge_request_rejected_shown_to_primary_team(self): # -> None:
        """
        (trusted_teams) Rejected a team merge request (deprecated, no longer
        logged)

        Only call this if :meth:`is_team_merge_request_rejected_shown_to_primary_team` is true.

        :rtype: TeamMergeRequestRejectedShownToPrimaryTeamType
        """
        ...
    
    def get_team_merge_request_rejected_shown_to_secondary_team(self): # -> None:
        """
        (trusted_teams) Rejected a team merge request (deprecated, no longer
        logged)

        Only call this if :meth:`is_team_merge_request_rejected_shown_to_secondary_team` is true.

        :rtype: TeamMergeRequestRejectedShownToSecondaryTeamType
        """
        ...
    
    def get_team_merge_request_reminder(self): # -> None:
        """
        (trusted_teams) Sent a team merge request reminder

        Only call this if :meth:`is_team_merge_request_reminder` is true.

        :rtype: TeamMergeRequestReminderType
        """
        ...
    
    def get_team_merge_request_reminder_shown_to_primary_team(self): # -> None:
        """
        (trusted_teams) Sent a team merge request reminder (deprecated, replaced
        by 'Sent a team merge request reminder')

        Only call this if :meth:`is_team_merge_request_reminder_shown_to_primary_team` is true.

        :rtype: TeamMergeRequestReminderShownToPrimaryTeamType
        """
        ...
    
    def get_team_merge_request_reminder_shown_to_secondary_team(self): # -> None:
        """
        (trusted_teams) Sent a team merge request reminder (deprecated, replaced
        by 'Sent a team merge request reminder')

        Only call this if :meth:`is_team_merge_request_reminder_shown_to_secondary_team` is true.

        :rtype: TeamMergeRequestReminderShownToSecondaryTeamType
        """
        ...
    
    def get_team_merge_request_revoked(self): # -> None:
        """
        (trusted_teams) Canceled the team merge

        Only call this if :meth:`is_team_merge_request_revoked` is true.

        :rtype: TeamMergeRequestRevokedType
        """
        ...
    
    def get_team_merge_request_sent_shown_to_primary_team(self): # -> None:
        """
        (trusted_teams) Requested to merge their Dropbox team into yours

        Only call this if :meth:`is_team_merge_request_sent_shown_to_primary_team` is true.

        :rtype: TeamMergeRequestSentShownToPrimaryTeamType
        """
        ...
    
    def get_team_merge_request_sent_shown_to_secondary_team(self): # -> None:
        """
        (trusted_teams) Requested to merge your team into another Dropbox team

        Only call this if :meth:`is_team_merge_request_sent_shown_to_secondary_team` is true.

        :rtype: TeamMergeRequestSentShownToSecondaryTeamType
        """
        ...
    


EventType_validator = ...
class EventTypeArg(bb.Union):
    """
    The type of the event.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_log.EventTypeArg.admin_alerting_alert_state_changed:
        (admin_alerting) Changed an alert state
    :ivar team_log.EventTypeArg.admin_alerting_changed_alert_config:
        (admin_alerting) Changed an alert setting
    :ivar team_log.EventTypeArg.admin_alerting_triggered_alert: (admin_alerting)
        Triggered security alert
    :ivar team_log.EventTypeArg.ransomware_restore_process_completed:
        (admin_alerting) Completed ransomware restore process
    :ivar team_log.EventTypeArg.ransomware_restore_process_started:
        (admin_alerting) Started ransomware restore process
    :ivar team_log.EventTypeArg.app_blocked_by_permissions: (apps) Failed to
        connect app for member
    :ivar team_log.EventTypeArg.app_link_team: (apps) Linked app for team
    :ivar team_log.EventTypeArg.app_link_user: (apps) Linked app for member
    :ivar team_log.EventTypeArg.app_unlink_team: (apps) Unlinked app for team
    :ivar team_log.EventTypeArg.app_unlink_user: (apps) Unlinked app for member
    :ivar team_log.EventTypeArg.integration_connected: (apps) Connected
        integration for member
    :ivar team_log.EventTypeArg.integration_disconnected: (apps) Disconnected
        integration for member
    :ivar team_log.EventTypeArg.file_add_comment: (comments) Added file comment
    :ivar team_log.EventTypeArg.file_change_comment_subscription: (comments)
        Subscribed to or unsubscribed from comment notifications for file
    :ivar team_log.EventTypeArg.file_delete_comment: (comments) Deleted file
        comment
    :ivar team_log.EventTypeArg.file_edit_comment: (comments) Edited file
        comment
    :ivar team_log.EventTypeArg.file_like_comment: (comments) Liked file comment
        (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.file_resolve_comment: (comments) Resolved file
        comment
    :ivar team_log.EventTypeArg.file_unlike_comment: (comments) Unliked file
        comment (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.file_unresolve_comment: (comments) Unresolved
        file comment
    :ivar team_log.EventTypeArg.governance_policy_add_folders: (data_governance)
        Added folders to policy
    :ivar team_log.EventTypeArg.governance_policy_add_folder_failed:
        (data_governance) Couldn't add a folder to a policy
    :ivar team_log.EventTypeArg.governance_policy_content_disposed:
        (data_governance) Content disposed
    :ivar team_log.EventTypeArg.governance_policy_create: (data_governance)
        Activated a new policy
    :ivar team_log.EventTypeArg.governance_policy_delete: (data_governance)
        Deleted a policy
    :ivar team_log.EventTypeArg.governance_policy_edit_details:
        (data_governance) Edited policy
    :ivar team_log.EventTypeArg.governance_policy_edit_duration:
        (data_governance) Changed policy duration
    :ivar team_log.EventTypeArg.governance_policy_export_created:
        (data_governance) Created a policy download
    :ivar team_log.EventTypeArg.governance_policy_export_removed:
        (data_governance) Removed a policy download
    :ivar team_log.EventTypeArg.governance_policy_remove_folders:
        (data_governance) Removed folders from policy
    :ivar team_log.EventTypeArg.governance_policy_report_created:
        (data_governance) Created a summary report for a policy
    :ivar team_log.EventTypeArg.governance_policy_zip_part_downloaded:
        (data_governance) Downloaded content from a policy
    :ivar team_log.EventTypeArg.legal_holds_activate_a_hold: (data_governance)
        Activated a hold
    :ivar team_log.EventTypeArg.legal_holds_add_members: (data_governance) Added
        members to a hold
    :ivar team_log.EventTypeArg.legal_holds_change_hold_details:
        (data_governance) Edited details for a hold
    :ivar team_log.EventTypeArg.legal_holds_change_hold_name: (data_governance)
        Renamed a hold
    :ivar team_log.EventTypeArg.legal_holds_export_a_hold: (data_governance)
        Exported hold
    :ivar team_log.EventTypeArg.legal_holds_export_cancelled: (data_governance)
        Canceled export for a hold
    :ivar team_log.EventTypeArg.legal_holds_export_downloaded: (data_governance)
        Downloaded export for a hold
    :ivar team_log.EventTypeArg.legal_holds_export_removed: (data_governance)
        Removed export for a hold
    :ivar team_log.EventTypeArg.legal_holds_release_a_hold: (data_governance)
        Released a hold
    :ivar team_log.EventTypeArg.legal_holds_remove_members: (data_governance)
        Removed members from a hold
    :ivar team_log.EventTypeArg.legal_holds_report_a_hold: (data_governance)
        Created a summary report for a hold
    :ivar team_log.EventTypeArg.device_change_ip_desktop: (devices) Changed IP
        address associated with active desktop session
    :ivar team_log.EventTypeArg.device_change_ip_mobile: (devices) Changed IP
        address associated with active mobile session
    :ivar team_log.EventTypeArg.device_change_ip_web: (devices) Changed IP
        address associated with active web session
    :ivar team_log.EventTypeArg.device_delete_on_unlink_fail: (devices) Failed
        to delete all files from unlinked device
    :ivar team_log.EventTypeArg.device_delete_on_unlink_success: (devices)
        Deleted all files from unlinked device
    :ivar team_log.EventTypeArg.device_link_fail: (devices) Failed to link
        device
    :ivar team_log.EventTypeArg.device_link_success: (devices) Linked device
    :ivar team_log.EventTypeArg.device_management_disabled: (devices) Disabled
        device management (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.device_management_enabled: (devices) Enabled
        device management (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.device_sync_backup_status_changed: (devices)
        Enabled/disabled backup for computer
    :ivar team_log.EventTypeArg.device_unlink: (devices) Disconnected device
    :ivar team_log.EventTypeArg.dropbox_passwords_exported: (devices) Exported
        passwords
    :ivar team_log.EventTypeArg.dropbox_passwords_new_device_enrolled: (devices)
        Enrolled new Dropbox Passwords device
    :ivar team_log.EventTypeArg.emm_refresh_auth_token: (devices) Refreshed auth
        token used for setting up EMM
    :ivar
        team_log.EventTypeArg.external_drive_backup_eligibility_status_checked:
        (devices) Checked external drive backup eligibility status
    :ivar team_log.EventTypeArg.external_drive_backup_status_changed: (devices)
        Modified external drive backup
    :ivar team_log.EventTypeArg.account_capture_change_availability: (domains)
        Granted/revoked option to enable account capture on team domains
    :ivar team_log.EventTypeArg.account_capture_migrate_account: (domains)
        Account-captured user migrated account to team
    :ivar team_log.EventTypeArg.account_capture_notification_emails_sent:
        (domains) Sent account capture email to all unmanaged members
    :ivar team_log.EventTypeArg.account_capture_relinquish_account: (domains)
        Account-captured user changed account email to personal email
    :ivar team_log.EventTypeArg.disabled_domain_invites: (domains) Disabled
        domain invites (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.domain_invites_approve_request_to_join_team:
        (domains) Approved user's request to join team
    :ivar team_log.EventTypeArg.domain_invites_decline_request_to_join_team:
        (domains) Declined user's request to join team
    :ivar team_log.EventTypeArg.domain_invites_email_existing_users: (domains)
        Sent domain invites to existing domain accounts (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.domain_invites_request_to_join_team: (domains)
        Requested to join team
    :ivar team_log.EventTypeArg.domain_invites_set_invite_new_user_pref_to_no:
        (domains) Disabled "Automatically invite new users" (deprecated, no
        longer logged)
    :ivar team_log.EventTypeArg.domain_invites_set_invite_new_user_pref_to_yes:
        (domains) Enabled "Automatically invite new users" (deprecated, no
        longer logged)
    :ivar team_log.EventTypeArg.domain_verification_add_domain_fail: (domains)
        Failed to verify team domain
    :ivar team_log.EventTypeArg.domain_verification_add_domain_success:
        (domains) Verified team domain
    :ivar team_log.EventTypeArg.domain_verification_remove_domain: (domains)
        Removed domain from list of verified team domains
    :ivar team_log.EventTypeArg.enabled_domain_invites: (domains) Enabled domain
        invites (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.team_encryption_key_cancel_key_deletion:
        (encryption) Canceled team encryption key deletion
    :ivar team_log.EventTypeArg.team_encryption_key_create_key: (encryption)
        Created team encryption key
    :ivar team_log.EventTypeArg.team_encryption_key_delete_key: (encryption)
        Deleted team encryption key
    :ivar team_log.EventTypeArg.team_encryption_key_disable_key: (encryption)
        Disabled team encryption key
    :ivar team_log.EventTypeArg.team_encryption_key_enable_key: (encryption)
        Enabled team encryption key
    :ivar team_log.EventTypeArg.team_encryption_key_rotate_key: (encryption)
        Rotated team encryption key (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.team_encryption_key_schedule_key_deletion:
        (encryption) Scheduled encryption key deletion
    :ivar team_log.EventTypeArg.apply_naming_convention: (file_operations)
        Applied naming convention
    :ivar team_log.EventTypeArg.create_folder: (file_operations) Created folders
        (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.file_add: (file_operations) Added files and/or
        folders
    :ivar team_log.EventTypeArg.file_add_from_automation: (file_operations)
        Added files and/or folders from automation
    :ivar team_log.EventTypeArg.file_copy: (file_operations) Copied files and/or
        folders
    :ivar team_log.EventTypeArg.file_delete: (file_operations) Deleted files
        and/or folders
    :ivar team_log.EventTypeArg.file_download: (file_operations) Downloaded
        files and/or folders
    :ivar team_log.EventTypeArg.file_edit: (file_operations) Edited files
    :ivar team_log.EventTypeArg.file_get_copy_reference: (file_operations)
        Created copy reference to file/folder
    :ivar team_log.EventTypeArg.file_locking_lock_status_changed:
        (file_operations) Locked/unlocked editing for a file
    :ivar team_log.EventTypeArg.file_move: (file_operations) Moved files and/or
        folders
    :ivar team_log.EventTypeArg.file_permanently_delete: (file_operations)
        Permanently deleted files and/or folders
    :ivar team_log.EventTypeArg.file_preview: (file_operations) Previewed files
        and/or folders
    :ivar team_log.EventTypeArg.file_rename: (file_operations) Renamed files
        and/or folders
    :ivar team_log.EventTypeArg.file_restore: (file_operations) Restored deleted
        files and/or folders
    :ivar team_log.EventTypeArg.file_revert: (file_operations) Reverted files to
        previous version
    :ivar team_log.EventTypeArg.file_rollback_changes: (file_operations) Rolled
        back file actions
    :ivar team_log.EventTypeArg.file_save_copy_reference: (file_operations)
        Saved file/folder using copy reference
    :ivar team_log.EventTypeArg.folder_overview_description_changed:
        (file_operations) Updated folder overview
    :ivar team_log.EventTypeArg.folder_overview_item_pinned: (file_operations)
        Pinned item to folder overview
    :ivar team_log.EventTypeArg.folder_overview_item_unpinned: (file_operations)
        Unpinned item from folder overview
    :ivar team_log.EventTypeArg.object_label_added: (file_operations) Added a
        label
    :ivar team_log.EventTypeArg.object_label_removed: (file_operations) Removed
        a label
    :ivar team_log.EventTypeArg.object_label_updated_value: (file_operations)
        Updated a label's value
    :ivar team_log.EventTypeArg.organize_folder_with_tidy: (file_operations)
        Organized a folder with multi-file organize
    :ivar team_log.EventTypeArg.replay_file_delete: (file_operations) Deleted
        files in Replay
    :ivar team_log.EventTypeArg.rewind_folder: (file_operations) Rewound a
        folder
    :ivar team_log.EventTypeArg.undo_naming_convention: (file_operations)
        Reverted naming convention
    :ivar team_log.EventTypeArg.undo_organize_folder_with_tidy:
        (file_operations) Removed multi-file organize
    :ivar team_log.EventTypeArg.user_tags_added: (file_operations) Tagged a file
    :ivar team_log.EventTypeArg.user_tags_removed: (file_operations) Removed
        tags
    :ivar team_log.EventTypeArg.email_ingest_receive_file: (file_requests)
        Received files via Email to Dropbox
    :ivar team_log.EventTypeArg.file_request_change: (file_requests) Changed
        file request
    :ivar team_log.EventTypeArg.file_request_close: (file_requests) Closed file
        request
    :ivar team_log.EventTypeArg.file_request_create: (file_requests) Created
        file request
    :ivar team_log.EventTypeArg.file_request_delete: (file_requests) Delete file
        request
    :ivar team_log.EventTypeArg.file_request_receive_file: (file_requests)
        Received files for file request
    :ivar team_log.EventTypeArg.group_add_external_id: (groups) Added external
        ID for group
    :ivar team_log.EventTypeArg.group_add_member: (groups) Added team members to
        group
    :ivar team_log.EventTypeArg.group_change_external_id: (groups) Changed
        external ID for group
    :ivar team_log.EventTypeArg.group_change_management_type: (groups) Changed
        group management type
    :ivar team_log.EventTypeArg.group_change_member_role: (groups) Changed
        manager permissions of group member
    :ivar team_log.EventTypeArg.group_create: (groups) Created group
    :ivar team_log.EventTypeArg.group_delete: (groups) Deleted group
    :ivar team_log.EventTypeArg.group_description_updated: (groups) Updated
        group (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.group_join_policy_updated: (groups) Updated
        group join policy (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.group_moved: (groups) Moved group (deprecated,
        no longer logged)
    :ivar team_log.EventTypeArg.group_remove_external_id: (groups) Removed
        external ID for group
    :ivar team_log.EventTypeArg.group_remove_member: (groups) Removed team
        members from group
    :ivar team_log.EventTypeArg.group_rename: (groups) Renamed group
    :ivar team_log.EventTypeArg.account_lock_or_unlocked: (logins)
        Unlocked/locked account after failed sign in attempts
    :ivar team_log.EventTypeArg.emm_error: (logins) Failed to sign in via EMM
        (deprecated, replaced by 'Failed to sign in')
    :ivar team_log.EventTypeArg.guest_admin_signed_in_via_trusted_teams:
        (logins) Started trusted team admin session
    :ivar team_log.EventTypeArg.guest_admin_signed_out_via_trusted_teams:
        (logins) Ended trusted team admin session
    :ivar team_log.EventTypeArg.login_fail: (logins) Failed to sign in
    :ivar team_log.EventTypeArg.login_success: (logins) Signed in
    :ivar team_log.EventTypeArg.logout: (logins) Signed out
    :ivar team_log.EventTypeArg.reseller_support_session_end: (logins) Ended
        reseller support session
    :ivar team_log.EventTypeArg.reseller_support_session_start: (logins) Started
        reseller support session
    :ivar team_log.EventTypeArg.sign_in_as_session_end: (logins) Ended admin
        sign-in-as session
    :ivar team_log.EventTypeArg.sign_in_as_session_start: (logins) Started admin
        sign-in-as session
    :ivar team_log.EventTypeArg.sso_error: (logins) Failed to sign in via SSO
        (deprecated, replaced by 'Failed to sign in')
    :ivar team_log.EventTypeArg.backup_admin_invitation_sent: (members) Invited
        members to activate Backup
    :ivar team_log.EventTypeArg.backup_invitation_opened: (members) Opened
        Backup invite
    :ivar team_log.EventTypeArg.create_team_invite_link: (members) Created team
        invite link
    :ivar team_log.EventTypeArg.delete_team_invite_link: (members) Deleted team
        invite link
    :ivar team_log.EventTypeArg.member_add_external_id: (members) Added an
        external ID for team member
    :ivar team_log.EventTypeArg.member_add_name: (members) Added team member
        name
    :ivar team_log.EventTypeArg.member_change_admin_role: (members) Changed team
        member admin role
    :ivar team_log.EventTypeArg.member_change_email: (members) Changed team
        member email
    :ivar team_log.EventTypeArg.member_change_external_id: (members) Changed the
        external ID for team member
    :ivar team_log.EventTypeArg.member_change_membership_type: (members) Changed
        membership type (limited/full) of member (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.member_change_name: (members) Changed team
        member name
    :ivar team_log.EventTypeArg.member_change_reseller_role: (members) Changed
        team member reseller role
    :ivar team_log.EventTypeArg.member_change_status: (members) Changed member
        status (invited, joined, suspended, etc.)
    :ivar team_log.EventTypeArg.member_delete_manual_contacts: (members) Cleared
        manually added contacts
    :ivar team_log.EventTypeArg.member_delete_profile_photo: (members) Deleted
        team member profile photo
    :ivar team_log.EventTypeArg.member_permanently_delete_account_contents:
        (members) Permanently deleted contents of deleted team member account
    :ivar team_log.EventTypeArg.member_remove_external_id: (members) Removed the
        external ID for team member
    :ivar team_log.EventTypeArg.member_set_profile_photo: (members) Set team
        member profile photo
    :ivar team_log.EventTypeArg.member_space_limits_add_custom_quota: (members)
        Set custom member space limit
    :ivar team_log.EventTypeArg.member_space_limits_change_custom_quota:
        (members) Changed custom member space limit
    :ivar team_log.EventTypeArg.member_space_limits_change_status: (members)
        Changed space limit status
    :ivar team_log.EventTypeArg.member_space_limits_remove_custom_quota:
        (members) Removed custom member space limit
    :ivar team_log.EventTypeArg.member_suggest: (members) Suggested person to
        add to team
    :ivar team_log.EventTypeArg.member_transfer_account_contents: (members)
        Transferred contents of deleted member account to another member
    :ivar team_log.EventTypeArg.pending_secondary_email_added: (members) Added
        pending secondary email
    :ivar team_log.EventTypeArg.secondary_email_deleted: (members) Deleted
        secondary email
    :ivar team_log.EventTypeArg.secondary_email_verified: (members) Verified
        secondary email
    :ivar team_log.EventTypeArg.secondary_mails_policy_changed: (members)
        Secondary mails policy changed
    :ivar team_log.EventTypeArg.binder_add_page: (paper) Added Binder page
        (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.binder_add_section: (paper) Added Binder section
        (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.binder_remove_page: (paper) Removed Binder page
        (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.binder_remove_section: (paper) Removed Binder
        section (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.binder_rename_page: (paper) Renamed Binder page
        (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.binder_rename_section: (paper) Renamed Binder
        section (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.binder_reorder_page: (paper) Reordered Binder
        page (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.binder_reorder_section: (paper) Reordered Binder
        section (deprecated, replaced by 'Edited files')
    :ivar team_log.EventTypeArg.paper_content_add_member: (paper) Added users
        and/or groups to Paper doc/folder
    :ivar team_log.EventTypeArg.paper_content_add_to_folder: (paper) Added Paper
        doc/folder to folder
    :ivar team_log.EventTypeArg.paper_content_archive: (paper) Archived Paper
        doc/folder
    :ivar team_log.EventTypeArg.paper_content_create: (paper) Created Paper
        doc/folder
    :ivar team_log.EventTypeArg.paper_content_permanently_delete: (paper)
        Permanently deleted Paper doc/folder
    :ivar team_log.EventTypeArg.paper_content_remove_from_folder: (paper)
        Removed Paper doc/folder from folder
    :ivar team_log.EventTypeArg.paper_content_remove_member: (paper) Removed
        users and/or groups from Paper doc/folder
    :ivar team_log.EventTypeArg.paper_content_rename: (paper) Renamed Paper
        doc/folder
    :ivar team_log.EventTypeArg.paper_content_restore: (paper) Restored archived
        Paper doc/folder
    :ivar team_log.EventTypeArg.paper_doc_add_comment: (paper) Added Paper doc
        comment
    :ivar team_log.EventTypeArg.paper_doc_change_member_role: (paper) Changed
        member permissions for Paper doc
    :ivar team_log.EventTypeArg.paper_doc_change_sharing_policy: (paper) Changed
        sharing setting for Paper doc
    :ivar team_log.EventTypeArg.paper_doc_change_subscription: (paper)
        Followed/unfollowed Paper doc
    :ivar team_log.EventTypeArg.paper_doc_deleted: (paper) Archived Paper doc
        (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.paper_doc_delete_comment: (paper) Deleted Paper
        doc comment
    :ivar team_log.EventTypeArg.paper_doc_download: (paper) Downloaded Paper doc
        in specific format
    :ivar team_log.EventTypeArg.paper_doc_edit: (paper) Edited Paper doc
    :ivar team_log.EventTypeArg.paper_doc_edit_comment: (paper) Edited Paper doc
        comment
    :ivar team_log.EventTypeArg.paper_doc_followed: (paper) Followed Paper doc
        (deprecated, replaced by 'Followed/unfollowed Paper doc')
    :ivar team_log.EventTypeArg.paper_doc_mention: (paper) Mentioned user in
        Paper doc
    :ivar team_log.EventTypeArg.paper_doc_ownership_changed: (paper) Transferred
        ownership of Paper doc
    :ivar team_log.EventTypeArg.paper_doc_request_access: (paper) Requested
        access to Paper doc
    :ivar team_log.EventTypeArg.paper_doc_resolve_comment: (paper) Resolved
        Paper doc comment
    :ivar team_log.EventTypeArg.paper_doc_revert: (paper) Restored Paper doc to
        previous version
    :ivar team_log.EventTypeArg.paper_doc_slack_share: (paper) Shared Paper doc
        via Slack
    :ivar team_log.EventTypeArg.paper_doc_team_invite: (paper) Shared Paper doc
        with users and/or groups (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.paper_doc_trashed: (paper) Deleted Paper doc
    :ivar team_log.EventTypeArg.paper_doc_unresolve_comment: (paper) Unresolved
        Paper doc comment
    :ivar team_log.EventTypeArg.paper_doc_untrashed: (paper) Restored Paper doc
    :ivar team_log.EventTypeArg.paper_doc_view: (paper) Viewed Paper doc
    :ivar team_log.EventTypeArg.paper_external_view_allow: (paper) Changed Paper
        external sharing setting to anyone (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.paper_external_view_default_team: (paper)
        Changed Paper external sharing setting to default team (deprecated, no
        longer logged)
    :ivar team_log.EventTypeArg.paper_external_view_forbid: (paper) Changed
        Paper external sharing setting to team-only (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.paper_folder_change_subscription: (paper)
        Followed/unfollowed Paper folder
    :ivar team_log.EventTypeArg.paper_folder_deleted: (paper) Archived Paper
        folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.paper_folder_followed: (paper) Followed Paper
        folder (deprecated, replaced by 'Followed/unfollowed Paper folder')
    :ivar team_log.EventTypeArg.paper_folder_team_invite: (paper) Shared Paper
        folder with users and/or groups (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.paper_published_link_change_permission: (paper)
        Changed permissions for published doc
    :ivar team_log.EventTypeArg.paper_published_link_create: (paper) Published
        doc
    :ivar team_log.EventTypeArg.paper_published_link_disabled: (paper)
        Unpublished doc
    :ivar team_log.EventTypeArg.paper_published_link_view: (paper) Viewed
        published doc
    :ivar team_log.EventTypeArg.password_change: (passwords) Changed password
    :ivar team_log.EventTypeArg.password_reset: (passwords) Reset password
    :ivar team_log.EventTypeArg.password_reset_all: (passwords) Reset all team
        member passwords
    :ivar team_log.EventTypeArg.classification_create_report: (reports) Created
        Classification report
    :ivar team_log.EventTypeArg.classification_create_report_fail: (reports)
        Couldn't create Classification report
    :ivar team_log.EventTypeArg.emm_create_exceptions_report: (reports) Created
        EMM-excluded users report
    :ivar team_log.EventTypeArg.emm_create_usage_report: (reports) Created EMM
        mobile app usage report
    :ivar team_log.EventTypeArg.export_members_report: (reports) Created member
        data report
    :ivar team_log.EventTypeArg.export_members_report_fail: (reports) Failed to
        create members data report
    :ivar team_log.EventTypeArg.external_sharing_create_report: (reports)
        Created External sharing report
    :ivar team_log.EventTypeArg.external_sharing_report_failed: (reports)
        Couldn't create External sharing report
    :ivar team_log.EventTypeArg.no_expiration_link_gen_create_report: (reports)
        Report created: Links created with no expiration
    :ivar team_log.EventTypeArg.no_expiration_link_gen_report_failed: (reports)
        Couldn't create report: Links created with no expiration
    :ivar team_log.EventTypeArg.no_password_link_gen_create_report: (reports)
        Report created: Links created without passwords
    :ivar team_log.EventTypeArg.no_password_link_gen_report_failed: (reports)
        Couldn't create report: Links created without passwords
    :ivar team_log.EventTypeArg.no_password_link_view_create_report: (reports)
        Report created: Views of links without passwords
    :ivar team_log.EventTypeArg.no_password_link_view_report_failed: (reports)
        Couldn't create report: Views of links without passwords
    :ivar team_log.EventTypeArg.outdated_link_view_create_report: (reports)
        Report created: Views of old links
    :ivar team_log.EventTypeArg.outdated_link_view_report_failed: (reports)
        Couldn't create report: Views of old links
    :ivar team_log.EventTypeArg.paper_admin_export_start: (reports) Exported all
        team Paper docs
    :ivar team_log.EventTypeArg.ransomware_alert_create_report: (reports)
        Created ransomware report
    :ivar team_log.EventTypeArg.ransomware_alert_create_report_failed: (reports)
        Couldn't generate ransomware report
    :ivar team_log.EventTypeArg.smart_sync_create_admin_privilege_report:
        (reports) Created Smart Sync non-admin devices report
    :ivar team_log.EventTypeArg.team_activity_create_report: (reports) Created
        team activity report
    :ivar team_log.EventTypeArg.team_activity_create_report_fail: (reports)
        Couldn't generate team activity report
    :ivar team_log.EventTypeArg.collection_share: (sharing) Shared album
    :ivar team_log.EventTypeArg.file_transfers_file_add: (sharing) Transfer
        files added
    :ivar team_log.EventTypeArg.file_transfers_transfer_delete: (sharing)
        Deleted transfer
    :ivar team_log.EventTypeArg.file_transfers_transfer_download: (sharing)
        Transfer downloaded
    :ivar team_log.EventTypeArg.file_transfers_transfer_send: (sharing) Sent
        transfer
    :ivar team_log.EventTypeArg.file_transfers_transfer_view: (sharing) Viewed
        transfer
    :ivar team_log.EventTypeArg.note_acl_invite_only: (sharing) Changed Paper
        doc to invite-only (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.note_acl_link: (sharing) Changed Paper doc to
        link-accessible (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.note_acl_team_link: (sharing) Changed Paper doc
        to link-accessible for team (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.note_shared: (sharing) Shared Paper doc
        (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.note_share_receive: (sharing) Shared received
        Paper doc (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.open_note_shared: (sharing) Opened shared Paper
        doc (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.replay_file_shared_link_created: (sharing)
        Created shared link in Replay
    :ivar team_log.EventTypeArg.replay_file_shared_link_modified: (sharing)
        Modified shared link in Replay
    :ivar team_log.EventTypeArg.replay_project_team_add: (sharing) Added member
        to Replay Project
    :ivar team_log.EventTypeArg.replay_project_team_delete: (sharing) Removed
        member from Replay Project
    :ivar team_log.EventTypeArg.sf_add_group: (sharing) Added team to shared
        folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_allow_non_members_to_view_shared_links:
        (sharing) Allowed non-collaborators to view links to files in shared
        folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_external_invite_warn: (sharing) Set team
        members to see warning before sharing folders outside team (deprecated,
        no longer logged)
    :ivar team_log.EventTypeArg.sf_fb_invite: (sharing) Invited Facebook users
        to shared folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_fb_invite_change_role: (sharing) Changed
        Facebook user's role in shared folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_fb_uninvite: (sharing) Uninvited Facebook
        user from shared folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_invite_group: (sharing) Invited group to
        shared folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_team_grant_access: (sharing) Granted access
        to shared folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_team_invite: (sharing) Invited team members
        to shared folder (deprecated, replaced by 'Invited user to Dropbox and
        added them to shared file/folder')
    :ivar team_log.EventTypeArg.sf_team_invite_change_role: (sharing) Changed
        team member's role in shared folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_team_join: (sharing) Joined team member's
        shared folder (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_team_join_from_oob_link: (sharing) Joined
        team member's shared folder from link (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.sf_team_uninvite: (sharing) Unshared folder with
        team member (deprecated, replaced by 'Removed invitee from shared
        file/folder before invite was accepted')
    :ivar team_log.EventTypeArg.shared_content_add_invitees: (sharing) Invited
        user to Dropbox and added them to shared file/folder
    :ivar team_log.EventTypeArg.shared_content_add_link_expiry: (sharing) Added
        expiration date to link for shared file/folder (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.shared_content_add_link_password: (sharing)
        Added password to link for shared file/folder (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.shared_content_add_member: (sharing) Added users
        and/or groups to shared file/folder
    :ivar team_log.EventTypeArg.shared_content_change_downloads_policy:
        (sharing) Changed whether members can download shared file/folder
        (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.shared_content_change_invitee_role: (sharing)
        Changed access type of invitee to shared file/folder before invite was
        accepted
    :ivar team_log.EventTypeArg.shared_content_change_link_audience: (sharing)
        Changed link audience of shared file/folder (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.shared_content_change_link_expiry: (sharing)
        Changed link expiration of shared file/folder (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.shared_content_change_link_password: (sharing)
        Changed link password of shared file/folder (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.shared_content_change_member_role: (sharing)
        Changed access type of shared file/folder member
    :ivar team_log.EventTypeArg.shared_content_change_viewer_info_policy:
        (sharing) Changed whether members can see who viewed shared file/folder
    :ivar team_log.EventTypeArg.shared_content_claim_invitation: (sharing)
        Acquired membership of shared file/folder by accepting invite
    :ivar team_log.EventTypeArg.shared_content_copy: (sharing) Copied shared
        file/folder to own Dropbox
    :ivar team_log.EventTypeArg.shared_content_download: (sharing) Downloaded
        shared file/folder
    :ivar team_log.EventTypeArg.shared_content_relinquish_membership: (sharing)
        Left shared file/folder
    :ivar team_log.EventTypeArg.shared_content_remove_invitees: (sharing)
        Removed invitee from shared file/folder before invite was accepted
    :ivar team_log.EventTypeArg.shared_content_remove_link_expiry: (sharing)
        Removed link expiration date of shared file/folder (deprecated, no
        longer logged)
    :ivar team_log.EventTypeArg.shared_content_remove_link_password: (sharing)
        Removed link password of shared file/folder (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.shared_content_remove_member: (sharing) Removed
        user/group from shared file/folder
    :ivar team_log.EventTypeArg.shared_content_request_access: (sharing)
        Requested access to shared file/folder
    :ivar team_log.EventTypeArg.shared_content_restore_invitees: (sharing)
        Restored shared file/folder invitees
    :ivar team_log.EventTypeArg.shared_content_restore_member: (sharing)
        Restored users and/or groups to membership of shared file/folder
    :ivar team_log.EventTypeArg.shared_content_unshare: (sharing) Unshared
        file/folder by clearing membership
    :ivar team_log.EventTypeArg.shared_content_view: (sharing) Previewed shared
        file/folder
    :ivar team_log.EventTypeArg.shared_folder_change_link_policy: (sharing)
        Changed who can access shared folder via link
    :ivar team_log.EventTypeArg.shared_folder_change_members_inheritance_policy:
        (sharing) Changed whether shared folder inherits members from parent
        folder
    :ivar team_log.EventTypeArg.shared_folder_change_members_management_policy:
        (sharing) Changed who can add/remove members of shared folder
    :ivar team_log.EventTypeArg.shared_folder_change_members_policy: (sharing)
        Changed who can become member of shared folder
    :ivar team_log.EventTypeArg.shared_folder_create: (sharing) Created shared
        folder
    :ivar team_log.EventTypeArg.shared_folder_decline_invitation: (sharing)
        Declined team member's invite to shared folder
    :ivar team_log.EventTypeArg.shared_folder_mount: (sharing) Added shared
        folder to own Dropbox
    :ivar team_log.EventTypeArg.shared_folder_nest: (sharing) Changed parent of
        shared folder
    :ivar team_log.EventTypeArg.shared_folder_transfer_ownership: (sharing)
        Transferred ownership of shared folder to another member
    :ivar team_log.EventTypeArg.shared_folder_unmount: (sharing) Deleted shared
        folder from Dropbox
    :ivar team_log.EventTypeArg.shared_link_add_expiry: (sharing) Added shared
        link expiration date
    :ivar team_log.EventTypeArg.shared_link_change_expiry: (sharing) Changed
        shared link expiration date
    :ivar team_log.EventTypeArg.shared_link_change_visibility: (sharing) Changed
        visibility of shared link
    :ivar team_log.EventTypeArg.shared_link_copy: (sharing) Added file/folder to
        Dropbox from shared link
    :ivar team_log.EventTypeArg.shared_link_create: (sharing) Created shared
        link
    :ivar team_log.EventTypeArg.shared_link_disable: (sharing) Removed shared
        link
    :ivar team_log.EventTypeArg.shared_link_download: (sharing) Downloaded
        file/folder from shared link
    :ivar team_log.EventTypeArg.shared_link_remove_expiry: (sharing) Removed
        shared link expiration date
    :ivar team_log.EventTypeArg.shared_link_settings_add_expiration: (sharing)
        Added an expiration date to the shared link
    :ivar team_log.EventTypeArg.shared_link_settings_add_password: (sharing)
        Added a password to the shared link
    :ivar team_log.EventTypeArg.shared_link_settings_allow_download_disabled:
        (sharing) Disabled downloads
    :ivar team_log.EventTypeArg.shared_link_settings_allow_download_enabled:
        (sharing) Enabled downloads
    :ivar team_log.EventTypeArg.shared_link_settings_change_audience: (sharing)
        Changed the audience of the shared link
    :ivar team_log.EventTypeArg.shared_link_settings_change_expiration:
        (sharing) Changed the expiration date of the shared link
    :ivar team_log.EventTypeArg.shared_link_settings_change_password: (sharing)
        Changed the password of the shared link
    :ivar team_log.EventTypeArg.shared_link_settings_remove_expiration:
        (sharing) Removed the expiration date from the shared link
    :ivar team_log.EventTypeArg.shared_link_settings_remove_password: (sharing)
        Removed the password from the shared link
    :ivar team_log.EventTypeArg.shared_link_share: (sharing) Added members as
        audience of shared link
    :ivar team_log.EventTypeArg.shared_link_view: (sharing) Opened shared link
    :ivar team_log.EventTypeArg.shared_note_opened: (sharing) Opened shared
        Paper doc (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.shmodel_disable_downloads: (sharing) Disabled
        downloads for link (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.shmodel_enable_downloads: (sharing) Enabled
        downloads for link (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.shmodel_group_share: (sharing) Shared link with
        group (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.showcase_access_granted: (showcase) Granted
        access to showcase
    :ivar team_log.EventTypeArg.showcase_add_member: (showcase) Added member to
        showcase
    :ivar team_log.EventTypeArg.showcase_archived: (showcase) Archived showcase
    :ivar team_log.EventTypeArg.showcase_created: (showcase) Created showcase
    :ivar team_log.EventTypeArg.showcase_delete_comment: (showcase) Deleted
        showcase comment
    :ivar team_log.EventTypeArg.showcase_edited: (showcase) Edited showcase
    :ivar team_log.EventTypeArg.showcase_edit_comment: (showcase) Edited
        showcase comment
    :ivar team_log.EventTypeArg.showcase_file_added: (showcase) Added file to
        showcase
    :ivar team_log.EventTypeArg.showcase_file_download: (showcase) Downloaded
        file from showcase
    :ivar team_log.EventTypeArg.showcase_file_removed: (showcase) Removed file
        from showcase
    :ivar team_log.EventTypeArg.showcase_file_view: (showcase) Viewed file in
        showcase
    :ivar team_log.EventTypeArg.showcase_permanently_deleted: (showcase)
        Permanently deleted showcase
    :ivar team_log.EventTypeArg.showcase_post_comment: (showcase) Added showcase
        comment
    :ivar team_log.EventTypeArg.showcase_remove_member: (showcase) Removed
        member from showcase
    :ivar team_log.EventTypeArg.showcase_renamed: (showcase) Renamed showcase
    :ivar team_log.EventTypeArg.showcase_request_access: (showcase) Requested
        access to showcase
    :ivar team_log.EventTypeArg.showcase_resolve_comment: (showcase) Resolved
        showcase comment
    :ivar team_log.EventTypeArg.showcase_restored: (showcase) Unarchived
        showcase
    :ivar team_log.EventTypeArg.showcase_trashed: (showcase) Deleted showcase
    :ivar team_log.EventTypeArg.showcase_trashed_deprecated: (showcase) Deleted
        showcase (old version) (deprecated, replaced by 'Deleted showcase')
    :ivar team_log.EventTypeArg.showcase_unresolve_comment: (showcase)
        Unresolved showcase comment
    :ivar team_log.EventTypeArg.showcase_untrashed: (showcase) Restored showcase
    :ivar team_log.EventTypeArg.showcase_untrashed_deprecated: (showcase)
        Restored showcase (old version) (deprecated, replaced by 'Restored
        showcase')
    :ivar team_log.EventTypeArg.showcase_view: (showcase) Viewed showcase
    :ivar team_log.EventTypeArg.sso_add_cert: (sso) Added X.509 certificate for
        SSO
    :ivar team_log.EventTypeArg.sso_add_login_url: (sso) Added sign-in URL for
        SSO
    :ivar team_log.EventTypeArg.sso_add_logout_url: (sso) Added sign-out URL for
        SSO
    :ivar team_log.EventTypeArg.sso_change_cert: (sso) Changed X.509 certificate
        for SSO
    :ivar team_log.EventTypeArg.sso_change_login_url: (sso) Changed sign-in URL
        for SSO
    :ivar team_log.EventTypeArg.sso_change_logout_url: (sso) Changed sign-out
        URL for SSO
    :ivar team_log.EventTypeArg.sso_change_saml_identity_mode: (sso) Changed
        SAML identity mode for SSO
    :ivar team_log.EventTypeArg.sso_remove_cert: (sso) Removed X.509 certificate
        for SSO
    :ivar team_log.EventTypeArg.sso_remove_login_url: (sso) Removed sign-in URL
        for SSO
    :ivar team_log.EventTypeArg.sso_remove_logout_url: (sso) Removed sign-out
        URL for SSO
    :ivar team_log.EventTypeArg.team_folder_change_status: (team_folders)
        Changed archival status of team folder
    :ivar team_log.EventTypeArg.team_folder_create: (team_folders) Created team
        folder in active status
    :ivar team_log.EventTypeArg.team_folder_downgrade: (team_folders) Downgraded
        team folder to regular shared folder
    :ivar team_log.EventTypeArg.team_folder_permanently_delete: (team_folders)
        Permanently deleted archived team folder
    :ivar team_log.EventTypeArg.team_folder_rename: (team_folders) Renamed
        active/archived team folder
    :ivar team_log.EventTypeArg.team_selective_sync_settings_changed:
        (team_folders) Changed sync default
    :ivar team_log.EventTypeArg.account_capture_change_policy: (team_policies)
        Changed account capture setting on team domain
    :ivar team_log.EventTypeArg.admin_email_reminders_changed: (team_policies)
        Changed admin reminder settings for requests to join the team
    :ivar team_log.EventTypeArg.allow_download_disabled: (team_policies)
        Disabled downloads (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.allow_download_enabled: (team_policies) Enabled
        downloads (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.app_permissions_changed: (team_policies) Changed
        app permissions
    :ivar team_log.EventTypeArg.camera_uploads_policy_changed: (team_policies)
        Changed camera uploads setting for team
    :ivar team_log.EventTypeArg.capture_transcript_policy_changed:
        (team_policies) Changed Capture transcription policy for team
    :ivar team_log.EventTypeArg.classification_change_policy: (team_policies)
        Changed classification policy for team
    :ivar team_log.EventTypeArg.computer_backup_policy_changed: (team_policies)
        Changed computer backup policy for team
    :ivar team_log.EventTypeArg.content_administration_policy_changed:
        (team_policies) Changed content management setting
    :ivar team_log.EventTypeArg.data_placement_restriction_change_policy:
        (team_policies) Set restrictions on data center locations where team
        data resides
    :ivar team_log.EventTypeArg.data_placement_restriction_satisfy_policy:
        (team_policies) Completed restrictions on data center locations where
        team data resides
    :ivar team_log.EventTypeArg.device_approvals_add_exception: (team_policies)
        Added members to device approvals exception list
    :ivar team_log.EventTypeArg.device_approvals_change_desktop_policy:
        (team_policies) Set/removed limit on number of computers member can link
        to team Dropbox account
    :ivar team_log.EventTypeArg.device_approvals_change_mobile_policy:
        (team_policies) Set/removed limit on number of mobile devices member can
        link to team Dropbox account
    :ivar team_log.EventTypeArg.device_approvals_change_overage_action:
        (team_policies) Changed device approvals setting when member is over
        limit
    :ivar team_log.EventTypeArg.device_approvals_change_unlink_action:
        (team_policies) Changed device approvals setting when member unlinks
        approved device
    :ivar team_log.EventTypeArg.device_approvals_remove_exception:
        (team_policies) Removed members from device approvals exception list
    :ivar team_log.EventTypeArg.directory_restrictions_add_members:
        (team_policies) Added members to directory restrictions list
    :ivar team_log.EventTypeArg.directory_restrictions_remove_members:
        (team_policies) Removed members from directory restrictions list
    :ivar team_log.EventTypeArg.dropbox_passwords_policy_changed:
        (team_policies) Changed Dropbox Passwords policy for team
    :ivar team_log.EventTypeArg.email_ingest_policy_changed: (team_policies)
        Changed email to Dropbox policy for team
    :ivar team_log.EventTypeArg.emm_add_exception: (team_policies) Added members
        to EMM exception list
    :ivar team_log.EventTypeArg.emm_change_policy: (team_policies)
        Enabled/disabled enterprise mobility management for members
    :ivar team_log.EventTypeArg.emm_remove_exception: (team_policies) Removed
        members from EMM exception list
    :ivar team_log.EventTypeArg.extended_version_history_change_policy:
        (team_policies) Accepted/opted out of extended version history
    :ivar team_log.EventTypeArg.external_drive_backup_policy_changed:
        (team_policies) Changed external drive backup policy for team
    :ivar team_log.EventTypeArg.file_comments_change_policy: (team_policies)
        Enabled/disabled commenting on team files
    :ivar team_log.EventTypeArg.file_locking_policy_changed: (team_policies)
        Changed file locking policy for team
    :ivar team_log.EventTypeArg.file_provider_migration_policy_changed:
        (team_policies) Changed File Provider Migration policy for team
    :ivar team_log.EventTypeArg.file_requests_change_policy: (team_policies)
        Enabled/disabled file requests
    :ivar team_log.EventTypeArg.file_requests_emails_enabled: (team_policies)
        Enabled file request emails for everyone (deprecated, no longer logged)
    :ivar team_log.EventTypeArg.file_requests_emails_restricted_to_team_only:
        (team_policies) Enabled file request emails for team (deprecated, no
        longer logged)
    :ivar team_log.EventTypeArg.file_transfers_policy_changed: (team_policies)
        Changed file transfers policy for team
    :ivar team_log.EventTypeArg.folder_link_restriction_policy_changed:
        (team_policies) Changed folder link restrictions policy for team
    :ivar team_log.EventTypeArg.google_sso_change_policy: (team_policies)
        Enabled/disabled Google single sign-on for team
    :ivar team_log.EventTypeArg.group_user_management_change_policy:
        (team_policies) Changed who can create groups
    :ivar team_log.EventTypeArg.integration_policy_changed: (team_policies)
        Changed integration policy for team
    :ivar team_log.EventTypeArg.invite_acceptance_email_policy_changed:
        (team_policies) Changed invite accept email policy for team
    :ivar team_log.EventTypeArg.member_requests_change_policy: (team_policies)
        Changed whether users can find team when not invited
    :ivar team_log.EventTypeArg.member_send_invite_policy_changed:
        (team_policies) Changed member send invite policy for team
    :ivar team_log.EventTypeArg.member_space_limits_add_exception:
        (team_policies) Added members to member space limit exception list
    :ivar team_log.EventTypeArg.member_space_limits_change_caps_type_policy:
        (team_policies) Changed member space limit type for team
    :ivar team_log.EventTypeArg.member_space_limits_change_policy:
        (team_policies) Changed team default member space limit
    :ivar team_log.EventTypeArg.member_space_limits_remove_exception:
        (team_policies) Removed members from member space limit exception list
    :ivar team_log.EventTypeArg.member_suggestions_change_policy:
        (team_policies) Enabled/disabled option for team members to suggest
        people to add to team
    :ivar team_log.EventTypeArg.microsoft_office_addin_change_policy:
        (team_policies) Enabled/disabled Microsoft Office add-in
    :ivar team_log.EventTypeArg.network_control_change_policy: (team_policies)
        Enabled/disabled network control
    :ivar team_log.EventTypeArg.paper_change_deployment_policy: (team_policies)
        Changed whether Dropbox Paper, when enabled, is deployed to all members
        or to specific members
    :ivar team_log.EventTypeArg.paper_change_member_link_policy: (team_policies)
        Changed whether non-members can view Paper docs with link (deprecated,
        no longer logged)
    :ivar team_log.EventTypeArg.paper_change_member_policy: (team_policies)
        Changed whether members can share Paper docs outside team, and if docs
        are accessible only by team members or anyone by default
    :ivar team_log.EventTypeArg.paper_change_policy: (team_policies)
        Enabled/disabled Dropbox Paper for team
    :ivar team_log.EventTypeArg.paper_default_folder_policy_changed:
        (team_policies) Changed Paper Default Folder Policy setting for team
    :ivar team_log.EventTypeArg.paper_desktop_policy_changed: (team_policies)
        Enabled/disabled Paper Desktop for team
    :ivar team_log.EventTypeArg.paper_enabled_users_group_addition:
        (team_policies) Added users to Paper-enabled users list
    :ivar team_log.EventTypeArg.paper_enabled_users_group_removal:
        (team_policies) Removed users from Paper-enabled users list
    :ivar team_log.EventTypeArg.password_strength_requirements_change_policy:
        (team_policies) Changed team password strength requirements
    :ivar team_log.EventTypeArg.permanent_delete_change_policy: (team_policies)
        Enabled/disabled ability of team members to permanently delete content
    :ivar team_log.EventTypeArg.reseller_support_change_policy: (team_policies)
        Enabled/disabled reseller support
    :ivar team_log.EventTypeArg.rewind_policy_changed: (team_policies) Changed
        Rewind policy for team
    :ivar team_log.EventTypeArg.send_for_signature_policy_changed:
        (team_policies) Changed send for signature policy for team
    :ivar team_log.EventTypeArg.sharing_change_folder_join_policy:
        (team_policies) Changed whether team members can join shared folders
        owned outside team
    :ivar
        team_log.EventTypeArg.sharing_change_link_allow_change_expiration_policy:
        (team_policies) Changed the allow remove or change expiration policy for
        the links shared outside of the team
    :ivar team_log.EventTypeArg.sharing_change_link_default_expiration_policy:
        (team_policies) Changed the default expiration for the links shared
        outside of the team
    :ivar team_log.EventTypeArg.sharing_change_link_enforce_password_policy:
        (team_policies) Changed the password requirement for the links shared
        outside of the team
    :ivar team_log.EventTypeArg.sharing_change_link_policy: (team_policies)
        Changed whether members can share links outside team, and if links are
        accessible only by team members or anyone by default
    :ivar team_log.EventTypeArg.sharing_change_member_policy: (team_policies)
        Changed whether members can share files/folders outside team
    :ivar team_log.EventTypeArg.showcase_change_download_policy: (team_policies)
        Enabled/disabled downloading files from Dropbox Showcase for team
    :ivar team_log.EventTypeArg.showcase_change_enabled_policy: (team_policies)
        Enabled/disabled Dropbox Showcase for team
    :ivar team_log.EventTypeArg.showcase_change_external_sharing_policy:
        (team_policies) Enabled/disabled sharing Dropbox Showcase externally for
        team
    :ivar team_log.EventTypeArg.smarter_smart_sync_policy_changed:
        (team_policies) Changed automatic Smart Sync setting for team
    :ivar team_log.EventTypeArg.smart_sync_change_policy: (team_policies)
        Changed default Smart Sync setting for team members
    :ivar team_log.EventTypeArg.smart_sync_not_opt_out: (team_policies) Opted
        team into Smart Sync
    :ivar team_log.EventTypeArg.smart_sync_opt_out: (team_policies) Opted team
        out of Smart Sync
    :ivar team_log.EventTypeArg.sso_change_policy: (team_policies) Changed
        single sign-on setting for team
    :ivar team_log.EventTypeArg.team_branding_policy_changed: (team_policies)
        Changed team branding policy for team
    :ivar team_log.EventTypeArg.team_extensions_policy_changed: (team_policies)
        Changed App Integrations setting for team
    :ivar team_log.EventTypeArg.team_selective_sync_policy_changed:
        (team_policies) Enabled/disabled Team Selective Sync for team
    :ivar team_log.EventTypeArg.team_sharing_whitelist_subjects_changed:
        (team_policies) Edited the approved list for sharing externally
    :ivar team_log.EventTypeArg.tfa_add_exception: (team_policies) Added members
        to two factor authentication exception list
    :ivar team_log.EventTypeArg.tfa_change_policy: (team_policies) Changed
        two-step verification setting for team
    :ivar team_log.EventTypeArg.tfa_remove_exception: (team_policies) Removed
        members from two factor authentication exception list
    :ivar team_log.EventTypeArg.two_account_change_policy: (team_policies)
        Enabled/disabled option for members to link personal Dropbox account and
        team account to same computer
    :ivar team_log.EventTypeArg.viewer_info_policy_changed: (team_policies)
        Changed team policy for viewer info
    :ivar team_log.EventTypeArg.watermarking_policy_changed: (team_policies)
        Changed watermarking policy for team
    :ivar team_log.EventTypeArg.web_sessions_change_active_session_limit:
        (team_policies) Changed limit on active sessions per member
    :ivar team_log.EventTypeArg.web_sessions_change_fixed_length_policy:
        (team_policies) Changed how long members can stay signed in to
        Dropbox.com
    :ivar team_log.EventTypeArg.web_sessions_change_idle_length_policy:
        (team_policies) Changed how long team members can be idle while signed
        in to Dropbox.com
    :ivar team_log.EventTypeArg.data_residency_migration_request_successful:
        (team_profile) Requested data residency migration for team data
    :ivar team_log.EventTypeArg.data_residency_migration_request_unsuccessful:
        (team_profile) Request for data residency migration for team data has
        failed
    :ivar team_log.EventTypeArg.team_merge_from: (team_profile) Merged another
        team into this team
    :ivar team_log.EventTypeArg.team_merge_to: (team_profile) Merged this team
        into another team
    :ivar team_log.EventTypeArg.team_profile_add_background: (team_profile)
        Added team background to display on shared link headers
    :ivar team_log.EventTypeArg.team_profile_add_logo: (team_profile) Added team
        logo to display on shared link headers
    :ivar team_log.EventTypeArg.team_profile_change_background: (team_profile)
        Changed team background displayed on shared link headers
    :ivar team_log.EventTypeArg.team_profile_change_default_language:
        (team_profile) Changed default language for team
    :ivar team_log.EventTypeArg.team_profile_change_logo: (team_profile) Changed
        team logo displayed on shared link headers
    :ivar team_log.EventTypeArg.team_profile_change_name: (team_profile) Changed
        team name
    :ivar team_log.EventTypeArg.team_profile_remove_background: (team_profile)
        Removed team background displayed on shared link headers
    :ivar team_log.EventTypeArg.team_profile_remove_logo: (team_profile) Removed
        team logo displayed on shared link headers
    :ivar team_log.EventTypeArg.tfa_add_backup_phone: (tfa) Added backup phone
        for two-step verification
    :ivar team_log.EventTypeArg.tfa_add_security_key: (tfa) Added security key
        for two-step verification
    :ivar team_log.EventTypeArg.tfa_change_backup_phone: (tfa) Changed backup
        phone for two-step verification
    :ivar team_log.EventTypeArg.tfa_change_status: (tfa)
        Enabled/disabled/changed two-step verification setting
    :ivar team_log.EventTypeArg.tfa_remove_backup_phone: (tfa) Removed backup
        phone for two-step verification
    :ivar team_log.EventTypeArg.tfa_remove_security_key: (tfa) Removed security
        key for two-step verification
    :ivar team_log.EventTypeArg.tfa_reset: (tfa) Reset two-step verification for
        team member
    :ivar team_log.EventTypeArg.changed_enterprise_admin_role: (trusted_teams)
        Changed enterprise admin role
    :ivar team_log.EventTypeArg.changed_enterprise_connected_team_status:
        (trusted_teams) Changed enterprise-connected team status
    :ivar team_log.EventTypeArg.ended_enterprise_admin_session: (trusted_teams)
        Ended enterprise admin session
    :ivar team_log.EventTypeArg.ended_enterprise_admin_session_deprecated:
        (trusted_teams) Ended enterprise admin session (deprecated, replaced by
        'Ended enterprise admin session')
    :ivar team_log.EventTypeArg.enterprise_settings_locking: (trusted_teams)
        Changed who can update a setting
    :ivar team_log.EventTypeArg.guest_admin_change_status: (trusted_teams)
        Changed guest team admin status
    :ivar team_log.EventTypeArg.started_enterprise_admin_session:
        (trusted_teams) Started enterprise admin session
    :ivar team_log.EventTypeArg.team_merge_request_accepted: (trusted_teams)
        Accepted a team merge request
    :ivar
        team_log.EventTypeArg.team_merge_request_accepted_shown_to_primary_team:
        (trusted_teams) Accepted a team merge request (deprecated, replaced by
        'Accepted a team merge request')
    :ivar
        team_log.EventTypeArg.team_merge_request_accepted_shown_to_secondary_team:
        (trusted_teams) Accepted a team merge request (deprecated, replaced by
        'Accepted a team merge request')
    :ivar team_log.EventTypeArg.team_merge_request_auto_canceled:
        (trusted_teams) Automatically canceled team merge request
    :ivar team_log.EventTypeArg.team_merge_request_canceled: (trusted_teams)
        Canceled a team merge request
    :ivar
        team_log.EventTypeArg.team_merge_request_canceled_shown_to_primary_team:
        (trusted_teams) Canceled a team merge request (deprecated, replaced by
        'Canceled a team merge request')
    :ivar
        team_log.EventTypeArg.team_merge_request_canceled_shown_to_secondary_team:
        (trusted_teams) Canceled a team merge request (deprecated, replaced by
        'Canceled a team merge request')
    :ivar team_log.EventTypeArg.team_merge_request_expired: (trusted_teams) Team
        merge request expired
    :ivar
        team_log.EventTypeArg.team_merge_request_expired_shown_to_primary_team:
        (trusted_teams) Team merge request expired (deprecated, replaced by
        'Team merge request expired')
    :ivar
        team_log.EventTypeArg.team_merge_request_expired_shown_to_secondary_team:
        (trusted_teams) Team merge request expired (deprecated, replaced by
        'Team merge request expired')
    :ivar
        team_log.EventTypeArg.team_merge_request_rejected_shown_to_primary_team:
        (trusted_teams) Rejected a team merge request (deprecated, no longer
        logged)
    :ivar
        team_log.EventTypeArg.team_merge_request_rejected_shown_to_secondary_team:
        (trusted_teams) Rejected a team merge request (deprecated, no longer
        logged)
    :ivar team_log.EventTypeArg.team_merge_request_reminder: (trusted_teams)
        Sent a team merge request reminder
    :ivar
        team_log.EventTypeArg.team_merge_request_reminder_shown_to_primary_team:
        (trusted_teams) Sent a team merge request reminder (deprecated, replaced
        by 'Sent a team merge request reminder')
    :ivar
        team_log.EventTypeArg.team_merge_request_reminder_shown_to_secondary_team:
        (trusted_teams) Sent a team merge request reminder (deprecated, replaced
        by 'Sent a team merge request reminder')
    :ivar team_log.EventTypeArg.team_merge_request_revoked: (trusted_teams)
        Canceled the team merge
    :ivar team_log.EventTypeArg.team_merge_request_sent_shown_to_primary_team:
        (trusted_teams) Requested to merge their Dropbox team into yours
    :ivar team_log.EventTypeArg.team_merge_request_sent_shown_to_secondary_team:
        (trusted_teams) Requested to merge your team into another Dropbox team
    """
    _catch_all = ...
    admin_alerting_alert_state_changed = ...
    admin_alerting_changed_alert_config = ...
    admin_alerting_triggered_alert = ...
    ransomware_restore_process_completed = ...
    ransomware_restore_process_started = ...
    app_blocked_by_permissions = ...
    app_link_team = ...
    app_link_user = ...
    app_unlink_team = ...
    app_unlink_user = ...
    integration_connected = ...
    integration_disconnected = ...
    file_add_comment = ...
    file_change_comment_subscription = ...
    file_delete_comment = ...
    file_edit_comment = ...
    file_like_comment = ...
    file_resolve_comment = ...
    file_unlike_comment = ...
    file_unresolve_comment = ...
    governance_policy_add_folders = ...
    governance_policy_add_folder_failed = ...
    governance_policy_content_disposed = ...
    governance_policy_create = ...
    governance_policy_delete = ...
    governance_policy_edit_details = ...
    governance_policy_edit_duration = ...
    governance_policy_export_created = ...
    governance_policy_export_removed = ...
    governance_policy_remove_folders = ...
    governance_policy_report_created = ...
    governance_policy_zip_part_downloaded = ...
    legal_holds_activate_a_hold = ...
    legal_holds_add_members = ...
    legal_holds_change_hold_details = ...
    legal_holds_change_hold_name = ...
    legal_holds_export_a_hold = ...
    legal_holds_export_cancelled = ...
    legal_holds_export_downloaded = ...
    legal_holds_export_removed = ...
    legal_holds_release_a_hold = ...
    legal_holds_remove_members = ...
    legal_holds_report_a_hold = ...
    device_change_ip_desktop = ...
    device_change_ip_mobile = ...
    device_change_ip_web = ...
    device_delete_on_unlink_fail = ...
    device_delete_on_unlink_success = ...
    device_link_fail = ...
    device_link_success = ...
    device_management_disabled = ...
    device_management_enabled = ...
    device_sync_backup_status_changed = ...
    device_unlink = ...
    dropbox_passwords_exported = ...
    dropbox_passwords_new_device_enrolled = ...
    emm_refresh_auth_token = ...
    external_drive_backup_eligibility_status_checked = ...
    external_drive_backup_status_changed = ...
    account_capture_change_availability = ...
    account_capture_migrate_account = ...
    account_capture_notification_emails_sent = ...
    account_capture_relinquish_account = ...
    disabled_domain_invites = ...
    domain_invites_approve_request_to_join_team = ...
    domain_invites_decline_request_to_join_team = ...
    domain_invites_email_existing_users = ...
    domain_invites_request_to_join_team = ...
    domain_invites_set_invite_new_user_pref_to_no = ...
    domain_invites_set_invite_new_user_pref_to_yes = ...
    domain_verification_add_domain_fail = ...
    domain_verification_add_domain_success = ...
    domain_verification_remove_domain = ...
    enabled_domain_invites = ...
    team_encryption_key_cancel_key_deletion = ...
    team_encryption_key_create_key = ...
    team_encryption_key_delete_key = ...
    team_encryption_key_disable_key = ...
    team_encryption_key_enable_key = ...
    team_encryption_key_rotate_key = ...
    team_encryption_key_schedule_key_deletion = ...
    apply_naming_convention = ...
    create_folder = ...
    file_add = ...
    file_add_from_automation = ...
    file_copy = ...
    file_delete = ...
    file_download = ...
    file_edit = ...
    file_get_copy_reference = ...
    file_locking_lock_status_changed = ...
    file_move = ...
    file_permanently_delete = ...
    file_preview = ...
    file_rename = ...
    file_restore = ...
    file_revert = ...
    file_rollback_changes = ...
    file_save_copy_reference = ...
    folder_overview_description_changed = ...
    folder_overview_item_pinned = ...
    folder_overview_item_unpinned = ...
    object_label_added = ...
    object_label_removed = ...
    object_label_updated_value = ...
    organize_folder_with_tidy = ...
    replay_file_delete = ...
    rewind_folder = ...
    undo_naming_convention = ...
    undo_organize_folder_with_tidy = ...
    user_tags_added = ...
    user_tags_removed = ...
    email_ingest_receive_file = ...
    file_request_change = ...
    file_request_close = ...
    file_request_create = ...
    file_request_delete = ...
    file_request_receive_file = ...
    group_add_external_id = ...
    group_add_member = ...
    group_change_external_id = ...
    group_change_management_type = ...
    group_change_member_role = ...
    group_create = ...
    group_delete = ...
    group_description_updated = ...
    group_join_policy_updated = ...
    group_moved = ...
    group_remove_external_id = ...
    group_remove_member = ...
    group_rename = ...
    account_lock_or_unlocked = ...
    emm_error = ...
    guest_admin_signed_in_via_trusted_teams = ...
    guest_admin_signed_out_via_trusted_teams = ...
    login_fail = ...
    login_success = ...
    logout = ...
    reseller_support_session_end = ...
    reseller_support_session_start = ...
    sign_in_as_session_end = ...
    sign_in_as_session_start = ...
    sso_error = ...
    backup_admin_invitation_sent = ...
    backup_invitation_opened = ...
    create_team_invite_link = ...
    delete_team_invite_link = ...
    member_add_external_id = ...
    member_add_name = ...
    member_change_admin_role = ...
    member_change_email = ...
    member_change_external_id = ...
    member_change_membership_type = ...
    member_change_name = ...
    member_change_reseller_role = ...
    member_change_status = ...
    member_delete_manual_contacts = ...
    member_delete_profile_photo = ...
    member_permanently_delete_account_contents = ...
    member_remove_external_id = ...
    member_set_profile_photo = ...
    member_space_limits_add_custom_quota = ...
    member_space_limits_change_custom_quota = ...
    member_space_limits_change_status = ...
    member_space_limits_remove_custom_quota = ...
    member_suggest = ...
    member_transfer_account_contents = ...
    pending_secondary_email_added = ...
    secondary_email_deleted = ...
    secondary_email_verified = ...
    secondary_mails_policy_changed = ...
    binder_add_page = ...
    binder_add_section = ...
    binder_remove_page = ...
    binder_remove_section = ...
    binder_rename_page = ...
    binder_rename_section = ...
    binder_reorder_page = ...
    binder_reorder_section = ...
    paper_content_add_member = ...
    paper_content_add_to_folder = ...
    paper_content_archive = ...
    paper_content_create = ...
    paper_content_permanently_delete = ...
    paper_content_remove_from_folder = ...
    paper_content_remove_member = ...
    paper_content_rename = ...
    paper_content_restore = ...
    paper_doc_add_comment = ...
    paper_doc_change_member_role = ...
    paper_doc_change_sharing_policy = ...
    paper_doc_change_subscription = ...
    paper_doc_deleted = ...
    paper_doc_delete_comment = ...
    paper_doc_download = ...
    paper_doc_edit = ...
    paper_doc_edit_comment = ...
    paper_doc_followed = ...
    paper_doc_mention = ...
    paper_doc_ownership_changed = ...
    paper_doc_request_access = ...
    paper_doc_resolve_comment = ...
    paper_doc_revert = ...
    paper_doc_slack_share = ...
    paper_doc_team_invite = ...
    paper_doc_trashed = ...
    paper_doc_unresolve_comment = ...
    paper_doc_untrashed = ...
    paper_doc_view = ...
    paper_external_view_allow = ...
    paper_external_view_default_team = ...
    paper_external_view_forbid = ...
    paper_folder_change_subscription = ...
    paper_folder_deleted = ...
    paper_folder_followed = ...
    paper_folder_team_invite = ...
    paper_published_link_change_permission = ...
    paper_published_link_create = ...
    paper_published_link_disabled = ...
    paper_published_link_view = ...
    password_change = ...
    password_reset = ...
    password_reset_all = ...
    classification_create_report = ...
    classification_create_report_fail = ...
    emm_create_exceptions_report = ...
    emm_create_usage_report = ...
    export_members_report = ...
    export_members_report_fail = ...
    external_sharing_create_report = ...
    external_sharing_report_failed = ...
    no_expiration_link_gen_create_report = ...
    no_expiration_link_gen_report_failed = ...
    no_password_link_gen_create_report = ...
    no_password_link_gen_report_failed = ...
    no_password_link_view_create_report = ...
    no_password_link_view_report_failed = ...
    outdated_link_view_create_report = ...
    outdated_link_view_report_failed = ...
    paper_admin_export_start = ...
    ransomware_alert_create_report = ...
    ransomware_alert_create_report_failed = ...
    smart_sync_create_admin_privilege_report = ...
    team_activity_create_report = ...
    team_activity_create_report_fail = ...
    collection_share = ...
    file_transfers_file_add = ...
    file_transfers_transfer_delete = ...
    file_transfers_transfer_download = ...
    file_transfers_transfer_send = ...
    file_transfers_transfer_view = ...
    note_acl_invite_only = ...
    note_acl_link = ...
    note_acl_team_link = ...
    note_shared = ...
    note_share_receive = ...
    open_note_shared = ...
    replay_file_shared_link_created = ...
    replay_file_shared_link_modified = ...
    replay_project_team_add = ...
    replay_project_team_delete = ...
    sf_add_group = ...
    sf_allow_non_members_to_view_shared_links = ...
    sf_external_invite_warn = ...
    sf_fb_invite = ...
    sf_fb_invite_change_role = ...
    sf_fb_uninvite = ...
    sf_invite_group = ...
    sf_team_grant_access = ...
    sf_team_invite = ...
    sf_team_invite_change_role = ...
    sf_team_join = ...
    sf_team_join_from_oob_link = ...
    sf_team_uninvite = ...
    shared_content_add_invitees = ...
    shared_content_add_link_expiry = ...
    shared_content_add_link_password = ...
    shared_content_add_member = ...
    shared_content_change_downloads_policy = ...
    shared_content_change_invitee_role = ...
    shared_content_change_link_audience = ...
    shared_content_change_link_expiry = ...
    shared_content_change_link_password = ...
    shared_content_change_member_role = ...
    shared_content_change_viewer_info_policy = ...
    shared_content_claim_invitation = ...
    shared_content_copy = ...
    shared_content_download = ...
    shared_content_relinquish_membership = ...
    shared_content_remove_invitees = ...
    shared_content_remove_link_expiry = ...
    shared_content_remove_link_password = ...
    shared_content_remove_member = ...
    shared_content_request_access = ...
    shared_content_restore_invitees = ...
    shared_content_restore_member = ...
    shared_content_unshare = ...
    shared_content_view = ...
    shared_folder_change_link_policy = ...
    shared_folder_change_members_inheritance_policy = ...
    shared_folder_change_members_management_policy = ...
    shared_folder_change_members_policy = ...
    shared_folder_create = ...
    shared_folder_decline_invitation = ...
    shared_folder_mount = ...
    shared_folder_nest = ...
    shared_folder_transfer_ownership = ...
    shared_folder_unmount = ...
    shared_link_add_expiry = ...
    shared_link_change_expiry = ...
    shared_link_change_visibility = ...
    shared_link_copy = ...
    shared_link_create = ...
    shared_link_disable = ...
    shared_link_download = ...
    shared_link_remove_expiry = ...
    shared_link_settings_add_expiration = ...
    shared_link_settings_add_password = ...
    shared_link_settings_allow_download_disabled = ...
    shared_link_settings_allow_download_enabled = ...
    shared_link_settings_change_audience = ...
    shared_link_settings_change_expiration = ...
    shared_link_settings_change_password = ...
    shared_link_settings_remove_expiration = ...
    shared_link_settings_remove_password = ...
    shared_link_share = ...
    shared_link_view = ...
    shared_note_opened = ...
    shmodel_disable_downloads = ...
    shmodel_enable_downloads = ...
    shmodel_group_share = ...
    showcase_access_granted = ...
    showcase_add_member = ...
    showcase_archived = ...
    showcase_created = ...
    showcase_delete_comment = ...
    showcase_edited = ...
    showcase_edit_comment = ...
    showcase_file_added = ...
    showcase_file_download = ...
    showcase_file_removed = ...
    showcase_file_view = ...
    showcase_permanently_deleted = ...
    showcase_post_comment = ...
    showcase_remove_member = ...
    showcase_renamed = ...
    showcase_request_access = ...
    showcase_resolve_comment = ...
    showcase_restored = ...
    showcase_trashed = ...
    showcase_trashed_deprecated = ...
    showcase_unresolve_comment = ...
    showcase_untrashed = ...
    showcase_untrashed_deprecated = ...
    showcase_view = ...
    sso_add_cert = ...
    sso_add_login_url = ...
    sso_add_logout_url = ...
    sso_change_cert = ...
    sso_change_login_url = ...
    sso_change_logout_url = ...
    sso_change_saml_identity_mode = ...
    sso_remove_cert = ...
    sso_remove_login_url = ...
    sso_remove_logout_url = ...
    team_folder_change_status = ...
    team_folder_create = ...
    team_folder_downgrade = ...
    team_folder_permanently_delete = ...
    team_folder_rename = ...
    team_selective_sync_settings_changed = ...
    account_capture_change_policy = ...
    admin_email_reminders_changed = ...
    allow_download_disabled = ...
    allow_download_enabled = ...
    app_permissions_changed = ...
    camera_uploads_policy_changed = ...
    capture_transcript_policy_changed = ...
    classification_change_policy = ...
    computer_backup_policy_changed = ...
    content_administration_policy_changed = ...
    data_placement_restriction_change_policy = ...
    data_placement_restriction_satisfy_policy = ...
    device_approvals_add_exception = ...
    device_approvals_change_desktop_policy = ...
    device_approvals_change_mobile_policy = ...
    device_approvals_change_overage_action = ...
    device_approvals_change_unlink_action = ...
    device_approvals_remove_exception = ...
    directory_restrictions_add_members = ...
    directory_restrictions_remove_members = ...
    dropbox_passwords_policy_changed = ...
    email_ingest_policy_changed = ...
    emm_add_exception = ...
    emm_change_policy = ...
    emm_remove_exception = ...
    extended_version_history_change_policy = ...
    external_drive_backup_policy_changed = ...
    file_comments_change_policy = ...
    file_locking_policy_changed = ...
    file_provider_migration_policy_changed = ...
    file_requests_change_policy = ...
    file_requests_emails_enabled = ...
    file_requests_emails_restricted_to_team_only = ...
    file_transfers_policy_changed = ...
    folder_link_restriction_policy_changed = ...
    google_sso_change_policy = ...
    group_user_management_change_policy = ...
    integration_policy_changed = ...
    invite_acceptance_email_policy_changed = ...
    member_requests_change_policy = ...
    member_send_invite_policy_changed = ...
    member_space_limits_add_exception = ...
    member_space_limits_change_caps_type_policy = ...
    member_space_limits_change_policy = ...
    member_space_limits_remove_exception = ...
    member_suggestions_change_policy = ...
    microsoft_office_addin_change_policy = ...
    network_control_change_policy = ...
    paper_change_deployment_policy = ...
    paper_change_member_link_policy = ...
    paper_change_member_policy = ...
    paper_change_policy = ...
    paper_default_folder_policy_changed = ...
    paper_desktop_policy_changed = ...
    paper_enabled_users_group_addition = ...
    paper_enabled_users_group_removal = ...
    password_strength_requirements_change_policy = ...
    permanent_delete_change_policy = ...
    reseller_support_change_policy = ...
    rewind_policy_changed = ...
    send_for_signature_policy_changed = ...
    sharing_change_folder_join_policy = ...
    sharing_change_link_allow_change_expiration_policy = ...
    sharing_change_link_default_expiration_policy = ...
    sharing_change_link_enforce_password_policy = ...
    sharing_change_link_policy = ...
    sharing_change_member_policy = ...
    showcase_change_download_policy = ...
    showcase_change_enabled_policy = ...
    showcase_change_external_sharing_policy = ...
    smarter_smart_sync_policy_changed = ...
    smart_sync_change_policy = ...
    smart_sync_not_opt_out = ...
    smart_sync_opt_out = ...
    sso_change_policy = ...
    team_branding_policy_changed = ...
    team_extensions_policy_changed = ...
    team_selective_sync_policy_changed = ...
    team_sharing_whitelist_subjects_changed = ...
    tfa_add_exception = ...
    tfa_change_policy = ...
    tfa_remove_exception = ...
    two_account_change_policy = ...
    viewer_info_policy_changed = ...
    watermarking_policy_changed = ...
    web_sessions_change_active_session_limit = ...
    web_sessions_change_fixed_length_policy = ...
    web_sessions_change_idle_length_policy = ...
    data_residency_migration_request_successful = ...
    data_residency_migration_request_unsuccessful = ...
    team_merge_from = ...
    team_merge_to = ...
    team_profile_add_background = ...
    team_profile_add_logo = ...
    team_profile_change_background = ...
    team_profile_change_default_language = ...
    team_profile_change_logo = ...
    team_profile_change_name = ...
    team_profile_remove_background = ...
    team_profile_remove_logo = ...
    tfa_add_backup_phone = ...
    tfa_add_security_key = ...
    tfa_change_backup_phone = ...
    tfa_change_status = ...
    tfa_remove_backup_phone = ...
    tfa_remove_security_key = ...
    tfa_reset = ...
    changed_enterprise_admin_role = ...
    changed_enterprise_connected_team_status = ...
    ended_enterprise_admin_session = ...
    ended_enterprise_admin_session_deprecated = ...
    enterprise_settings_locking = ...
    guest_admin_change_status = ...
    started_enterprise_admin_session = ...
    team_merge_request_accepted = ...
    team_merge_request_accepted_shown_to_primary_team = ...
    team_merge_request_accepted_shown_to_secondary_team = ...
    team_merge_request_auto_canceled = ...
    team_merge_request_canceled = ...
    team_merge_request_canceled_shown_to_primary_team = ...
    team_merge_request_canceled_shown_to_secondary_team = ...
    team_merge_request_expired = ...
    team_merge_request_expired_shown_to_primary_team = ...
    team_merge_request_expired_shown_to_secondary_team = ...
    team_merge_request_rejected_shown_to_primary_team = ...
    team_merge_request_rejected_shown_to_secondary_team = ...
    team_merge_request_reminder = ...
    team_merge_request_reminder_shown_to_primary_team = ...
    team_merge_request_reminder_shown_to_secondary_team = ...
    team_merge_request_revoked = ...
    team_merge_request_sent_shown_to_primary_team = ...
    team_merge_request_sent_shown_to_secondary_team = ...
    other = ...
    def is_admin_alerting_alert_state_changed(self):
        """
        Check if the union tag is ``admin_alerting_alert_state_changed``.

        :rtype: bool
        """
        ...
    
    def is_admin_alerting_changed_alert_config(self):
        """
        Check if the union tag is ``admin_alerting_changed_alert_config``.

        :rtype: bool
        """
        ...
    
    def is_admin_alerting_triggered_alert(self):
        """
        Check if the union tag is ``admin_alerting_triggered_alert``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_restore_process_completed(self):
        """
        Check if the union tag is ``ransomware_restore_process_completed``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_restore_process_started(self):
        """
        Check if the union tag is ``ransomware_restore_process_started``.

        :rtype: bool
        """
        ...
    
    def is_app_blocked_by_permissions(self):
        """
        Check if the union tag is ``app_blocked_by_permissions``.

        :rtype: bool
        """
        ...
    
    def is_app_link_team(self):
        """
        Check if the union tag is ``app_link_team``.

        :rtype: bool
        """
        ...
    
    def is_app_link_user(self):
        """
        Check if the union tag is ``app_link_user``.

        :rtype: bool
        """
        ...
    
    def is_app_unlink_team(self):
        """
        Check if the union tag is ``app_unlink_team``.

        :rtype: bool
        """
        ...
    
    def is_app_unlink_user(self):
        """
        Check if the union tag is ``app_unlink_user``.

        :rtype: bool
        """
        ...
    
    def is_integration_connected(self):
        """
        Check if the union tag is ``integration_connected``.

        :rtype: bool
        """
        ...
    
    def is_integration_disconnected(self):
        """
        Check if the union tag is ``integration_disconnected``.

        :rtype: bool
        """
        ...
    
    def is_file_add_comment(self):
        """
        Check if the union tag is ``file_add_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_change_comment_subscription(self):
        """
        Check if the union tag is ``file_change_comment_subscription``.

        :rtype: bool
        """
        ...
    
    def is_file_delete_comment(self):
        """
        Check if the union tag is ``file_delete_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_edit_comment(self):
        """
        Check if the union tag is ``file_edit_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_like_comment(self):
        """
        Check if the union tag is ``file_like_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_resolve_comment(self):
        """
        Check if the union tag is ``file_resolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_unlike_comment(self):
        """
        Check if the union tag is ``file_unlike_comment``.

        :rtype: bool
        """
        ...
    
    def is_file_unresolve_comment(self):
        """
        Check if the union tag is ``file_unresolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_add_folders(self):
        """
        Check if the union tag is ``governance_policy_add_folders``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_add_folder_failed(self):
        """
        Check if the union tag is ``governance_policy_add_folder_failed``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_content_disposed(self):
        """
        Check if the union tag is ``governance_policy_content_disposed``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_create(self):
        """
        Check if the union tag is ``governance_policy_create``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_delete(self):
        """
        Check if the union tag is ``governance_policy_delete``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_edit_details(self):
        """
        Check if the union tag is ``governance_policy_edit_details``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_edit_duration(self):
        """
        Check if the union tag is ``governance_policy_edit_duration``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_export_created(self):
        """
        Check if the union tag is ``governance_policy_export_created``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_export_removed(self):
        """
        Check if the union tag is ``governance_policy_export_removed``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_remove_folders(self):
        """
        Check if the union tag is ``governance_policy_remove_folders``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_report_created(self):
        """
        Check if the union tag is ``governance_policy_report_created``.

        :rtype: bool
        """
        ...
    
    def is_governance_policy_zip_part_downloaded(self):
        """
        Check if the union tag is ``governance_policy_zip_part_downloaded``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_activate_a_hold(self):
        """
        Check if the union tag is ``legal_holds_activate_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_add_members(self):
        """
        Check if the union tag is ``legal_holds_add_members``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_change_hold_details(self):
        """
        Check if the union tag is ``legal_holds_change_hold_details``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_change_hold_name(self):
        """
        Check if the union tag is ``legal_holds_change_hold_name``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_a_hold(self):
        """
        Check if the union tag is ``legal_holds_export_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_cancelled(self):
        """
        Check if the union tag is ``legal_holds_export_cancelled``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_downloaded(self):
        """
        Check if the union tag is ``legal_holds_export_downloaded``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_export_removed(self):
        """
        Check if the union tag is ``legal_holds_export_removed``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_release_a_hold(self):
        """
        Check if the union tag is ``legal_holds_release_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_remove_members(self):
        """
        Check if the union tag is ``legal_holds_remove_members``.

        :rtype: bool
        """
        ...
    
    def is_legal_holds_report_a_hold(self):
        """
        Check if the union tag is ``legal_holds_report_a_hold``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_desktop(self):
        """
        Check if the union tag is ``device_change_ip_desktop``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_mobile(self):
        """
        Check if the union tag is ``device_change_ip_mobile``.

        :rtype: bool
        """
        ...
    
    def is_device_change_ip_web(self):
        """
        Check if the union tag is ``device_change_ip_web``.

        :rtype: bool
        """
        ...
    
    def is_device_delete_on_unlink_fail(self):
        """
        Check if the union tag is ``device_delete_on_unlink_fail``.

        :rtype: bool
        """
        ...
    
    def is_device_delete_on_unlink_success(self):
        """
        Check if the union tag is ``device_delete_on_unlink_success``.

        :rtype: bool
        """
        ...
    
    def is_device_link_fail(self):
        """
        Check if the union tag is ``device_link_fail``.

        :rtype: bool
        """
        ...
    
    def is_device_link_success(self):
        """
        Check if the union tag is ``device_link_success``.

        :rtype: bool
        """
        ...
    
    def is_device_management_disabled(self):
        """
        Check if the union tag is ``device_management_disabled``.

        :rtype: bool
        """
        ...
    
    def is_device_management_enabled(self):
        """
        Check if the union tag is ``device_management_enabled``.

        :rtype: bool
        """
        ...
    
    def is_device_sync_backup_status_changed(self):
        """
        Check if the union tag is ``device_sync_backup_status_changed``.

        :rtype: bool
        """
        ...
    
    def is_device_unlink(self):
        """
        Check if the union tag is ``device_unlink``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_exported(self):
        """
        Check if the union tag is ``dropbox_passwords_exported``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_new_device_enrolled(self):
        """
        Check if the union tag is ``dropbox_passwords_new_device_enrolled``.

        :rtype: bool
        """
        ...
    
    def is_emm_refresh_auth_token(self):
        """
        Check if the union tag is ``emm_refresh_auth_token``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_eligibility_status_checked(self):
        """
        Check if the union tag is ``external_drive_backup_eligibility_status_checked``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_status_changed(self):
        """
        Check if the union tag is ``external_drive_backup_status_changed``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_change_availability(self):
        """
        Check if the union tag is ``account_capture_change_availability``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_migrate_account(self):
        """
        Check if the union tag is ``account_capture_migrate_account``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_notification_emails_sent(self):
        """
        Check if the union tag is ``account_capture_notification_emails_sent``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_relinquish_account(self):
        """
        Check if the union tag is ``account_capture_relinquish_account``.

        :rtype: bool
        """
        ...
    
    def is_disabled_domain_invites(self):
        """
        Check if the union tag is ``disabled_domain_invites``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_approve_request_to_join_team(self):
        """
        Check if the union tag is ``domain_invites_approve_request_to_join_team``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_decline_request_to_join_team(self):
        """
        Check if the union tag is ``domain_invites_decline_request_to_join_team``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_email_existing_users(self):
        """
        Check if the union tag is ``domain_invites_email_existing_users``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_request_to_join_team(self):
        """
        Check if the union tag is ``domain_invites_request_to_join_team``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_set_invite_new_user_pref_to_no(self):
        """
        Check if the union tag is ``domain_invites_set_invite_new_user_pref_to_no``.

        :rtype: bool
        """
        ...
    
    def is_domain_invites_set_invite_new_user_pref_to_yes(self):
        """
        Check if the union tag is ``domain_invites_set_invite_new_user_pref_to_yes``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_add_domain_fail(self):
        """
        Check if the union tag is ``domain_verification_add_domain_fail``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_add_domain_success(self):
        """
        Check if the union tag is ``domain_verification_add_domain_success``.

        :rtype: bool
        """
        ...
    
    def is_domain_verification_remove_domain(self):
        """
        Check if the union tag is ``domain_verification_remove_domain``.

        :rtype: bool
        """
        ...
    
    def is_enabled_domain_invites(self):
        """
        Check if the union tag is ``enabled_domain_invites``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_cancel_key_deletion(self):
        """
        Check if the union tag is ``team_encryption_key_cancel_key_deletion``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_create_key(self):
        """
        Check if the union tag is ``team_encryption_key_create_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_delete_key(self):
        """
        Check if the union tag is ``team_encryption_key_delete_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_disable_key(self):
        """
        Check if the union tag is ``team_encryption_key_disable_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_enable_key(self):
        """
        Check if the union tag is ``team_encryption_key_enable_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_rotate_key(self):
        """
        Check if the union tag is ``team_encryption_key_rotate_key``.

        :rtype: bool
        """
        ...
    
    def is_team_encryption_key_schedule_key_deletion(self):
        """
        Check if the union tag is ``team_encryption_key_schedule_key_deletion``.

        :rtype: bool
        """
        ...
    
    def is_apply_naming_convention(self):
        """
        Check if the union tag is ``apply_naming_convention``.

        :rtype: bool
        """
        ...
    
    def is_create_folder(self):
        """
        Check if the union tag is ``create_folder``.

        :rtype: bool
        """
        ...
    
    def is_file_add(self):
        """
        Check if the union tag is ``file_add``.

        :rtype: bool
        """
        ...
    
    def is_file_add_from_automation(self):
        """
        Check if the union tag is ``file_add_from_automation``.

        :rtype: bool
        """
        ...
    
    def is_file_copy(self):
        """
        Check if the union tag is ``file_copy``.

        :rtype: bool
        """
        ...
    
    def is_file_delete(self):
        """
        Check if the union tag is ``file_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_download(self):
        """
        Check if the union tag is ``file_download``.

        :rtype: bool
        """
        ...
    
    def is_file_edit(self):
        """
        Check if the union tag is ``file_edit``.

        :rtype: bool
        """
        ...
    
    def is_file_get_copy_reference(self):
        """
        Check if the union tag is ``file_get_copy_reference``.

        :rtype: bool
        """
        ...
    
    def is_file_locking_lock_status_changed(self):
        """
        Check if the union tag is ``file_locking_lock_status_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_move(self):
        """
        Check if the union tag is ``file_move``.

        :rtype: bool
        """
        ...
    
    def is_file_permanently_delete(self):
        """
        Check if the union tag is ``file_permanently_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_preview(self):
        """
        Check if the union tag is ``file_preview``.

        :rtype: bool
        """
        ...
    
    def is_file_rename(self):
        """
        Check if the union tag is ``file_rename``.

        :rtype: bool
        """
        ...
    
    def is_file_restore(self):
        """
        Check if the union tag is ``file_restore``.

        :rtype: bool
        """
        ...
    
    def is_file_revert(self):
        """
        Check if the union tag is ``file_revert``.

        :rtype: bool
        """
        ...
    
    def is_file_rollback_changes(self):
        """
        Check if the union tag is ``file_rollback_changes``.

        :rtype: bool
        """
        ...
    
    def is_file_save_copy_reference(self):
        """
        Check if the union tag is ``file_save_copy_reference``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_description_changed(self):
        """
        Check if the union tag is ``folder_overview_description_changed``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_item_pinned(self):
        """
        Check if the union tag is ``folder_overview_item_pinned``.

        :rtype: bool
        """
        ...
    
    def is_folder_overview_item_unpinned(self):
        """
        Check if the union tag is ``folder_overview_item_unpinned``.

        :rtype: bool
        """
        ...
    
    def is_object_label_added(self):
        """
        Check if the union tag is ``object_label_added``.

        :rtype: bool
        """
        ...
    
    def is_object_label_removed(self):
        """
        Check if the union tag is ``object_label_removed``.

        :rtype: bool
        """
        ...
    
    def is_object_label_updated_value(self):
        """
        Check if the union tag is ``object_label_updated_value``.

        :rtype: bool
        """
        ...
    
    def is_organize_folder_with_tidy(self):
        """
        Check if the union tag is ``organize_folder_with_tidy``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_delete(self):
        """
        Check if the union tag is ``replay_file_delete``.

        :rtype: bool
        """
        ...
    
    def is_rewind_folder(self):
        """
        Check if the union tag is ``rewind_folder``.

        :rtype: bool
        """
        ...
    
    def is_undo_naming_convention(self):
        """
        Check if the union tag is ``undo_naming_convention``.

        :rtype: bool
        """
        ...
    
    def is_undo_organize_folder_with_tidy(self):
        """
        Check if the union tag is ``undo_organize_folder_with_tidy``.

        :rtype: bool
        """
        ...
    
    def is_user_tags_added(self):
        """
        Check if the union tag is ``user_tags_added``.

        :rtype: bool
        """
        ...
    
    def is_user_tags_removed(self):
        """
        Check if the union tag is ``user_tags_removed``.

        :rtype: bool
        """
        ...
    
    def is_email_ingest_receive_file(self):
        """
        Check if the union tag is ``email_ingest_receive_file``.

        :rtype: bool
        """
        ...
    
    def is_file_request_change(self):
        """
        Check if the union tag is ``file_request_change``.

        :rtype: bool
        """
        ...
    
    def is_file_request_close(self):
        """
        Check if the union tag is ``file_request_close``.

        :rtype: bool
        """
        ...
    
    def is_file_request_create(self):
        """
        Check if the union tag is ``file_request_create``.

        :rtype: bool
        """
        ...
    
    def is_file_request_delete(self):
        """
        Check if the union tag is ``file_request_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_request_receive_file(self):
        """
        Check if the union tag is ``file_request_receive_file``.

        :rtype: bool
        """
        ...
    
    def is_group_add_external_id(self):
        """
        Check if the union tag is ``group_add_external_id``.

        :rtype: bool
        """
        ...
    
    def is_group_add_member(self):
        """
        Check if the union tag is ``group_add_member``.

        :rtype: bool
        """
        ...
    
    def is_group_change_external_id(self):
        """
        Check if the union tag is ``group_change_external_id``.

        :rtype: bool
        """
        ...
    
    def is_group_change_management_type(self):
        """
        Check if the union tag is ``group_change_management_type``.

        :rtype: bool
        """
        ...
    
    def is_group_change_member_role(self):
        """
        Check if the union tag is ``group_change_member_role``.

        :rtype: bool
        """
        ...
    
    def is_group_create(self):
        """
        Check if the union tag is ``group_create``.

        :rtype: bool
        """
        ...
    
    def is_group_delete(self):
        """
        Check if the union tag is ``group_delete``.

        :rtype: bool
        """
        ...
    
    def is_group_description_updated(self):
        """
        Check if the union tag is ``group_description_updated``.

        :rtype: bool
        """
        ...
    
    def is_group_join_policy_updated(self):
        """
        Check if the union tag is ``group_join_policy_updated``.

        :rtype: bool
        """
        ...
    
    def is_group_moved(self):
        """
        Check if the union tag is ``group_moved``.

        :rtype: bool
        """
        ...
    
    def is_group_remove_external_id(self):
        """
        Check if the union tag is ``group_remove_external_id``.

        :rtype: bool
        """
        ...
    
    def is_group_remove_member(self):
        """
        Check if the union tag is ``group_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_group_rename(self):
        """
        Check if the union tag is ``group_rename``.

        :rtype: bool
        """
        ...
    
    def is_account_lock_or_unlocked(self):
        """
        Check if the union tag is ``account_lock_or_unlocked``.

        :rtype: bool
        """
        ...
    
    def is_emm_error(self):
        """
        Check if the union tag is ``emm_error``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_signed_in_via_trusted_teams(self):
        """
        Check if the union tag is ``guest_admin_signed_in_via_trusted_teams``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_signed_out_via_trusted_teams(self):
        """
        Check if the union tag is ``guest_admin_signed_out_via_trusted_teams``.

        :rtype: bool
        """
        ...
    
    def is_login_fail(self):
        """
        Check if the union tag is ``login_fail``.

        :rtype: bool
        """
        ...
    
    def is_login_success(self):
        """
        Check if the union tag is ``login_success``.

        :rtype: bool
        """
        ...
    
    def is_logout(self):
        """
        Check if the union tag is ``logout``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_session_end(self):
        """
        Check if the union tag is ``reseller_support_session_end``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_session_start(self):
        """
        Check if the union tag is ``reseller_support_session_start``.

        :rtype: bool
        """
        ...
    
    def is_sign_in_as_session_end(self):
        """
        Check if the union tag is ``sign_in_as_session_end``.

        :rtype: bool
        """
        ...
    
    def is_sign_in_as_session_start(self):
        """
        Check if the union tag is ``sign_in_as_session_start``.

        :rtype: bool
        """
        ...
    
    def is_sso_error(self):
        """
        Check if the union tag is ``sso_error``.

        :rtype: bool
        """
        ...
    
    def is_backup_admin_invitation_sent(self):
        """
        Check if the union tag is ``backup_admin_invitation_sent``.

        :rtype: bool
        """
        ...
    
    def is_backup_invitation_opened(self):
        """
        Check if the union tag is ``backup_invitation_opened``.

        :rtype: bool
        """
        ...
    
    def is_create_team_invite_link(self):
        """
        Check if the union tag is ``create_team_invite_link``.

        :rtype: bool
        """
        ...
    
    def is_delete_team_invite_link(self):
        """
        Check if the union tag is ``delete_team_invite_link``.

        :rtype: bool
        """
        ...
    
    def is_member_add_external_id(self):
        """
        Check if the union tag is ``member_add_external_id``.

        :rtype: bool
        """
        ...
    
    def is_member_add_name(self):
        """
        Check if the union tag is ``member_add_name``.

        :rtype: bool
        """
        ...
    
    def is_member_change_admin_role(self):
        """
        Check if the union tag is ``member_change_admin_role``.

        :rtype: bool
        """
        ...
    
    def is_member_change_email(self):
        """
        Check if the union tag is ``member_change_email``.

        :rtype: bool
        """
        ...
    
    def is_member_change_external_id(self):
        """
        Check if the union tag is ``member_change_external_id``.

        :rtype: bool
        """
        ...
    
    def is_member_change_membership_type(self):
        """
        Check if the union tag is ``member_change_membership_type``.

        :rtype: bool
        """
        ...
    
    def is_member_change_name(self):
        """
        Check if the union tag is ``member_change_name``.

        :rtype: bool
        """
        ...
    
    def is_member_change_reseller_role(self):
        """
        Check if the union tag is ``member_change_reseller_role``.

        :rtype: bool
        """
        ...
    
    def is_member_change_status(self):
        """
        Check if the union tag is ``member_change_status``.

        :rtype: bool
        """
        ...
    
    def is_member_delete_manual_contacts(self):
        """
        Check if the union tag is ``member_delete_manual_contacts``.

        :rtype: bool
        """
        ...
    
    def is_member_delete_profile_photo(self):
        """
        Check if the union tag is ``member_delete_profile_photo``.

        :rtype: bool
        """
        ...
    
    def is_member_permanently_delete_account_contents(self):
        """
        Check if the union tag is ``member_permanently_delete_account_contents``.

        :rtype: bool
        """
        ...
    
    def is_member_remove_external_id(self):
        """
        Check if the union tag is ``member_remove_external_id``.

        :rtype: bool
        """
        ...
    
    def is_member_set_profile_photo(self):
        """
        Check if the union tag is ``member_set_profile_photo``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_add_custom_quota(self):
        """
        Check if the union tag is ``member_space_limits_add_custom_quota``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_custom_quota(self):
        """
        Check if the union tag is ``member_space_limits_change_custom_quota``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_status(self):
        """
        Check if the union tag is ``member_space_limits_change_status``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_remove_custom_quota(self):
        """
        Check if the union tag is ``member_space_limits_remove_custom_quota``.

        :rtype: bool
        """
        ...
    
    def is_member_suggest(self):
        """
        Check if the union tag is ``member_suggest``.

        :rtype: bool
        """
        ...
    
    def is_member_transfer_account_contents(self):
        """
        Check if the union tag is ``member_transfer_account_contents``.

        :rtype: bool
        """
        ...
    
    def is_pending_secondary_email_added(self):
        """
        Check if the union tag is ``pending_secondary_email_added``.

        :rtype: bool
        """
        ...
    
    def is_secondary_email_deleted(self):
        """
        Check if the union tag is ``secondary_email_deleted``.

        :rtype: bool
        """
        ...
    
    def is_secondary_email_verified(self):
        """
        Check if the union tag is ``secondary_email_verified``.

        :rtype: bool
        """
        ...
    
    def is_secondary_mails_policy_changed(self):
        """
        Check if the union tag is ``secondary_mails_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_binder_add_page(self):
        """
        Check if the union tag is ``binder_add_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_add_section(self):
        """
        Check if the union tag is ``binder_add_section``.

        :rtype: bool
        """
        ...
    
    def is_binder_remove_page(self):
        """
        Check if the union tag is ``binder_remove_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_remove_section(self):
        """
        Check if the union tag is ``binder_remove_section``.

        :rtype: bool
        """
        ...
    
    def is_binder_rename_page(self):
        """
        Check if the union tag is ``binder_rename_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_rename_section(self):
        """
        Check if the union tag is ``binder_rename_section``.

        :rtype: bool
        """
        ...
    
    def is_binder_reorder_page(self):
        """
        Check if the union tag is ``binder_reorder_page``.

        :rtype: bool
        """
        ...
    
    def is_binder_reorder_section(self):
        """
        Check if the union tag is ``binder_reorder_section``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_add_member(self):
        """
        Check if the union tag is ``paper_content_add_member``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_add_to_folder(self):
        """
        Check if the union tag is ``paper_content_add_to_folder``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_archive(self):
        """
        Check if the union tag is ``paper_content_archive``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_create(self):
        """
        Check if the union tag is ``paper_content_create``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_permanently_delete(self):
        """
        Check if the union tag is ``paper_content_permanently_delete``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_remove_from_folder(self):
        """
        Check if the union tag is ``paper_content_remove_from_folder``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_remove_member(self):
        """
        Check if the union tag is ``paper_content_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_rename(self):
        """
        Check if the union tag is ``paper_content_rename``.

        :rtype: bool
        """
        ...
    
    def is_paper_content_restore(self):
        """
        Check if the union tag is ``paper_content_restore``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_add_comment(self):
        """
        Check if the union tag is ``paper_doc_add_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_member_role(self):
        """
        Check if the union tag is ``paper_doc_change_member_role``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_sharing_policy(self):
        """
        Check if the union tag is ``paper_doc_change_sharing_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_change_subscription(self):
        """
        Check if the union tag is ``paper_doc_change_subscription``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_deleted(self):
        """
        Check if the union tag is ``paper_doc_deleted``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_delete_comment(self):
        """
        Check if the union tag is ``paper_doc_delete_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_download(self):
        """
        Check if the union tag is ``paper_doc_download``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_edit(self):
        """
        Check if the union tag is ``paper_doc_edit``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_edit_comment(self):
        """
        Check if the union tag is ``paper_doc_edit_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_followed(self):
        """
        Check if the union tag is ``paper_doc_followed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_mention(self):
        """
        Check if the union tag is ``paper_doc_mention``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_ownership_changed(self):
        """
        Check if the union tag is ``paper_doc_ownership_changed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_request_access(self):
        """
        Check if the union tag is ``paper_doc_request_access``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_resolve_comment(self):
        """
        Check if the union tag is ``paper_doc_resolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_revert(self):
        """
        Check if the union tag is ``paper_doc_revert``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_slack_share(self):
        """
        Check if the union tag is ``paper_doc_slack_share``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_team_invite(self):
        """
        Check if the union tag is ``paper_doc_team_invite``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_trashed(self):
        """
        Check if the union tag is ``paper_doc_trashed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_unresolve_comment(self):
        """
        Check if the union tag is ``paper_doc_unresolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_untrashed(self):
        """
        Check if the union tag is ``paper_doc_untrashed``.

        :rtype: bool
        """
        ...
    
    def is_paper_doc_view(self):
        """
        Check if the union tag is ``paper_doc_view``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_allow(self):
        """
        Check if the union tag is ``paper_external_view_allow``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_default_team(self):
        """
        Check if the union tag is ``paper_external_view_default_team``.

        :rtype: bool
        """
        ...
    
    def is_paper_external_view_forbid(self):
        """
        Check if the union tag is ``paper_external_view_forbid``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_change_subscription(self):
        """
        Check if the union tag is ``paper_folder_change_subscription``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_deleted(self):
        """
        Check if the union tag is ``paper_folder_deleted``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_followed(self):
        """
        Check if the union tag is ``paper_folder_followed``.

        :rtype: bool
        """
        ...
    
    def is_paper_folder_team_invite(self):
        """
        Check if the union tag is ``paper_folder_team_invite``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_change_permission(self):
        """
        Check if the union tag is ``paper_published_link_change_permission``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_create(self):
        """
        Check if the union tag is ``paper_published_link_create``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_disabled(self):
        """
        Check if the union tag is ``paper_published_link_disabled``.

        :rtype: bool
        """
        ...
    
    def is_paper_published_link_view(self):
        """
        Check if the union tag is ``paper_published_link_view``.

        :rtype: bool
        """
        ...
    
    def is_password_change(self):
        """
        Check if the union tag is ``password_change``.

        :rtype: bool
        """
        ...
    
    def is_password_reset(self):
        """
        Check if the union tag is ``password_reset``.

        :rtype: bool
        """
        ...
    
    def is_password_reset_all(self):
        """
        Check if the union tag is ``password_reset_all``.

        :rtype: bool
        """
        ...
    
    def is_classification_create_report(self):
        """
        Check if the union tag is ``classification_create_report``.

        :rtype: bool
        """
        ...
    
    def is_classification_create_report_fail(self):
        """
        Check if the union tag is ``classification_create_report_fail``.

        :rtype: bool
        """
        ...
    
    def is_emm_create_exceptions_report(self):
        """
        Check if the union tag is ``emm_create_exceptions_report``.

        :rtype: bool
        """
        ...
    
    def is_emm_create_usage_report(self):
        """
        Check if the union tag is ``emm_create_usage_report``.

        :rtype: bool
        """
        ...
    
    def is_export_members_report(self):
        """
        Check if the union tag is ``export_members_report``.

        :rtype: bool
        """
        ...
    
    def is_export_members_report_fail(self):
        """
        Check if the union tag is ``export_members_report_fail``.

        :rtype: bool
        """
        ...
    
    def is_external_sharing_create_report(self):
        """
        Check if the union tag is ``external_sharing_create_report``.

        :rtype: bool
        """
        ...
    
    def is_external_sharing_report_failed(self):
        """
        Check if the union tag is ``external_sharing_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_no_expiration_link_gen_create_report(self):
        """
        Check if the union tag is ``no_expiration_link_gen_create_report``.

        :rtype: bool
        """
        ...
    
    def is_no_expiration_link_gen_report_failed(self):
        """
        Check if the union tag is ``no_expiration_link_gen_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_gen_create_report(self):
        """
        Check if the union tag is ``no_password_link_gen_create_report``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_gen_report_failed(self):
        """
        Check if the union tag is ``no_password_link_gen_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_view_create_report(self):
        """
        Check if the union tag is ``no_password_link_view_create_report``.

        :rtype: bool
        """
        ...
    
    def is_no_password_link_view_report_failed(self):
        """
        Check if the union tag is ``no_password_link_view_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_outdated_link_view_create_report(self):
        """
        Check if the union tag is ``outdated_link_view_create_report``.

        :rtype: bool
        """
        ...
    
    def is_outdated_link_view_report_failed(self):
        """
        Check if the union tag is ``outdated_link_view_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_paper_admin_export_start(self):
        """
        Check if the union tag is ``paper_admin_export_start``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_alert_create_report(self):
        """
        Check if the union tag is ``ransomware_alert_create_report``.

        :rtype: bool
        """
        ...
    
    def is_ransomware_alert_create_report_failed(self):
        """
        Check if the union tag is ``ransomware_alert_create_report_failed``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_create_admin_privilege_report(self):
        """
        Check if the union tag is ``smart_sync_create_admin_privilege_report``.

        :rtype: bool
        """
        ...
    
    def is_team_activity_create_report(self):
        """
        Check if the union tag is ``team_activity_create_report``.

        :rtype: bool
        """
        ...
    
    def is_team_activity_create_report_fail(self):
        """
        Check if the union tag is ``team_activity_create_report_fail``.

        :rtype: bool
        """
        ...
    
    def is_collection_share(self):
        """
        Check if the union tag is ``collection_share``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_file_add(self):
        """
        Check if the union tag is ``file_transfers_file_add``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_delete(self):
        """
        Check if the union tag is ``file_transfers_transfer_delete``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_download(self):
        """
        Check if the union tag is ``file_transfers_transfer_download``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_send(self):
        """
        Check if the union tag is ``file_transfers_transfer_send``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_transfer_view(self):
        """
        Check if the union tag is ``file_transfers_transfer_view``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_invite_only(self):
        """
        Check if the union tag is ``note_acl_invite_only``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_link(self):
        """
        Check if the union tag is ``note_acl_link``.

        :rtype: bool
        """
        ...
    
    def is_note_acl_team_link(self):
        """
        Check if the union tag is ``note_acl_team_link``.

        :rtype: bool
        """
        ...
    
    def is_note_shared(self):
        """
        Check if the union tag is ``note_shared``.

        :rtype: bool
        """
        ...
    
    def is_note_share_receive(self):
        """
        Check if the union tag is ``note_share_receive``.

        :rtype: bool
        """
        ...
    
    def is_open_note_shared(self):
        """
        Check if the union tag is ``open_note_shared``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_shared_link_created(self):
        """
        Check if the union tag is ``replay_file_shared_link_created``.

        :rtype: bool
        """
        ...
    
    def is_replay_file_shared_link_modified(self):
        """
        Check if the union tag is ``replay_file_shared_link_modified``.

        :rtype: bool
        """
        ...
    
    def is_replay_project_team_add(self):
        """
        Check if the union tag is ``replay_project_team_add``.

        :rtype: bool
        """
        ...
    
    def is_replay_project_team_delete(self):
        """
        Check if the union tag is ``replay_project_team_delete``.

        :rtype: bool
        """
        ...
    
    def is_sf_add_group(self):
        """
        Check if the union tag is ``sf_add_group``.

        :rtype: bool
        """
        ...
    
    def is_sf_allow_non_members_to_view_shared_links(self):
        """
        Check if the union tag is ``sf_allow_non_members_to_view_shared_links``.

        :rtype: bool
        """
        ...
    
    def is_sf_external_invite_warn(self):
        """
        Check if the union tag is ``sf_external_invite_warn``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_invite(self):
        """
        Check if the union tag is ``sf_fb_invite``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_invite_change_role(self):
        """
        Check if the union tag is ``sf_fb_invite_change_role``.

        :rtype: bool
        """
        ...
    
    def is_sf_fb_uninvite(self):
        """
        Check if the union tag is ``sf_fb_uninvite``.

        :rtype: bool
        """
        ...
    
    def is_sf_invite_group(self):
        """
        Check if the union tag is ``sf_invite_group``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_grant_access(self):
        """
        Check if the union tag is ``sf_team_grant_access``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_invite(self):
        """
        Check if the union tag is ``sf_team_invite``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_invite_change_role(self):
        """
        Check if the union tag is ``sf_team_invite_change_role``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_join(self):
        """
        Check if the union tag is ``sf_team_join``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_join_from_oob_link(self):
        """
        Check if the union tag is ``sf_team_join_from_oob_link``.

        :rtype: bool
        """
        ...
    
    def is_sf_team_uninvite(self):
        """
        Check if the union tag is ``sf_team_uninvite``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_invitees(self):
        """
        Check if the union tag is ``shared_content_add_invitees``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_link_expiry(self):
        """
        Check if the union tag is ``shared_content_add_link_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_link_password(self):
        """
        Check if the union tag is ``shared_content_add_link_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_add_member(self):
        """
        Check if the union tag is ``shared_content_add_member``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_downloads_policy(self):
        """
        Check if the union tag is ``shared_content_change_downloads_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_invitee_role(self):
        """
        Check if the union tag is ``shared_content_change_invitee_role``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_audience(self):
        """
        Check if the union tag is ``shared_content_change_link_audience``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_expiry(self):
        """
        Check if the union tag is ``shared_content_change_link_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_link_password(self):
        """
        Check if the union tag is ``shared_content_change_link_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_member_role(self):
        """
        Check if the union tag is ``shared_content_change_member_role``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_change_viewer_info_policy(self):
        """
        Check if the union tag is ``shared_content_change_viewer_info_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_claim_invitation(self):
        """
        Check if the union tag is ``shared_content_claim_invitation``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_copy(self):
        """
        Check if the union tag is ``shared_content_copy``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_download(self):
        """
        Check if the union tag is ``shared_content_download``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_relinquish_membership(self):
        """
        Check if the union tag is ``shared_content_relinquish_membership``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_invitees(self):
        """
        Check if the union tag is ``shared_content_remove_invitees``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_link_expiry(self):
        """
        Check if the union tag is ``shared_content_remove_link_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_link_password(self):
        """
        Check if the union tag is ``shared_content_remove_link_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_remove_member(self):
        """
        Check if the union tag is ``shared_content_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_request_access(self):
        """
        Check if the union tag is ``shared_content_request_access``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_restore_invitees(self):
        """
        Check if the union tag is ``shared_content_restore_invitees``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_restore_member(self):
        """
        Check if the union tag is ``shared_content_restore_member``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_unshare(self):
        """
        Check if the union tag is ``shared_content_unshare``.

        :rtype: bool
        """
        ...
    
    def is_shared_content_view(self):
        """
        Check if the union tag is ``shared_content_view``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_link_policy(self):
        """
        Check if the union tag is ``shared_folder_change_link_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_inheritance_policy(self):
        """
        Check if the union tag is ``shared_folder_change_members_inheritance_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_management_policy(self):
        """
        Check if the union tag is ``shared_folder_change_members_management_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_change_members_policy(self):
        """
        Check if the union tag is ``shared_folder_change_members_policy``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_create(self):
        """
        Check if the union tag is ``shared_folder_create``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_decline_invitation(self):
        """
        Check if the union tag is ``shared_folder_decline_invitation``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_mount(self):
        """
        Check if the union tag is ``shared_folder_mount``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_nest(self):
        """
        Check if the union tag is ``shared_folder_nest``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_transfer_ownership(self):
        """
        Check if the union tag is ``shared_folder_transfer_ownership``.

        :rtype: bool
        """
        ...
    
    def is_shared_folder_unmount(self):
        """
        Check if the union tag is ``shared_folder_unmount``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_add_expiry(self):
        """
        Check if the union tag is ``shared_link_add_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_change_expiry(self):
        """
        Check if the union tag is ``shared_link_change_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_change_visibility(self):
        """
        Check if the union tag is ``shared_link_change_visibility``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_copy(self):
        """
        Check if the union tag is ``shared_link_copy``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_create(self):
        """
        Check if the union tag is ``shared_link_create``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_disable(self):
        """
        Check if the union tag is ``shared_link_disable``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_download(self):
        """
        Check if the union tag is ``shared_link_download``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_remove_expiry(self):
        """
        Check if the union tag is ``shared_link_remove_expiry``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_add_expiration(self):
        """
        Check if the union tag is ``shared_link_settings_add_expiration``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_add_password(self):
        """
        Check if the union tag is ``shared_link_settings_add_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_allow_download_disabled(self):
        """
        Check if the union tag is ``shared_link_settings_allow_download_disabled``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_allow_download_enabled(self):
        """
        Check if the union tag is ``shared_link_settings_allow_download_enabled``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_audience(self):
        """
        Check if the union tag is ``shared_link_settings_change_audience``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_expiration(self):
        """
        Check if the union tag is ``shared_link_settings_change_expiration``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_change_password(self):
        """
        Check if the union tag is ``shared_link_settings_change_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_remove_expiration(self):
        """
        Check if the union tag is ``shared_link_settings_remove_expiration``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_settings_remove_password(self):
        """
        Check if the union tag is ``shared_link_settings_remove_password``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_share(self):
        """
        Check if the union tag is ``shared_link_share``.

        :rtype: bool
        """
        ...
    
    def is_shared_link_view(self):
        """
        Check if the union tag is ``shared_link_view``.

        :rtype: bool
        """
        ...
    
    def is_shared_note_opened(self):
        """
        Check if the union tag is ``shared_note_opened``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_disable_downloads(self):
        """
        Check if the union tag is ``shmodel_disable_downloads``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_enable_downloads(self):
        """
        Check if the union tag is ``shmodel_enable_downloads``.

        :rtype: bool
        """
        ...
    
    def is_shmodel_group_share(self):
        """
        Check if the union tag is ``shmodel_group_share``.

        :rtype: bool
        """
        ...
    
    def is_showcase_access_granted(self):
        """
        Check if the union tag is ``showcase_access_granted``.

        :rtype: bool
        """
        ...
    
    def is_showcase_add_member(self):
        """
        Check if the union tag is ``showcase_add_member``.

        :rtype: bool
        """
        ...
    
    def is_showcase_archived(self):
        """
        Check if the union tag is ``showcase_archived``.

        :rtype: bool
        """
        ...
    
    def is_showcase_created(self):
        """
        Check if the union tag is ``showcase_created``.

        :rtype: bool
        """
        ...
    
    def is_showcase_delete_comment(self):
        """
        Check if the union tag is ``showcase_delete_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_edited(self):
        """
        Check if the union tag is ``showcase_edited``.

        :rtype: bool
        """
        ...
    
    def is_showcase_edit_comment(self):
        """
        Check if the union tag is ``showcase_edit_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_added(self):
        """
        Check if the union tag is ``showcase_file_added``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_download(self):
        """
        Check if the union tag is ``showcase_file_download``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_removed(self):
        """
        Check if the union tag is ``showcase_file_removed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_file_view(self):
        """
        Check if the union tag is ``showcase_file_view``.

        :rtype: bool
        """
        ...
    
    def is_showcase_permanently_deleted(self):
        """
        Check if the union tag is ``showcase_permanently_deleted``.

        :rtype: bool
        """
        ...
    
    def is_showcase_post_comment(self):
        """
        Check if the union tag is ``showcase_post_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_remove_member(self):
        """
        Check if the union tag is ``showcase_remove_member``.

        :rtype: bool
        """
        ...
    
    def is_showcase_renamed(self):
        """
        Check if the union tag is ``showcase_renamed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_request_access(self):
        """
        Check if the union tag is ``showcase_request_access``.

        :rtype: bool
        """
        ...
    
    def is_showcase_resolve_comment(self):
        """
        Check if the union tag is ``showcase_resolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_restored(self):
        """
        Check if the union tag is ``showcase_restored``.

        :rtype: bool
        """
        ...
    
    def is_showcase_trashed(self):
        """
        Check if the union tag is ``showcase_trashed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_trashed_deprecated(self):
        """
        Check if the union tag is ``showcase_trashed_deprecated``.

        :rtype: bool
        """
        ...
    
    def is_showcase_unresolve_comment(self):
        """
        Check if the union tag is ``showcase_unresolve_comment``.

        :rtype: bool
        """
        ...
    
    def is_showcase_untrashed(self):
        """
        Check if the union tag is ``showcase_untrashed``.

        :rtype: bool
        """
        ...
    
    def is_showcase_untrashed_deprecated(self):
        """
        Check if the union tag is ``showcase_untrashed_deprecated``.

        :rtype: bool
        """
        ...
    
    def is_showcase_view(self):
        """
        Check if the union tag is ``showcase_view``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_cert(self):
        """
        Check if the union tag is ``sso_add_cert``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_login_url(self):
        """
        Check if the union tag is ``sso_add_login_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_add_logout_url(self):
        """
        Check if the union tag is ``sso_add_logout_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_cert(self):
        """
        Check if the union tag is ``sso_change_cert``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_login_url(self):
        """
        Check if the union tag is ``sso_change_login_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_logout_url(self):
        """
        Check if the union tag is ``sso_change_logout_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_saml_identity_mode(self):
        """
        Check if the union tag is ``sso_change_saml_identity_mode``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_cert(self):
        """
        Check if the union tag is ``sso_remove_cert``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_login_url(self):
        """
        Check if the union tag is ``sso_remove_login_url``.

        :rtype: bool
        """
        ...
    
    def is_sso_remove_logout_url(self):
        """
        Check if the union tag is ``sso_remove_logout_url``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_change_status(self):
        """
        Check if the union tag is ``team_folder_change_status``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_create(self):
        """
        Check if the union tag is ``team_folder_create``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_downgrade(self):
        """
        Check if the union tag is ``team_folder_downgrade``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_permanently_delete(self):
        """
        Check if the union tag is ``team_folder_permanently_delete``.

        :rtype: bool
        """
        ...
    
    def is_team_folder_rename(self):
        """
        Check if the union tag is ``team_folder_rename``.

        :rtype: bool
        """
        ...
    
    def is_team_selective_sync_settings_changed(self):
        """
        Check if the union tag is ``team_selective_sync_settings_changed``.

        :rtype: bool
        """
        ...
    
    def is_account_capture_change_policy(self):
        """
        Check if the union tag is ``account_capture_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_admin_email_reminders_changed(self):
        """
        Check if the union tag is ``admin_email_reminders_changed``.

        :rtype: bool
        """
        ...
    
    def is_allow_download_disabled(self):
        """
        Check if the union tag is ``allow_download_disabled``.

        :rtype: bool
        """
        ...
    
    def is_allow_download_enabled(self):
        """
        Check if the union tag is ``allow_download_enabled``.

        :rtype: bool
        """
        ...
    
    def is_app_permissions_changed(self):
        """
        Check if the union tag is ``app_permissions_changed``.

        :rtype: bool
        """
        ...
    
    def is_camera_uploads_policy_changed(self):
        """
        Check if the union tag is ``camera_uploads_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_capture_transcript_policy_changed(self):
        """
        Check if the union tag is ``capture_transcript_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_classification_change_policy(self):
        """
        Check if the union tag is ``classification_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_computer_backup_policy_changed(self):
        """
        Check if the union tag is ``computer_backup_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_content_administration_policy_changed(self):
        """
        Check if the union tag is ``content_administration_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_data_placement_restriction_change_policy(self):
        """
        Check if the union tag is ``data_placement_restriction_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_data_placement_restriction_satisfy_policy(self):
        """
        Check if the union tag is ``data_placement_restriction_satisfy_policy``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_add_exception(self):
        """
        Check if the union tag is ``device_approvals_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_desktop_policy(self):
        """
        Check if the union tag is ``device_approvals_change_desktop_policy``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_mobile_policy(self):
        """
        Check if the union tag is ``device_approvals_change_mobile_policy``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_overage_action(self):
        """
        Check if the union tag is ``device_approvals_change_overage_action``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_change_unlink_action(self):
        """
        Check if the union tag is ``device_approvals_change_unlink_action``.

        :rtype: bool
        """
        ...
    
    def is_device_approvals_remove_exception(self):
        """
        Check if the union tag is ``device_approvals_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_directory_restrictions_add_members(self):
        """
        Check if the union tag is ``directory_restrictions_add_members``.

        :rtype: bool
        """
        ...
    
    def is_directory_restrictions_remove_members(self):
        """
        Check if the union tag is ``directory_restrictions_remove_members``.

        :rtype: bool
        """
        ...
    
    def is_dropbox_passwords_policy_changed(self):
        """
        Check if the union tag is ``dropbox_passwords_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_email_ingest_policy_changed(self):
        """
        Check if the union tag is ``email_ingest_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_emm_add_exception(self):
        """
        Check if the union tag is ``emm_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_emm_change_policy(self):
        """
        Check if the union tag is ``emm_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_emm_remove_exception(self):
        """
        Check if the union tag is ``emm_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_extended_version_history_change_policy(self):
        """
        Check if the union tag is ``extended_version_history_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_external_drive_backup_policy_changed(self):
        """
        Check if the union tag is ``external_drive_backup_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_comments_change_policy(self):
        """
        Check if the union tag is ``file_comments_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_file_locking_policy_changed(self):
        """
        Check if the union tag is ``file_locking_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_provider_migration_policy_changed(self):
        """
        Check if the union tag is ``file_provider_migration_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_change_policy(self):
        """
        Check if the union tag is ``file_requests_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_emails_enabled(self):
        """
        Check if the union tag is ``file_requests_emails_enabled``.

        :rtype: bool
        """
        ...
    
    def is_file_requests_emails_restricted_to_team_only(self):
        """
        Check if the union tag is ``file_requests_emails_restricted_to_team_only``.

        :rtype: bool
        """
        ...
    
    def is_file_transfers_policy_changed(self):
        """
        Check if the union tag is ``file_transfers_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_folder_link_restriction_policy_changed(self):
        """
        Check if the union tag is ``folder_link_restriction_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_google_sso_change_policy(self):
        """
        Check if the union tag is ``google_sso_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_group_user_management_change_policy(self):
        """
        Check if the union tag is ``group_user_management_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_integration_policy_changed(self):
        """
        Check if the union tag is ``integration_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_invite_acceptance_email_policy_changed(self):
        """
        Check if the union tag is ``invite_acceptance_email_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_member_requests_change_policy(self):
        """
        Check if the union tag is ``member_requests_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_member_send_invite_policy_changed(self):
        """
        Check if the union tag is ``member_send_invite_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_add_exception(self):
        """
        Check if the union tag is ``member_space_limits_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_caps_type_policy(self):
        """
        Check if the union tag is ``member_space_limits_change_caps_type_policy``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_change_policy(self):
        """
        Check if the union tag is ``member_space_limits_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_member_space_limits_remove_exception(self):
        """
        Check if the union tag is ``member_space_limits_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_member_suggestions_change_policy(self):
        """
        Check if the union tag is ``member_suggestions_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_microsoft_office_addin_change_policy(self):
        """
        Check if the union tag is ``microsoft_office_addin_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_network_control_change_policy(self):
        """
        Check if the union tag is ``network_control_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_deployment_policy(self):
        """
        Check if the union tag is ``paper_change_deployment_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_member_link_policy(self):
        """
        Check if the union tag is ``paper_change_member_link_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_member_policy(self):
        """
        Check if the union tag is ``paper_change_member_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_change_policy(self):
        """
        Check if the union tag is ``paper_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_paper_default_folder_policy_changed(self):
        """
        Check if the union tag is ``paper_default_folder_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_paper_desktop_policy_changed(self):
        """
        Check if the union tag is ``paper_desktop_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_paper_enabled_users_group_addition(self):
        """
        Check if the union tag is ``paper_enabled_users_group_addition``.

        :rtype: bool
        """
        ...
    
    def is_paper_enabled_users_group_removal(self):
        """
        Check if the union tag is ``paper_enabled_users_group_removal``.

        :rtype: bool
        """
        ...
    
    def is_password_strength_requirements_change_policy(self):
        """
        Check if the union tag is ``password_strength_requirements_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_permanent_delete_change_policy(self):
        """
        Check if the union tag is ``permanent_delete_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_reseller_support_change_policy(self):
        """
        Check if the union tag is ``reseller_support_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_rewind_policy_changed(self):
        """
        Check if the union tag is ``rewind_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_send_for_signature_policy_changed(self):
        """
        Check if the union tag is ``send_for_signature_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_folder_join_policy(self):
        """
        Check if the union tag is ``sharing_change_folder_join_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_allow_change_expiration_policy(self):
        """
        Check if the union tag is ``sharing_change_link_allow_change_expiration_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_default_expiration_policy(self):
        """
        Check if the union tag is ``sharing_change_link_default_expiration_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_enforce_password_policy(self):
        """
        Check if the union tag is ``sharing_change_link_enforce_password_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_link_policy(self):
        """
        Check if the union tag is ``sharing_change_link_policy``.

        :rtype: bool
        """
        ...
    
    def is_sharing_change_member_policy(self):
        """
        Check if the union tag is ``sharing_change_member_policy``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_download_policy(self):
        """
        Check if the union tag is ``showcase_change_download_policy``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_enabled_policy(self):
        """
        Check if the union tag is ``showcase_change_enabled_policy``.

        :rtype: bool
        """
        ...
    
    def is_showcase_change_external_sharing_policy(self):
        """
        Check if the union tag is ``showcase_change_external_sharing_policy``.

        :rtype: bool
        """
        ...
    
    def is_smarter_smart_sync_policy_changed(self):
        """
        Check if the union tag is ``smarter_smart_sync_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_change_policy(self):
        """
        Check if the union tag is ``smart_sync_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_not_opt_out(self):
        """
        Check if the union tag is ``smart_sync_not_opt_out``.

        :rtype: bool
        """
        ...
    
    def is_smart_sync_opt_out(self):
        """
        Check if the union tag is ``smart_sync_opt_out``.

        :rtype: bool
        """
        ...
    
    def is_sso_change_policy(self):
        """
        Check if the union tag is ``sso_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_team_branding_policy_changed(self):
        """
        Check if the union tag is ``team_branding_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_team_extensions_policy_changed(self):
        """
        Check if the union tag is ``team_extensions_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_team_selective_sync_policy_changed(self):
        """
        Check if the union tag is ``team_selective_sync_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_team_sharing_whitelist_subjects_changed(self):
        """
        Check if the union tag is ``team_sharing_whitelist_subjects_changed``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_exception(self):
        """
        Check if the union tag is ``tfa_add_exception``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_policy(self):
        """
        Check if the union tag is ``tfa_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_exception(self):
        """
        Check if the union tag is ``tfa_remove_exception``.

        :rtype: bool
        """
        ...
    
    def is_two_account_change_policy(self):
        """
        Check if the union tag is ``two_account_change_policy``.

        :rtype: bool
        """
        ...
    
    def is_viewer_info_policy_changed(self):
        """
        Check if the union tag is ``viewer_info_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_watermarking_policy_changed(self):
        """
        Check if the union tag is ``watermarking_policy_changed``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_active_session_limit(self):
        """
        Check if the union tag is ``web_sessions_change_active_session_limit``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_fixed_length_policy(self):
        """
        Check if the union tag is ``web_sessions_change_fixed_length_policy``.

        :rtype: bool
        """
        ...
    
    def is_web_sessions_change_idle_length_policy(self):
        """
        Check if the union tag is ``web_sessions_change_idle_length_policy``.

        :rtype: bool
        """
        ...
    
    def is_data_residency_migration_request_successful(self):
        """
        Check if the union tag is ``data_residency_migration_request_successful``.

        :rtype: bool
        """
        ...
    
    def is_data_residency_migration_request_unsuccessful(self):
        """
        Check if the union tag is ``data_residency_migration_request_unsuccessful``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_from(self):
        """
        Check if the union tag is ``team_merge_from``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_to(self):
        """
        Check if the union tag is ``team_merge_to``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_add_background(self):
        """
        Check if the union tag is ``team_profile_add_background``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_add_logo(self):
        """
        Check if the union tag is ``team_profile_add_logo``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_background(self):
        """
        Check if the union tag is ``team_profile_change_background``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_default_language(self):
        """
        Check if the union tag is ``team_profile_change_default_language``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_logo(self):
        """
        Check if the union tag is ``team_profile_change_logo``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_change_name(self):
        """
        Check if the union tag is ``team_profile_change_name``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_remove_background(self):
        """
        Check if the union tag is ``team_profile_remove_background``.

        :rtype: bool
        """
        ...
    
    def is_team_profile_remove_logo(self):
        """
        Check if the union tag is ``team_profile_remove_logo``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_backup_phone(self):
        """
        Check if the union tag is ``tfa_add_backup_phone``.

        :rtype: bool
        """
        ...
    
    def is_tfa_add_security_key(self):
        """
        Check if the union tag is ``tfa_add_security_key``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_backup_phone(self):
        """
        Check if the union tag is ``tfa_change_backup_phone``.

        :rtype: bool
        """
        ...
    
    def is_tfa_change_status(self):
        """
        Check if the union tag is ``tfa_change_status``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_backup_phone(self):
        """
        Check if the union tag is ``tfa_remove_backup_phone``.

        :rtype: bool
        """
        ...
    
    def is_tfa_remove_security_key(self):
        """
        Check if the union tag is ``tfa_remove_security_key``.

        :rtype: bool
        """
        ...
    
    def is_tfa_reset(self):
        """
        Check if the union tag is ``tfa_reset``.

        :rtype: bool
        """
        ...
    
    def is_changed_enterprise_admin_role(self):
        """
        Check if the union tag is ``changed_enterprise_admin_role``.

        :rtype: bool
        """
        ...
    
    def is_changed_enterprise_connected_team_status(self):
        """
        Check if the union tag is ``changed_enterprise_connected_team_status``.

        :rtype: bool
        """
        ...
    
    def is_ended_enterprise_admin_session(self):
        """
        Check if the union tag is ``ended_enterprise_admin_session``.

        :rtype: bool
        """
        ...
    
    def is_ended_enterprise_admin_session_deprecated(self):
        """
        Check if the union tag is ``ended_enterprise_admin_session_deprecated``.

        :rtype: bool
        """
        ...
    
    def is_enterprise_settings_locking(self):
        """
        Check if the union tag is ``enterprise_settings_locking``.

        :rtype: bool
        """
        ...
    
    def is_guest_admin_change_status(self):
        """
        Check if the union tag is ``guest_admin_change_status``.

        :rtype: bool
        """
        ...
    
    def is_started_enterprise_admin_session(self):
        """
        Check if the union tag is ``started_enterprise_admin_session``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted(self):
        """
        Check if the union tag is ``team_merge_request_accepted``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_accepted_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_accepted_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_accepted_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_auto_canceled(self):
        """
        Check if the union tag is ``team_merge_request_auto_canceled``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled(self):
        """
        Check if the union tag is ``team_merge_request_canceled``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_canceled_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_canceled_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_canceled_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired(self):
        """
        Check if the union tag is ``team_merge_request_expired``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_expired_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_expired_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_expired_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_rejected_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_rejected_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_rejected_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_rejected_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder(self):
        """
        Check if the union tag is ``team_merge_request_reminder``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_reminder_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_reminder_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_reminder_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_revoked(self):
        """
        Check if the union tag is ``team_merge_request_revoked``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_sent_shown_to_primary_team(self):
        """
        Check if the union tag is ``team_merge_request_sent_shown_to_primary_team``.

        :rtype: bool
        """
        ...
    
    def is_team_merge_request_sent_shown_to_secondary_team(self):
        """
        Check if the union tag is ``team_merge_request_sent_shown_to_secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


EventTypeArg_validator = ...
class ExportMembersReportDetails(bb.Struct):
    """
    Created member data report.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ExportMembersReportDetails_validator = ...
class ExportMembersReportFailDetails(bb.Struct):
    """
    Failed to create members data report.

    :ivar team_log.ExportMembersReportFailDetails.failure_reason: Failure
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


ExportMembersReportFailDetails_validator = ...
class ExportMembersReportFailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExportMembersReportFailType_validator = ...
class ExportMembersReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExportMembersReportType_validator = ...
class ExtendedVersionHistoryChangePolicyDetails(bb.Struct):
    """
    Accepted/opted out of extended version history.

    :ivar team_log.ExtendedVersionHistoryChangePolicyDetails.new_value: New
        extended version history policy.
    :ivar team_log.ExtendedVersionHistoryChangePolicyDetails.previous_value:
        Previous extended version history policy. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ExtendedVersionHistoryChangePolicyDetails_validator = ...
class ExtendedVersionHistoryChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExtendedVersionHistoryChangePolicyType_validator = ...
class ExtendedVersionHistoryPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    explicitly_limited = ...
    explicitly_unlimited = ...
    implicitly_limited = ...
    implicitly_unlimited = ...
    other = ...
    def is_explicitly_limited(self):
        """
        Check if the union tag is ``explicitly_limited``.

        :rtype: bool
        """
        ...
    
    def is_explicitly_unlimited(self):
        """
        Check if the union tag is ``explicitly_unlimited``.

        :rtype: bool
        """
        ...
    
    def is_implicitly_limited(self):
        """
        Check if the union tag is ``implicitly_limited``.

        :rtype: bool
        """
        ...
    
    def is_implicitly_unlimited(self):
        """
        Check if the union tag is ``implicitly_unlimited``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ExtendedVersionHistoryPolicy_validator = ...
class ExternalDriveBackupEligibilityStatus(bb.Union):
    """
    External Drive Backup eligibility status

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    exceed_license_cap = ...
    success = ...
    other = ...
    def is_exceed_license_cap(self):
        """
        Check if the union tag is ``exceed_license_cap``.

        :rtype: bool
        """
        ...
    
    def is_success(self):
        """
        Check if the union tag is ``success``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ExternalDriveBackupEligibilityStatus_validator = ...
class ExternalDriveBackupEligibilityStatusCheckedDetails(bb.Struct):
    """
    Checked external drive backup eligibility status.

    :ivar
        team_log.ExternalDriveBackupEligibilityStatusCheckedDetails.desktop_device_session_info:
        Device's session logged information.
    :ivar team_log.ExternalDriveBackupEligibilityStatusCheckedDetails.status:
        Current eligibility status of external drive backup.
    :ivar
        team_log.ExternalDriveBackupEligibilityStatusCheckedDetails.number_of_external_drive_backup:
        Total number of valid external drive backup for all the team members.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, desktop_device_session_info=..., status=..., number_of_external_drive_backup=...) -> None:
        ...
    
    desktop_device_session_info = ...
    status = ...
    number_of_external_drive_backup = ...


ExternalDriveBackupEligibilityStatusCheckedDetails_validator = ...
class ExternalDriveBackupEligibilityStatusCheckedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExternalDriveBackupEligibilityStatusCheckedType_validator = ...
class ExternalDriveBackupPolicy(bb.Union):
    """
    Policy for controlling team access to external drive backup feature

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_default(self):
        """
        Check if the union tag is ``default``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ExternalDriveBackupPolicy_validator = ...
class ExternalDriveBackupPolicyChangedDetails(bb.Struct):
    """
    Changed external drive backup policy for team.

    :ivar team_log.ExternalDriveBackupPolicyChangedDetails.new_value: New
        external drive backup policy.
    :ivar team_log.ExternalDriveBackupPolicyChangedDetails.previous_value:
        Previous external drive backup policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ExternalDriveBackupPolicyChangedDetails_validator = ...
class ExternalDriveBackupPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExternalDriveBackupPolicyChangedType_validator = ...
class ExternalDriveBackupStatus(bb.Union):
    """
    External Drive Backup status

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    broken = ...
    created = ...
    created_or_broken = ...
    deleted = ...
    empty = ...
    unknown = ...
    other = ...
    def is_broken(self):
        """
        Check if the union tag is ``broken``.

        :rtype: bool
        """
        ...
    
    def is_created(self):
        """
        Check if the union tag is ``created``.

        :rtype: bool
        """
        ...
    
    def is_created_or_broken(self):
        """
        Check if the union tag is ``created_or_broken``.

        :rtype: bool
        """
        ...
    
    def is_deleted(self):
        """
        Check if the union tag is ``deleted``.

        :rtype: bool
        """
        ...
    
    def is_empty(self):
        """
        Check if the union tag is ``empty``.

        :rtype: bool
        """
        ...
    
    def is_unknown(self):
        """
        Check if the union tag is ``unknown``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ExternalDriveBackupStatus_validator = ...
class ExternalDriveBackupStatusChangedDetails(bb.Struct):
    """
    Modified external drive backup.

    :ivar
        team_log.ExternalDriveBackupStatusChangedDetails.desktop_device_session_info:
        Device's session logged information.
    :ivar team_log.ExternalDriveBackupStatusChangedDetails.previous_value:
        Previous status of this external drive backup.
    :ivar team_log.ExternalDriveBackupStatusChangedDetails.new_value: Next
        status of this external drive backup.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, desktop_device_session_info=..., previous_value=..., new_value=...) -> None:
        ...
    
    desktop_device_session_info = ...
    previous_value = ...
    new_value = ...


ExternalDriveBackupStatusChangedDetails_validator = ...
class ExternalDriveBackupStatusChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExternalDriveBackupStatusChangedType_validator = ...
class ExternalSharingCreateReportDetails(bb.Struct):
    """
    Created External sharing report.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ExternalSharingCreateReportDetails_validator = ...
class ExternalSharingCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExternalSharingCreateReportType_validator = ...
class ExternalSharingReportFailedDetails(bb.Struct):
    """
    Couldn't create External sharing report.

    :ivar team_log.ExternalSharingReportFailedDetails.failure_reason: Failure
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


ExternalSharingReportFailedDetails_validator = ...
class ExternalSharingReportFailedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ExternalSharingReportFailedType_validator = ...
class ExternalUserLogInfo(bb.Struct):
    """
    A user without a Dropbox account.

    :ivar team_log.ExternalUserLogInfo.user_identifier: An external user
        identifier.
    :ivar team_log.ExternalUserLogInfo.identifier_type: Identifier type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, user_identifier=..., identifier_type=...) -> None:
        ...
    
    user_identifier = ...
    identifier_type = ...


ExternalUserLogInfo_validator = ...
class FailureDetailsLogInfo(bb.Struct):
    """
    Provides details about a failure

    :ivar team_log.FailureDetailsLogInfo.user_friendly_message: A user friendly
        explanation of the error.
    :ivar team_log.FailureDetailsLogInfo.technical_error_message: A technical
        explanation of the error. This is relevant for some errors.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, user_friendly_message=..., technical_error_message=...) -> None:
        ...
    
    user_friendly_message = ...
    technical_error_message = ...


FailureDetailsLogInfo_validator = ...
class FedAdminRole(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    enterprise_admin = ...
    not_enterprise_admin = ...
    other = ...
    def is_enterprise_admin(self):
        """
        Check if the union tag is ``enterprise_admin``.

        :rtype: bool
        """
        ...
    
    def is_not_enterprise_admin(self):
        """
        Check if the union tag is ``not_enterprise_admin``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


FedAdminRole_validator = ...
class FedExtraDetails(bb.Union):
    """
    More details about the organization or team.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar OrganizationDetails FedExtraDetails.organization: More details about
        the organization.
    :ivar TeamDetails FedExtraDetails.team: More details about the team.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def organization(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``organization`` tag with
        value ``val``.

        :param OrganizationDetails val:
        :rtype: FedExtraDetails
        """
        ...
    
    @classmethod
    def team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``team`` tag with value
        ``val``.

        :param TeamDetails val:
        :rtype: FedExtraDetails
        """
        ...
    
    def is_organization(self):
        """
        Check if the union tag is ``organization``.

        :rtype: bool
        """
        ...
    
    def is_team(self):
        """
        Check if the union tag is ``team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_organization(self): # -> None:
        """
        More details about the organization.

        Only call this if :meth:`is_organization` is true.

        :rtype: OrganizationDetails
        """
        ...
    
    def get_team(self): # -> None:
        """
        More details about the team.

        Only call this if :meth:`is_team` is true.

        :rtype: TeamDetails
        """
        ...
    


FedExtraDetails_validator = ...
class FedHandshakeAction(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    accepted_invite = ...
    canceled_invite = ...
    invite_expired = ...
    invited = ...
    rejected_invite = ...
    removed_team = ...
    other = ...
    def is_accepted_invite(self):
        """
        Check if the union tag is ``accepted_invite``.

        :rtype: bool
        """
        ...
    
    def is_canceled_invite(self):
        """
        Check if the union tag is ``canceled_invite``.

        :rtype: bool
        """
        ...
    
    def is_invite_expired(self):
        """
        Check if the union tag is ``invite_expired``.

        :rtype: bool
        """
        ...
    
    def is_invited(self):
        """
        Check if the union tag is ``invited``.

        :rtype: bool
        """
        ...
    
    def is_rejected_invite(self):
        """
        Check if the union tag is ``rejected_invite``.

        :rtype: bool
        """
        ...
    
    def is_removed_team(self):
        """
        Check if the union tag is ``removed_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


FedHandshakeAction_validator = ...
class FederationStatusChangeAdditionalInfo(bb.Union):
    """
    Additional information about the organization or connected team

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar ConnectedTeamName
        FederationStatusChangeAdditionalInfo.connected_team_name: The name of
        the team.
    :ivar NonTrustedTeamDetails
        FederationStatusChangeAdditionalInfo.non_trusted_team_details: The email
        to which the request was sent.
    :ivar OrganizationName
        FederationStatusChangeAdditionalInfo.organization_name: The name of the
        organization.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def connected_team_name(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``connected_team_name`` tag
        with value ``val``.

        :param ConnectedTeamName val:
        :rtype: FederationStatusChangeAdditionalInfo
        """
        ...
    
    @classmethod
    def non_trusted_team_details(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``non_trusted_team_details``
        tag with value ``val``.

        :param NonTrustedTeamDetails val:
        :rtype: FederationStatusChangeAdditionalInfo
        """
        ...
    
    @classmethod
    def organization_name(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``organization_name`` tag
        with value ``val``.

        :param OrganizationName val:
        :rtype: FederationStatusChangeAdditionalInfo
        """
        ...
    
    def is_connected_team_name(self):
        """
        Check if the union tag is ``connected_team_name``.

        :rtype: bool
        """
        ...
    
    def is_non_trusted_team_details(self):
        """
        Check if the union tag is ``non_trusted_team_details``.

        :rtype: bool
        """
        ...
    
    def is_organization_name(self):
        """
        Check if the union tag is ``organization_name``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_connected_team_name(self): # -> None:
        """
        The name of the team.

        Only call this if :meth:`is_connected_team_name` is true.

        :rtype: ConnectedTeamName
        """
        ...
    
    def get_non_trusted_team_details(self): # -> None:
        """
        The email to which the request was sent.

        Only call this if :meth:`is_non_trusted_team_details` is true.

        :rtype: NonTrustedTeamDetails
        """
        ...
    
    def get_organization_name(self): # -> None:
        """
        The name of the organization.

        Only call this if :meth:`is_organization_name` is true.

        :rtype: OrganizationName
        """
        ...
    


FederationStatusChangeAdditionalInfo_validator = ...
class FileAddCommentDetails(bb.Struct):
    """
    Added file comment.

    :ivar team_log.FileAddCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, comment_text=...) -> None:
        ...
    
    comment_text = ...


FileAddCommentDetails_validator = ...
class FileAddCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileAddCommentType_validator = ...
class FileAddDetails(bb.Struct):
    """
    Added files and/or folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileAddDetails_validator = ...
class FileAddFromAutomationDetails(bb.Struct):
    """
    Added files and/or folders from automation.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileAddFromAutomationDetails_validator = ...
class FileAddFromAutomationType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileAddFromAutomationType_validator = ...
class FileAddType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileAddType_validator = ...
class FileChangeCommentSubscriptionDetails(bb.Struct):
    """
    Subscribed to or unsubscribed from comment notifications for file.

    :ivar team_log.FileChangeCommentSubscriptionDetails.new_value: New file
        comment subscription.
    :ivar team_log.FileChangeCommentSubscriptionDetails.previous_value: Previous
        file comment subscription. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


FileChangeCommentSubscriptionDetails_validator = ...
class FileChangeCommentSubscriptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileChangeCommentSubscriptionType_validator = ...
class FileCommentNotificationPolicy(bb.Union):
    """
    Enable or disable file comments notifications

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


FileCommentNotificationPolicy_validator = ...
class FileCommentsChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled commenting on team files.

    :ivar team_log.FileCommentsChangePolicyDetails.new_value: New commenting on
        team files policy.
    :ivar team_log.FileCommentsChangePolicyDetails.previous_value: Previous
        commenting on team files policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


FileCommentsChangePolicyDetails_validator = ...
class FileCommentsChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileCommentsChangePolicyType_validator = ...
class FileCommentsPolicy(bb.Union):
    """
    File comments policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


FileCommentsPolicy_validator = ...
class FileCopyDetails(bb.Struct):
    """
    Copied files and/or folders.

    :ivar team_log.FileCopyDetails.relocate_action_details: Relocate action
        details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, relocate_action_details=...) -> None:
        ...
    
    relocate_action_details = ...


FileCopyDetails_validator = ...
class FileCopyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileCopyType_validator = ...
class FileDeleteCommentDetails(bb.Struct):
    """
    Deleted file comment.

    :ivar team_log.FileDeleteCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, comment_text=...) -> None:
        ...
    
    comment_text = ...


FileDeleteCommentDetails_validator = ...
class FileDeleteCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileDeleteCommentType_validator = ...
class FileDeleteDetails(bb.Struct):
    """
    Deleted files and/or folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileDeleteDetails_validator = ...
class FileDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileDeleteType_validator = ...
class FileDownloadDetails(bb.Struct):
    """
    Downloaded files and/or folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileDownloadDetails_validator = ...
class FileDownloadType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileDownloadType_validator = ...
class FileEditCommentDetails(bb.Struct):
    """
    Edited file comment.

    :ivar team_log.FileEditCommentDetails.comment_text: Comment text.
    :ivar team_log.FileEditCommentDetails.previous_comment_text: Previous
        comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_comment_text=..., comment_text=...) -> None:
        ...
    
    comment_text = ...
    previous_comment_text = ...


FileEditCommentDetails_validator = ...
class FileEditCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileEditCommentType_validator = ...
class FileEditDetails(bb.Struct):
    """
    Edited files.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileEditDetails_validator = ...
class FileEditType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileEditType_validator = ...
class FileGetCopyReferenceDetails(bb.Struct):
    """
    Created copy reference to file/folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileGetCopyReferenceDetails_validator = ...
class FileGetCopyReferenceType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileGetCopyReferenceType_validator = ...
class FileLikeCommentDetails(bb.Struct):
    """
    Liked file comment.

    :ivar team_log.FileLikeCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, comment_text=...) -> None:
        ...
    
    comment_text = ...


FileLikeCommentDetails_validator = ...
class FileLikeCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileLikeCommentType_validator = ...
class FileLockingLockStatusChangedDetails(bb.Struct):
    """
    Locked/unlocked editing for a file.

    :ivar team_log.FileLockingLockStatusChangedDetails.previous_value: Previous
        lock status of the file.
    :ivar team_log.FileLockingLockStatusChangedDetails.new_value: New lock
        status of the file.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


FileLockingLockStatusChangedDetails_validator = ...
class FileLockingLockStatusChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileLockingLockStatusChangedType_validator = ...
class FileLockingPolicyChangedDetails(bb.Struct):
    """
    Changed file locking policy for team.

    :ivar team_log.FileLockingPolicyChangedDetails.new_value: New file locking
        policy.
    :ivar team_log.FileLockingPolicyChangedDetails.previous_value: Previous file
        locking policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


FileLockingPolicyChangedDetails_validator = ...
class FileLockingPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileLockingPolicyChangedType_validator = ...
class FileOrFolderLogInfo(bb.Struct):
    """
    Generic information relevant both for files and folders

    :ivar team_log.FileOrFolderLogInfo.path: Path relative to event context.
    :ivar team_log.FileOrFolderLogInfo.display_name: Display name.
    :ivar team_log.FileOrFolderLogInfo.file_id: Unique ID.
    :ivar team_log.FileOrFolderLogInfo.file_size: File or folder size in bytes.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, path=..., display_name=..., file_id=..., file_size=...) -> None:
        ...
    
    path = ...
    display_name = ...
    file_id = ...
    file_size = ...


FileOrFolderLogInfo_validator = ...
class FileLogInfo(FileOrFolderLogInfo):
    """
    File's logged information.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, path=..., display_name=..., file_id=..., file_size=...) -> None:
        ...
    


FileLogInfo_validator = ...
class FileMoveDetails(bb.Struct):
    """
    Moved files and/or folders.

    :ivar team_log.FileMoveDetails.relocate_action_details: Relocate action
        details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, relocate_action_details=...) -> None:
        ...
    
    relocate_action_details = ...


FileMoveDetails_validator = ...
class FileMoveType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileMoveType_validator = ...
class FilePermanentlyDeleteDetails(bb.Struct):
    """
    Permanently deleted files and/or folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FilePermanentlyDeleteDetails_validator = ...
class FilePermanentlyDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FilePermanentlyDeleteType_validator = ...
class FilePreviewDetails(bb.Struct):
    """
    Previewed files and/or folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FilePreviewDetails_validator = ...
class FilePreviewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FilePreviewType_validator = ...
class FileProviderMigrationPolicyChangedDetails(bb.Struct):
    """
    Changed File Provider Migration policy for team.

    :ivar team_log.FileProviderMigrationPolicyChangedDetails.new_value: To.
    :ivar team_log.FileProviderMigrationPolicyChangedDetails.previous_value:
        From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


FileProviderMigrationPolicyChangedDetails_validator = ...
class FileProviderMigrationPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileProviderMigrationPolicyChangedType_validator = ...
class FileRenameDetails(bb.Struct):
    """
    Renamed files and/or folders.

    :ivar team_log.FileRenameDetails.relocate_action_details: Relocate action
        details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, relocate_action_details=...) -> None:
        ...
    
    relocate_action_details = ...


FileRenameDetails_validator = ...
class FileRenameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRenameType_validator = ...
class FileRequestChangeDetails(bb.Struct):
    """
    Changed file request.

    :ivar team_log.FileRequestChangeDetails.file_request_id: File request id.
        Might be missing due to historical data gap.
    :ivar team_log.FileRequestChangeDetails.previous_details: Previous file
        request details. Might be missing due to historical data gap.
    :ivar team_log.FileRequestChangeDetails.new_details: New file request
        details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_details=..., file_request_id=..., previous_details=...) -> None:
        ...
    
    file_request_id = ...
    previous_details = ...
    new_details = ...


FileRequestChangeDetails_validator = ...
class FileRequestChangeType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestChangeType_validator = ...
class FileRequestCloseDetails(bb.Struct):
    """
    Closed file request.

    :ivar team_log.FileRequestCloseDetails.file_request_id: File request id.
        Might be missing due to historical data gap.
    :ivar team_log.FileRequestCloseDetails.previous_details: Previous file
        request details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_request_id=..., previous_details=...) -> None:
        ...
    
    file_request_id = ...
    previous_details = ...


FileRequestCloseDetails_validator = ...
class FileRequestCloseType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestCloseType_validator = ...
class FileRequestCreateDetails(bb.Struct):
    """
    Created file request.

    :ivar team_log.FileRequestCreateDetails.file_request_id: File request id.
        Might be missing due to historical data gap.
    :ivar team_log.FileRequestCreateDetails.request_details: File request
        details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_request_id=..., request_details=...) -> None:
        ...
    
    file_request_id = ...
    request_details = ...


FileRequestCreateDetails_validator = ...
class FileRequestCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestCreateType_validator = ...
class FileRequestDeadline(bb.Struct):
    """
    File request deadline

    :ivar team_log.FileRequestDeadline.deadline: The deadline for this file
        request. Might be missing due to historical data gap.
    :ivar team_log.FileRequestDeadline.allow_late_uploads: If set, allow uploads
        after the deadline has passed.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, deadline=..., allow_late_uploads=...) -> None:
        ...
    
    deadline = ...
    allow_late_uploads = ...


FileRequestDeadline_validator = ...
class FileRequestDeleteDetails(bb.Struct):
    """
    Delete file request.

    :ivar team_log.FileRequestDeleteDetails.file_request_id: File request id.
        Might be missing due to historical data gap.
    :ivar team_log.FileRequestDeleteDetails.previous_details: Previous file
        request details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_request_id=..., previous_details=...) -> None:
        ...
    
    file_request_id = ...
    previous_details = ...


FileRequestDeleteDetails_validator = ...
class FileRequestDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestDeleteType_validator = ...
class FileRequestDetails(bb.Struct):
    """
    File request details

    :ivar team_log.FileRequestDetails.asset_index: Asset position in the Assets
        list.
    :ivar team_log.FileRequestDetails.deadline: File request deadline.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, asset_index=..., deadline=...) -> None:
        ...
    
    asset_index = ...
    deadline = ...


FileRequestDetails_validator = ...
class FileRequestReceiveFileDetails(bb.Struct):
    """
    Received files for file request.

    :ivar team_log.FileRequestReceiveFileDetails.file_request_id: File request
        id. Might be missing due to historical data gap.
    :ivar team_log.FileRequestReceiveFileDetails.file_request_details: File
        request details. Might be missing due to historical data gap.
    :ivar team_log.FileRequestReceiveFileDetails.submitted_file_names: Submitted
        file names.
    :ivar team_log.FileRequestReceiveFileDetails.submitter_name: The name as
        provided by the submitter.
    :ivar team_log.FileRequestReceiveFileDetails.submitter_email: The email as
        provided by the submitter.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, submitted_file_names=..., file_request_id=..., file_request_details=..., submitter_name=..., submitter_email=...) -> None:
        ...
    
    file_request_id = ...
    file_request_details = ...
    submitted_file_names = ...
    submitter_name = ...
    submitter_email = ...


FileRequestReceiveFileDetails_validator = ...
class FileRequestReceiveFileType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestReceiveFileType_validator = ...
class FileRequestsChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled file requests.

    :ivar team_log.FileRequestsChangePolicyDetails.new_value: New file requests
        policy.
    :ivar team_log.FileRequestsChangePolicyDetails.previous_value: Previous file
        requests policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


FileRequestsChangePolicyDetails_validator = ...
class FileRequestsChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestsChangePolicyType_validator = ...
class FileRequestsEmailsEnabledDetails(bb.Struct):
    """
    Enabled file request emails for everyone.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileRequestsEmailsEnabledDetails_validator = ...
class FileRequestsEmailsEnabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestsEmailsEnabledType_validator = ...
class FileRequestsEmailsRestrictedToTeamOnlyDetails(bb.Struct):
    """
    Enabled file request emails for team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileRequestsEmailsRestrictedToTeamOnlyDetails_validator = ...
class FileRequestsEmailsRestrictedToTeamOnlyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRequestsEmailsRestrictedToTeamOnlyType_validator = ...
class FileRequestsPolicy(bb.Union):
    """
    File requests policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


FileRequestsPolicy_validator = ...
class FileResolveCommentDetails(bb.Struct):
    """
    Resolved file comment.

    :ivar team_log.FileResolveCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, comment_text=...) -> None:
        ...
    
    comment_text = ...


FileResolveCommentDetails_validator = ...
class FileResolveCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileResolveCommentType_validator = ...
class FileRestoreDetails(bb.Struct):
    """
    Restored deleted files and/or folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileRestoreDetails_validator = ...
class FileRestoreType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRestoreType_validator = ...
class FileRevertDetails(bb.Struct):
    """
    Reverted files to previous version.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileRevertDetails_validator = ...
class FileRevertType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRevertType_validator = ...
class FileRollbackChangesDetails(bb.Struct):
    """
    Rolled back file actions.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


FileRollbackChangesDetails_validator = ...
class FileRollbackChangesType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileRollbackChangesType_validator = ...
class FileSaveCopyReferenceDetails(bb.Struct):
    """
    Saved file/folder using copy reference.

    :ivar team_log.FileSaveCopyReferenceDetails.relocate_action_details:
        Relocate action details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, relocate_action_details=...) -> None:
        ...
    
    relocate_action_details = ...


FileSaveCopyReferenceDetails_validator = ...
class FileSaveCopyReferenceType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileSaveCopyReferenceType_validator = ...
class FileTransfersFileAddDetails(bb.Struct):
    """
    Transfer files added.

    :ivar team_log.FileTransfersFileAddDetails.file_transfer_id: Transfer id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_transfer_id=...) -> None:
        ...
    
    file_transfer_id = ...


FileTransfersFileAddDetails_validator = ...
class FileTransfersFileAddType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileTransfersFileAddType_validator = ...
class FileTransfersPolicy(bb.Union):
    """
    File transfers policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


FileTransfersPolicy_validator = ...
class FileTransfersPolicyChangedDetails(bb.Struct):
    """
    Changed file transfers policy for team.

    :ivar team_log.FileTransfersPolicyChangedDetails.new_value: New file
        transfers policy.
    :ivar team_log.FileTransfersPolicyChangedDetails.previous_value: Previous
        file transfers policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


FileTransfersPolicyChangedDetails_validator = ...
class FileTransfersPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileTransfersPolicyChangedType_validator = ...
class FileTransfersTransferDeleteDetails(bb.Struct):
    """
    Deleted transfer.

    :ivar team_log.FileTransfersTransferDeleteDetails.file_transfer_id: Transfer
        id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_transfer_id=...) -> None:
        ...
    
    file_transfer_id = ...


FileTransfersTransferDeleteDetails_validator = ...
class FileTransfersTransferDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileTransfersTransferDeleteType_validator = ...
class FileTransfersTransferDownloadDetails(bb.Struct):
    """
    Transfer downloaded.

    :ivar team_log.FileTransfersTransferDownloadDetails.file_transfer_id:
        Transfer id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_transfer_id=...) -> None:
        ...
    
    file_transfer_id = ...


FileTransfersTransferDownloadDetails_validator = ...
class FileTransfersTransferDownloadType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileTransfersTransferDownloadType_validator = ...
class FileTransfersTransferSendDetails(bb.Struct):
    """
    Sent transfer.

    :ivar team_log.FileTransfersTransferSendDetails.file_transfer_id: Transfer
        id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_transfer_id=...) -> None:
        ...
    
    file_transfer_id = ...


FileTransfersTransferSendDetails_validator = ...
class FileTransfersTransferSendType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileTransfersTransferSendType_validator = ...
class FileTransfersTransferViewDetails(bb.Struct):
    """
    Viewed transfer.

    :ivar team_log.FileTransfersTransferViewDetails.file_transfer_id: Transfer
        id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, file_transfer_id=...) -> None:
        ...
    
    file_transfer_id = ...


FileTransfersTransferViewDetails_validator = ...
class FileTransfersTransferViewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileTransfersTransferViewType_validator = ...
class FileUnlikeCommentDetails(bb.Struct):
    """
    Unliked file comment.

    :ivar team_log.FileUnlikeCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, comment_text=...) -> None:
        ...
    
    comment_text = ...


FileUnlikeCommentDetails_validator = ...
class FileUnlikeCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileUnlikeCommentType_validator = ...
class FileUnresolveCommentDetails(bb.Struct):
    """
    Unresolved file comment.

    :ivar team_log.FileUnresolveCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, comment_text=...) -> None:
        ...
    
    comment_text = ...


FileUnresolveCommentDetails_validator = ...
class FileUnresolveCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FileUnresolveCommentType_validator = ...
class FolderLinkRestrictionPolicy(bb.Union):
    """
    Policy for deciding whether applying link restrictions on all team owned
    folders

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


FolderLinkRestrictionPolicy_validator = ...
class FolderLinkRestrictionPolicyChangedDetails(bb.Struct):
    """
    Changed folder link restrictions policy for team.

    :ivar team_log.FolderLinkRestrictionPolicyChangedDetails.new_value: To.
    :ivar team_log.FolderLinkRestrictionPolicyChangedDetails.previous_value:
        From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


FolderLinkRestrictionPolicyChangedDetails_validator = ...
class FolderLinkRestrictionPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FolderLinkRestrictionPolicyChangedType_validator = ...
class FolderLogInfo(FileOrFolderLogInfo):
    """
    Folder's logged information.

    :ivar team_log.FolderLogInfo.file_count: Number of files within the folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, path=..., display_name=..., file_id=..., file_size=..., file_count=...) -> None:
        ...
    
    file_count = ...


FolderLogInfo_validator = ...
class FolderOverviewDescriptionChangedDetails(bb.Struct):
    """
    Updated folder overview.

    :ivar
        team_log.FolderOverviewDescriptionChangedDetails.folder_overview_location_asset:
        Folder Overview location position in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, folder_overview_location_asset=...) -> None:
        ...
    
    folder_overview_location_asset = ...


FolderOverviewDescriptionChangedDetails_validator = ...
class FolderOverviewDescriptionChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FolderOverviewDescriptionChangedType_validator = ...
class FolderOverviewItemPinnedDetails(bb.Struct):
    """
    Pinned item to folder overview.

    :ivar
        team_log.FolderOverviewItemPinnedDetails.folder_overview_location_asset:
        Folder Overview location position in the Assets list.
    :ivar team_log.FolderOverviewItemPinnedDetails.pinned_items_asset_indices:
        Pinned items positions in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, folder_overview_location_asset=..., pinned_items_asset_indices=...) -> None:
        ...
    
    folder_overview_location_asset = ...
    pinned_items_asset_indices = ...


FolderOverviewItemPinnedDetails_validator = ...
class FolderOverviewItemPinnedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FolderOverviewItemPinnedType_validator = ...
class FolderOverviewItemUnpinnedDetails(bb.Struct):
    """
    Unpinned item from folder overview.

    :ivar
        team_log.FolderOverviewItemUnpinnedDetails.folder_overview_location_asset:
        Folder Overview location position in the Assets list.
    :ivar team_log.FolderOverviewItemUnpinnedDetails.pinned_items_asset_indices:
        Pinned items positions in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, folder_overview_location_asset=..., pinned_items_asset_indices=...) -> None:
        ...
    
    folder_overview_location_asset = ...
    pinned_items_asset_indices = ...


FolderOverviewItemUnpinnedDetails_validator = ...
class FolderOverviewItemUnpinnedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


FolderOverviewItemUnpinnedType_validator = ...
class GeoLocationLogInfo(bb.Struct):
    """
    Geographic location details.

    :ivar team_log.GeoLocationLogInfo.city: City name.
    :ivar team_log.GeoLocationLogInfo.region: Region name.
    :ivar team_log.GeoLocationLogInfo.country: Country code.
    :ivar team_log.GeoLocationLogInfo.ip_address: IP address.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, ip_address=..., city=..., region=..., country=...) -> None:
        ...
    
    city = ...
    region = ...
    country = ...
    ip_address = ...


GeoLocationLogInfo_validator = ...
class GetTeamEventsArg(bb.Struct):
    """
    :ivar team_log.GetTeamEventsArg.limit: The maximal number of results to
        return per call. Note that some calls may not return ``limit`` number of
        events, and may even return no events, even with `has_more` set to true.
        In this case, callers should fetch again using
        :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events_continue`.
    :ivar team_log.GetTeamEventsArg.account_id: Filter the events by account ID.
        Return only events with this account_id as either Actor, Context, or
        Participants.
    :ivar team_log.GetTeamEventsArg.time: Filter by time range.
    :ivar team_log.GetTeamEventsArg.category: Filter the returned events to a
        single category. Note that category shouldn't be provided together with
        event_type.
    :ivar team_log.GetTeamEventsArg.event_type: Filter the returned events to a
        single event type. Note that event_type shouldn't be provided together
        with category.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, limit=..., account_id=..., time=..., category=..., event_type=...) -> None:
        ...
    
    limit = ...
    account_id = ...
    time = ...
    category = ...
    event_type = ...


GetTeamEventsArg_validator = ...
class GetTeamEventsContinueArg(bb.Struct):
    """
    :ivar team_log.GetTeamEventsContinueArg.cursor: Indicates from what point to
        get the next set of events.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, cursor=...) -> None:
        ...
    
    cursor = ...


GetTeamEventsContinueArg_validator = ...
class GetTeamEventsContinueError(bb.Union):
    """
    Errors that can be raised when calling
    :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events_continue`.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_log.GetTeamEventsContinueError.bad_cursor: Bad cursor.
    :ivar datetime.datetime team_log.GetTeamEventsContinueError.reset: Cursors
        are intended to be used quickly. Individual cursor values are normally
        valid for days, but in rare cases may be reset sooner. Cursor reset
        errors should be handled by fetching a new cursor from
        :route:`get_events`. The associated value is the approximate timestamp
        of the most recent event returned by the cursor. This should be used as
        a resumption point when calling :route:`get_events` to obtain a new
        cursor.
    """
    _catch_all = ...
    bad_cursor = ...
    other = ...
    @classmethod
    def reset(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``reset`` tag with value
        ``val``.

        :param datetime.datetime val:
        :rtype: GetTeamEventsContinueError
        """
        ...
    
    def is_bad_cursor(self):
        """
        Check if the union tag is ``bad_cursor``.

        :rtype: bool
        """
        ...
    
    def is_reset(self):
        """
        Check if the union tag is ``reset``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_reset(self): # -> None:
        """
        Cursors are intended to be used quickly. Individual cursor values are
        normally valid for days, but in rare cases may be reset sooner. Cursor
        reset errors should be handled by fetching a new cursor from
        :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events`. The
        associated value is the approximate timestamp of the most recent event
        returned by the cursor. This should be used as a resumption point when
        calling :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events` to
        obtain a new cursor.

        Only call this if :meth:`is_reset` is true.

        :rtype: datetime.datetime
        """
        ...
    


GetTeamEventsContinueError_validator = ...
class GetTeamEventsError(bb.Union):
    """
    Errors that can be raised when calling
    :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events`.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_log.GetTeamEventsError.account_id_not_found: No user found
        matching the provided account_id.
    :ivar team_log.GetTeamEventsError.invalid_time_range: Invalid time range.
    :ivar team_log.GetTeamEventsError.invalid_filters: Invalid filters. Do not
        specify both event_type and category parameters for the same call.
    """
    _catch_all = ...
    account_id_not_found = ...
    invalid_time_range = ...
    invalid_filters = ...
    other = ...
    def is_account_id_not_found(self):
        """
        Check if the union tag is ``account_id_not_found``.

        :rtype: bool
        """
        ...
    
    def is_invalid_time_range(self):
        """
        Check if the union tag is ``invalid_time_range``.

        :rtype: bool
        """
        ...
    
    def is_invalid_filters(self):
        """
        Check if the union tag is ``invalid_filters``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


GetTeamEventsError_validator = ...
class GetTeamEventsResult(bb.Struct):
    """
    :ivar team_log.GetTeamEventsResult.events: List of events. Note that events
        are not guaranteed to be sorted by their timestamp value.
    :ivar team_log.GetTeamEventsResult.cursor: Pass the cursor into
        :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events_continue` to
        obtain additional events. The value of ``cursor`` may change for each
        response from
        :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events_continue`,
        regardless of the value of ``has_more``; older cursor strings may
        expire. Thus, callers should ensure that they update their cursor based
        on the latest value of ``cursor`` after each call, and poll regularly if
        they wish to poll for new events. Callers should handle reset exceptions
        for expired cursors.
    :ivar team_log.GetTeamEventsResult.has_more: Is true if there may be
        additional events that have not been returned yet. An additional call to
        :meth:`dropbox.dropbox_client.Dropbox.team_log_get_events_continue` can
        retrieve them. Note that ``has_more`` may be ``True``, even if
        ``events`` is empty.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, events=..., cursor=..., has_more=...) -> None:
        ...
    
    events = ...
    cursor = ...
    has_more = ...


GetTeamEventsResult_validator = ...
class GoogleSsoChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled Google single sign-on for team.

    :ivar team_log.GoogleSsoChangePolicyDetails.new_value: New Google single
        sign-on policy.
    :ivar team_log.GoogleSsoChangePolicyDetails.previous_value: Previous Google
        single sign-on policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


GoogleSsoChangePolicyDetails_validator = ...
class GoogleSsoChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GoogleSsoChangePolicyType_validator = ...
class GoogleSsoPolicy(bb.Union):
    """
    Google SSO policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


GoogleSsoPolicy_validator = ...
class GovernancePolicyAddFolderFailedDetails(bb.Struct):
    """
    Couldn't add a folder to a policy.

    :ivar team_log.GovernancePolicyAddFolderFailedDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyAddFolderFailedDetails.name: Policy name.
    :ivar team_log.GovernancePolicyAddFolderFailedDetails.policy_type: Policy
        type.
    :ivar team_log.GovernancePolicyAddFolderFailedDetails.folder: Folder.
    :ivar team_log.GovernancePolicyAddFolderFailedDetails.reason: Reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., folder=..., policy_type=..., reason=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    folder = ...
    reason = ...


GovernancePolicyAddFolderFailedDetails_validator = ...
class GovernancePolicyAddFolderFailedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyAddFolderFailedType_validator = ...
class GovernancePolicyAddFoldersDetails(bb.Struct):
    """
    Added folders to policy.

    :ivar team_log.GovernancePolicyAddFoldersDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyAddFoldersDetails.name: Policy name.
    :ivar team_log.GovernancePolicyAddFoldersDetails.policy_type: Policy type.
    :ivar team_log.GovernancePolicyAddFoldersDetails.folders: Folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., policy_type=..., folders=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    folders = ...


GovernancePolicyAddFoldersDetails_validator = ...
class GovernancePolicyAddFoldersType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyAddFoldersType_validator = ...
class GovernancePolicyContentDisposedDetails(bb.Struct):
    """
    Content disposed.

    :ivar team_log.GovernancePolicyContentDisposedDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyContentDisposedDetails.name: Policy name.
    :ivar team_log.GovernancePolicyContentDisposedDetails.policy_type: Policy
        type.
    :ivar team_log.GovernancePolicyContentDisposedDetails.disposition_type:
        Disposition type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., disposition_type=..., policy_type=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    disposition_type = ...


GovernancePolicyContentDisposedDetails_validator = ...
class GovernancePolicyContentDisposedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyContentDisposedType_validator = ...
class GovernancePolicyCreateDetails(bb.Struct):
    """
    Activated a new policy.

    :ivar team_log.GovernancePolicyCreateDetails.governance_policy_id: Policy
        ID.
    :ivar team_log.GovernancePolicyCreateDetails.name: Policy name.
    :ivar team_log.GovernancePolicyCreateDetails.policy_type: Policy type.
    :ivar team_log.GovernancePolicyCreateDetails.duration: Duration in days.
    :ivar team_log.GovernancePolicyCreateDetails.folders: Folders.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., duration=..., policy_type=..., folders=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    duration = ...
    folders = ...


GovernancePolicyCreateDetails_validator = ...
class GovernancePolicyCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyCreateType_validator = ...
class GovernancePolicyDeleteDetails(bb.Struct):
    """
    Deleted a policy.

    :ivar team_log.GovernancePolicyDeleteDetails.governance_policy_id: Policy
        ID.
    :ivar team_log.GovernancePolicyDeleteDetails.name: Policy name.
    :ivar team_log.GovernancePolicyDeleteDetails.policy_type: Policy type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., policy_type=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...


GovernancePolicyDeleteDetails_validator = ...
class GovernancePolicyDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyDeleteType_validator = ...
class GovernancePolicyEditDetailsDetails(bb.Struct):
    """
    Edited policy.

    :ivar team_log.GovernancePolicyEditDetailsDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyEditDetailsDetails.name: Policy name.
    :ivar team_log.GovernancePolicyEditDetailsDetails.policy_type: Policy type.
    :ivar team_log.GovernancePolicyEditDetailsDetails.attribute: Attribute.
    :ivar team_log.GovernancePolicyEditDetailsDetails.previous_value: From.
    :ivar team_log.GovernancePolicyEditDetailsDetails.new_value: To.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., attribute=..., previous_value=..., new_value=..., policy_type=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    attribute = ...
    previous_value = ...
    new_value = ...


GovernancePolicyEditDetailsDetails_validator = ...
class GovernancePolicyEditDetailsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyEditDetailsType_validator = ...
class GovernancePolicyEditDurationDetails(bb.Struct):
    """
    Changed policy duration.

    :ivar team_log.GovernancePolicyEditDurationDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyEditDurationDetails.name: Policy name.
    :ivar team_log.GovernancePolicyEditDurationDetails.policy_type: Policy type.
    :ivar team_log.GovernancePolicyEditDurationDetails.previous_value: From.
    :ivar team_log.GovernancePolicyEditDurationDetails.new_value: To.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., previous_value=..., new_value=..., policy_type=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    previous_value = ...
    new_value = ...


GovernancePolicyEditDurationDetails_validator = ...
class GovernancePolicyEditDurationType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyEditDurationType_validator = ...
class GovernancePolicyExportCreatedDetails(bb.Struct):
    """
    Created a policy download.

    :ivar team_log.GovernancePolicyExportCreatedDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyExportCreatedDetails.name: Policy name.
    :ivar team_log.GovernancePolicyExportCreatedDetails.policy_type: Policy
        type.
    :ivar team_log.GovernancePolicyExportCreatedDetails.export_name: Export
        name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., export_name=..., policy_type=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    export_name = ...


GovernancePolicyExportCreatedDetails_validator = ...
class GovernancePolicyExportCreatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyExportCreatedType_validator = ...
class GovernancePolicyExportRemovedDetails(bb.Struct):
    """
    Removed a policy download.

    :ivar team_log.GovernancePolicyExportRemovedDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyExportRemovedDetails.name: Policy name.
    :ivar team_log.GovernancePolicyExportRemovedDetails.policy_type: Policy
        type.
    :ivar team_log.GovernancePolicyExportRemovedDetails.export_name: Export
        name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., export_name=..., policy_type=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    export_name = ...


GovernancePolicyExportRemovedDetails_validator = ...
class GovernancePolicyExportRemovedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyExportRemovedType_validator = ...
class GovernancePolicyRemoveFoldersDetails(bb.Struct):
    """
    Removed folders from policy.

    :ivar team_log.GovernancePolicyRemoveFoldersDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyRemoveFoldersDetails.name: Policy name.
    :ivar team_log.GovernancePolicyRemoveFoldersDetails.policy_type: Policy
        type.
    :ivar team_log.GovernancePolicyRemoveFoldersDetails.folders: Folders.
    :ivar team_log.GovernancePolicyRemoveFoldersDetails.reason: Reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., policy_type=..., folders=..., reason=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    folders = ...
    reason = ...


GovernancePolicyRemoveFoldersDetails_validator = ...
class GovernancePolicyRemoveFoldersType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyRemoveFoldersType_validator = ...
class GovernancePolicyReportCreatedDetails(bb.Struct):
    """
    Created a summary report for a policy.

    :ivar team_log.GovernancePolicyReportCreatedDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyReportCreatedDetails.name: Policy name.
    :ivar team_log.GovernancePolicyReportCreatedDetails.policy_type: Policy
        type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., policy_type=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...


GovernancePolicyReportCreatedDetails_validator = ...
class GovernancePolicyReportCreatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyReportCreatedType_validator = ...
class GovernancePolicyZipPartDownloadedDetails(bb.Struct):
    """
    Downloaded content from a policy.

    :ivar
        team_log.GovernancePolicyZipPartDownloadedDetails.governance_policy_id:
        Policy ID.
    :ivar team_log.GovernancePolicyZipPartDownloadedDetails.name: Policy name.
    :ivar team_log.GovernancePolicyZipPartDownloadedDetails.policy_type: Policy
        type.
    :ivar team_log.GovernancePolicyZipPartDownloadedDetails.export_name: Export
        name.
    :ivar team_log.GovernancePolicyZipPartDownloadedDetails.part: Part.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, governance_policy_id=..., name=..., export_name=..., policy_type=..., part=...) -> None:
        ...
    
    governance_policy_id = ...
    name = ...
    policy_type = ...
    export_name = ...
    part = ...


GovernancePolicyZipPartDownloadedDetails_validator = ...
class GovernancePolicyZipPartDownloadedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GovernancePolicyZipPartDownloadedType_validator = ...
class GroupAddExternalIdDetails(bb.Struct):
    """
    Added external ID for group.

    :ivar team_log.GroupAddExternalIdDetails.new_value: Current external id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


GroupAddExternalIdDetails_validator = ...
class GroupAddExternalIdType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupAddExternalIdType_validator = ...
class GroupAddMemberDetails(bb.Struct):
    """
    Added team members to group.

    :ivar team_log.GroupAddMemberDetails.is_group_owner: Is group owner.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, is_group_owner=...) -> None:
        ...
    
    is_group_owner = ...


GroupAddMemberDetails_validator = ...
class GroupAddMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupAddMemberType_validator = ...
class GroupChangeExternalIdDetails(bb.Struct):
    """
    Changed external ID for group.

    :ivar team_log.GroupChangeExternalIdDetails.new_value: Current external id.
    :ivar team_log.GroupChangeExternalIdDetails.previous_value: Old external id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


GroupChangeExternalIdDetails_validator = ...
class GroupChangeExternalIdType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupChangeExternalIdType_validator = ...
class GroupChangeManagementTypeDetails(bb.Struct):
    """
    Changed group management type.

    :ivar team_log.GroupChangeManagementTypeDetails.new_value: New group
        management type.
    :ivar team_log.GroupChangeManagementTypeDetails.previous_value: Previous
        group management type. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


GroupChangeManagementTypeDetails_validator = ...
class GroupChangeManagementTypeType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupChangeManagementTypeType_validator = ...
class GroupChangeMemberRoleDetails(bb.Struct):
    """
    Changed manager permissions of group member.

    :ivar team_log.GroupChangeMemberRoleDetails.is_group_owner: Is group owner.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, is_group_owner=...) -> None:
        ...
    
    is_group_owner = ...


GroupChangeMemberRoleDetails_validator = ...
class GroupChangeMemberRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupChangeMemberRoleType_validator = ...
class GroupCreateDetails(bb.Struct):
    """
    Created group.

    :ivar team_log.GroupCreateDetails.is_company_managed: Is company managed
        group.
    :ivar team_log.GroupCreateDetails.join_policy: Group join policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, is_company_managed=..., join_policy=...) -> None:
        ...
    
    is_company_managed = ...
    join_policy = ...


GroupCreateDetails_validator = ...
class GroupCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupCreateType_validator = ...
class GroupDeleteDetails(bb.Struct):
    """
    Deleted group.

    :ivar team_log.GroupDeleteDetails.is_company_managed: Is company managed
        group.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, is_company_managed=...) -> None:
        ...
    
    is_company_managed = ...


GroupDeleteDetails_validator = ...
class GroupDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupDeleteType_validator = ...
class GroupDescriptionUpdatedDetails(bb.Struct):
    """
    Updated group.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


GroupDescriptionUpdatedDetails_validator = ...
class GroupDescriptionUpdatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupDescriptionUpdatedType_validator = ...
class GroupJoinPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    open = ...
    request_to_join = ...
    other = ...
    def is_open(self):
        """
        Check if the union tag is ``open``.

        :rtype: bool
        """
        ...
    
    def is_request_to_join(self):
        """
        Check if the union tag is ``request_to_join``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


GroupJoinPolicy_validator = ...
class GroupJoinPolicyUpdatedDetails(bb.Struct):
    """
    Updated group join policy.

    :ivar team_log.GroupJoinPolicyUpdatedDetails.is_company_managed: Is company
        managed group.
    :ivar team_log.GroupJoinPolicyUpdatedDetails.join_policy: Group join policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, is_company_managed=..., join_policy=...) -> None:
        ...
    
    is_company_managed = ...
    join_policy = ...


GroupJoinPolicyUpdatedDetails_validator = ...
class GroupJoinPolicyUpdatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupJoinPolicyUpdatedType_validator = ...
class GroupLogInfo(bb.Struct):
    """
    Group's logged information.

    :ivar team_log.GroupLogInfo.group_id: The unique id of this group.
    :ivar team_log.GroupLogInfo.display_name: The name of this group.
    :ivar team_log.GroupLogInfo.external_id: External group ID.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, display_name=..., group_id=..., external_id=...) -> None:
        ...
    
    group_id = ...
    display_name = ...
    external_id = ...


GroupLogInfo_validator = ...
class GroupMovedDetails(bb.Struct):
    """
    Moved group.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


GroupMovedDetails_validator = ...
class GroupMovedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupMovedType_validator = ...
class GroupRemoveExternalIdDetails(bb.Struct):
    """
    Removed external ID for group.

    :ivar team_log.GroupRemoveExternalIdDetails.previous_value: Old external id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=...) -> None:
        ...
    
    previous_value = ...


GroupRemoveExternalIdDetails_validator = ...
class GroupRemoveExternalIdType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupRemoveExternalIdType_validator = ...
class GroupRemoveMemberDetails(bb.Struct):
    """
    Removed team members from group.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


GroupRemoveMemberDetails_validator = ...
class GroupRemoveMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupRemoveMemberType_validator = ...
class GroupRenameDetails(bb.Struct):
    """
    Renamed group.

    :ivar team_log.GroupRenameDetails.previous_value: Previous display name.
    :ivar team_log.GroupRenameDetails.new_value: New display name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


GroupRenameDetails_validator = ...
class GroupRenameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupRenameType_validator = ...
class GroupUserManagementChangePolicyDetails(bb.Struct):
    """
    Changed who can create groups.

    :ivar team_log.GroupUserManagementChangePolicyDetails.new_value: New group
        users management policy.
    :ivar team_log.GroupUserManagementChangePolicyDetails.previous_value:
        Previous group users management policy. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


GroupUserManagementChangePolicyDetails_validator = ...
class GroupUserManagementChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GroupUserManagementChangePolicyType_validator = ...
class GuestAdminChangeStatusDetails(bb.Struct):
    """
    Changed guest team admin status.

    :ivar team_log.GuestAdminChangeStatusDetails.is_guest: True for guest, false
        for host.
    :ivar team_log.GuestAdminChangeStatusDetails.guest_team_name: The name of
        the guest team.
    :ivar team_log.GuestAdminChangeStatusDetails.host_team_name: The name of the
        host team.
    :ivar team_log.GuestAdminChangeStatusDetails.previous_value: Previous
        request state.
    :ivar team_log.GuestAdminChangeStatusDetails.new_value: New request state.
    :ivar team_log.GuestAdminChangeStatusDetails.action_details: Action details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, is_guest=..., previous_value=..., new_value=..., action_details=..., guest_team_name=..., host_team_name=...) -> None:
        ...
    
    is_guest = ...
    guest_team_name = ...
    host_team_name = ...
    previous_value = ...
    new_value = ...
    action_details = ...


GuestAdminChangeStatusDetails_validator = ...
class GuestAdminChangeStatusType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GuestAdminChangeStatusType_validator = ...
class GuestAdminSignedInViaTrustedTeamsDetails(bb.Struct):
    """
    Started trusted team admin session.

    :ivar team_log.GuestAdminSignedInViaTrustedTeamsDetails.team_name: Host team
        name.
    :ivar team_log.GuestAdminSignedInViaTrustedTeamsDetails.trusted_team_name:
        Trusted team name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team_name=..., trusted_team_name=...) -> None:
        ...
    
    team_name = ...
    trusted_team_name = ...


GuestAdminSignedInViaTrustedTeamsDetails_validator = ...
class GuestAdminSignedInViaTrustedTeamsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GuestAdminSignedInViaTrustedTeamsType_validator = ...
class GuestAdminSignedOutViaTrustedTeamsDetails(bb.Struct):
    """
    Ended trusted team admin session.

    :ivar team_log.GuestAdminSignedOutViaTrustedTeamsDetails.team_name: Host
        team name.
    :ivar team_log.GuestAdminSignedOutViaTrustedTeamsDetails.trusted_team_name:
        Trusted team name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team_name=..., trusted_team_name=...) -> None:
        ...
    
    team_name = ...
    trusted_team_name = ...


GuestAdminSignedOutViaTrustedTeamsDetails_validator = ...
class GuestAdminSignedOutViaTrustedTeamsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


GuestAdminSignedOutViaTrustedTeamsType_validator = ...
class IdentifierType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    email = ...
    facebook_profile_name = ...
    other = ...
    def is_email(self):
        """
        Check if the union tag is ``email``.

        :rtype: bool
        """
        ...
    
    def is_facebook_profile_name(self):
        """
        Check if the union tag is ``facebook_profile_name``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


IdentifierType_validator = ...
class IntegrationConnectedDetails(bb.Struct):
    """
    Connected integration for member.

    :ivar team_log.IntegrationConnectedDetails.integration_name: Name of the
        third-party integration.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, integration_name=...) -> None:
        ...
    
    integration_name = ...


IntegrationConnectedDetails_validator = ...
class IntegrationConnectedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


IntegrationConnectedType_validator = ...
class IntegrationDisconnectedDetails(bb.Struct):
    """
    Disconnected integration for member.

    :ivar team_log.IntegrationDisconnectedDetails.integration_name: Name of the
        third-party integration.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, integration_name=...) -> None:
        ...
    
    integration_name = ...


IntegrationDisconnectedDetails_validator = ...
class IntegrationDisconnectedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


IntegrationDisconnectedType_validator = ...
class IntegrationPolicy(bb.Union):
    """
    Policy for controlling whether a service integration is enabled for the
    team.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


IntegrationPolicy_validator = ...
class IntegrationPolicyChangedDetails(bb.Struct):
    """
    Changed integration policy for team.

    :ivar team_log.IntegrationPolicyChangedDetails.integration_name: Name of the
        third-party integration.
    :ivar team_log.IntegrationPolicyChangedDetails.new_value: New integration
        policy.
    :ivar team_log.IntegrationPolicyChangedDetails.previous_value: Previous
        integration policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, integration_name=..., new_value=..., previous_value=...) -> None:
        ...
    
    integration_name = ...
    new_value = ...
    previous_value = ...


IntegrationPolicyChangedDetails_validator = ...
class IntegrationPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


IntegrationPolicyChangedType_validator = ...
class InviteAcceptanceEmailPolicy(bb.Union):
    """
    Policy for deciding whether team admins receive email when an invitation to
    join the team is accepted

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


InviteAcceptanceEmailPolicy_validator = ...
class InviteAcceptanceEmailPolicyChangedDetails(bb.Struct):
    """
    Changed invite accept email policy for team.

    :ivar team_log.InviteAcceptanceEmailPolicyChangedDetails.new_value: To.
    :ivar team_log.InviteAcceptanceEmailPolicyChangedDetails.previous_value:
        From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


InviteAcceptanceEmailPolicyChangedDetails_validator = ...
class InviteAcceptanceEmailPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


InviteAcceptanceEmailPolicyChangedType_validator = ...
class InviteMethod(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    auto_approve = ...
    invite_link = ...
    member_invite = ...
    moved_from_another_team = ...
    other = ...
    def is_auto_approve(self):
        """
        Check if the union tag is ``auto_approve``.

        :rtype: bool
        """
        ...
    
    def is_invite_link(self):
        """
        Check if the union tag is ``invite_link``.

        :rtype: bool
        """
        ...
    
    def is_member_invite(self):
        """
        Check if the union tag is ``member_invite``.

        :rtype: bool
        """
        ...
    
    def is_moved_from_another_team(self):
        """
        Check if the union tag is ``moved_from_another_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


InviteMethod_validator = ...
class JoinTeamDetails(bb.Struct):
    """
    Additional information relevant when a new member joins the team.

    :ivar team_log.JoinTeamDetails.linked_apps: Linked applications.
        (Deprecated) Please use has_linked_apps boolean field instead.
    :ivar team_log.JoinTeamDetails.linked_devices: Linked devices. (Deprecated)
        Please use has_linked_devices boolean field instead.
    :ivar team_log.JoinTeamDetails.linked_shared_folders: Linked shared folders.
        (Deprecated) Please use has_linked_shared_folders boolean field instead.
    :ivar team_log.JoinTeamDetails.was_linked_apps_truncated: (Deprecated) True
        if the linked_apps list was truncated to the maximum supported length
        (50).
    :ivar team_log.JoinTeamDetails.was_linked_devices_truncated: (Deprecated)
        True if the linked_devices list was truncated to the maximum supported
        length (50).
    :ivar team_log.JoinTeamDetails.was_linked_shared_folders_truncated:
        (Deprecated) True if the linked_shared_folders list was truncated to the
        maximum supported length (50).
    :ivar team_log.JoinTeamDetails.has_linked_apps: True if the user had linked
        apps at event time.
    :ivar team_log.JoinTeamDetails.has_linked_devices: True if the user had
        linked apps at event time.
    :ivar team_log.JoinTeamDetails.has_linked_shared_folders: True if the user
        had linked shared folders at event time.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, linked_apps=..., linked_devices=..., linked_shared_folders=..., was_linked_apps_truncated=..., was_linked_devices_truncated=..., was_linked_shared_folders_truncated=..., has_linked_apps=..., has_linked_devices=..., has_linked_shared_folders=...) -> None:
        ...
    
    linked_apps = ...
    linked_devices = ...
    linked_shared_folders = ...
    was_linked_apps_truncated = ...
    was_linked_devices_truncated = ...
    was_linked_shared_folders_truncated = ...
    has_linked_apps = ...
    has_linked_devices = ...
    has_linked_shared_folders = ...


JoinTeamDetails_validator = ...
class LabelType(bb.Union):
    """
    Label type

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    personal_information = ...
    test_only = ...
    user_defined_tag = ...
    other = ...
    def is_personal_information(self):
        """
        Check if the union tag is ``personal_information``.

        :rtype: bool
        """
        ...
    
    def is_test_only(self):
        """
        Check if the union tag is ``test_only``.

        :rtype: bool
        """
        ...
    
    def is_user_defined_tag(self):
        """
        Check if the union tag is ``user_defined_tag``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


LabelType_validator = ...
class LegacyDeviceSessionLogInfo(DeviceSessionLogInfo):
    """
    Information on sessions, in legacy format

    :ivar team_log.LegacyDeviceSessionLogInfo.session_info: Session unique id.
    :ivar team_log.LegacyDeviceSessionLogInfo.display_name: The device name.
        Might be missing due to historical data gap.
    :ivar team_log.LegacyDeviceSessionLogInfo.is_emm_managed: Is device managed
        by emm. Might be missing due to historical data gap.
    :ivar team_log.LegacyDeviceSessionLogInfo.platform: Information on the
        hosting platform. Might be missing due to historical data gap.
    :ivar team_log.LegacyDeviceSessionLogInfo.mac_address: The mac address of
        the last activity from this session. Might be missing due to historical
        data gap.
    :ivar team_log.LegacyDeviceSessionLogInfo.os_version: The hosting OS
        version. Might be missing due to historical data gap.
    :ivar team_log.LegacyDeviceSessionLogInfo.device_type: Information on the
        hosting device type. Might be missing due to historical data gap.
    :ivar team_log.LegacyDeviceSessionLogInfo.client_version: The Dropbox client
        version. Might be missing due to historical data gap.
    :ivar team_log.LegacyDeviceSessionLogInfo.legacy_uniq_id: Alternative unique
        device session id, instead of session id field. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, ip_address=..., created=..., updated=..., session_info=..., display_name=..., is_emm_managed=..., platform=..., mac_address=..., os_version=..., device_type=..., client_version=..., legacy_uniq_id=...) -> None:
        ...
    
    session_info = ...
    display_name = ...
    is_emm_managed = ...
    platform = ...
    mac_address = ...
    os_version = ...
    device_type = ...
    client_version = ...
    legacy_uniq_id = ...


LegacyDeviceSessionLogInfo_validator = ...
class LegalHoldsActivateAHoldDetails(bb.Struct):
    """
    Activated a hold.

    :ivar team_log.LegalHoldsActivateAHoldDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsActivateAHoldDetails.name: Hold name.
    :ivar team_log.LegalHoldsActivateAHoldDetails.start_date: Hold start date.
    :ivar team_log.LegalHoldsActivateAHoldDetails.end_date: Hold end date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=..., start_date=..., end_date=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...
    start_date = ...
    end_date = ...


LegalHoldsActivateAHoldDetails_validator = ...
class LegalHoldsActivateAHoldType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsActivateAHoldType_validator = ...
class LegalHoldsAddMembersDetails(bb.Struct):
    """
    Added members to a hold.

    :ivar team_log.LegalHoldsAddMembersDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsAddMembersDetails.name: Hold name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...


LegalHoldsAddMembersDetails_validator = ...
class LegalHoldsAddMembersType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsAddMembersType_validator = ...
class LegalHoldsChangeHoldDetailsDetails(bb.Struct):
    """
    Edited details for a hold.

    :ivar team_log.LegalHoldsChangeHoldDetailsDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsChangeHoldDetailsDetails.name: Hold name.
    :ivar team_log.LegalHoldsChangeHoldDetailsDetails.previous_value: Previous
        details.
    :ivar team_log.LegalHoldsChangeHoldDetailsDetails.new_value: New details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=..., previous_value=..., new_value=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...
    previous_value = ...
    new_value = ...


LegalHoldsChangeHoldDetailsDetails_validator = ...
class LegalHoldsChangeHoldDetailsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsChangeHoldDetailsType_validator = ...
class LegalHoldsChangeHoldNameDetails(bb.Struct):
    """
    Renamed a hold.

    :ivar team_log.LegalHoldsChangeHoldNameDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsChangeHoldNameDetails.previous_value: Previous
        Name.
    :ivar team_log.LegalHoldsChangeHoldNameDetails.new_value: New Name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., previous_value=..., new_value=...) -> None:
        ...
    
    legal_hold_id = ...
    previous_value = ...
    new_value = ...


LegalHoldsChangeHoldNameDetails_validator = ...
class LegalHoldsChangeHoldNameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsChangeHoldNameType_validator = ...
class LegalHoldsExportAHoldDetails(bb.Struct):
    """
    Exported hold.

    :ivar team_log.LegalHoldsExportAHoldDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsExportAHoldDetails.name: Hold name.
    :ivar team_log.LegalHoldsExportAHoldDetails.export_name: Export name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=..., export_name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...
    export_name = ...


LegalHoldsExportAHoldDetails_validator = ...
class LegalHoldsExportAHoldType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsExportAHoldType_validator = ...
class LegalHoldsExportCancelledDetails(bb.Struct):
    """
    Canceled export for a hold.

    :ivar team_log.LegalHoldsExportCancelledDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsExportCancelledDetails.name: Hold name.
    :ivar team_log.LegalHoldsExportCancelledDetails.export_name: Export name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=..., export_name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...
    export_name = ...


LegalHoldsExportCancelledDetails_validator = ...
class LegalHoldsExportCancelledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsExportCancelledType_validator = ...
class LegalHoldsExportDownloadedDetails(bb.Struct):
    """
    Downloaded export for a hold.

    :ivar team_log.LegalHoldsExportDownloadedDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsExportDownloadedDetails.name: Hold name.
    :ivar team_log.LegalHoldsExportDownloadedDetails.export_name: Export name.
    :ivar team_log.LegalHoldsExportDownloadedDetails.part: Part.
    :ivar team_log.LegalHoldsExportDownloadedDetails.file_name: Filename.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=..., export_name=..., part=..., file_name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...
    export_name = ...
    part = ...
    file_name = ...


LegalHoldsExportDownloadedDetails_validator = ...
class LegalHoldsExportDownloadedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsExportDownloadedType_validator = ...
class LegalHoldsExportRemovedDetails(bb.Struct):
    """
    Removed export for a hold.

    :ivar team_log.LegalHoldsExportRemovedDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsExportRemovedDetails.name: Hold name.
    :ivar team_log.LegalHoldsExportRemovedDetails.export_name: Export name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=..., export_name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...
    export_name = ...


LegalHoldsExportRemovedDetails_validator = ...
class LegalHoldsExportRemovedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsExportRemovedType_validator = ...
class LegalHoldsReleaseAHoldDetails(bb.Struct):
    """
    Released a hold.

    :ivar team_log.LegalHoldsReleaseAHoldDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsReleaseAHoldDetails.name: Hold name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...


LegalHoldsReleaseAHoldDetails_validator = ...
class LegalHoldsReleaseAHoldType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsReleaseAHoldType_validator = ...
class LegalHoldsRemoveMembersDetails(bb.Struct):
    """
    Removed members from a hold.

    :ivar team_log.LegalHoldsRemoveMembersDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsRemoveMembersDetails.name: Hold name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...


LegalHoldsRemoveMembersDetails_validator = ...
class LegalHoldsRemoveMembersType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsRemoveMembersType_validator = ...
class LegalHoldsReportAHoldDetails(bb.Struct):
    """
    Created a summary report for a hold.

    :ivar team_log.LegalHoldsReportAHoldDetails.legal_hold_id: Hold ID.
    :ivar team_log.LegalHoldsReportAHoldDetails.name: Hold name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, legal_hold_id=..., name=...) -> None:
        ...
    
    legal_hold_id = ...
    name = ...


LegalHoldsReportAHoldDetails_validator = ...
class LegalHoldsReportAHoldType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LegalHoldsReportAHoldType_validator = ...
class LinkedDeviceLogInfo(bb.Union):
    """
    The device sessions that user is linked to.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar DesktopDeviceSessionLogInfo
        LinkedDeviceLogInfo.desktop_device_session: desktop device session's
        details.
    :ivar LegacyDeviceSessionLogInfo LinkedDeviceLogInfo.legacy_device_session:
        legacy device session's details.
    :ivar MobileDeviceSessionLogInfo LinkedDeviceLogInfo.mobile_device_session:
        mobile device session's details.
    :ivar WebDeviceSessionLogInfo LinkedDeviceLogInfo.web_device_session: web
        device session's details.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def desktop_device_session(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``desktop_device_session``
        tag with value ``val``.

        :param DesktopDeviceSessionLogInfo val:
        :rtype: LinkedDeviceLogInfo
        """
        ...
    
    @classmethod
    def legacy_device_session(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``legacy_device_session``
        tag with value ``val``.

        :param LegacyDeviceSessionLogInfo val:
        :rtype: LinkedDeviceLogInfo
        """
        ...
    
    @classmethod
    def mobile_device_session(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``mobile_device_session``
        tag with value ``val``.

        :param MobileDeviceSessionLogInfo val:
        :rtype: LinkedDeviceLogInfo
        """
        ...
    
    @classmethod
    def web_device_session(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``web_device_session`` tag
        with value ``val``.

        :param WebDeviceSessionLogInfo val:
        :rtype: LinkedDeviceLogInfo
        """
        ...
    
    def is_desktop_device_session(self):
        """
        Check if the union tag is ``desktop_device_session``.

        :rtype: bool
        """
        ...
    
    def is_legacy_device_session(self):
        """
        Check if the union tag is ``legacy_device_session``.

        :rtype: bool
        """
        ...
    
    def is_mobile_device_session(self):
        """
        Check if the union tag is ``mobile_device_session``.

        :rtype: bool
        """
        ...
    
    def is_web_device_session(self):
        """
        Check if the union tag is ``web_device_session``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_desktop_device_session(self): # -> None:
        """
        desktop device session's details.

        Only call this if :meth:`is_desktop_device_session` is true.

        :rtype: DesktopDeviceSessionLogInfo
        """
        ...
    
    def get_legacy_device_session(self): # -> None:
        """
        legacy device session's details.

        Only call this if :meth:`is_legacy_device_session` is true.

        :rtype: LegacyDeviceSessionLogInfo
        """
        ...
    
    def get_mobile_device_session(self): # -> None:
        """
        mobile device session's details.

        Only call this if :meth:`is_mobile_device_session` is true.

        :rtype: MobileDeviceSessionLogInfo
        """
        ...
    
    def get_web_device_session(self): # -> None:
        """
        web device session's details.

        Only call this if :meth:`is_web_device_session` is true.

        :rtype: WebDeviceSessionLogInfo
        """
        ...
    


LinkedDeviceLogInfo_validator = ...
class LockStatus(bb.Union):
    """
    File lock status

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    locked = ...
    unlocked = ...
    other = ...
    def is_locked(self):
        """
        Check if the union tag is ``locked``.

        :rtype: bool
        """
        ...
    
    def is_unlocked(self):
        """
        Check if the union tag is ``unlocked``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


LockStatus_validator = ...
class LoginFailDetails(bb.Struct):
    """
    Failed to sign in.

    :ivar team_log.LoginFailDetails.is_emm_managed: Tells if the login device is
        EMM managed. Might be missing due to historical data gap.
    :ivar team_log.LoginFailDetails.login_method: Login method.
    :ivar team_log.LoginFailDetails.error_details: Error details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, login_method=..., error_details=..., is_emm_managed=...) -> None:
        ...
    
    is_emm_managed = ...
    login_method = ...
    error_details = ...


LoginFailDetails_validator = ...
class LoginFailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LoginFailType_validator = ...
class LoginMethod(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    apple_oauth = ...
    first_party_token_exchange = ...
    google_oauth = ...
    lenovo_oauth = ...
    password = ...
    qr_code = ...
    saml = ...
    two_factor_authentication = ...
    web_session = ...
    other = ...
    def is_apple_oauth(self):
        """
        Check if the union tag is ``apple_oauth``.

        :rtype: bool
        """
        ...
    
    def is_first_party_token_exchange(self):
        """
        Check if the union tag is ``first_party_token_exchange``.

        :rtype: bool
        """
        ...
    
    def is_google_oauth(self):
        """
        Check if the union tag is ``google_oauth``.

        :rtype: bool
        """
        ...
    
    def is_lenovo_oauth(self):
        """
        Check if the union tag is ``lenovo_oauth``.

        :rtype: bool
        """
        ...
    
    def is_password(self):
        """
        Check if the union tag is ``password``.

        :rtype: bool
        """
        ...
    
    def is_qr_code(self):
        """
        Check if the union tag is ``qr_code``.

        :rtype: bool
        """
        ...
    
    def is_saml(self):
        """
        Check if the union tag is ``saml``.

        :rtype: bool
        """
        ...
    
    def is_two_factor_authentication(self):
        """
        Check if the union tag is ``two_factor_authentication``.

        :rtype: bool
        """
        ...
    
    def is_web_session(self):
        """
        Check if the union tag is ``web_session``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


LoginMethod_validator = ...
class LoginSuccessDetails(bb.Struct):
    """
    Signed in.

    :ivar team_log.LoginSuccessDetails.is_emm_managed: Tells if the login device
        is EMM managed. Might be missing due to historical data gap.
    :ivar team_log.LoginSuccessDetails.login_method: Login method.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, login_method=..., is_emm_managed=...) -> None:
        ...
    
    is_emm_managed = ...
    login_method = ...


LoginSuccessDetails_validator = ...
class LoginSuccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LoginSuccessType_validator = ...
class LogoutDetails(bb.Struct):
    """
    Signed out.

    :ivar team_log.LogoutDetails.login_id: Login session id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, login_id=...) -> None:
        ...
    
    login_id = ...


LogoutDetails_validator = ...
class LogoutType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


LogoutType_validator = ...
class MemberAddExternalIdDetails(bb.Struct):
    """
    Added an external ID for team member.

    :ivar team_log.MemberAddExternalIdDetails.new_value: Current external id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


MemberAddExternalIdDetails_validator = ...
class MemberAddExternalIdType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberAddExternalIdType_validator = ...
class MemberAddNameDetails(bb.Struct):
    """
    Added team member name.

    :ivar team_log.MemberAddNameDetails.new_value: New user's name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


MemberAddNameDetails_validator = ...
class MemberAddNameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberAddNameType_validator = ...
class MemberChangeAdminRoleDetails(bb.Struct):
    """
    Changed team member admin role.

    :ivar team_log.MemberChangeAdminRoleDetails.new_value: New admin role. This
        field is relevant when the admin role is changed or whenthe user role
        changes from no admin rights to with admin rights.
    :ivar team_log.MemberChangeAdminRoleDetails.previous_value: Previous admin
        role. This field is relevant when the admin role is changed or when the
        admin role is removed.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberChangeAdminRoleDetails_validator = ...
class MemberChangeAdminRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberChangeAdminRoleType_validator = ...
class MemberChangeEmailDetails(bb.Struct):
    """
    Changed team member email.

    :ivar team_log.MemberChangeEmailDetails.new_value: New email.
    :ivar team_log.MemberChangeEmailDetails.previous_value: Previous email.
        Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberChangeEmailDetails_validator = ...
class MemberChangeEmailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberChangeEmailType_validator = ...
class MemberChangeExternalIdDetails(bb.Struct):
    """
    Changed the external ID for team member.

    :ivar team_log.MemberChangeExternalIdDetails.new_value: Current external id.
    :ivar team_log.MemberChangeExternalIdDetails.previous_value: Old external
        id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberChangeExternalIdDetails_validator = ...
class MemberChangeExternalIdType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberChangeExternalIdType_validator = ...
class MemberChangeMembershipTypeDetails(bb.Struct):
    """
    Changed membership type (limited/full) of member.

    :ivar team_log.MemberChangeMembershipTypeDetails.prev_value: Previous
        membership type.
    :ivar team_log.MemberChangeMembershipTypeDetails.new_value: New membership
        type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, prev_value=..., new_value=...) -> None:
        ...
    
    prev_value = ...
    new_value = ...


MemberChangeMembershipTypeDetails_validator = ...
class MemberChangeMembershipTypeType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberChangeMembershipTypeType_validator = ...
class MemberChangeNameDetails(bb.Struct):
    """
    Changed team member name.

    :ivar team_log.MemberChangeNameDetails.new_value: New user's name.
    :ivar team_log.MemberChangeNameDetails.previous_value: Previous user's name.
        Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberChangeNameDetails_validator = ...
class MemberChangeNameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberChangeNameType_validator = ...
class MemberChangeResellerRoleDetails(bb.Struct):
    """
    Changed team member reseller role.

    :ivar team_log.MemberChangeResellerRoleDetails.new_value: New reseller role.
        This field is relevant when the reseller role is changed.
    :ivar team_log.MemberChangeResellerRoleDetails.previous_value: Previous
        reseller role. This field is relevant when the reseller role is changed
        or when the reseller role is removed.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberChangeResellerRoleDetails_validator = ...
class MemberChangeResellerRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberChangeResellerRoleType_validator = ...
class MemberChangeStatusDetails(bb.Struct):
    """
    Changed member status (invited, joined, suspended, etc.).

    :ivar team_log.MemberChangeStatusDetails.previous_value: Previous member
        status. Might be missing due to historical data gap.
    :ivar team_log.MemberChangeStatusDetails.new_value: New member status.
    :ivar team_log.MemberChangeStatusDetails.action: Additional information
        indicating the action taken that caused status change.
    :ivar team_log.MemberChangeStatusDetails.new_team: The user's new team name.
        This field is relevant when the user is transferred off the team.
    :ivar team_log.MemberChangeStatusDetails.previous_team: The user's previous
        team name. This field is relevant when the user is transferred onto the
        team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=..., action=..., new_team=..., previous_team=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...
    action = ...
    new_team = ...
    previous_team = ...


MemberChangeStatusDetails_validator = ...
class MemberChangeStatusType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberChangeStatusType_validator = ...
class MemberDeleteManualContactsDetails(bb.Struct):
    """
    Cleared manually added contacts.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberDeleteManualContactsDetails_validator = ...
class MemberDeleteManualContactsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberDeleteManualContactsType_validator = ...
class MemberDeleteProfilePhotoDetails(bb.Struct):
    """
    Deleted team member profile photo.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberDeleteProfilePhotoDetails_validator = ...
class MemberDeleteProfilePhotoType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberDeleteProfilePhotoType_validator = ...
class MemberPermanentlyDeleteAccountContentsDetails(bb.Struct):
    """
    Permanently deleted contents of deleted team member account.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberPermanentlyDeleteAccountContentsDetails_validator = ...
class MemberPermanentlyDeleteAccountContentsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberPermanentlyDeleteAccountContentsType_validator = ...
class MemberRemoveActionType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    delete = ...
    leave = ...
    offboard = ...
    offboard_and_retain_team_folders = ...
    other = ...
    def is_delete(self):
        """
        Check if the union tag is ``delete``.

        :rtype: bool
        """
        ...
    
    def is_leave(self):
        """
        Check if the union tag is ``leave``.

        :rtype: bool
        """
        ...
    
    def is_offboard(self):
        """
        Check if the union tag is ``offboard``.

        :rtype: bool
        """
        ...
    
    def is_offboard_and_retain_team_folders(self):
        """
        Check if the union tag is ``offboard_and_retain_team_folders``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


MemberRemoveActionType_validator = ...
class MemberRemoveExternalIdDetails(bb.Struct):
    """
    Removed the external ID for team member.

    :ivar team_log.MemberRemoveExternalIdDetails.previous_value: Old external
        id.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=...) -> None:
        ...
    
    previous_value = ...


MemberRemoveExternalIdDetails_validator = ...
class MemberRemoveExternalIdType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberRemoveExternalIdType_validator = ...
class MemberRequestsChangePolicyDetails(bb.Struct):
    """
    Changed whether users can find team when not invited.

    :ivar team_log.MemberRequestsChangePolicyDetails.new_value: New member
        change requests policy.
    :ivar team_log.MemberRequestsChangePolicyDetails.previous_value: Previous
        member change requests policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberRequestsChangePolicyDetails_validator = ...
class MemberRequestsChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberRequestsChangePolicyType_validator = ...
class MemberRequestsPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    auto_accept = ...
    disabled = ...
    require_approval = ...
    other = ...
    def is_auto_accept(self):
        """
        Check if the union tag is ``auto_accept``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_require_approval(self):
        """
        Check if the union tag is ``require_approval``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


MemberRequestsPolicy_validator = ...
class MemberSendInvitePolicy(bb.Union):
    """
    Policy for controlling whether team members can send team invites

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    everyone = ...
    specific_members = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_everyone(self):
        """
        Check if the union tag is ``everyone``.

        :rtype: bool
        """
        ...
    
    def is_specific_members(self):
        """
        Check if the union tag is ``specific_members``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


MemberSendInvitePolicy_validator = ...
class MemberSendInvitePolicyChangedDetails(bb.Struct):
    """
    Changed member send invite policy for team.

    :ivar team_log.MemberSendInvitePolicyChangedDetails.new_value: New team
        member send invite policy.
    :ivar team_log.MemberSendInvitePolicyChangedDetails.previous_value: Previous
        team member send invite policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberSendInvitePolicyChangedDetails_validator = ...
class MemberSendInvitePolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSendInvitePolicyChangedType_validator = ...
class MemberSetProfilePhotoDetails(bb.Struct):
    """
    Set team member profile photo.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberSetProfilePhotoDetails_validator = ...
class MemberSetProfilePhotoType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSetProfilePhotoType_validator = ...
class MemberSpaceLimitsAddCustomQuotaDetails(bb.Struct):
    """
    Set custom member space limit.

    :ivar team_log.MemberSpaceLimitsAddCustomQuotaDetails.new_value: New custom
        quota value in bytes.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


MemberSpaceLimitsAddCustomQuotaDetails_validator = ...
class MemberSpaceLimitsAddCustomQuotaType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsAddCustomQuotaType_validator = ...
class MemberSpaceLimitsAddExceptionDetails(bb.Struct):
    """
    Added members to member space limit exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberSpaceLimitsAddExceptionDetails_validator = ...
class MemberSpaceLimitsAddExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsAddExceptionType_validator = ...
class MemberSpaceLimitsChangeCapsTypePolicyDetails(bb.Struct):
    """
    Changed member space limit type for team.

    :ivar team_log.MemberSpaceLimitsChangeCapsTypePolicyDetails.previous_value:
        Previous space limit type.
    :ivar team_log.MemberSpaceLimitsChangeCapsTypePolicyDetails.new_value: New
        space limit type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


MemberSpaceLimitsChangeCapsTypePolicyDetails_validator = ...
class MemberSpaceLimitsChangeCapsTypePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsChangeCapsTypePolicyType_validator = ...
class MemberSpaceLimitsChangeCustomQuotaDetails(bb.Struct):
    """
    Changed custom member space limit.

    :ivar team_log.MemberSpaceLimitsChangeCustomQuotaDetails.previous_value:
        Previous custom quota value in bytes.
    :ivar team_log.MemberSpaceLimitsChangeCustomQuotaDetails.new_value: New
        custom quota value in bytes.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


MemberSpaceLimitsChangeCustomQuotaDetails_validator = ...
class MemberSpaceLimitsChangeCustomQuotaType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsChangeCustomQuotaType_validator = ...
class MemberSpaceLimitsChangePolicyDetails(bb.Struct):
    """
    Changed team default member space limit.

    :ivar team_log.MemberSpaceLimitsChangePolicyDetails.previous_value: Previous
        team default limit value in bytes. Might be missing due to historical
        data gap.
    :ivar team_log.MemberSpaceLimitsChangePolicyDetails.new_value: New team
        default limit value in bytes. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


MemberSpaceLimitsChangePolicyDetails_validator = ...
class MemberSpaceLimitsChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsChangePolicyType_validator = ...
class MemberSpaceLimitsChangeStatusDetails(bb.Struct):
    """
    Changed space limit status.

    :ivar team_log.MemberSpaceLimitsChangeStatusDetails.previous_value: Previous
        storage quota status.
    :ivar team_log.MemberSpaceLimitsChangeStatusDetails.new_value: New storage
        quota status.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


MemberSpaceLimitsChangeStatusDetails_validator = ...
class MemberSpaceLimitsChangeStatusType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsChangeStatusType_validator = ...
class MemberSpaceLimitsRemoveCustomQuotaDetails(bb.Struct):
    """
    Removed custom member space limit.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberSpaceLimitsRemoveCustomQuotaDetails_validator = ...
class MemberSpaceLimitsRemoveCustomQuotaType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsRemoveCustomQuotaType_validator = ...
class MemberSpaceLimitsRemoveExceptionDetails(bb.Struct):
    """
    Removed members from member space limit exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberSpaceLimitsRemoveExceptionDetails_validator = ...
class MemberSpaceLimitsRemoveExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSpaceLimitsRemoveExceptionType_validator = ...
class MemberStatus(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    active = ...
    invited = ...
    moved_to_another_team = ...
    not_joined = ...
    removed = ...
    suspended = ...
    other = ...
    def is_active(self):
        """
        Check if the union tag is ``active``.

        :rtype: bool
        """
        ...
    
    def is_invited(self):
        """
        Check if the union tag is ``invited``.

        :rtype: bool
        """
        ...
    
    def is_moved_to_another_team(self):
        """
        Check if the union tag is ``moved_to_another_team``.

        :rtype: bool
        """
        ...
    
    def is_not_joined(self):
        """
        Check if the union tag is ``not_joined``.

        :rtype: bool
        """
        ...
    
    def is_removed(self):
        """
        Check if the union tag is ``removed``.

        :rtype: bool
        """
        ...
    
    def is_suspended(self):
        """
        Check if the union tag is ``suspended``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


MemberStatus_validator = ...
class MemberSuggestDetails(bb.Struct):
    """
    Suggested person to add to team.

    :ivar team_log.MemberSuggestDetails.suggested_members: suggested users
        emails.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, suggested_members=...) -> None:
        ...
    
    suggested_members = ...


MemberSuggestDetails_validator = ...
class MemberSuggestType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSuggestType_validator = ...
class MemberSuggestionsChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled option for team members to suggest people to add to team.

    :ivar team_log.MemberSuggestionsChangePolicyDetails.new_value: New team
        member suggestions policy.
    :ivar team_log.MemberSuggestionsChangePolicyDetails.previous_value: Previous
        team member suggestions policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MemberSuggestionsChangePolicyDetails_validator = ...
class MemberSuggestionsChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberSuggestionsChangePolicyType_validator = ...
class MemberSuggestionsPolicy(bb.Union):
    """
    Member suggestions policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


MemberSuggestionsPolicy_validator = ...
class MemberTransferAccountContentsDetails(bb.Struct):
    """
    Transferred contents of deleted member account to another member.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


MemberTransferAccountContentsDetails_validator = ...
class MemberTransferAccountContentsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MemberTransferAccountContentsType_validator = ...
class MemberTransferredInternalFields(bb.Struct):
    """
    Internal only - fields for target team computations

    :ivar team_log.MemberTransferredInternalFields.source_team_id: Internal only
        - team user was moved from.
    :ivar team_log.MemberTransferredInternalFields.target_team_id: Internal only
        - team user was moved to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, source_team_id=..., target_team_id=...) -> None:
        ...
    
    source_team_id = ...
    target_team_id = ...


MemberTransferredInternalFields_validator = ...
class MicrosoftOfficeAddinChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled Microsoft Office add-in.

    :ivar team_log.MicrosoftOfficeAddinChangePolicyDetails.new_value: New
        Microsoft Office addin policy.
    :ivar team_log.MicrosoftOfficeAddinChangePolicyDetails.previous_value:
        Previous Microsoft Office addin policy. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


MicrosoftOfficeAddinChangePolicyDetails_validator = ...
class MicrosoftOfficeAddinChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


MicrosoftOfficeAddinChangePolicyType_validator = ...
class MicrosoftOfficeAddinPolicy(bb.Union):
    """
    Microsoft Office addin policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


MicrosoftOfficeAddinPolicy_validator = ...
class MissingDetails(bb.Struct):
    """
    An indication that an error occurred while retrieving the event. Some
    attributes of the event may be omitted as a result.

    :ivar team_log.MissingDetails.source_event_fields: All the data that could
        be retrieved and converted from the source event.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, source_event_fields=...) -> None:
        ...
    
    source_event_fields = ...


MissingDetails_validator = ...
class MobileDeviceSessionLogInfo(DeviceSessionLogInfo):
    """
    Information about linked Dropbox mobile client sessions

    :ivar team_log.MobileDeviceSessionLogInfo.session_info: Mobile session
        unique id.
    :ivar team_log.MobileDeviceSessionLogInfo.device_name: The device name.
    :ivar team_log.MobileDeviceSessionLogInfo.client_type: The mobile
        application type.
    :ivar team_log.MobileDeviceSessionLogInfo.client_version: The Dropbox client
        version.
    :ivar team_log.MobileDeviceSessionLogInfo.os_version: The hosting OS
        version.
    :ivar team_log.MobileDeviceSessionLogInfo.last_carrier: last carrier used by
        the device.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, device_name=..., client_type=..., ip_address=..., created=..., updated=..., session_info=..., client_version=..., os_version=..., last_carrier=...) -> None:
        ...
    
    session_info = ...
    device_name = ...
    client_type = ...
    client_version = ...
    os_version = ...
    last_carrier = ...


MobileDeviceSessionLogInfo_validator = ...
class MobileSessionLogInfo(SessionLogInfo):
    """
    Mobile session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, session_id=...) -> None:
        ...
    


MobileSessionLogInfo_validator = ...
class NamespaceRelativePathLogInfo(bb.Struct):
    """
    Namespace relative path details.

    :ivar team_log.NamespaceRelativePathLogInfo.ns_id: Namespace ID.
    :ivar team_log.NamespaceRelativePathLogInfo.relative_path: A path relative
        to the specified namespace ID.
    :ivar team_log.NamespaceRelativePathLogInfo.is_shared_namespace: True if the
        namespace is shared.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, ns_id=..., relative_path=..., is_shared_namespace=...) -> None:
        ...
    
    ns_id = ...
    relative_path = ...
    is_shared_namespace = ...


NamespaceRelativePathLogInfo_validator = ...
class NetworkControlChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled network control.

    :ivar team_log.NetworkControlChangePolicyDetails.new_value: New network
        control policy.
    :ivar team_log.NetworkControlChangePolicyDetails.previous_value: Previous
        network control policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


NetworkControlChangePolicyDetails_validator = ...
class NetworkControlChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NetworkControlChangePolicyType_validator = ...
class NetworkControlPolicy(bb.Union):
    """
    Network control policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


NetworkControlPolicy_validator = ...
class NoExpirationLinkGenCreateReportDetails(bb.Struct):
    """
    Report created: Links created with no expiration.

    :ivar team_log.NoExpirationLinkGenCreateReportDetails.start_date: Report
        start date.
    :ivar team_log.NoExpirationLinkGenCreateReportDetails.end_date: Report end
        date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, start_date=..., end_date=...) -> None:
        ...
    
    start_date = ...
    end_date = ...


NoExpirationLinkGenCreateReportDetails_validator = ...
class NoExpirationLinkGenCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoExpirationLinkGenCreateReportType_validator = ...
class NoExpirationLinkGenReportFailedDetails(bb.Struct):
    """
    Couldn't create report: Links created with no expiration.

    :ivar team_log.NoExpirationLinkGenReportFailedDetails.failure_reason:
        Failure reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


NoExpirationLinkGenReportFailedDetails_validator = ...
class NoExpirationLinkGenReportFailedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoExpirationLinkGenReportFailedType_validator = ...
class NoPasswordLinkGenCreateReportDetails(bb.Struct):
    """
    Report created: Links created without passwords.

    :ivar team_log.NoPasswordLinkGenCreateReportDetails.start_date: Report start
        date.
    :ivar team_log.NoPasswordLinkGenCreateReportDetails.end_date: Report end
        date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, start_date=..., end_date=...) -> None:
        ...
    
    start_date = ...
    end_date = ...


NoPasswordLinkGenCreateReportDetails_validator = ...
class NoPasswordLinkGenCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoPasswordLinkGenCreateReportType_validator = ...
class NoPasswordLinkGenReportFailedDetails(bb.Struct):
    """
    Couldn't create report: Links created without passwords.

    :ivar team_log.NoPasswordLinkGenReportFailedDetails.failure_reason: Failure
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


NoPasswordLinkGenReportFailedDetails_validator = ...
class NoPasswordLinkGenReportFailedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoPasswordLinkGenReportFailedType_validator = ...
class NoPasswordLinkViewCreateReportDetails(bb.Struct):
    """
    Report created: Views of links without passwords.

    :ivar team_log.NoPasswordLinkViewCreateReportDetails.start_date: Report
        start date.
    :ivar team_log.NoPasswordLinkViewCreateReportDetails.end_date: Report end
        date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, start_date=..., end_date=...) -> None:
        ...
    
    start_date = ...
    end_date = ...


NoPasswordLinkViewCreateReportDetails_validator = ...
class NoPasswordLinkViewCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoPasswordLinkViewCreateReportType_validator = ...
class NoPasswordLinkViewReportFailedDetails(bb.Struct):
    """
    Couldn't create report: Views of links without passwords.

    :ivar team_log.NoPasswordLinkViewReportFailedDetails.failure_reason: Failure
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


NoPasswordLinkViewReportFailedDetails_validator = ...
class NoPasswordLinkViewReportFailedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoPasswordLinkViewReportFailedType_validator = ...
class UserLogInfo(bb.Struct):
    """
    User's logged information.

    :ivar team_log.UserLogInfo.account_id: User unique ID.
    :ivar team_log.UserLogInfo.display_name: User display name.
    :ivar team_log.UserLogInfo.email: User email address.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, account_id=..., display_name=..., email=...) -> None:
        ...
    
    account_id = ...
    display_name = ...
    email = ...


UserLogInfo_validator = ...
class NonTeamMemberLogInfo(UserLogInfo):
    """
    Non team member's logged information.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, account_id=..., display_name=..., email=...) -> None:
        ...
    


NonTeamMemberLogInfo_validator = ...
class NonTrustedTeamDetails(bb.Struct):
    """
    The email to which the request was sent

    :ivar team_log.NonTrustedTeamDetails.team: The email to which the request
        was sent.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team=...) -> None:
        ...
    
    team = ...


NonTrustedTeamDetails_validator = ...
class NoteAclInviteOnlyDetails(bb.Struct):
    """
    Changed Paper doc to invite-only.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


NoteAclInviteOnlyDetails_validator = ...
class NoteAclInviteOnlyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoteAclInviteOnlyType_validator = ...
class NoteAclLinkDetails(bb.Struct):
    """
    Changed Paper doc to link-accessible.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


NoteAclLinkDetails_validator = ...
class NoteAclLinkType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoteAclLinkType_validator = ...
class NoteAclTeamLinkDetails(bb.Struct):
    """
    Changed Paper doc to link-accessible for team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


NoteAclTeamLinkDetails_validator = ...
class NoteAclTeamLinkType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoteAclTeamLinkType_validator = ...
class NoteShareReceiveDetails(bb.Struct):
    """
    Shared received Paper doc.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


NoteShareReceiveDetails_validator = ...
class NoteShareReceiveType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoteShareReceiveType_validator = ...
class NoteSharedDetails(bb.Struct):
    """
    Shared Paper doc.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


NoteSharedDetails_validator = ...
class NoteSharedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


NoteSharedType_validator = ...
class ObjectLabelAddedDetails(bb.Struct):
    """
    Added a label.

    :ivar team_log.ObjectLabelAddedDetails.label_type: Labels mark a file or
        folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, label_type=...) -> None:
        ...
    
    label_type = ...


ObjectLabelAddedDetails_validator = ...
class ObjectLabelAddedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ObjectLabelAddedType_validator = ...
class ObjectLabelRemovedDetails(bb.Struct):
    """
    Removed a label.

    :ivar team_log.ObjectLabelRemovedDetails.label_type: Labels mark a file or
        folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, label_type=...) -> None:
        ...
    
    label_type = ...


ObjectLabelRemovedDetails_validator = ...
class ObjectLabelRemovedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ObjectLabelRemovedType_validator = ...
class ObjectLabelUpdatedValueDetails(bb.Struct):
    """
    Updated a label's value.

    :ivar team_log.ObjectLabelUpdatedValueDetails.label_type: Labels mark a file
        or folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, label_type=...) -> None:
        ...
    
    label_type = ...


ObjectLabelUpdatedValueDetails_validator = ...
class ObjectLabelUpdatedValueType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ObjectLabelUpdatedValueType_validator = ...
class OpenNoteSharedDetails(bb.Struct):
    """
    Opened shared Paper doc.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


OpenNoteSharedDetails_validator = ...
class OpenNoteSharedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


OpenNoteSharedType_validator = ...
class OrganizationDetails(bb.Struct):
    """
    More details about the organization.

    :ivar team_log.OrganizationDetails.organization: The name of the
        organization.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, organization=...) -> None:
        ...
    
    organization = ...


OrganizationDetails_validator = ...
class OrganizationName(bb.Struct):
    """
    The name of the organization

    :ivar team_log.OrganizationName.organization: The name of the organization.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, organization=...) -> None:
        ...
    
    organization = ...


OrganizationName_validator = ...
class OrganizeFolderWithTidyDetails(bb.Struct):
    """
    Organized a folder with multi-file organize.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


OrganizeFolderWithTidyDetails_validator = ...
class OrganizeFolderWithTidyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


OrganizeFolderWithTidyType_validator = ...
class OriginLogInfo(bb.Struct):
    """
    The origin from which the actor performed the action.

    :ivar team_log.OriginLogInfo.geo_location: Geographic location details.
    :ivar team_log.OriginLogInfo.access_method: The method that was used to
        perform the action.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, access_method=..., geo_location=...) -> None:
        ...
    
    geo_location = ...
    access_method = ...


OriginLogInfo_validator = ...
class OutdatedLinkViewCreateReportDetails(bb.Struct):
    """
    Report created: Views of old links.

    :ivar team_log.OutdatedLinkViewCreateReportDetails.start_date: Report start
        date.
    :ivar team_log.OutdatedLinkViewCreateReportDetails.end_date: Report end
        date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, start_date=..., end_date=...) -> None:
        ...
    
    start_date = ...
    end_date = ...


OutdatedLinkViewCreateReportDetails_validator = ...
class OutdatedLinkViewCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


OutdatedLinkViewCreateReportType_validator = ...
class OutdatedLinkViewReportFailedDetails(bb.Struct):
    """
    Couldn't create report: Views of old links.

    :ivar team_log.OutdatedLinkViewReportFailedDetails.failure_reason: Failure
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


OutdatedLinkViewReportFailedDetails_validator = ...
class OutdatedLinkViewReportFailedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


OutdatedLinkViewReportFailedType_validator = ...
class PaperAccessType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    commenter = ...
    editor = ...
    viewer = ...
    other = ...
    def is_commenter(self):
        """
        Check if the union tag is ``commenter``.

        :rtype: bool
        """
        ...
    
    def is_editor(self):
        """
        Check if the union tag is ``editor``.

        :rtype: bool
        """
        ...
    
    def is_viewer(self):
        """
        Check if the union tag is ``viewer``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PaperAccessType_validator = ...
class PaperAdminExportStartDetails(bb.Struct):
    """
    Exported all team Paper docs.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


PaperAdminExportStartDetails_validator = ...
class PaperAdminExportStartType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperAdminExportStartType_validator = ...
class PaperChangeDeploymentPolicyDetails(bb.Struct):
    """
    Changed whether Dropbox Paper, when enabled, is deployed to all members or
    to specific members.

    :ivar team_log.PaperChangeDeploymentPolicyDetails.new_value: New Dropbox
        Paper deployment policy.
    :ivar team_log.PaperChangeDeploymentPolicyDetails.previous_value: Previous
        Dropbox Paper deployment policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


PaperChangeDeploymentPolicyDetails_validator = ...
class PaperChangeDeploymentPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperChangeDeploymentPolicyType_validator = ...
class PaperChangeMemberLinkPolicyDetails(bb.Struct):
    """
    Changed whether non-members can view Paper docs with link.

    :ivar team_log.PaperChangeMemberLinkPolicyDetails.new_value: New paper
        external link accessibility policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


PaperChangeMemberLinkPolicyDetails_validator = ...
class PaperChangeMemberLinkPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperChangeMemberLinkPolicyType_validator = ...
class PaperChangeMemberPolicyDetails(bb.Struct):
    """
    Changed whether members can share Paper docs outside team, and if docs are
    accessible only by team members or anyone by default.

    :ivar team_log.PaperChangeMemberPolicyDetails.new_value: New paper external
        accessibility policy.
    :ivar team_log.PaperChangeMemberPolicyDetails.previous_value: Previous paper
        external accessibility policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


PaperChangeMemberPolicyDetails_validator = ...
class PaperChangeMemberPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperChangeMemberPolicyType_validator = ...
class PaperChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled Dropbox Paper for team.

    :ivar team_log.PaperChangePolicyDetails.new_value: New Dropbox Paper policy.
    :ivar team_log.PaperChangePolicyDetails.previous_value: Previous Dropbox
        Paper policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


PaperChangePolicyDetails_validator = ...
class PaperChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperChangePolicyType_validator = ...
class PaperContentAddMemberDetails(bb.Struct):
    """
    Added users and/or groups to Paper doc/folder.

    :ivar team_log.PaperContentAddMemberDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperContentAddMemberDetails_validator = ...
class PaperContentAddMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentAddMemberType_validator = ...
class PaperContentAddToFolderDetails(bb.Struct):
    """
    Added Paper doc/folder to folder.

    :ivar team_log.PaperContentAddToFolderDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperContentAddToFolderDetails.target_asset_index: Target
        asset position in the Assets list.
    :ivar team_log.PaperContentAddToFolderDetails.parent_asset_index: Parent
        asset position in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., target_asset_index=..., parent_asset_index=...) -> None:
        ...
    
    event_uuid = ...
    target_asset_index = ...
    parent_asset_index = ...


PaperContentAddToFolderDetails_validator = ...
class PaperContentAddToFolderType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentAddToFolderType_validator = ...
class PaperContentArchiveDetails(bb.Struct):
    """
    Archived Paper doc/folder.

    :ivar team_log.PaperContentArchiveDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperContentArchiveDetails_validator = ...
class PaperContentArchiveType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentArchiveType_validator = ...
class PaperContentCreateDetails(bb.Struct):
    """
    Created Paper doc/folder.

    :ivar team_log.PaperContentCreateDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperContentCreateDetails_validator = ...
class PaperContentCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentCreateType_validator = ...
class PaperContentPermanentlyDeleteDetails(bb.Struct):
    """
    Permanently deleted Paper doc/folder.

    :ivar team_log.PaperContentPermanentlyDeleteDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperContentPermanentlyDeleteDetails_validator = ...
class PaperContentPermanentlyDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentPermanentlyDeleteType_validator = ...
class PaperContentRemoveFromFolderDetails(bb.Struct):
    """
    Removed Paper doc/folder from folder.

    :ivar team_log.PaperContentRemoveFromFolderDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperContentRemoveFromFolderDetails.target_asset_index:
        Target asset position in the Assets list.
    :ivar team_log.PaperContentRemoveFromFolderDetails.parent_asset_index:
        Parent asset position in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., target_asset_index=..., parent_asset_index=...) -> None:
        ...
    
    event_uuid = ...
    target_asset_index = ...
    parent_asset_index = ...


PaperContentRemoveFromFolderDetails_validator = ...
class PaperContentRemoveFromFolderType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentRemoveFromFolderType_validator = ...
class PaperContentRemoveMemberDetails(bb.Struct):
    """
    Removed users and/or groups from Paper doc/folder.

    :ivar team_log.PaperContentRemoveMemberDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperContentRemoveMemberDetails_validator = ...
class PaperContentRemoveMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentRemoveMemberType_validator = ...
class PaperContentRenameDetails(bb.Struct):
    """
    Renamed Paper doc/folder.

    :ivar team_log.PaperContentRenameDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperContentRenameDetails_validator = ...
class PaperContentRenameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentRenameType_validator = ...
class PaperContentRestoreDetails(bb.Struct):
    """
    Restored archived Paper doc/folder.

    :ivar team_log.PaperContentRestoreDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperContentRestoreDetails_validator = ...
class PaperContentRestoreType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperContentRestoreType_validator = ...
class PaperDefaultFolderPolicy(bb.Union):
    """
    Policy to set default access for newly created Paper folders.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    everyone_in_team = ...
    invite_only = ...
    other = ...
    def is_everyone_in_team(self):
        """
        Check if the union tag is ``everyone_in_team``.

        :rtype: bool
        """
        ...
    
    def is_invite_only(self):
        """
        Check if the union tag is ``invite_only``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PaperDefaultFolderPolicy_validator = ...
class PaperDefaultFolderPolicyChangedDetails(bb.Struct):
    """
    Changed Paper Default Folder Policy setting for team.

    :ivar team_log.PaperDefaultFolderPolicyChangedDetails.new_value: New Paper
        Default Folder Policy.
    :ivar team_log.PaperDefaultFolderPolicyChangedDetails.previous_value:
        Previous Paper Default Folder Policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


PaperDefaultFolderPolicyChangedDetails_validator = ...
class PaperDefaultFolderPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDefaultFolderPolicyChangedType_validator = ...
class PaperDesktopPolicy(bb.Union):
    """
    Policy for controlling if team members can use Paper Desktop

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PaperDesktopPolicy_validator = ...
class PaperDesktopPolicyChangedDetails(bb.Struct):
    """
    Enabled/disabled Paper Desktop for team.

    :ivar team_log.PaperDesktopPolicyChangedDetails.new_value: New Paper Desktop
        policy.
    :ivar team_log.PaperDesktopPolicyChangedDetails.previous_value: Previous
        Paper Desktop policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


PaperDesktopPolicyChangedDetails_validator = ...
class PaperDesktopPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDesktopPolicyChangedType_validator = ...
class PaperDocAddCommentDetails(bb.Struct):
    """
    Added Paper doc comment.

    :ivar team_log.PaperDocAddCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocAddCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


PaperDocAddCommentDetails_validator = ...
class PaperDocAddCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocAddCommentType_validator = ...
class PaperDocChangeMemberRoleDetails(bb.Struct):
    """
    Changed member permissions for Paper doc.

    :ivar team_log.PaperDocChangeMemberRoleDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocChangeMemberRoleDetails.access_type: Paper doc access
        type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., access_type=...) -> None:
        ...
    
    event_uuid = ...
    access_type = ...


PaperDocChangeMemberRoleDetails_validator = ...
class PaperDocChangeMemberRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocChangeMemberRoleType_validator = ...
class PaperDocChangeSharingPolicyDetails(bb.Struct):
    """
    Changed sharing setting for Paper doc.

    :ivar team_log.PaperDocChangeSharingPolicyDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocChangeSharingPolicyDetails.public_sharing_policy:
        Sharing policy with external users.
    :ivar team_log.PaperDocChangeSharingPolicyDetails.team_sharing_policy:
        Sharing policy with team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., public_sharing_policy=..., team_sharing_policy=...) -> None:
        ...
    
    event_uuid = ...
    public_sharing_policy = ...
    team_sharing_policy = ...


PaperDocChangeSharingPolicyDetails_validator = ...
class PaperDocChangeSharingPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocChangeSharingPolicyType_validator = ...
class PaperDocChangeSubscriptionDetails(bb.Struct):
    """
    Followed/unfollowed Paper doc.

    :ivar team_log.PaperDocChangeSubscriptionDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocChangeSubscriptionDetails.new_subscription_level: New
        doc subscription level.
    :ivar
        team_log.PaperDocChangeSubscriptionDetails.previous_subscription_level:
        Previous doc subscription level. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., new_subscription_level=..., previous_subscription_level=...) -> None:
        ...
    
    event_uuid = ...
    new_subscription_level = ...
    previous_subscription_level = ...


PaperDocChangeSubscriptionDetails_validator = ...
class PaperDocChangeSubscriptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocChangeSubscriptionType_validator = ...
class PaperDocDeleteCommentDetails(bb.Struct):
    """
    Deleted Paper doc comment.

    :ivar team_log.PaperDocDeleteCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocDeleteCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


PaperDocDeleteCommentDetails_validator = ...
class PaperDocDeleteCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocDeleteCommentType_validator = ...
class PaperDocDeletedDetails(bb.Struct):
    """
    Archived Paper doc.

    :ivar team_log.PaperDocDeletedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocDeletedDetails_validator = ...
class PaperDocDeletedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocDeletedType_validator = ...
class PaperDocDownloadDetails(bb.Struct):
    """
    Downloaded Paper doc in specific format.

    :ivar team_log.PaperDocDownloadDetails.event_uuid: Event unique identifier.
    :ivar team_log.PaperDocDownloadDetails.export_file_format: Export file
        format.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., export_file_format=...) -> None:
        ...
    
    event_uuid = ...
    export_file_format = ...


PaperDocDownloadDetails_validator = ...
class PaperDocDownloadType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocDownloadType_validator = ...
class PaperDocEditCommentDetails(bb.Struct):
    """
    Edited Paper doc comment.

    :ivar team_log.PaperDocEditCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocEditCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


PaperDocEditCommentDetails_validator = ...
class PaperDocEditCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocEditCommentType_validator = ...
class PaperDocEditDetails(bb.Struct):
    """
    Edited Paper doc.

    :ivar team_log.PaperDocEditDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocEditDetails_validator = ...
class PaperDocEditType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocEditType_validator = ...
class PaperDocFollowedDetails(bb.Struct):
    """
    Followed Paper doc.

    :ivar team_log.PaperDocFollowedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocFollowedDetails_validator = ...
class PaperDocFollowedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocFollowedType_validator = ...
class PaperDocMentionDetails(bb.Struct):
    """
    Mentioned user in Paper doc.

    :ivar team_log.PaperDocMentionDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocMentionDetails_validator = ...
class PaperDocMentionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocMentionType_validator = ...
class PaperDocOwnershipChangedDetails(bb.Struct):
    """
    Transferred ownership of Paper doc.

    :ivar team_log.PaperDocOwnershipChangedDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocOwnershipChangedDetails.old_owner_user_id: Previous
        owner.
    :ivar team_log.PaperDocOwnershipChangedDetails.new_owner_user_id: New owner.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., new_owner_user_id=..., old_owner_user_id=...) -> None:
        ...
    
    event_uuid = ...
    old_owner_user_id = ...
    new_owner_user_id = ...


PaperDocOwnershipChangedDetails_validator = ...
class PaperDocOwnershipChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocOwnershipChangedType_validator = ...
class PaperDocRequestAccessDetails(bb.Struct):
    """
    Requested access to Paper doc.

    :ivar team_log.PaperDocRequestAccessDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocRequestAccessDetails_validator = ...
class PaperDocRequestAccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocRequestAccessType_validator = ...
class PaperDocResolveCommentDetails(bb.Struct):
    """
    Resolved Paper doc comment.

    :ivar team_log.PaperDocResolveCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocResolveCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


PaperDocResolveCommentDetails_validator = ...
class PaperDocResolveCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocResolveCommentType_validator = ...
class PaperDocRevertDetails(bb.Struct):
    """
    Restored Paper doc to previous version.

    :ivar team_log.PaperDocRevertDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocRevertDetails_validator = ...
class PaperDocRevertType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocRevertType_validator = ...
class PaperDocSlackShareDetails(bb.Struct):
    """
    Shared Paper doc via Slack.

    :ivar team_log.PaperDocSlackShareDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocSlackShareDetails_validator = ...
class PaperDocSlackShareType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocSlackShareType_validator = ...
class PaperDocTeamInviteDetails(bb.Struct):
    """
    Shared Paper doc with users and/or groups.

    :ivar team_log.PaperDocTeamInviteDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocTeamInviteDetails_validator = ...
class PaperDocTeamInviteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocTeamInviteType_validator = ...
class PaperDocTrashedDetails(bb.Struct):
    """
    Deleted Paper doc.

    :ivar team_log.PaperDocTrashedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocTrashedDetails_validator = ...
class PaperDocTrashedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocTrashedType_validator = ...
class PaperDocUnresolveCommentDetails(bb.Struct):
    """
    Unresolved Paper doc comment.

    :ivar team_log.PaperDocUnresolveCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperDocUnresolveCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


PaperDocUnresolveCommentDetails_validator = ...
class PaperDocUnresolveCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocUnresolveCommentType_validator = ...
class PaperDocUntrashedDetails(bb.Struct):
    """
    Restored Paper doc.

    :ivar team_log.PaperDocUntrashedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocUntrashedDetails_validator = ...
class PaperDocUntrashedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocUntrashedType_validator = ...
class PaperDocViewDetails(bb.Struct):
    """
    Viewed Paper doc.

    :ivar team_log.PaperDocViewDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperDocViewDetails_validator = ...
class PaperDocViewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperDocViewType_validator = ...
class PaperDocumentLogInfo(bb.Struct):
    """
    Paper document's logged information.

    :ivar team_log.PaperDocumentLogInfo.doc_id: Papers document Id.
    :ivar team_log.PaperDocumentLogInfo.doc_title: Paper document title.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, doc_id=..., doc_title=...) -> None:
        ...
    
    doc_id = ...
    doc_title = ...


PaperDocumentLogInfo_validator = ...
class PaperDownloadFormat(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    docx = ...
    html = ...
    markdown = ...
    pdf = ...
    other = ...
    def is_docx(self):
        """
        Check if the union tag is ``docx``.

        :rtype: bool
        """
        ...
    
    def is_html(self):
        """
        Check if the union tag is ``html``.

        :rtype: bool
        """
        ...
    
    def is_markdown(self):
        """
        Check if the union tag is ``markdown``.

        :rtype: bool
        """
        ...
    
    def is_pdf(self):
        """
        Check if the union tag is ``pdf``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PaperDownloadFormat_validator = ...
class PaperEnabledUsersGroupAdditionDetails(bb.Struct):
    """
    Added users to Paper-enabled users list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


PaperEnabledUsersGroupAdditionDetails_validator = ...
class PaperEnabledUsersGroupAdditionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperEnabledUsersGroupAdditionType_validator = ...
class PaperEnabledUsersGroupRemovalDetails(bb.Struct):
    """
    Removed users from Paper-enabled users list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


PaperEnabledUsersGroupRemovalDetails_validator = ...
class PaperEnabledUsersGroupRemovalType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperEnabledUsersGroupRemovalType_validator = ...
class PaperExternalViewAllowDetails(bb.Struct):
    """
    Changed Paper external sharing setting to anyone.

    :ivar team_log.PaperExternalViewAllowDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperExternalViewAllowDetails_validator = ...
class PaperExternalViewAllowType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperExternalViewAllowType_validator = ...
class PaperExternalViewDefaultTeamDetails(bb.Struct):
    """
    Changed Paper external sharing setting to default team.

    :ivar team_log.PaperExternalViewDefaultTeamDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperExternalViewDefaultTeamDetails_validator = ...
class PaperExternalViewDefaultTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperExternalViewDefaultTeamType_validator = ...
class PaperExternalViewForbidDetails(bb.Struct):
    """
    Changed Paper external sharing setting to team-only.

    :ivar team_log.PaperExternalViewForbidDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperExternalViewForbidDetails_validator = ...
class PaperExternalViewForbidType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperExternalViewForbidType_validator = ...
class PaperFolderChangeSubscriptionDetails(bb.Struct):
    """
    Followed/unfollowed Paper folder.

    :ivar team_log.PaperFolderChangeSubscriptionDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.PaperFolderChangeSubscriptionDetails.new_subscription_level:
        New folder subscription level.
    :ivar
        team_log.PaperFolderChangeSubscriptionDetails.previous_subscription_level:
        Previous folder subscription level. Might be missing due to historical
        data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., new_subscription_level=..., previous_subscription_level=...) -> None:
        ...
    
    event_uuid = ...
    new_subscription_level = ...
    previous_subscription_level = ...


PaperFolderChangeSubscriptionDetails_validator = ...
class PaperFolderChangeSubscriptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperFolderChangeSubscriptionType_validator = ...
class PaperFolderDeletedDetails(bb.Struct):
    """
    Archived Paper folder.

    :ivar team_log.PaperFolderDeletedDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperFolderDeletedDetails_validator = ...
class PaperFolderDeletedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperFolderDeletedType_validator = ...
class PaperFolderFollowedDetails(bb.Struct):
    """
    Followed Paper folder.

    :ivar team_log.PaperFolderFollowedDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperFolderFollowedDetails_validator = ...
class PaperFolderFollowedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperFolderFollowedType_validator = ...
class PaperFolderLogInfo(bb.Struct):
    """
    Paper folder's logged information.

    :ivar team_log.PaperFolderLogInfo.folder_id: Papers folder Id.
    :ivar team_log.PaperFolderLogInfo.folder_name: Paper folder name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, folder_id=..., folder_name=...) -> None:
        ...
    
    folder_id = ...
    folder_name = ...


PaperFolderLogInfo_validator = ...
class PaperFolderTeamInviteDetails(bb.Struct):
    """
    Shared Paper folder with users and/or groups.

    :ivar team_log.PaperFolderTeamInviteDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperFolderTeamInviteDetails_validator = ...
class PaperFolderTeamInviteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperFolderTeamInviteType_validator = ...
class PaperMemberPolicy(bb.Union):
    """
    Policy for controlling if team members can share Paper documents externally.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    anyone_with_link = ...
    only_team = ...
    team_and_explicitly_shared = ...
    other = ...
    def is_anyone_with_link(self):
        """
        Check if the union tag is ``anyone_with_link``.

        :rtype: bool
        """
        ...
    
    def is_only_team(self):
        """
        Check if the union tag is ``only_team``.

        :rtype: bool
        """
        ...
    
    def is_team_and_explicitly_shared(self):
        """
        Check if the union tag is ``team_and_explicitly_shared``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PaperMemberPolicy_validator = ...
class PaperPublishedLinkChangePermissionDetails(bb.Struct):
    """
    Changed permissions for published doc.

    :ivar team_log.PaperPublishedLinkChangePermissionDetails.event_uuid: Event
        unique identifier.
    :ivar
        team_log.PaperPublishedLinkChangePermissionDetails.new_permission_level:
        New permission level.
    :ivar
        team_log.PaperPublishedLinkChangePermissionDetails.previous_permission_level:
        Previous permission level.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., new_permission_level=..., previous_permission_level=...) -> None:
        ...
    
    event_uuid = ...
    new_permission_level = ...
    previous_permission_level = ...


PaperPublishedLinkChangePermissionDetails_validator = ...
class PaperPublishedLinkChangePermissionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperPublishedLinkChangePermissionType_validator = ...
class PaperPublishedLinkCreateDetails(bb.Struct):
    """
    Published doc.

    :ivar team_log.PaperPublishedLinkCreateDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperPublishedLinkCreateDetails_validator = ...
class PaperPublishedLinkCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperPublishedLinkCreateType_validator = ...
class PaperPublishedLinkDisabledDetails(bb.Struct):
    """
    Unpublished doc.

    :ivar team_log.PaperPublishedLinkDisabledDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperPublishedLinkDisabledDetails_validator = ...
class PaperPublishedLinkDisabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperPublishedLinkDisabledType_validator = ...
class PaperPublishedLinkViewDetails(bb.Struct):
    """
    Viewed published doc.

    :ivar team_log.PaperPublishedLinkViewDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


PaperPublishedLinkViewDetails_validator = ...
class PaperPublishedLinkViewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PaperPublishedLinkViewType_validator = ...
class ParticipantLogInfo(bb.Union):
    """
    A user or group

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar GroupLogInfo ParticipantLogInfo.group: Group details.
    :ivar UserLogInfo ParticipantLogInfo.user: A user with a Dropbox account.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def group(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``group`` tag with value
        ``val``.

        :param GroupLogInfo val:
        :rtype: ParticipantLogInfo
        """
        ...
    
    @classmethod
    def user(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``user`` tag with value
        ``val``.

        :param UserLogInfo val:
        :rtype: ParticipantLogInfo
        """
        ...
    
    def is_group(self):
        """
        Check if the union tag is ``group``.

        :rtype: bool
        """
        ...
    
    def is_user(self):
        """
        Check if the union tag is ``user``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_group(self): # -> None:
        """
        Group details.

        Only call this if :meth:`is_group` is true.

        :rtype: GroupLogInfo
        """
        ...
    
    def get_user(self): # -> None:
        """
        A user with a Dropbox account.

        Only call this if :meth:`is_user` is true.

        :rtype: UserLogInfo
        """
        ...
    


ParticipantLogInfo_validator = ...
class PassPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    allow = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_allow(self):
        """
        Check if the union tag is ``allow``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PassPolicy_validator = ...
class PasswordChangeDetails(bb.Struct):
    """
    Changed password.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


PasswordChangeDetails_validator = ...
class PasswordChangeType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PasswordChangeType_validator = ...
class PasswordResetAllDetails(bb.Struct):
    """
    Reset all team member passwords.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


PasswordResetAllDetails_validator = ...
class PasswordResetAllType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PasswordResetAllType_validator = ...
class PasswordResetDetails(bb.Struct):
    """
    Reset password.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


PasswordResetDetails_validator = ...
class PasswordResetType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PasswordResetType_validator = ...
class PasswordStrengthRequirementsChangePolicyDetails(bb.Struct):
    """
    Changed team password strength requirements.

    :ivar
        team_log.PasswordStrengthRequirementsChangePolicyDetails.previous_value:
        Old password strength policy.
    :ivar team_log.PasswordStrengthRequirementsChangePolicyDetails.new_value:
        New password strength policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


PasswordStrengthRequirementsChangePolicyDetails_validator = ...
class PasswordStrengthRequirementsChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PasswordStrengthRequirementsChangePolicyType_validator = ...
class PathLogInfo(bb.Struct):
    """
    Path's details.

    :ivar team_log.PathLogInfo.contextual: Fully qualified path relative to
        event's context.
    :ivar team_log.PathLogInfo.namespace_relative: Path relative to the
        namespace containing the content.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, namespace_relative=..., contextual=...) -> None:
        ...
    
    contextual = ...
    namespace_relative = ...


PathLogInfo_validator = ...
class PendingSecondaryEmailAddedDetails(bb.Struct):
    """
    Added pending secondary email.

    :ivar team_log.PendingSecondaryEmailAddedDetails.secondary_email: New
        pending secondary email.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_email=...) -> None:
        ...
    
    secondary_email = ...


PendingSecondaryEmailAddedDetails_validator = ...
class PendingSecondaryEmailAddedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PendingSecondaryEmailAddedType_validator = ...
class PermanentDeleteChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled ability of team members to permanently delete content.

    :ivar team_log.PermanentDeleteChangePolicyDetails.new_value: New permanent
        delete content policy.
    :ivar team_log.PermanentDeleteChangePolicyDetails.previous_value: Previous
        permanent delete content policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


PermanentDeleteChangePolicyDetails_validator = ...
class PermanentDeleteChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


PermanentDeleteChangePolicyType_validator = ...
class PlacementRestriction(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    australia_only = ...
    europe_only = ...
    japan_only = ...
    none = ...
    uk_only = ...
    us_s3_only = ...
    other = ...
    def is_australia_only(self):
        """
        Check if the union tag is ``australia_only``.

        :rtype: bool
        """
        ...
    
    def is_europe_only(self):
        """
        Check if the union tag is ``europe_only``.

        :rtype: bool
        """
        ...
    
    def is_japan_only(self):
        """
        Check if the union tag is ``japan_only``.

        :rtype: bool
        """
        ...
    
    def is_none(self):
        """
        Check if the union tag is ``none``.

        :rtype: bool
        """
        ...
    
    def is_uk_only(self):
        """
        Check if the union tag is ``uk_only``.

        :rtype: bool
        """
        ...
    
    def is_us_s3_only(self):
        """
        Check if the union tag is ``us_s3_only``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PlacementRestriction_validator = ...
class PolicyType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disposition = ...
    retention = ...
    other = ...
    def is_disposition(self):
        """
        Check if the union tag is ``disposition``.

        :rtype: bool
        """
        ...
    
    def is_retention(self):
        """
        Check if the union tag is ``retention``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PolicyType_validator = ...
class PrimaryTeamRequestAcceptedDetails(bb.Struct):
    """
    Team merge request acceptance details shown to the primary team

    :ivar team_log.PrimaryTeamRequestAcceptedDetails.secondary_team: The
        secondary team name.
    :ivar team_log.PrimaryTeamRequestAcceptedDetails.sent_by: The name of the
        secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_by=...) -> None:
        ...
    
    secondary_team = ...
    sent_by = ...


PrimaryTeamRequestAcceptedDetails_validator = ...
class PrimaryTeamRequestCanceledDetails(bb.Struct):
    """
    Team merge request cancellation details shown to the primary team

    :ivar team_log.PrimaryTeamRequestCanceledDetails.secondary_team: The
        secondary team name.
    :ivar team_log.PrimaryTeamRequestCanceledDetails.sent_by: The name of the
        secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_by=...) -> None:
        ...
    
    secondary_team = ...
    sent_by = ...


PrimaryTeamRequestCanceledDetails_validator = ...
class PrimaryTeamRequestExpiredDetails(bb.Struct):
    """
    Team merge request expiration details shown to the primary team

    :ivar team_log.PrimaryTeamRequestExpiredDetails.secondary_team: The
        secondary team name.
    :ivar team_log.PrimaryTeamRequestExpiredDetails.sent_by: The name of the
        secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_by=...) -> None:
        ...
    
    secondary_team = ...
    sent_by = ...


PrimaryTeamRequestExpiredDetails_validator = ...
class PrimaryTeamRequestReminderDetails(bb.Struct):
    """
    Team merge request reminder details shown to the primary team

    :ivar team_log.PrimaryTeamRequestReminderDetails.secondary_team: The
        secondary team name.
    :ivar team_log.PrimaryTeamRequestReminderDetails.sent_to: The name of the
        primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_to=...) -> None:
        ...
    
    secondary_team = ...
    sent_to = ...


PrimaryTeamRequestReminderDetails_validator = ...
class QuickActionType(bb.Union):
    """
    Quick action type.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    delete_shared_link = ...
    reset_password = ...
    restore_file_or_folder = ...
    unlink_app = ...
    unlink_device = ...
    unlink_session = ...
    other = ...
    def is_delete_shared_link(self):
        """
        Check if the union tag is ``delete_shared_link``.

        :rtype: bool
        """
        ...
    
    def is_reset_password(self):
        """
        Check if the union tag is ``reset_password``.

        :rtype: bool
        """
        ...
    
    def is_restore_file_or_folder(self):
        """
        Check if the union tag is ``restore_file_or_folder``.

        :rtype: bool
        """
        ...
    
    def is_unlink_app(self):
        """
        Check if the union tag is ``unlink_app``.

        :rtype: bool
        """
        ...
    
    def is_unlink_device(self):
        """
        Check if the union tag is ``unlink_device``.

        :rtype: bool
        """
        ...
    
    def is_unlink_session(self):
        """
        Check if the union tag is ``unlink_session``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


QuickActionType_validator = ...
class RansomwareAlertCreateReportDetails(bb.Struct):
    """
    Created ransomware report.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


RansomwareAlertCreateReportDetails_validator = ...
class RansomwareAlertCreateReportFailedDetails(bb.Struct):
    """
    Couldn't generate ransomware report.

    :ivar team_log.RansomwareAlertCreateReportFailedDetails.failure_reason:
        Failure reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


RansomwareAlertCreateReportFailedDetails_validator = ...
class RansomwareAlertCreateReportFailedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


RansomwareAlertCreateReportFailedType_validator = ...
class RansomwareAlertCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


RansomwareAlertCreateReportType_validator = ...
class RansomwareRestoreProcessCompletedDetails(bb.Struct):
    """
    Completed ransomware restore process.

    :ivar team_log.RansomwareRestoreProcessCompletedDetails.status: The status
        of the restore process.
    :ivar
        team_log.RansomwareRestoreProcessCompletedDetails.restored_files_count:
        Restored files count.
    :ivar
        team_log.RansomwareRestoreProcessCompletedDetails.restored_files_failed_count:
        Restored files failed count.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, status=..., restored_files_count=..., restored_files_failed_count=...) -> None:
        ...
    
    status = ...
    restored_files_count = ...
    restored_files_failed_count = ...


RansomwareRestoreProcessCompletedDetails_validator = ...
class RansomwareRestoreProcessCompletedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


RansomwareRestoreProcessCompletedType_validator = ...
class RansomwareRestoreProcessStartedDetails(bb.Struct):
    """
    Started ransomware restore process.

    :ivar team_log.RansomwareRestoreProcessStartedDetails.extension: Ransomware
        filename extension.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, extension=...) -> None:
        ...
    
    extension = ...


RansomwareRestoreProcessStartedDetails_validator = ...
class RansomwareRestoreProcessStartedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


RansomwareRestoreProcessStartedType_validator = ...
class RecipientsConfiguration(bb.Struct):
    """
    Recipients Configuration

    :ivar team_log.RecipientsConfiguration.recipient_setting_type: Recipients
        setting type.
    :ivar team_log.RecipientsConfiguration.emails: A list of user emails to
        notify.
    :ivar team_log.RecipientsConfiguration.groups: A list of groups to notify.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, recipient_setting_type=..., emails=..., groups=...) -> None:
        ...
    
    recipient_setting_type = ...
    emails = ...
    groups = ...


RecipientsConfiguration_validator = ...
class RelocateAssetReferencesLogInfo(bb.Struct):
    """
    Provides the indices of the source asset and the destination asset for a
    relocate action.

    :ivar team_log.RelocateAssetReferencesLogInfo.src_asset_index: Source asset
        position in the Assets list.
    :ivar team_log.RelocateAssetReferencesLogInfo.dest_asset_index: Destination
        asset position in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, src_asset_index=..., dest_asset_index=...) -> None:
        ...
    
    src_asset_index = ...
    dest_asset_index = ...


RelocateAssetReferencesLogInfo_validator = ...
class ReplayFileDeleteDetails(bb.Struct):
    """
    Deleted files in Replay.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ReplayFileDeleteDetails_validator = ...
class ReplayFileDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ReplayFileDeleteType_validator = ...
class ReplayFileSharedLinkCreatedDetails(bb.Struct):
    """
    Created shared link in Replay.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ReplayFileSharedLinkCreatedDetails_validator = ...
class ReplayFileSharedLinkCreatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ReplayFileSharedLinkCreatedType_validator = ...
class ReplayFileSharedLinkModifiedDetails(bb.Struct):
    """
    Modified shared link in Replay.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ReplayFileSharedLinkModifiedDetails_validator = ...
class ReplayFileSharedLinkModifiedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ReplayFileSharedLinkModifiedType_validator = ...
class ReplayProjectTeamAddDetails(bb.Struct):
    """
    Added member to Replay Project.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ReplayProjectTeamAddDetails_validator = ...
class ReplayProjectTeamAddType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ReplayProjectTeamAddType_validator = ...
class ReplayProjectTeamDeleteDetails(bb.Struct):
    """
    Removed member from Replay Project.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ReplayProjectTeamDeleteDetails_validator = ...
class ReplayProjectTeamDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ReplayProjectTeamDeleteType_validator = ...
class ResellerLogInfo(bb.Struct):
    """
    Reseller information.

    :ivar team_log.ResellerLogInfo.reseller_name: Reseller name.
    :ivar team_log.ResellerLogInfo.reseller_email: Reseller email.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, reseller_name=..., reseller_email=...) -> None:
        ...
    
    reseller_name = ...
    reseller_email = ...


ResellerLogInfo_validator = ...
class ResellerRole(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    not_reseller = ...
    reseller_admin = ...
    other = ...
    def is_not_reseller(self):
        """
        Check if the union tag is ``not_reseller``.

        :rtype: bool
        """
        ...
    
    def is_reseller_admin(self):
        """
        Check if the union tag is ``reseller_admin``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ResellerRole_validator = ...
class ResellerSupportChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled reseller support.

    :ivar team_log.ResellerSupportChangePolicyDetails.new_value: New Reseller
        support policy.
    :ivar team_log.ResellerSupportChangePolicyDetails.previous_value: Previous
        Reseller support policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ResellerSupportChangePolicyDetails_validator = ...
class ResellerSupportChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ResellerSupportChangePolicyType_validator = ...
class ResellerSupportPolicy(bb.Union):
    """
    Policy for controlling if reseller can access the admin console as
    administrator

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ResellerSupportPolicy_validator = ...
class ResellerSupportSessionEndDetails(bb.Struct):
    """
    Ended reseller support session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ResellerSupportSessionEndDetails_validator = ...
class ResellerSupportSessionEndType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ResellerSupportSessionEndType_validator = ...
class ResellerSupportSessionStartDetails(bb.Struct):
    """
    Started reseller support session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ResellerSupportSessionStartDetails_validator = ...
class ResellerSupportSessionStartType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ResellerSupportSessionStartType_validator = ...
class RewindFolderDetails(bb.Struct):
    """
    Rewound a folder.

    :ivar team_log.RewindFolderDetails.rewind_folder_target_ts_ms: Folder was
        Rewound to this date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, rewind_folder_target_ts_ms=...) -> None:
        ...
    
    rewind_folder_target_ts_ms = ...


RewindFolderDetails_validator = ...
class RewindFolderType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


RewindFolderType_validator = ...
class RewindPolicy(bb.Union):
    """
    Policy for controlling whether team members can rewind

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    admins_only = ...
    everyone = ...
    other = ...
    def is_admins_only(self):
        """
        Check if the union tag is ``admins_only``.

        :rtype: bool
        """
        ...
    
    def is_everyone(self):
        """
        Check if the union tag is ``everyone``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


RewindPolicy_validator = ...
class RewindPolicyChangedDetails(bb.Struct):
    """
    Changed Rewind policy for team.

    :ivar team_log.RewindPolicyChangedDetails.new_value: New Dropbox Rewind
        policy.
    :ivar team_log.RewindPolicyChangedDetails.previous_value: Previous Dropbox
        Rewind policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


RewindPolicyChangedDetails_validator = ...
class RewindPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


RewindPolicyChangedType_validator = ...
class SecondaryEmailDeletedDetails(bb.Struct):
    """
    Deleted secondary email.

    :ivar team_log.SecondaryEmailDeletedDetails.secondary_email: Deleted
        secondary email.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_email=...) -> None:
        ...
    
    secondary_email = ...


SecondaryEmailDeletedDetails_validator = ...
class SecondaryEmailDeletedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SecondaryEmailDeletedType_validator = ...
class SecondaryEmailVerifiedDetails(bb.Struct):
    """
    Verified secondary email.

    :ivar team_log.SecondaryEmailVerifiedDetails.secondary_email: Verified
        secondary email.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_email=...) -> None:
        ...
    
    secondary_email = ...


SecondaryEmailVerifiedDetails_validator = ...
class SecondaryEmailVerifiedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SecondaryEmailVerifiedType_validator = ...
class SecondaryMailsPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SecondaryMailsPolicy_validator = ...
class SecondaryMailsPolicyChangedDetails(bb.Struct):
    """
    Secondary mails policy changed.

    :ivar team_log.SecondaryMailsPolicyChangedDetails.previous_value: Previous
        secondary mails policy.
    :ivar team_log.SecondaryMailsPolicyChangedDetails.new_value: New secondary
        mails policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


SecondaryMailsPolicyChangedDetails_validator = ...
class SecondaryMailsPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SecondaryMailsPolicyChangedType_validator = ...
class SecondaryTeamRequestAcceptedDetails(bb.Struct):
    """
    Team merge request acceptance details shown to the secondary team

    :ivar team_log.SecondaryTeamRequestAcceptedDetails.primary_team: The primary
        team name.
    :ivar team_log.SecondaryTeamRequestAcceptedDetails.sent_by: The name of the
        secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, primary_team=..., sent_by=...) -> None:
        ...
    
    primary_team = ...
    sent_by = ...


SecondaryTeamRequestAcceptedDetails_validator = ...
class SecondaryTeamRequestCanceledDetails(bb.Struct):
    """
    Team merge request cancellation details shown to the secondary team

    :ivar team_log.SecondaryTeamRequestCanceledDetails.sent_to: The email of the
        primary team admin that the request was sent to.
    :ivar team_log.SecondaryTeamRequestCanceledDetails.sent_by: The name of the
        secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_to=..., sent_by=...) -> None:
        ...
    
    sent_to = ...
    sent_by = ...


SecondaryTeamRequestCanceledDetails_validator = ...
class SecondaryTeamRequestExpiredDetails(bb.Struct):
    """
    Team merge request expiration details shown to the secondary team

    :ivar team_log.SecondaryTeamRequestExpiredDetails.sent_to: The email of the
        primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_to=...) -> None:
        ...
    
    sent_to = ...


SecondaryTeamRequestExpiredDetails_validator = ...
class SecondaryTeamRequestReminderDetails(bb.Struct):
    """
    Team merge request reminder details shown to the secondary team

    :ivar team_log.SecondaryTeamRequestReminderDetails.sent_to: The email of the
        primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_to=...) -> None:
        ...
    
    sent_to = ...


SecondaryTeamRequestReminderDetails_validator = ...
class SendForSignaturePolicy(bb.Union):
    """
    Policy for controlling team access to send for signature feature

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SendForSignaturePolicy_validator = ...
class SendForSignaturePolicyChangedDetails(bb.Struct):
    """
    Changed send for signature policy for team.

    :ivar team_log.SendForSignaturePolicyChangedDetails.new_value: New send for
        signature policy.
    :ivar team_log.SendForSignaturePolicyChangedDetails.previous_value: Previous
        send for signature policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SendForSignaturePolicyChangedDetails_validator = ...
class SendForSignaturePolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SendForSignaturePolicyChangedType_validator = ...
class SfAddGroupDetails(bb.Struct):
    """
    Added team to shared folder.

    :ivar team_log.SfAddGroupDetails.target_asset_index: Target asset position
        in the Assets list.
    :ivar team_log.SfAddGroupDetails.original_folder_name: Original shared
        folder name.
    :ivar team_log.SfAddGroupDetails.sharing_permission: Sharing permission.
    :ivar team_log.SfAddGroupDetails.team_name: Team name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., team_name=..., sharing_permission=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    sharing_permission = ...
    team_name = ...


SfAddGroupDetails_validator = ...
class SfAddGroupType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfAddGroupType_validator = ...
class SfAllowNonMembersToViewSharedLinksDetails(bb.Struct):
    """
    Allowed non-collaborators to view links to files in shared folder.

    :ivar team_log.SfAllowNonMembersToViewSharedLinksDetails.target_asset_index:
        Target asset position in the Assets list.
    :ivar
        team_log.SfAllowNonMembersToViewSharedLinksDetails.original_folder_name:
        Original shared folder name.
    :ivar team_log.SfAllowNonMembersToViewSharedLinksDetails.shared_folder_type:
        Shared folder type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., shared_folder_type=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    shared_folder_type = ...


SfAllowNonMembersToViewSharedLinksDetails_validator = ...
class SfAllowNonMembersToViewSharedLinksType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfAllowNonMembersToViewSharedLinksType_validator = ...
class SfExternalInviteWarnDetails(bb.Struct):
    """
    Set team members to see warning before sharing folders outside team.

    :ivar team_log.SfExternalInviteWarnDetails.target_asset_index: Target asset
        position in the Assets list.
    :ivar team_log.SfExternalInviteWarnDetails.original_folder_name: Original
        shared folder name.
    :ivar team_log.SfExternalInviteWarnDetails.new_sharing_permission: New
        sharing permission.
    :ivar team_log.SfExternalInviteWarnDetails.previous_sharing_permission:
        Previous sharing permission.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., new_sharing_permission=..., previous_sharing_permission=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    new_sharing_permission = ...
    previous_sharing_permission = ...


SfExternalInviteWarnDetails_validator = ...
class SfExternalInviteWarnType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfExternalInviteWarnType_validator = ...
class SfFbInviteChangeRoleDetails(bb.Struct):
    """
    Changed Facebook user's role in shared folder.

    :ivar team_log.SfFbInviteChangeRoleDetails.target_asset_index: Target asset
        position in the Assets list.
    :ivar team_log.SfFbInviteChangeRoleDetails.original_folder_name: Original
        shared folder name.
    :ivar team_log.SfFbInviteChangeRoleDetails.previous_sharing_permission:
        Previous sharing permission.
    :ivar team_log.SfFbInviteChangeRoleDetails.new_sharing_permission: New
        sharing permission.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., previous_sharing_permission=..., new_sharing_permission=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    previous_sharing_permission = ...
    new_sharing_permission = ...


SfFbInviteChangeRoleDetails_validator = ...
class SfFbInviteChangeRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfFbInviteChangeRoleType_validator = ...
class SfFbInviteDetails(bb.Struct):
    """
    Invited Facebook users to shared folder.

    :ivar team_log.SfFbInviteDetails.target_asset_index: Target asset position
        in the Assets list.
    :ivar team_log.SfFbInviteDetails.original_folder_name: Original shared
        folder name.
    :ivar team_log.SfFbInviteDetails.sharing_permission: Sharing permission.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., sharing_permission=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    sharing_permission = ...


SfFbInviteDetails_validator = ...
class SfFbInviteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfFbInviteType_validator = ...
class SfFbUninviteDetails(bb.Struct):
    """
    Uninvited Facebook user from shared folder.

    :ivar team_log.SfFbUninviteDetails.target_asset_index: Target asset position
        in the Assets list.
    :ivar team_log.SfFbUninviteDetails.original_folder_name: Original shared
        folder name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...


SfFbUninviteDetails_validator = ...
class SfFbUninviteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfFbUninviteType_validator = ...
class SfInviteGroupDetails(bb.Struct):
    """
    Invited group to shared folder.

    :ivar team_log.SfInviteGroupDetails.target_asset_index: Target asset
        position in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=...) -> None:
        ...
    
    target_asset_index = ...


SfInviteGroupDetails_validator = ...
class SfInviteGroupType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfInviteGroupType_validator = ...
class SfTeamGrantAccessDetails(bb.Struct):
    """
    Granted access to shared folder.

    :ivar team_log.SfTeamGrantAccessDetails.target_asset_index: Target asset
        position in the Assets list.
    :ivar team_log.SfTeamGrantAccessDetails.original_folder_name: Original
        shared folder name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...


SfTeamGrantAccessDetails_validator = ...
class SfTeamGrantAccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfTeamGrantAccessType_validator = ...
class SfTeamInviteChangeRoleDetails(bb.Struct):
    """
    Changed team member's role in shared folder.

    :ivar team_log.SfTeamInviteChangeRoleDetails.target_asset_index: Target
        asset position in the Assets list.
    :ivar team_log.SfTeamInviteChangeRoleDetails.original_folder_name: Original
        shared folder name.
    :ivar team_log.SfTeamInviteChangeRoleDetails.new_sharing_permission: New
        sharing permission.
    :ivar team_log.SfTeamInviteChangeRoleDetails.previous_sharing_permission:
        Previous sharing permission.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., new_sharing_permission=..., previous_sharing_permission=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    new_sharing_permission = ...
    previous_sharing_permission = ...


SfTeamInviteChangeRoleDetails_validator = ...
class SfTeamInviteChangeRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfTeamInviteChangeRoleType_validator = ...
class SfTeamInviteDetails(bb.Struct):
    """
    Invited team members to shared folder.

    :ivar team_log.SfTeamInviteDetails.target_asset_index: Target asset position
        in the Assets list.
    :ivar team_log.SfTeamInviteDetails.original_folder_name: Original shared
        folder name.
    :ivar team_log.SfTeamInviteDetails.sharing_permission: Sharing permission.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., sharing_permission=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    sharing_permission = ...


SfTeamInviteDetails_validator = ...
class SfTeamInviteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfTeamInviteType_validator = ...
class SfTeamJoinDetails(bb.Struct):
    """
    Joined team member's shared folder.

    :ivar team_log.SfTeamJoinDetails.target_asset_index: Target asset position
        in the Assets list.
    :ivar team_log.SfTeamJoinDetails.original_folder_name: Original shared
        folder name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...


SfTeamJoinDetails_validator = ...
class SfTeamJoinFromOobLinkDetails(bb.Struct):
    """
    Joined team member's shared folder from link.

    :ivar team_log.SfTeamJoinFromOobLinkDetails.target_asset_index: Target asset
        position in the Assets list.
    :ivar team_log.SfTeamJoinFromOobLinkDetails.original_folder_name: Original
        shared folder name.
    :ivar team_log.SfTeamJoinFromOobLinkDetails.token_key: Shared link token
        key.
    :ivar team_log.SfTeamJoinFromOobLinkDetails.sharing_permission: Sharing
        permission.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=..., token_key=..., sharing_permission=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...
    token_key = ...
    sharing_permission = ...


SfTeamJoinFromOobLinkDetails_validator = ...
class SfTeamJoinFromOobLinkType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfTeamJoinFromOobLinkType_validator = ...
class SfTeamJoinType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfTeamJoinType_validator = ...
class SfTeamUninviteDetails(bb.Struct):
    """
    Unshared folder with team member.

    :ivar team_log.SfTeamUninviteDetails.target_asset_index: Target asset
        position in the Assets list.
    :ivar team_log.SfTeamUninviteDetails.original_folder_name: Original shared
        folder name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=..., original_folder_name=...) -> None:
        ...
    
    target_asset_index = ...
    original_folder_name = ...


SfTeamUninviteDetails_validator = ...
class SfTeamUninviteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SfTeamUninviteType_validator = ...
class SharedContentAddInviteesDetails(bb.Struct):
    """
    Invited user to Dropbox and added them to shared file/folder.

    :ivar team_log.SharedContentAddInviteesDetails.shared_content_access_level:
        Shared content access level.
    :ivar team_log.SharedContentAddInviteesDetails.invitees: A list of invitees.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., invitees=...) -> None:
        ...
    
    shared_content_access_level = ...
    invitees = ...


SharedContentAddInviteesDetails_validator = ...
class SharedContentAddInviteesType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentAddInviteesType_validator = ...
class SharedContentAddLinkExpiryDetails(bb.Struct):
    """
    Added expiration date to link for shared file/folder.

    :ivar team_log.SharedContentAddLinkExpiryDetails.new_value: New shared
        content link expiration date. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


SharedContentAddLinkExpiryDetails_validator = ...
class SharedContentAddLinkExpiryType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentAddLinkExpiryType_validator = ...
class SharedContentAddLinkPasswordDetails(bb.Struct):
    """
    Added password to link for shared file/folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedContentAddLinkPasswordDetails_validator = ...
class SharedContentAddLinkPasswordType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentAddLinkPasswordType_validator = ...
class SharedContentAddMemberDetails(bb.Struct):
    """
    Added users and/or groups to shared file/folder.

    :ivar team_log.SharedContentAddMemberDetails.shared_content_access_level:
        Shared content access level.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=...) -> None:
        ...
    
    shared_content_access_level = ...


SharedContentAddMemberDetails_validator = ...
class SharedContentAddMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentAddMemberType_validator = ...
class SharedContentChangeDownloadsPolicyDetails(bb.Struct):
    """
    Changed whether members can download shared file/folder.

    :ivar team_log.SharedContentChangeDownloadsPolicyDetails.new_value: New
        downloads policy.
    :ivar team_log.SharedContentChangeDownloadsPolicyDetails.previous_value:
        Previous downloads policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedContentChangeDownloadsPolicyDetails_validator = ...
class SharedContentChangeDownloadsPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentChangeDownloadsPolicyType_validator = ...
class SharedContentChangeInviteeRoleDetails(bb.Struct):
    """
    Changed access type of invitee to shared file/folder before invite was
    accepted.

    :ivar team_log.SharedContentChangeInviteeRoleDetails.previous_access_level:
        Previous access level. Might be missing due to historical data gap.
    :ivar team_log.SharedContentChangeInviteeRoleDetails.new_access_level: New
        access level.
    :ivar team_log.SharedContentChangeInviteeRoleDetails.invitee: The invitee
        whose role was changed.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_access_level=..., invitee=..., previous_access_level=...) -> None:
        ...
    
    previous_access_level = ...
    new_access_level = ...
    invitee = ...


SharedContentChangeInviteeRoleDetails_validator = ...
class SharedContentChangeInviteeRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentChangeInviteeRoleType_validator = ...
class SharedContentChangeLinkAudienceDetails(bb.Struct):
    """
    Changed link audience of shared file/folder.

    :ivar team_log.SharedContentChangeLinkAudienceDetails.new_value: New link
        audience value.
    :ivar team_log.SharedContentChangeLinkAudienceDetails.previous_value:
        Previous link audience value.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedContentChangeLinkAudienceDetails_validator = ...
class SharedContentChangeLinkAudienceType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentChangeLinkAudienceType_validator = ...
class SharedContentChangeLinkExpiryDetails(bb.Struct):
    """
    Changed link expiration of shared file/folder.

    :ivar team_log.SharedContentChangeLinkExpiryDetails.new_value: New shared
        content link expiration date. Might be missing due to historical data
        gap.
    :ivar team_log.SharedContentChangeLinkExpiryDetails.previous_value: Previous
        shared content link expiration date. Might be missing due to historical
        data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedContentChangeLinkExpiryDetails_validator = ...
class SharedContentChangeLinkExpiryType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentChangeLinkExpiryType_validator = ...
class SharedContentChangeLinkPasswordDetails(bb.Struct):
    """
    Changed link password of shared file/folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedContentChangeLinkPasswordDetails_validator = ...
class SharedContentChangeLinkPasswordType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentChangeLinkPasswordType_validator = ...
class SharedContentChangeMemberRoleDetails(bb.Struct):
    """
    Changed access type of shared file/folder member.

    :ivar team_log.SharedContentChangeMemberRoleDetails.previous_access_level:
        Previous access level. Might be missing due to historical data gap.
    :ivar team_log.SharedContentChangeMemberRoleDetails.new_access_level: New
        access level.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_access_level=..., previous_access_level=...) -> None:
        ...
    
    previous_access_level = ...
    new_access_level = ...


SharedContentChangeMemberRoleDetails_validator = ...
class SharedContentChangeMemberRoleType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentChangeMemberRoleType_validator = ...
class SharedContentChangeViewerInfoPolicyDetails(bb.Struct):
    """
    Changed whether members can see who viewed shared file/folder.

    :ivar team_log.SharedContentChangeViewerInfoPolicyDetails.new_value: New
        viewer info policy.
    :ivar team_log.SharedContentChangeViewerInfoPolicyDetails.previous_value:
        Previous view info policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedContentChangeViewerInfoPolicyDetails_validator = ...
class SharedContentChangeViewerInfoPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentChangeViewerInfoPolicyType_validator = ...
class SharedContentClaimInvitationDetails(bb.Struct):
    """
    Acquired membership of shared file/folder by accepting invite.

    :ivar team_log.SharedContentClaimInvitationDetails.shared_content_link:
        Shared content link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_link=...) -> None:
        ...
    
    shared_content_link = ...


SharedContentClaimInvitationDetails_validator = ...
class SharedContentClaimInvitationType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentClaimInvitationType_validator = ...
class SharedContentCopyDetails(bb.Struct):
    """
    Copied shared file/folder to own Dropbox.

    :ivar team_log.SharedContentCopyDetails.shared_content_link: Shared content
        link.
    :ivar team_log.SharedContentCopyDetails.shared_content_owner: The shared
        content owner.
    :ivar team_log.SharedContentCopyDetails.shared_content_access_level: Shared
        content access level.
    :ivar team_log.SharedContentCopyDetails.destination_path: The path where the
        member saved the content.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_link=..., shared_content_access_level=..., destination_path=..., shared_content_owner=...) -> None:
        ...
    
    shared_content_link = ...
    shared_content_owner = ...
    shared_content_access_level = ...
    destination_path = ...


SharedContentCopyDetails_validator = ...
class SharedContentCopyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentCopyType_validator = ...
class SharedContentDownloadDetails(bb.Struct):
    """
    Downloaded shared file/folder.

    :ivar team_log.SharedContentDownloadDetails.shared_content_link: Shared
        content link.
    :ivar team_log.SharedContentDownloadDetails.shared_content_owner: The shared
        content owner.
    :ivar team_log.SharedContentDownloadDetails.shared_content_access_level:
        Shared content access level.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_link=..., shared_content_access_level=..., shared_content_owner=...) -> None:
        ...
    
    shared_content_link = ...
    shared_content_owner = ...
    shared_content_access_level = ...


SharedContentDownloadDetails_validator = ...
class SharedContentDownloadType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentDownloadType_validator = ...
class SharedContentRelinquishMembershipDetails(bb.Struct):
    """
    Left shared file/folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedContentRelinquishMembershipDetails_validator = ...
class SharedContentRelinquishMembershipType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRelinquishMembershipType_validator = ...
class SharedContentRemoveInviteesDetails(bb.Struct):
    """
    Removed invitee from shared file/folder before invite was accepted.

    :ivar team_log.SharedContentRemoveInviteesDetails.invitees: A list of
        invitees.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, invitees=...) -> None:
        ...
    
    invitees = ...


SharedContentRemoveInviteesDetails_validator = ...
class SharedContentRemoveInviteesType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRemoveInviteesType_validator = ...
class SharedContentRemoveLinkExpiryDetails(bb.Struct):
    """
    Removed link expiration date of shared file/folder.

    :ivar team_log.SharedContentRemoveLinkExpiryDetails.previous_value: Previous
        shared content link expiration date. Might be missing due to historical
        data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=...) -> None:
        ...
    
    previous_value = ...


SharedContentRemoveLinkExpiryDetails_validator = ...
class SharedContentRemoveLinkExpiryType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRemoveLinkExpiryType_validator = ...
class SharedContentRemoveLinkPasswordDetails(bb.Struct):
    """
    Removed link password of shared file/folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedContentRemoveLinkPasswordDetails_validator = ...
class SharedContentRemoveLinkPasswordType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRemoveLinkPasswordType_validator = ...
class SharedContentRemoveMemberDetails(bb.Struct):
    """
    Removed user/group from shared file/folder.

    :ivar team_log.SharedContentRemoveMemberDetails.shared_content_access_level:
        Shared content access level.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=...) -> None:
        ...
    
    shared_content_access_level = ...


SharedContentRemoveMemberDetails_validator = ...
class SharedContentRemoveMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRemoveMemberType_validator = ...
class SharedContentRequestAccessDetails(bb.Struct):
    """
    Requested access to shared file/folder.

    :ivar team_log.SharedContentRequestAccessDetails.shared_content_link: Shared
        content link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_link=...) -> None:
        ...
    
    shared_content_link = ...


SharedContentRequestAccessDetails_validator = ...
class SharedContentRequestAccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRequestAccessType_validator = ...
class SharedContentRestoreInviteesDetails(bb.Struct):
    """
    Restored shared file/folder invitees.

    :ivar
        team_log.SharedContentRestoreInviteesDetails.shared_content_access_level:
        Shared content access level.
    :ivar team_log.SharedContentRestoreInviteesDetails.invitees: A list of
        invitees.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., invitees=...) -> None:
        ...
    
    shared_content_access_level = ...
    invitees = ...


SharedContentRestoreInviteesDetails_validator = ...
class SharedContentRestoreInviteesType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRestoreInviteesType_validator = ...
class SharedContentRestoreMemberDetails(bb.Struct):
    """
    Restored users and/or groups to membership of shared file/folder.

    :ivar
        team_log.SharedContentRestoreMemberDetails.shared_content_access_level:
        Shared content access level.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=...) -> None:
        ...
    
    shared_content_access_level = ...


SharedContentRestoreMemberDetails_validator = ...
class SharedContentRestoreMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentRestoreMemberType_validator = ...
class SharedContentUnshareDetails(bb.Struct):
    """
    Unshared file/folder by clearing membership.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedContentUnshareDetails_validator = ...
class SharedContentUnshareType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentUnshareType_validator = ...
class SharedContentViewDetails(bb.Struct):
    """
    Previewed shared file/folder.

    :ivar team_log.SharedContentViewDetails.shared_content_link: Shared content
        link.
    :ivar team_log.SharedContentViewDetails.shared_content_owner: The shared
        content owner.
    :ivar team_log.SharedContentViewDetails.shared_content_access_level: Shared
        content access level.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_link=..., shared_content_access_level=..., shared_content_owner=...) -> None:
        ...
    
    shared_content_link = ...
    shared_content_owner = ...
    shared_content_access_level = ...


SharedContentViewDetails_validator = ...
class SharedContentViewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedContentViewType_validator = ...
class SharedFolderChangeLinkPolicyDetails(bb.Struct):
    """
    Changed who can access shared folder via link.

    :ivar team_log.SharedFolderChangeLinkPolicyDetails.new_value: New shared
        folder link policy.
    :ivar team_log.SharedFolderChangeLinkPolicyDetails.previous_value: Previous
        shared folder link policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedFolderChangeLinkPolicyDetails_validator = ...
class SharedFolderChangeLinkPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderChangeLinkPolicyType_validator = ...
class SharedFolderChangeMembersInheritancePolicyDetails(bb.Struct):
    """
    Changed whether shared folder inherits members from parent folder.

    :ivar team_log.SharedFolderChangeMembersInheritancePolicyDetails.new_value:
        New member inheritance policy.
    :ivar
        team_log.SharedFolderChangeMembersInheritancePolicyDetails.previous_value:
        Previous member inheritance policy. Might be missing due to historical
        data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedFolderChangeMembersInheritancePolicyDetails_validator = ...
class SharedFolderChangeMembersInheritancePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderChangeMembersInheritancePolicyType_validator = ...
class SharedFolderChangeMembersManagementPolicyDetails(bb.Struct):
    """
    Changed who can add/remove members of shared folder.

    :ivar team_log.SharedFolderChangeMembersManagementPolicyDetails.new_value:
        New members management policy.
    :ivar
        team_log.SharedFolderChangeMembersManagementPolicyDetails.previous_value:
        Previous members management policy. Might be missing due to historical
        data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedFolderChangeMembersManagementPolicyDetails_validator = ...
class SharedFolderChangeMembersManagementPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderChangeMembersManagementPolicyType_validator = ...
class SharedFolderChangeMembersPolicyDetails(bb.Struct):
    """
    Changed who can become member of shared folder.

    :ivar team_log.SharedFolderChangeMembersPolicyDetails.new_value: New
        external invite policy.
    :ivar team_log.SharedFolderChangeMembersPolicyDetails.previous_value:
        Previous external invite policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedFolderChangeMembersPolicyDetails_validator = ...
class SharedFolderChangeMembersPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderChangeMembersPolicyType_validator = ...
class SharedFolderCreateDetails(bb.Struct):
    """
    Created shared folder.

    :ivar team_log.SharedFolderCreateDetails.target_ns_id: Target namespace ID.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_ns_id=...) -> None:
        ...
    
    target_ns_id = ...


SharedFolderCreateDetails_validator = ...
class SharedFolderCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderCreateType_validator = ...
class SharedFolderDeclineInvitationDetails(bb.Struct):
    """
    Declined team member's invite to shared folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedFolderDeclineInvitationDetails_validator = ...
class SharedFolderDeclineInvitationType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderDeclineInvitationType_validator = ...
class SharedFolderMembersInheritancePolicy(bb.Union):
    """
    Specifies if a shared folder inherits its members from the parent folder.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    dont_inherit_members = ...
    inherit_members = ...
    other = ...
    def is_dont_inherit_members(self):
        """
        Check if the union tag is ``dont_inherit_members``.

        :rtype: bool
        """
        ...
    
    def is_inherit_members(self):
        """
        Check if the union tag is ``inherit_members``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SharedFolderMembersInheritancePolicy_validator = ...
class SharedFolderMountDetails(bb.Struct):
    """
    Added shared folder to own Dropbox.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedFolderMountDetails_validator = ...
class SharedFolderMountType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderMountType_validator = ...
class SharedFolderNestDetails(bb.Struct):
    """
    Changed parent of shared folder.

    :ivar team_log.SharedFolderNestDetails.previous_parent_ns_id: Previous
        parent namespace ID.
    :ivar team_log.SharedFolderNestDetails.new_parent_ns_id: New parent
        namespace ID.
    :ivar team_log.SharedFolderNestDetails.previous_ns_path: Previous namespace
        path.
    :ivar team_log.SharedFolderNestDetails.new_ns_path: New namespace path.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_parent_ns_id=..., new_parent_ns_id=..., previous_ns_path=..., new_ns_path=...) -> None:
        ...
    
    previous_parent_ns_id = ...
    new_parent_ns_id = ...
    previous_ns_path = ...
    new_ns_path = ...


SharedFolderNestDetails_validator = ...
class SharedFolderNestType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderNestType_validator = ...
class SharedFolderTransferOwnershipDetails(bb.Struct):
    """
    Transferred ownership of shared folder to another member.

    :ivar team_log.SharedFolderTransferOwnershipDetails.previous_owner_email:
        The email address of the previous shared folder owner.
    :ivar team_log.SharedFolderTransferOwnershipDetails.new_owner_email: The
        email address of the new shared folder owner.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_owner_email=..., previous_owner_email=...) -> None:
        ...
    
    previous_owner_email = ...
    new_owner_email = ...


SharedFolderTransferOwnershipDetails_validator = ...
class SharedFolderTransferOwnershipType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderTransferOwnershipType_validator = ...
class SharedFolderUnmountDetails(bb.Struct):
    """
    Deleted shared folder from Dropbox.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedFolderUnmountDetails_validator = ...
class SharedFolderUnmountType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedFolderUnmountType_validator = ...
class SharedLinkAccessLevel(bb.Union):
    """
    Shared link access level.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    none = ...
    reader = ...
    writer = ...
    other = ...
    def is_none(self):
        """
        Check if the union tag is ``none``.

        :rtype: bool
        """
        ...
    
    def is_reader(self):
        """
        Check if the union tag is ``reader``.

        :rtype: bool
        """
        ...
    
    def is_writer(self):
        """
        Check if the union tag is ``writer``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SharedLinkAccessLevel_validator = ...
class SharedLinkAddExpiryDetails(bb.Struct):
    """
    Added shared link expiration date.

    :ivar team_log.SharedLinkAddExpiryDetails.new_value: New shared link
        expiration date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


SharedLinkAddExpiryDetails_validator = ...
class SharedLinkAddExpiryType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkAddExpiryType_validator = ...
class SharedLinkChangeExpiryDetails(bb.Struct):
    """
    Changed shared link expiration date.

    :ivar team_log.SharedLinkChangeExpiryDetails.new_value: New shared link
        expiration date. Might be missing due to historical data gap.
    :ivar team_log.SharedLinkChangeExpiryDetails.previous_value: Previous shared
        link expiration date. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedLinkChangeExpiryDetails_validator = ...
class SharedLinkChangeExpiryType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkChangeExpiryType_validator = ...
class SharedLinkChangeVisibilityDetails(bb.Struct):
    """
    Changed visibility of shared link.

    :ivar team_log.SharedLinkChangeVisibilityDetails.new_value: New shared link
        visibility.
    :ivar team_log.SharedLinkChangeVisibilityDetails.previous_value: Previous
        shared link visibility. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharedLinkChangeVisibilityDetails_validator = ...
class SharedLinkChangeVisibilityType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkChangeVisibilityType_validator = ...
class SharedLinkCopyDetails(bb.Struct):
    """
    Added file/folder to Dropbox from shared link.

    :ivar team_log.SharedLinkCopyDetails.shared_link_owner: Shared link owner
        details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_owner=...) -> None:
        ...
    
    shared_link_owner = ...


SharedLinkCopyDetails_validator = ...
class SharedLinkCopyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkCopyType_validator = ...
class SharedLinkCreateDetails(bb.Struct):
    """
    Created shared link.

    :ivar team_log.SharedLinkCreateDetails.shared_link_access_level: Defines who
        can access the shared link. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_access_level=...) -> None:
        ...
    
    shared_link_access_level = ...


SharedLinkCreateDetails_validator = ...
class SharedLinkCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkCreateType_validator = ...
class SharedLinkDisableDetails(bb.Struct):
    """
    Removed shared link.

    :ivar team_log.SharedLinkDisableDetails.shared_link_owner: Shared link owner
        details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_owner=...) -> None:
        ...
    
    shared_link_owner = ...


SharedLinkDisableDetails_validator = ...
class SharedLinkDisableType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkDisableType_validator = ...
class SharedLinkDownloadDetails(bb.Struct):
    """
    Downloaded file/folder from shared link.

    :ivar team_log.SharedLinkDownloadDetails.shared_link_owner: Shared link
        owner details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_owner=...) -> None:
        ...
    
    shared_link_owner = ...


SharedLinkDownloadDetails_validator = ...
class SharedLinkDownloadType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkDownloadType_validator = ...
class SharedLinkRemoveExpiryDetails(bb.Struct):
    """
    Removed shared link expiration date.

    :ivar team_log.SharedLinkRemoveExpiryDetails.previous_value: Previous shared
        link expiration date. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=...) -> None:
        ...
    
    previous_value = ...


SharedLinkRemoveExpiryDetails_validator = ...
class SharedLinkRemoveExpiryType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkRemoveExpiryType_validator = ...
class SharedLinkSettingsAddExpirationDetails(bb.Struct):
    """
    Added an expiration date to the shared link.

    :ivar
        team_log.SharedLinkSettingsAddExpirationDetails.shared_content_access_level:
        Shared content access level.
    :ivar team_log.SharedLinkSettingsAddExpirationDetails.shared_content_link:
        Shared content link.
    :ivar team_log.SharedLinkSettingsAddExpirationDetails.new_value: New shared
        content link expiration date. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=..., new_value=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...
    new_value = ...


SharedLinkSettingsAddExpirationDetails_validator = ...
class SharedLinkSettingsAddExpirationType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsAddExpirationType_validator = ...
class SharedLinkSettingsAddPasswordDetails(bb.Struct):
    """
    Added a password to the shared link.

    :ivar
        team_log.SharedLinkSettingsAddPasswordDetails.shared_content_access_level:
        Shared content access level.
    :ivar team_log.SharedLinkSettingsAddPasswordDetails.shared_content_link:
        Shared content link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...


SharedLinkSettingsAddPasswordDetails_validator = ...
class SharedLinkSettingsAddPasswordType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsAddPasswordType_validator = ...
class SharedLinkSettingsAllowDownloadDisabledDetails(bb.Struct):
    """
    Disabled downloads.

    :ivar
        team_log.SharedLinkSettingsAllowDownloadDisabledDetails.shared_content_access_level:
        Shared content access level.
    :ivar
        team_log.SharedLinkSettingsAllowDownloadDisabledDetails.shared_content_link:
        Shared content link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...


SharedLinkSettingsAllowDownloadDisabledDetails_validator = ...
class SharedLinkSettingsAllowDownloadDisabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsAllowDownloadDisabledType_validator = ...
class SharedLinkSettingsAllowDownloadEnabledDetails(bb.Struct):
    """
    Enabled downloads.

    :ivar
        team_log.SharedLinkSettingsAllowDownloadEnabledDetails.shared_content_access_level:
        Shared content access level.
    :ivar
        team_log.SharedLinkSettingsAllowDownloadEnabledDetails.shared_content_link:
        Shared content link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...


SharedLinkSettingsAllowDownloadEnabledDetails_validator = ...
class SharedLinkSettingsAllowDownloadEnabledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsAllowDownloadEnabledType_validator = ...
class SharedLinkSettingsChangeAudienceDetails(bb.Struct):
    """
    Changed the audience of the shared link.

    :ivar
        team_log.SharedLinkSettingsChangeAudienceDetails.shared_content_access_level:
        Shared content access level.
    :ivar team_log.SharedLinkSettingsChangeAudienceDetails.shared_content_link:
        Shared content link.
    :ivar team_log.SharedLinkSettingsChangeAudienceDetails.new_value: New link
        audience value.
    :ivar team_log.SharedLinkSettingsChangeAudienceDetails.previous_value:
        Previous link audience value.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., new_value=..., shared_content_link=..., previous_value=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...
    new_value = ...
    previous_value = ...


SharedLinkSettingsChangeAudienceDetails_validator = ...
class SharedLinkSettingsChangeAudienceType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsChangeAudienceType_validator = ...
class SharedLinkSettingsChangeExpirationDetails(bb.Struct):
    """
    Changed the expiration date of the shared link.

    :ivar
        team_log.SharedLinkSettingsChangeExpirationDetails.shared_content_access_level:
        Shared content access level.
    :ivar
        team_log.SharedLinkSettingsChangeExpirationDetails.shared_content_link:
        Shared content link.
    :ivar team_log.SharedLinkSettingsChangeExpirationDetails.new_value: New
        shared content link expiration date. Might be missing due to historical
        data gap.
    :ivar team_log.SharedLinkSettingsChangeExpirationDetails.previous_value:
        Previous shared content link expiration date. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=..., new_value=..., previous_value=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...
    new_value = ...
    previous_value = ...


SharedLinkSettingsChangeExpirationDetails_validator = ...
class SharedLinkSettingsChangeExpirationType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsChangeExpirationType_validator = ...
class SharedLinkSettingsChangePasswordDetails(bb.Struct):
    """
    Changed the password of the shared link.

    :ivar
        team_log.SharedLinkSettingsChangePasswordDetails.shared_content_access_level:
        Shared content access level.
    :ivar team_log.SharedLinkSettingsChangePasswordDetails.shared_content_link:
        Shared content link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...


SharedLinkSettingsChangePasswordDetails_validator = ...
class SharedLinkSettingsChangePasswordType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsChangePasswordType_validator = ...
class SharedLinkSettingsRemoveExpirationDetails(bb.Struct):
    """
    Removed the expiration date from the shared link.

    :ivar
        team_log.SharedLinkSettingsRemoveExpirationDetails.shared_content_access_level:
        Shared content access level.
    :ivar
        team_log.SharedLinkSettingsRemoveExpirationDetails.shared_content_link:
        Shared content link.
    :ivar team_log.SharedLinkSettingsRemoveExpirationDetails.previous_value:
        Previous shared link expiration date. Might be missing due to historical
        data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=..., previous_value=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...
    previous_value = ...


SharedLinkSettingsRemoveExpirationDetails_validator = ...
class SharedLinkSettingsRemoveExpirationType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsRemoveExpirationType_validator = ...
class SharedLinkSettingsRemovePasswordDetails(bb.Struct):
    """
    Removed the password from the shared link.

    :ivar
        team_log.SharedLinkSettingsRemovePasswordDetails.shared_content_access_level:
        Shared content access level.
    :ivar team_log.SharedLinkSettingsRemovePasswordDetails.shared_content_link:
        Shared content link.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_content_access_level=..., shared_content_link=...) -> None:
        ...
    
    shared_content_access_level = ...
    shared_content_link = ...


SharedLinkSettingsRemovePasswordDetails_validator = ...
class SharedLinkSettingsRemovePasswordType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkSettingsRemovePasswordType_validator = ...
class SharedLinkShareDetails(bb.Struct):
    """
    Added members as audience of shared link.

    :ivar team_log.SharedLinkShareDetails.shared_link_owner: Shared link owner
        details. Might be missing due to historical data gap.
    :ivar team_log.SharedLinkShareDetails.external_users: Users without a
        Dropbox account that were added as shared link audience.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_owner=..., external_users=...) -> None:
        ...
    
    shared_link_owner = ...
    external_users = ...


SharedLinkShareDetails_validator = ...
class SharedLinkShareType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkShareType_validator = ...
class SharedLinkViewDetails(bb.Struct):
    """
    Opened shared link.

    :ivar team_log.SharedLinkViewDetails.shared_link_owner: Shared link owner
        details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_owner=...) -> None:
        ...
    
    shared_link_owner = ...


SharedLinkViewDetails_validator = ...
class SharedLinkViewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedLinkViewType_validator = ...
class SharedLinkVisibility(bb.Union):
    """
    Defines who has access to a shared link.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    no_one = ...
    password = ...
    public = ...
    team_only = ...
    other = ...
    def is_no_one(self):
        """
        Check if the union tag is ``no_one``.

        :rtype: bool
        """
        ...
    
    def is_password(self):
        """
        Check if the union tag is ``password``.

        :rtype: bool
        """
        ...
    
    def is_public(self):
        """
        Check if the union tag is ``public``.

        :rtype: bool
        """
        ...
    
    def is_team_only(self):
        """
        Check if the union tag is ``team_only``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SharedLinkVisibility_validator = ...
class SharedNoteOpenedDetails(bb.Struct):
    """
    Opened shared Paper doc.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SharedNoteOpenedDetails_validator = ...
class SharedNoteOpenedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharedNoteOpenedType_validator = ...
class SharingChangeFolderJoinPolicyDetails(bb.Struct):
    """
    Changed whether team members can join shared folders owned outside team.

    :ivar team_log.SharingChangeFolderJoinPolicyDetails.new_value: New external
        join policy.
    :ivar team_log.SharingChangeFolderJoinPolicyDetails.previous_value: Previous
        external join policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharingChangeFolderJoinPolicyDetails_validator = ...
class SharingChangeFolderJoinPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharingChangeFolderJoinPolicyType_validator = ...
class SharingChangeLinkAllowChangeExpirationPolicyDetails(bb.Struct):
    """
    Changed the allow remove or change expiration policy for the links shared
    outside of the team.

    :ivar
        team_log.SharingChangeLinkAllowChangeExpirationPolicyDetails.new_value:
        To.
    :ivar
        team_log.SharingChangeLinkAllowChangeExpirationPolicyDetails.previous_value:
        From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharingChangeLinkAllowChangeExpirationPolicyDetails_validator = ...
class SharingChangeLinkAllowChangeExpirationPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharingChangeLinkAllowChangeExpirationPolicyType_validator = ...
class SharingChangeLinkDefaultExpirationPolicyDetails(bb.Struct):
    """
    Changed the default expiration for the links shared outside of the team.

    :ivar team_log.SharingChangeLinkDefaultExpirationPolicyDetails.new_value:
        To.
    :ivar
        team_log.SharingChangeLinkDefaultExpirationPolicyDetails.previous_value:
        From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharingChangeLinkDefaultExpirationPolicyDetails_validator = ...
class SharingChangeLinkDefaultExpirationPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharingChangeLinkDefaultExpirationPolicyType_validator = ...
class SharingChangeLinkEnforcePasswordPolicyDetails(bb.Struct):
    """
    Changed the password requirement for the links shared outside of the team.

    :ivar team_log.SharingChangeLinkEnforcePasswordPolicyDetails.new_value: To.
    :ivar team_log.SharingChangeLinkEnforcePasswordPolicyDetails.previous_value:
        From.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharingChangeLinkEnforcePasswordPolicyDetails_validator = ...
class SharingChangeLinkEnforcePasswordPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharingChangeLinkEnforcePasswordPolicyType_validator = ...
class SharingChangeLinkPolicyDetails(bb.Struct):
    """
    Changed whether members can share links outside team, and if links are
    accessible only by team members or anyone by default.

    :ivar team_log.SharingChangeLinkPolicyDetails.new_value: New external link
        accessibility policy.
    :ivar team_log.SharingChangeLinkPolicyDetails.previous_value: Previous
        external link accessibility policy. Might be missing due to historical
        data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharingChangeLinkPolicyDetails_validator = ...
class SharingChangeLinkPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharingChangeLinkPolicyType_validator = ...
class SharingChangeMemberPolicyDetails(bb.Struct):
    """
    Changed whether members can share files/folders outside team.

    :ivar team_log.SharingChangeMemberPolicyDetails.new_value: New external
        invite policy.
    :ivar team_log.SharingChangeMemberPolicyDetails.previous_value: Previous
        external invite policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SharingChangeMemberPolicyDetails_validator = ...
class SharingChangeMemberPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SharingChangeMemberPolicyType_validator = ...
class SharingFolderJoinPolicy(bb.Union):
    """
    Policy for controlling if team members can join shared folders owned by non
    team members.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    from_anyone = ...
    from_team_only = ...
    other = ...
    def is_from_anyone(self):
        """
        Check if the union tag is ``from_anyone``.

        :rtype: bool
        """
        ...
    
    def is_from_team_only(self):
        """
        Check if the union tag is ``from_team_only``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SharingFolderJoinPolicy_validator = ...
class SharingLinkPolicy(bb.Union):
    """
    Policy for controlling if team members can share links externally

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default_no_one = ...
    default_private = ...
    default_public = ...
    only_private = ...
    other = ...
    def is_default_no_one(self):
        """
        Check if the union tag is ``default_no_one``.

        :rtype: bool
        """
        ...
    
    def is_default_private(self):
        """
        Check if the union tag is ``default_private``.

        :rtype: bool
        """
        ...
    
    def is_default_public(self):
        """
        Check if the union tag is ``default_public``.

        :rtype: bool
        """
        ...
    
    def is_only_private(self):
        """
        Check if the union tag is ``only_private``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SharingLinkPolicy_validator = ...
class SharingMemberPolicy(bb.Union):
    """
    External sharing policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    allow = ...
    forbid = ...
    forbid_with_exclusions = ...
    other = ...
    def is_allow(self):
        """
        Check if the union tag is ``allow``.

        :rtype: bool
        """
        ...
    
    def is_forbid(self):
        """
        Check if the union tag is ``forbid``.

        :rtype: bool
        """
        ...
    
    def is_forbid_with_exclusions(self):
        """
        Check if the union tag is ``forbid_with_exclusions``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SharingMemberPolicy_validator = ...
class ShmodelDisableDownloadsDetails(bb.Struct):
    """
    Disabled downloads for link.

    :ivar team_log.ShmodelDisableDownloadsDetails.shared_link_owner: Shared link
        owner details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_owner=...) -> None:
        ...
    
    shared_link_owner = ...


ShmodelDisableDownloadsDetails_validator = ...
class ShmodelDisableDownloadsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShmodelDisableDownloadsType_validator = ...
class ShmodelEnableDownloadsDetails(bb.Struct):
    """
    Enabled downloads for link.

    :ivar team_log.ShmodelEnableDownloadsDetails.shared_link_owner: Shared link
        owner details. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, shared_link_owner=...) -> None:
        ...
    
    shared_link_owner = ...


ShmodelEnableDownloadsDetails_validator = ...
class ShmodelEnableDownloadsType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShmodelEnableDownloadsType_validator = ...
class ShmodelGroupShareDetails(bb.Struct):
    """
    Shared link with group.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


ShmodelGroupShareDetails_validator = ...
class ShmodelGroupShareType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShmodelGroupShareType_validator = ...
class ShowcaseAccessGrantedDetails(bb.Struct):
    """
    Granted access to showcase.

    :ivar team_log.ShowcaseAccessGrantedDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseAccessGrantedDetails_validator = ...
class ShowcaseAccessGrantedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseAccessGrantedType_validator = ...
class ShowcaseAddMemberDetails(bb.Struct):
    """
    Added member to showcase.

    :ivar team_log.ShowcaseAddMemberDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseAddMemberDetails_validator = ...
class ShowcaseAddMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseAddMemberType_validator = ...
class ShowcaseArchivedDetails(bb.Struct):
    """
    Archived showcase.

    :ivar team_log.ShowcaseArchivedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseArchivedDetails_validator = ...
class ShowcaseArchivedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseArchivedType_validator = ...
class ShowcaseChangeDownloadPolicyDetails(bb.Struct):
    """
    Enabled/disabled downloading files from Dropbox Showcase for team.

    :ivar team_log.ShowcaseChangeDownloadPolicyDetails.new_value: New Dropbox
        Showcase download policy.
    :ivar team_log.ShowcaseChangeDownloadPolicyDetails.previous_value: Previous
        Dropbox Showcase download policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ShowcaseChangeDownloadPolicyDetails_validator = ...
class ShowcaseChangeDownloadPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseChangeDownloadPolicyType_validator = ...
class ShowcaseChangeEnabledPolicyDetails(bb.Struct):
    """
    Enabled/disabled Dropbox Showcase for team.

    :ivar team_log.ShowcaseChangeEnabledPolicyDetails.new_value: New Dropbox
        Showcase policy.
    :ivar team_log.ShowcaseChangeEnabledPolicyDetails.previous_value: Previous
        Dropbox Showcase policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ShowcaseChangeEnabledPolicyDetails_validator = ...
class ShowcaseChangeEnabledPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseChangeEnabledPolicyType_validator = ...
class ShowcaseChangeExternalSharingPolicyDetails(bb.Struct):
    """
    Enabled/disabled sharing Dropbox Showcase externally for team.

    :ivar team_log.ShowcaseChangeExternalSharingPolicyDetails.new_value: New
        Dropbox Showcase external sharing policy.
    :ivar team_log.ShowcaseChangeExternalSharingPolicyDetails.previous_value:
        Previous Dropbox Showcase external sharing policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


ShowcaseChangeExternalSharingPolicyDetails_validator = ...
class ShowcaseChangeExternalSharingPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseChangeExternalSharingPolicyType_validator = ...
class ShowcaseCreatedDetails(bb.Struct):
    """
    Created showcase.

    :ivar team_log.ShowcaseCreatedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseCreatedDetails_validator = ...
class ShowcaseCreatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseCreatedType_validator = ...
class ShowcaseDeleteCommentDetails(bb.Struct):
    """
    Deleted showcase comment.

    :ivar team_log.ShowcaseDeleteCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.ShowcaseDeleteCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


ShowcaseDeleteCommentDetails_validator = ...
class ShowcaseDeleteCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseDeleteCommentType_validator = ...
class ShowcaseDocumentLogInfo(bb.Struct):
    """
    Showcase document's logged information.

    :ivar team_log.ShowcaseDocumentLogInfo.showcase_id: Showcase document Id.
    :ivar team_log.ShowcaseDocumentLogInfo.showcase_title: Showcase document
        title.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, showcase_id=..., showcase_title=...) -> None:
        ...
    
    showcase_id = ...
    showcase_title = ...


ShowcaseDocumentLogInfo_validator = ...
class ShowcaseDownloadPolicy(bb.Union):
    """
    Policy for controlling if files can be downloaded from Showcases by team
    members

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ShowcaseDownloadPolicy_validator = ...
class ShowcaseEditCommentDetails(bb.Struct):
    """
    Edited showcase comment.

    :ivar team_log.ShowcaseEditCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.ShowcaseEditCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


ShowcaseEditCommentDetails_validator = ...
class ShowcaseEditCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseEditCommentType_validator = ...
class ShowcaseEditedDetails(bb.Struct):
    """
    Edited showcase.

    :ivar team_log.ShowcaseEditedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseEditedDetails_validator = ...
class ShowcaseEditedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseEditedType_validator = ...
class ShowcaseEnabledPolicy(bb.Union):
    """
    Policy for controlling whether Showcase is enabled.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ShowcaseEnabledPolicy_validator = ...
class ShowcaseExternalSharingPolicy(bb.Union):
    """
    Policy for controlling if team members can share Showcases externally.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


ShowcaseExternalSharingPolicy_validator = ...
class ShowcaseFileAddedDetails(bb.Struct):
    """
    Added file to showcase.

    :ivar team_log.ShowcaseFileAddedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseFileAddedDetails_validator = ...
class ShowcaseFileAddedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseFileAddedType_validator = ...
class ShowcaseFileDownloadDetails(bb.Struct):
    """
    Downloaded file from showcase.

    :ivar team_log.ShowcaseFileDownloadDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.ShowcaseFileDownloadDetails.download_type: Showcase download
        type.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., download_type=...) -> None:
        ...
    
    event_uuid = ...
    download_type = ...


ShowcaseFileDownloadDetails_validator = ...
class ShowcaseFileDownloadType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseFileDownloadType_validator = ...
class ShowcaseFileRemovedDetails(bb.Struct):
    """
    Removed file from showcase.

    :ivar team_log.ShowcaseFileRemovedDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseFileRemovedDetails_validator = ...
class ShowcaseFileRemovedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseFileRemovedType_validator = ...
class ShowcaseFileViewDetails(bb.Struct):
    """
    Viewed file in showcase.

    :ivar team_log.ShowcaseFileViewDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseFileViewDetails_validator = ...
class ShowcaseFileViewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseFileViewType_validator = ...
class ShowcasePermanentlyDeletedDetails(bb.Struct):
    """
    Permanently deleted showcase.

    :ivar team_log.ShowcasePermanentlyDeletedDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcasePermanentlyDeletedDetails_validator = ...
class ShowcasePermanentlyDeletedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcasePermanentlyDeletedType_validator = ...
class ShowcasePostCommentDetails(bb.Struct):
    """
    Added showcase comment.

    :ivar team_log.ShowcasePostCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.ShowcasePostCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


ShowcasePostCommentDetails_validator = ...
class ShowcasePostCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcasePostCommentType_validator = ...
class ShowcaseRemoveMemberDetails(bb.Struct):
    """
    Removed member from showcase.

    :ivar team_log.ShowcaseRemoveMemberDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseRemoveMemberDetails_validator = ...
class ShowcaseRemoveMemberType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseRemoveMemberType_validator = ...
class ShowcaseRenamedDetails(bb.Struct):
    """
    Renamed showcase.

    :ivar team_log.ShowcaseRenamedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseRenamedDetails_validator = ...
class ShowcaseRenamedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseRenamedType_validator = ...
class ShowcaseRequestAccessDetails(bb.Struct):
    """
    Requested access to showcase.

    :ivar team_log.ShowcaseRequestAccessDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseRequestAccessDetails_validator = ...
class ShowcaseRequestAccessType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseRequestAccessType_validator = ...
class ShowcaseResolveCommentDetails(bb.Struct):
    """
    Resolved showcase comment.

    :ivar team_log.ShowcaseResolveCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.ShowcaseResolveCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


ShowcaseResolveCommentDetails_validator = ...
class ShowcaseResolveCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseResolveCommentType_validator = ...
class ShowcaseRestoredDetails(bb.Struct):
    """
    Unarchived showcase.

    :ivar team_log.ShowcaseRestoredDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseRestoredDetails_validator = ...
class ShowcaseRestoredType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseRestoredType_validator = ...
class ShowcaseTrashedDeprecatedDetails(bb.Struct):
    """
    Deleted showcase (old version).

    :ivar team_log.ShowcaseTrashedDeprecatedDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseTrashedDeprecatedDetails_validator = ...
class ShowcaseTrashedDeprecatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseTrashedDeprecatedType_validator = ...
class ShowcaseTrashedDetails(bb.Struct):
    """
    Deleted showcase.

    :ivar team_log.ShowcaseTrashedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseTrashedDetails_validator = ...
class ShowcaseTrashedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseTrashedType_validator = ...
class ShowcaseUnresolveCommentDetails(bb.Struct):
    """
    Unresolved showcase comment.

    :ivar team_log.ShowcaseUnresolveCommentDetails.event_uuid: Event unique
        identifier.
    :ivar team_log.ShowcaseUnresolveCommentDetails.comment_text: Comment text.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=..., comment_text=...) -> None:
        ...
    
    event_uuid = ...
    comment_text = ...


ShowcaseUnresolveCommentDetails_validator = ...
class ShowcaseUnresolveCommentType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseUnresolveCommentType_validator = ...
class ShowcaseUntrashedDeprecatedDetails(bb.Struct):
    """
    Restored showcase (old version).

    :ivar team_log.ShowcaseUntrashedDeprecatedDetails.event_uuid: Event unique
        identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseUntrashedDeprecatedDetails_validator = ...
class ShowcaseUntrashedDeprecatedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseUntrashedDeprecatedType_validator = ...
class ShowcaseUntrashedDetails(bb.Struct):
    """
    Restored showcase.

    :ivar team_log.ShowcaseUntrashedDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseUntrashedDetails_validator = ...
class ShowcaseUntrashedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseUntrashedType_validator = ...
class ShowcaseViewDetails(bb.Struct):
    """
    Viewed showcase.

    :ivar team_log.ShowcaseViewDetails.event_uuid: Event unique identifier.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, event_uuid=...) -> None:
        ...
    
    event_uuid = ...


ShowcaseViewDetails_validator = ...
class ShowcaseViewType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ShowcaseViewType_validator = ...
class SignInAsSessionEndDetails(bb.Struct):
    """
    Ended admin sign-in-as session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SignInAsSessionEndDetails_validator = ...
class SignInAsSessionEndType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SignInAsSessionEndType_validator = ...
class SignInAsSessionStartDetails(bb.Struct):
    """
    Started admin sign-in-as session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SignInAsSessionStartDetails_validator = ...
class SignInAsSessionStartType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SignInAsSessionStartType_validator = ...
class SmartSyncChangePolicyDetails(bb.Struct):
    """
    Changed default Smart Sync setting for team members.

    :ivar team_log.SmartSyncChangePolicyDetails.new_value: New smart sync
        policy.
    :ivar team_log.SmartSyncChangePolicyDetails.previous_value: Previous smart
        sync policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SmartSyncChangePolicyDetails_validator = ...
class SmartSyncChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SmartSyncChangePolicyType_validator = ...
class SmartSyncCreateAdminPrivilegeReportDetails(bb.Struct):
    """
    Created Smart Sync non-admin devices report.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SmartSyncCreateAdminPrivilegeReportDetails_validator = ...
class SmartSyncCreateAdminPrivilegeReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SmartSyncCreateAdminPrivilegeReportType_validator = ...
class SmartSyncNotOptOutDetails(bb.Struct):
    """
    Opted team into Smart Sync.

    :ivar team_log.SmartSyncNotOptOutDetails.previous_value: Previous Smart Sync
        opt out policy.
    :ivar team_log.SmartSyncNotOptOutDetails.new_value: New Smart Sync opt out
        policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


SmartSyncNotOptOutDetails_validator = ...
class SmartSyncNotOptOutType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SmartSyncNotOptOutType_validator = ...
class SmartSyncOptOutDetails(bb.Struct):
    """
    Opted team out of Smart Sync.

    :ivar team_log.SmartSyncOptOutDetails.previous_value: Previous Smart Sync
        opt out policy.
    :ivar team_log.SmartSyncOptOutDetails.new_value: New Smart Sync opt out
        policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


SmartSyncOptOutDetails_validator = ...
class SmartSyncOptOutPolicy(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    default = ...
    opted_out = ...
    other = ...
    def is_default(self):
        """
        Check if the union tag is ``default``.

        :rtype: bool
        """
        ...
    
    def is_opted_out(self):
        """
        Check if the union tag is ``opted_out``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SmartSyncOptOutPolicy_validator = ...
class SmartSyncOptOutType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SmartSyncOptOutType_validator = ...
class SmarterSmartSyncPolicyChangedDetails(bb.Struct):
    """
    Changed automatic Smart Sync setting for team.

    :ivar team_log.SmarterSmartSyncPolicyChangedDetails.previous_value: Previous
        automatic Smart Sync setting.
    :ivar team_log.SmarterSmartSyncPolicyChangedDetails.new_value: New automatic
        Smart Sync setting.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


SmarterSmartSyncPolicyChangedDetails_validator = ...
class SmarterSmartSyncPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SmarterSmartSyncPolicyChangedType_validator = ...
class SpaceCapsType(bb.Union):
    """
    Space limit alert policy

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    hard = ...
    off = ...
    soft = ...
    other = ...
    def is_hard(self):
        """
        Check if the union tag is ``hard``.

        :rtype: bool
        """
        ...
    
    def is_off(self):
        """
        Check if the union tag is ``off``.

        :rtype: bool
        """
        ...
    
    def is_soft(self):
        """
        Check if the union tag is ``soft``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SpaceCapsType_validator = ...
class SpaceLimitsStatus(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    near_quota = ...
    over_quota = ...
    within_quota = ...
    other = ...
    def is_near_quota(self):
        """
        Check if the union tag is ``near_quota``.

        :rtype: bool
        """
        ...
    
    def is_over_quota(self):
        """
        Check if the union tag is ``over_quota``.

        :rtype: bool
        """
        ...
    
    def is_within_quota(self):
        """
        Check if the union tag is ``within_quota``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


SpaceLimitsStatus_validator = ...
class SsoAddCertDetails(bb.Struct):
    """
    Added X.509 certificate for SSO.

    :ivar team_log.SsoAddCertDetails.certificate_details: SSO certificate
        details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, certificate_details=...) -> None:
        ...
    
    certificate_details = ...


SsoAddCertDetails_validator = ...
class SsoAddCertType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoAddCertType_validator = ...
class SsoAddLoginUrlDetails(bb.Struct):
    """
    Added sign-in URL for SSO.

    :ivar team_log.SsoAddLoginUrlDetails.new_value: New single sign-on login
        URL.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


SsoAddLoginUrlDetails_validator = ...
class SsoAddLoginUrlType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoAddLoginUrlType_validator = ...
class SsoAddLogoutUrlDetails(bb.Struct):
    """
    Added sign-out URL for SSO.

    :ivar team_log.SsoAddLogoutUrlDetails.new_value: New single sign-on logout
        URL.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=...) -> None:
        ...
    
    new_value = ...


SsoAddLogoutUrlDetails_validator = ...
class SsoAddLogoutUrlType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoAddLogoutUrlType_validator = ...
class SsoChangeCertDetails(bb.Struct):
    """
    Changed X.509 certificate for SSO.

    :ivar team_log.SsoChangeCertDetails.previous_certificate_details: Previous
        SSO certificate details. Might be missing due to historical data gap.
    :ivar team_log.SsoChangeCertDetails.new_certificate_details: New SSO
        certificate details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_certificate_details=..., previous_certificate_details=...) -> None:
        ...
    
    previous_certificate_details = ...
    new_certificate_details = ...


SsoChangeCertDetails_validator = ...
class SsoChangeCertType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoChangeCertType_validator = ...
class SsoChangeLoginUrlDetails(bb.Struct):
    """
    Changed sign-in URL for SSO.

    :ivar team_log.SsoChangeLoginUrlDetails.previous_value: Previous single
        sign-on login URL.
    :ivar team_log.SsoChangeLoginUrlDetails.new_value: New single sign-on login
        URL.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


SsoChangeLoginUrlDetails_validator = ...
class SsoChangeLoginUrlType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoChangeLoginUrlType_validator = ...
class SsoChangeLogoutUrlDetails(bb.Struct):
    """
    Changed sign-out URL for SSO.

    :ivar team_log.SsoChangeLogoutUrlDetails.previous_value: Previous single
        sign-on logout URL. Might be missing due to historical data gap.
    :ivar team_log.SsoChangeLogoutUrlDetails.new_value: New single sign-on
        logout URL.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


SsoChangeLogoutUrlDetails_validator = ...
class SsoChangeLogoutUrlType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoChangeLogoutUrlType_validator = ...
class SsoChangePolicyDetails(bb.Struct):
    """
    Changed single sign-on setting for team.

    :ivar team_log.SsoChangePolicyDetails.new_value: New single sign-on policy.
    :ivar team_log.SsoChangePolicyDetails.previous_value: Previous single
        sign-on policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


SsoChangePolicyDetails_validator = ...
class SsoChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoChangePolicyType_validator = ...
class SsoChangeSamlIdentityModeDetails(bb.Struct):
    """
    Changed SAML identity mode for SSO.

    :ivar team_log.SsoChangeSamlIdentityModeDetails.previous_value: Previous
        single sign-on identity mode.
    :ivar team_log.SsoChangeSamlIdentityModeDetails.new_value: New single
        sign-on identity mode.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


SsoChangeSamlIdentityModeDetails_validator = ...
class SsoChangeSamlIdentityModeType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoChangeSamlIdentityModeType_validator = ...
class SsoErrorDetails(bb.Struct):
    """
    Failed to sign in via SSO.

    :ivar team_log.SsoErrorDetails.error_details: Error details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, error_details=...) -> None:
        ...
    
    error_details = ...


SsoErrorDetails_validator = ...
class SsoErrorType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoErrorType_validator = ...
class SsoRemoveCertDetails(bb.Struct):
    """
    Removed X.509 certificate for SSO.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


SsoRemoveCertDetails_validator = ...
class SsoRemoveCertType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoRemoveCertType_validator = ...
class SsoRemoveLoginUrlDetails(bb.Struct):
    """
    Removed sign-in URL for SSO.

    :ivar team_log.SsoRemoveLoginUrlDetails.previous_value: Previous single
        sign-on login URL.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=...) -> None:
        ...
    
    previous_value = ...


SsoRemoveLoginUrlDetails_validator = ...
class SsoRemoveLoginUrlType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoRemoveLoginUrlType_validator = ...
class SsoRemoveLogoutUrlDetails(bb.Struct):
    """
    Removed sign-out URL for SSO.

    :ivar team_log.SsoRemoveLogoutUrlDetails.previous_value: Previous single
        sign-on logout URL.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=...) -> None:
        ...
    
    previous_value = ...


SsoRemoveLogoutUrlDetails_validator = ...
class SsoRemoveLogoutUrlType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


SsoRemoveLogoutUrlType_validator = ...
class StartedEnterpriseAdminSessionDetails(bb.Struct):
    """
    Started enterprise admin session.

    :ivar
        team_log.StartedEnterpriseAdminSessionDetails.federation_extra_details:
        More information about the organization or team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, federation_extra_details=...) -> None:
        ...
    
    federation_extra_details = ...


StartedEnterpriseAdminSessionDetails_validator = ...
class StartedEnterpriseAdminSessionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


StartedEnterpriseAdminSessionType_validator = ...
class TeamActivityCreateReportDetails(bb.Struct):
    """
    Created team activity report.

    :ivar team_log.TeamActivityCreateReportDetails.start_date: Report start
        date.
    :ivar team_log.TeamActivityCreateReportDetails.end_date: Report end date.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, start_date=..., end_date=...) -> None:
        ...
    
    start_date = ...
    end_date = ...


TeamActivityCreateReportDetails_validator = ...
class TeamActivityCreateReportFailDetails(bb.Struct):
    """
    Couldn't generate team activity report.

    :ivar team_log.TeamActivityCreateReportFailDetails.failure_reason: Failure
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, failure_reason=...) -> None:
        ...
    
    failure_reason = ...


TeamActivityCreateReportFailDetails_validator = ...
class TeamActivityCreateReportFailType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamActivityCreateReportFailType_validator = ...
class TeamActivityCreateReportType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamActivityCreateReportType_validator = ...
class TeamBrandingPolicy(bb.Union):
    """
    Policy for controlling team access to setting up branding feature

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TeamBrandingPolicy_validator = ...
class TeamBrandingPolicyChangedDetails(bb.Struct):
    """
    Changed team branding policy for team.

    :ivar team_log.TeamBrandingPolicyChangedDetails.new_value: New team branding
        policy.
    :ivar team_log.TeamBrandingPolicyChangedDetails.previous_value: Previous
        team branding policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


TeamBrandingPolicyChangedDetails_validator = ...
class TeamBrandingPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamBrandingPolicyChangedType_validator = ...
class TeamDetails(bb.Struct):
    """
    More details about the team.

    :ivar team_log.TeamDetails.team: The name of the team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team=...) -> None:
        ...
    
    team = ...


TeamDetails_validator = ...
class TeamEncryptionKeyCancelKeyDeletionDetails(bb.Struct):
    """
    Canceled team encryption key deletion.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamEncryptionKeyCancelKeyDeletionDetails_validator = ...
class TeamEncryptionKeyCancelKeyDeletionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamEncryptionKeyCancelKeyDeletionType_validator = ...
class TeamEncryptionKeyCreateKeyDetails(bb.Struct):
    """
    Created team encryption key.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamEncryptionKeyCreateKeyDetails_validator = ...
class TeamEncryptionKeyCreateKeyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamEncryptionKeyCreateKeyType_validator = ...
class TeamEncryptionKeyDeleteKeyDetails(bb.Struct):
    """
    Deleted team encryption key.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamEncryptionKeyDeleteKeyDetails_validator = ...
class TeamEncryptionKeyDeleteKeyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamEncryptionKeyDeleteKeyType_validator = ...
class TeamEncryptionKeyDisableKeyDetails(bb.Struct):
    """
    Disabled team encryption key.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamEncryptionKeyDisableKeyDetails_validator = ...
class TeamEncryptionKeyDisableKeyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamEncryptionKeyDisableKeyType_validator = ...
class TeamEncryptionKeyEnableKeyDetails(bb.Struct):
    """
    Enabled team encryption key.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamEncryptionKeyEnableKeyDetails_validator = ...
class TeamEncryptionKeyEnableKeyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamEncryptionKeyEnableKeyType_validator = ...
class TeamEncryptionKeyRotateKeyDetails(bb.Struct):
    """
    Rotated team encryption key.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamEncryptionKeyRotateKeyDetails_validator = ...
class TeamEncryptionKeyRotateKeyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamEncryptionKeyRotateKeyType_validator = ...
class TeamEncryptionKeyScheduleKeyDeletionDetails(bb.Struct):
    """
    Scheduled encryption key deletion.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamEncryptionKeyScheduleKeyDeletionDetails_validator = ...
class TeamEncryptionKeyScheduleKeyDeletionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamEncryptionKeyScheduleKeyDeletionType_validator = ...
class TeamEvent(bb.Struct):
    """
    An audit log event.

    :ivar team_log.TeamEvent.timestamp: The Dropbox timestamp representing when
        the action was taken.
    :ivar team_log.TeamEvent.event_category: The category that this type of
        action belongs to.
    :ivar team_log.TeamEvent.actor: The entity who actually performed the
        action. Might be missing due to historical data gap.
    :ivar team_log.TeamEvent.origin: The origin from which the actor performed
        the action including information about host, ip address, location,
        session, etc. If the action was performed programmatically via the API
        the origin represents the API client.
    :ivar team_log.TeamEvent.involve_non_team_member: True if the action
        involved a non team member either as the actor or as one of the affected
        users. Might be missing due to historical data gap.
    :ivar team_log.TeamEvent.context: The user or team on whose behalf the actor
        performed the action. Might be missing due to historical data gap.
    :ivar team_log.TeamEvent.participants: Zero or more users and/or groups that
        are affected by the action. Note that this list doesn't include any
        actors or users in context.
    :ivar team_log.TeamEvent.assets: Zero or more content assets involved in the
        action. Currently these include Dropbox files and folders but in the
        future we might add other asset types such as Paper documents, folders,
        projects, etc.
    :ivar team_log.TeamEvent.event_type: The particular type of action taken.
    :ivar team_log.TeamEvent.details: The variable event schema applicable to
        this type of action, instantiated with respect to this particular
        action.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, timestamp=..., event_category=..., event_type=..., details=..., actor=..., origin=..., involve_non_team_member=..., context=..., participants=..., assets=...) -> None:
        ...
    
    timestamp = ...
    event_category = ...
    actor = ...
    origin = ...
    involve_non_team_member = ...
    context = ...
    participants = ...
    assets = ...
    event_type = ...
    details = ...


TeamEvent_validator = ...
class TeamExtensionsPolicy(bb.Union):
    """
    Policy for controlling whether App Integrations are enabled for the team.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TeamExtensionsPolicy_validator = ...
class TeamExtensionsPolicyChangedDetails(bb.Struct):
    """
    Changed App Integrations setting for team.

    :ivar team_log.TeamExtensionsPolicyChangedDetails.new_value: New Extensions
        policy.
    :ivar team_log.TeamExtensionsPolicyChangedDetails.previous_value: Previous
        Extensions policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


TeamExtensionsPolicyChangedDetails_validator = ...
class TeamExtensionsPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamExtensionsPolicyChangedType_validator = ...
class TeamFolderChangeStatusDetails(bb.Struct):
    """
    Changed archival status of team folder.

    :ivar team_log.TeamFolderChangeStatusDetails.new_value: New team folder
        status.
    :ivar team_log.TeamFolderChangeStatusDetails.previous_value: Previous team
        folder status. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


TeamFolderChangeStatusDetails_validator = ...
class TeamFolderChangeStatusType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamFolderChangeStatusType_validator = ...
class TeamFolderCreateDetails(bb.Struct):
    """
    Created team folder in active status.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamFolderCreateDetails_validator = ...
class TeamFolderCreateType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamFolderCreateType_validator = ...
class TeamFolderDowngradeDetails(bb.Struct):
    """
    Downgraded team folder to regular shared folder.

    :ivar team_log.TeamFolderDowngradeDetails.target_asset_index: Target asset
        position in the Assets list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, target_asset_index=...) -> None:
        ...
    
    target_asset_index = ...


TeamFolderDowngradeDetails_validator = ...
class TeamFolderDowngradeType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamFolderDowngradeType_validator = ...
class TeamFolderPermanentlyDeleteDetails(bb.Struct):
    """
    Permanently deleted archived team folder.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamFolderPermanentlyDeleteDetails_validator = ...
class TeamFolderPermanentlyDeleteType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamFolderPermanentlyDeleteType_validator = ...
class TeamFolderRenameDetails(bb.Struct):
    """
    Renamed active/archived team folder.

    :ivar team_log.TeamFolderRenameDetails.previous_folder_name: Previous folder
        name.
    :ivar team_log.TeamFolderRenameDetails.new_folder_name: New folder name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_folder_name=..., new_folder_name=...) -> None:
        ...
    
    previous_folder_name = ...
    new_folder_name = ...


TeamFolderRenameDetails_validator = ...
class TeamFolderRenameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamFolderRenameType_validator = ...
class TeamInviteDetails(bb.Struct):
    """
    Details about team invites

    :ivar team_log.TeamInviteDetails.invite_method: How the user was invited to
        the team.
    :ivar team_log.TeamInviteDetails.additional_license_purchase: True if the
        invitation incurred an additional license purchase.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, invite_method=..., additional_license_purchase=...) -> None:
        ...
    
    invite_method = ...
    additional_license_purchase = ...


TeamInviteDetails_validator = ...
class TeamLinkedAppLogInfo(AppLogInfo):
    """
    Team linked app
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_id=..., display_name=...) -> None:
        ...
    


TeamLinkedAppLogInfo_validator = ...
class TeamLogInfo(bb.Struct):
    """
    Team's logged information.

    :ivar team_log.TeamLogInfo.display_name: Team display name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, display_name=...) -> None:
        ...
    
    display_name = ...


TeamLogInfo_validator = ...
class TeamMemberLogInfo(UserLogInfo):
    """
    Team member's logged information.

    :ivar team_log.TeamMemberLogInfo.team_member_id: Team member ID.
    :ivar team_log.TeamMemberLogInfo.member_external_id: Team member external
        ID.
    :ivar team_log.TeamMemberLogInfo.team: Details about this user&#x2019s team
        for enterprise event.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, account_id=..., display_name=..., email=..., team_member_id=..., member_external_id=..., team=...) -> None:
        ...
    
    team_member_id = ...
    member_external_id = ...
    team = ...


TeamMemberLogInfo_validator = ...
class TeamMembershipType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    free = ...
    full = ...
    guest = ...
    other = ...
    def is_free(self):
        """
        Check if the union tag is ``free``.

        :rtype: bool
        """
        ...
    
    def is_full(self):
        """
        Check if the union tag is ``full``.

        :rtype: bool
        """
        ...
    
    def is_guest(self):
        """
        Check if the union tag is ``guest``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TeamMembershipType_validator = ...
class TeamMergeFromDetails(bb.Struct):
    """
    Merged another team into this team.

    :ivar team_log.TeamMergeFromDetails.team_name: The name of the team that was
        merged into this team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team_name=...) -> None:
        ...
    
    team_name = ...


TeamMergeFromDetails_validator = ...
class TeamMergeFromType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeFromType_validator = ...
class TeamMergeRequestAcceptedDetails(bb.Struct):
    """
    Accepted a team merge request.

    :ivar team_log.TeamMergeRequestAcceptedDetails.request_accepted_details:
        Team merge request acceptance details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, request_accepted_details=...) -> None:
        ...
    
    request_accepted_details = ...


TeamMergeRequestAcceptedDetails_validator = ...
class TeamMergeRequestAcceptedExtraDetails(bb.Union):
    """
    Team merge request acceptance details

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar PrimaryTeamRequestAcceptedDetails
        TeamMergeRequestAcceptedExtraDetails.primary_team: Team merge request
        accepted details shown to the primary team.
    :ivar SecondaryTeamRequestAcceptedDetails
        TeamMergeRequestAcceptedExtraDetails.secondary_team: Team merge request
        accepted details shown to the secondary team.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``primary_team`` tag with
        value ``val``.

        :param PrimaryTeamRequestAcceptedDetails val:
        :rtype: TeamMergeRequestAcceptedExtraDetails
        """
        ...
    
    @classmethod
    def secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``secondary_team`` tag with
        value ``val``.

        :param SecondaryTeamRequestAcceptedDetails val:
        :rtype: TeamMergeRequestAcceptedExtraDetails
        """
        ...
    
    def is_primary_team(self):
        """
        Check if the union tag is ``primary_team``.

        :rtype: bool
        """
        ...
    
    def is_secondary_team(self):
        """
        Check if the union tag is ``secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_primary_team(self): # -> None:
        """
        Team merge request accepted details shown to the primary team.

        Only call this if :meth:`is_primary_team` is true.

        :rtype: PrimaryTeamRequestAcceptedDetails
        """
        ...
    
    def get_secondary_team(self): # -> None:
        """
        Team merge request accepted details shown to the secondary team.

        Only call this if :meth:`is_secondary_team` is true.

        :rtype: SecondaryTeamRequestAcceptedDetails
        """
        ...
    


TeamMergeRequestAcceptedExtraDetails_validator = ...
class TeamMergeRequestAcceptedShownToPrimaryTeamDetails(bb.Struct):
    """
    Accepted a team merge request.

    :ivar
        team_log.TeamMergeRequestAcceptedShownToPrimaryTeamDetails.secondary_team:
        The secondary team name.
    :ivar team_log.TeamMergeRequestAcceptedShownToPrimaryTeamDetails.sent_by:
        The name of the secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_by=...) -> None:
        ...
    
    secondary_team = ...
    sent_by = ...


TeamMergeRequestAcceptedShownToPrimaryTeamDetails_validator = ...
class TeamMergeRequestAcceptedShownToPrimaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestAcceptedShownToPrimaryTeamType_validator = ...
class TeamMergeRequestAcceptedShownToSecondaryTeamDetails(bb.Struct):
    """
    Accepted a team merge request.

    :ivar
        team_log.TeamMergeRequestAcceptedShownToSecondaryTeamDetails.primary_team:
        The primary team name.
    :ivar team_log.TeamMergeRequestAcceptedShownToSecondaryTeamDetails.sent_by:
        The name of the secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, primary_team=..., sent_by=...) -> None:
        ...
    
    primary_team = ...
    sent_by = ...


TeamMergeRequestAcceptedShownToSecondaryTeamDetails_validator = ...
class TeamMergeRequestAcceptedShownToSecondaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestAcceptedShownToSecondaryTeamType_validator = ...
class TeamMergeRequestAcceptedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestAcceptedType_validator = ...
class TeamMergeRequestAutoCanceledDetails(bb.Struct):
    """
    Automatically canceled team merge request.

    :ivar team_log.TeamMergeRequestAutoCanceledDetails.details: The cancellation
        reason.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, details=...) -> None:
        ...
    
    details = ...


TeamMergeRequestAutoCanceledDetails_validator = ...
class TeamMergeRequestAutoCanceledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestAutoCanceledType_validator = ...
class TeamMergeRequestCanceledDetails(bb.Struct):
    """
    Canceled a team merge request.

    :ivar team_log.TeamMergeRequestCanceledDetails.request_canceled_details:
        Team merge request cancellation details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, request_canceled_details=...) -> None:
        ...
    
    request_canceled_details = ...


TeamMergeRequestCanceledDetails_validator = ...
class TeamMergeRequestCanceledExtraDetails(bb.Union):
    """
    Team merge request cancellation details

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar PrimaryTeamRequestCanceledDetails
        TeamMergeRequestCanceledExtraDetails.primary_team: Team merge request
        cancellation details shown to the primary team.
    :ivar SecondaryTeamRequestCanceledDetails
        TeamMergeRequestCanceledExtraDetails.secondary_team: Team merge request
        cancellation details shown to the secondary team.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``primary_team`` tag with
        value ``val``.

        :param PrimaryTeamRequestCanceledDetails val:
        :rtype: TeamMergeRequestCanceledExtraDetails
        """
        ...
    
    @classmethod
    def secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``secondary_team`` tag with
        value ``val``.

        :param SecondaryTeamRequestCanceledDetails val:
        :rtype: TeamMergeRequestCanceledExtraDetails
        """
        ...
    
    def is_primary_team(self):
        """
        Check if the union tag is ``primary_team``.

        :rtype: bool
        """
        ...
    
    def is_secondary_team(self):
        """
        Check if the union tag is ``secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_primary_team(self): # -> None:
        """
        Team merge request cancellation details shown to the primary team.

        Only call this if :meth:`is_primary_team` is true.

        :rtype: PrimaryTeamRequestCanceledDetails
        """
        ...
    
    def get_secondary_team(self): # -> None:
        """
        Team merge request cancellation details shown to the secondary team.

        Only call this if :meth:`is_secondary_team` is true.

        :rtype: SecondaryTeamRequestCanceledDetails
        """
        ...
    


TeamMergeRequestCanceledExtraDetails_validator = ...
class TeamMergeRequestCanceledShownToPrimaryTeamDetails(bb.Struct):
    """
    Canceled a team merge request.

    :ivar
        team_log.TeamMergeRequestCanceledShownToPrimaryTeamDetails.secondary_team:
        The secondary team name.
    :ivar team_log.TeamMergeRequestCanceledShownToPrimaryTeamDetails.sent_by:
        The name of the secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_by=...) -> None:
        ...
    
    secondary_team = ...
    sent_by = ...


TeamMergeRequestCanceledShownToPrimaryTeamDetails_validator = ...
class TeamMergeRequestCanceledShownToPrimaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestCanceledShownToPrimaryTeamType_validator = ...
class TeamMergeRequestCanceledShownToSecondaryTeamDetails(bb.Struct):
    """
    Canceled a team merge request.

    :ivar team_log.TeamMergeRequestCanceledShownToSecondaryTeamDetails.sent_to:
        The email of the primary team admin that the request was sent to.
    :ivar team_log.TeamMergeRequestCanceledShownToSecondaryTeamDetails.sent_by:
        The name of the secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_to=..., sent_by=...) -> None:
        ...
    
    sent_to = ...
    sent_by = ...


TeamMergeRequestCanceledShownToSecondaryTeamDetails_validator = ...
class TeamMergeRequestCanceledShownToSecondaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestCanceledShownToSecondaryTeamType_validator = ...
class TeamMergeRequestCanceledType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestCanceledType_validator = ...
class TeamMergeRequestExpiredDetails(bb.Struct):
    """
    Team merge request expired.

    :ivar team_log.TeamMergeRequestExpiredDetails.request_expired_details: Team
        merge request expiration details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, request_expired_details=...) -> None:
        ...
    
    request_expired_details = ...


TeamMergeRequestExpiredDetails_validator = ...
class TeamMergeRequestExpiredExtraDetails(bb.Union):
    """
    Team merge request expiration details

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar PrimaryTeamRequestExpiredDetails
        TeamMergeRequestExpiredExtraDetails.primary_team: Team merge request
        canceled details shown to the primary team.
    :ivar SecondaryTeamRequestExpiredDetails
        TeamMergeRequestExpiredExtraDetails.secondary_team: Team merge request
        canceled details shown to the secondary team.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``primary_team`` tag with
        value ``val``.

        :param PrimaryTeamRequestExpiredDetails val:
        :rtype: TeamMergeRequestExpiredExtraDetails
        """
        ...
    
    @classmethod
    def secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``secondary_team`` tag with
        value ``val``.

        :param SecondaryTeamRequestExpiredDetails val:
        :rtype: TeamMergeRequestExpiredExtraDetails
        """
        ...
    
    def is_primary_team(self):
        """
        Check if the union tag is ``primary_team``.

        :rtype: bool
        """
        ...
    
    def is_secondary_team(self):
        """
        Check if the union tag is ``secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_primary_team(self): # -> None:
        """
        Team merge request canceled details shown to the primary team.

        Only call this if :meth:`is_primary_team` is true.

        :rtype: PrimaryTeamRequestExpiredDetails
        """
        ...
    
    def get_secondary_team(self): # -> None:
        """
        Team merge request canceled details shown to the secondary team.

        Only call this if :meth:`is_secondary_team` is true.

        :rtype: SecondaryTeamRequestExpiredDetails
        """
        ...
    


TeamMergeRequestExpiredExtraDetails_validator = ...
class TeamMergeRequestExpiredShownToPrimaryTeamDetails(bb.Struct):
    """
    Team merge request expired.

    :ivar
        team_log.TeamMergeRequestExpiredShownToPrimaryTeamDetails.secondary_team:
        The secondary team name.
    :ivar team_log.TeamMergeRequestExpiredShownToPrimaryTeamDetails.sent_by: The
        name of the secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_by=...) -> None:
        ...
    
    secondary_team = ...
    sent_by = ...


TeamMergeRequestExpiredShownToPrimaryTeamDetails_validator = ...
class TeamMergeRequestExpiredShownToPrimaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestExpiredShownToPrimaryTeamType_validator = ...
class TeamMergeRequestExpiredShownToSecondaryTeamDetails(bb.Struct):
    """
    Team merge request expired.

    :ivar team_log.TeamMergeRequestExpiredShownToSecondaryTeamDetails.sent_to:
        The email of the primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_to=...) -> None:
        ...
    
    sent_to = ...


TeamMergeRequestExpiredShownToSecondaryTeamDetails_validator = ...
class TeamMergeRequestExpiredShownToSecondaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestExpiredShownToSecondaryTeamType_validator = ...
class TeamMergeRequestExpiredType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestExpiredType_validator = ...
class TeamMergeRequestRejectedShownToPrimaryTeamDetails(bb.Struct):
    """
    Rejected a team merge request.

    :ivar
        team_log.TeamMergeRequestRejectedShownToPrimaryTeamDetails.secondary_team:
        The secondary team name.
    :ivar team_log.TeamMergeRequestRejectedShownToPrimaryTeamDetails.sent_by:
        The name of the secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_by=...) -> None:
        ...
    
    secondary_team = ...
    sent_by = ...


TeamMergeRequestRejectedShownToPrimaryTeamDetails_validator = ...
class TeamMergeRequestRejectedShownToPrimaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestRejectedShownToPrimaryTeamType_validator = ...
class TeamMergeRequestRejectedShownToSecondaryTeamDetails(bb.Struct):
    """
    Rejected a team merge request.

    :ivar team_log.TeamMergeRequestRejectedShownToSecondaryTeamDetails.sent_by:
        The name of the secondary team admin who sent the request originally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_by=...) -> None:
        ...
    
    sent_by = ...


TeamMergeRequestRejectedShownToSecondaryTeamDetails_validator = ...
class TeamMergeRequestRejectedShownToSecondaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestRejectedShownToSecondaryTeamType_validator = ...
class TeamMergeRequestReminderDetails(bb.Struct):
    """
    Sent a team merge request reminder.

    :ivar team_log.TeamMergeRequestReminderDetails.request_reminder_details:
        Team merge request reminder details.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, request_reminder_details=...) -> None:
        ...
    
    request_reminder_details = ...


TeamMergeRequestReminderDetails_validator = ...
class TeamMergeRequestReminderExtraDetails(bb.Union):
    """
    Team merge request reminder details

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar PrimaryTeamRequestReminderDetails
        TeamMergeRequestReminderExtraDetails.primary_team: Team merge request
        reminder details shown to the primary team.
    :ivar SecondaryTeamRequestReminderDetails
        TeamMergeRequestReminderExtraDetails.secondary_team: Team merge request
        reminder details shown to the secondary team.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def primary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``primary_team`` tag with
        value ``val``.

        :param PrimaryTeamRequestReminderDetails val:
        :rtype: TeamMergeRequestReminderExtraDetails
        """
        ...
    
    @classmethod
    def secondary_team(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``secondary_team`` tag with
        value ``val``.

        :param SecondaryTeamRequestReminderDetails val:
        :rtype: TeamMergeRequestReminderExtraDetails
        """
        ...
    
    def is_primary_team(self):
        """
        Check if the union tag is ``primary_team``.

        :rtype: bool
        """
        ...
    
    def is_secondary_team(self):
        """
        Check if the union tag is ``secondary_team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_primary_team(self): # -> None:
        """
        Team merge request reminder details shown to the primary team.

        Only call this if :meth:`is_primary_team` is true.

        :rtype: PrimaryTeamRequestReminderDetails
        """
        ...
    
    def get_secondary_team(self): # -> None:
        """
        Team merge request reminder details shown to the secondary team.

        Only call this if :meth:`is_secondary_team` is true.

        :rtype: SecondaryTeamRequestReminderDetails
        """
        ...
    


TeamMergeRequestReminderExtraDetails_validator = ...
class TeamMergeRequestReminderShownToPrimaryTeamDetails(bb.Struct):
    """
    Sent a team merge request reminder.

    :ivar
        team_log.TeamMergeRequestReminderShownToPrimaryTeamDetails.secondary_team:
        The secondary team name.
    :ivar team_log.TeamMergeRequestReminderShownToPrimaryTeamDetails.sent_to:
        The name of the primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_to=...) -> None:
        ...
    
    secondary_team = ...
    sent_to = ...


TeamMergeRequestReminderShownToPrimaryTeamDetails_validator = ...
class TeamMergeRequestReminderShownToPrimaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestReminderShownToPrimaryTeamType_validator = ...
class TeamMergeRequestReminderShownToSecondaryTeamDetails(bb.Struct):
    """
    Sent a team merge request reminder.

    :ivar team_log.TeamMergeRequestReminderShownToSecondaryTeamDetails.sent_to:
        The email of the primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_to=...) -> None:
        ...
    
    sent_to = ...


TeamMergeRequestReminderShownToSecondaryTeamDetails_validator = ...
class TeamMergeRequestReminderShownToSecondaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestReminderShownToSecondaryTeamType_validator = ...
class TeamMergeRequestReminderType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestReminderType_validator = ...
class TeamMergeRequestRevokedDetails(bb.Struct):
    """
    Canceled the team merge.

    :ivar team_log.TeamMergeRequestRevokedDetails.team: The name of the other
        team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team=...) -> None:
        ...
    
    team = ...


TeamMergeRequestRevokedDetails_validator = ...
class TeamMergeRequestRevokedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestRevokedType_validator = ...
class TeamMergeRequestSentShownToPrimaryTeamDetails(bb.Struct):
    """
    Requested to merge their Dropbox team into yours.

    :ivar team_log.TeamMergeRequestSentShownToPrimaryTeamDetails.secondary_team:
        The secondary team name.
    :ivar team_log.TeamMergeRequestSentShownToPrimaryTeamDetails.sent_to: The
        name of the primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, secondary_team=..., sent_to=...) -> None:
        ...
    
    secondary_team = ...
    sent_to = ...


TeamMergeRequestSentShownToPrimaryTeamDetails_validator = ...
class TeamMergeRequestSentShownToPrimaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestSentShownToPrimaryTeamType_validator = ...
class TeamMergeRequestSentShownToSecondaryTeamDetails(bb.Struct):
    """
    Requested to merge your team into another Dropbox team.

    :ivar team_log.TeamMergeRequestSentShownToSecondaryTeamDetails.sent_to: The
        email of the primary team admin the request was sent to.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, sent_to=...) -> None:
        ...
    
    sent_to = ...


TeamMergeRequestSentShownToSecondaryTeamDetails_validator = ...
class TeamMergeRequestSentShownToSecondaryTeamType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeRequestSentShownToSecondaryTeamType_validator = ...
class TeamMergeToDetails(bb.Struct):
    """
    Merged this team into another team.

    :ivar team_log.TeamMergeToDetails.team_name: The name of the team that this
        team was merged into.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team_name=...) -> None:
        ...
    
    team_name = ...


TeamMergeToDetails_validator = ...
class TeamMergeToType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamMergeToType_validator = ...
class TeamName(bb.Struct):
    """
    Team name details

    :ivar team_log.TeamName.team_display_name: Team's display name.
    :ivar team_log.TeamName.team_legal_name: Team's legal name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, team_display_name=..., team_legal_name=...) -> None:
        ...
    
    team_display_name = ...
    team_legal_name = ...


TeamName_validator = ...
class TeamProfileAddBackgroundDetails(bb.Struct):
    """
    Added team background to display on shared link headers.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamProfileAddBackgroundDetails_validator = ...
class TeamProfileAddBackgroundType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileAddBackgroundType_validator = ...
class TeamProfileAddLogoDetails(bb.Struct):
    """
    Added team logo to display on shared link headers.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamProfileAddLogoDetails_validator = ...
class TeamProfileAddLogoType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileAddLogoType_validator = ...
class TeamProfileChangeBackgroundDetails(bb.Struct):
    """
    Changed team background displayed on shared link headers.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamProfileChangeBackgroundDetails_validator = ...
class TeamProfileChangeBackgroundType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileChangeBackgroundType_validator = ...
class TeamProfileChangeDefaultLanguageDetails(bb.Struct):
    """
    Changed default language for team.

    :ivar team_log.TeamProfileChangeDefaultLanguageDetails.new_value: New team's
        default language.
    :ivar team_log.TeamProfileChangeDefaultLanguageDetails.previous_value:
        Previous team's default language.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


TeamProfileChangeDefaultLanguageDetails_validator = ...
class TeamProfileChangeDefaultLanguageType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileChangeDefaultLanguageType_validator = ...
class TeamProfileChangeLogoDetails(bb.Struct):
    """
    Changed team logo displayed on shared link headers.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamProfileChangeLogoDetails_validator = ...
class TeamProfileChangeLogoType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileChangeLogoType_validator = ...
class TeamProfileChangeNameDetails(bb.Struct):
    """
    Changed team name.

    :ivar team_log.TeamProfileChangeNameDetails.previous_value: Previous teams
        name. Might be missing due to historical data gap.
    :ivar team_log.TeamProfileChangeNameDetails.new_value: New team name.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


TeamProfileChangeNameDetails_validator = ...
class TeamProfileChangeNameType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileChangeNameType_validator = ...
class TeamProfileRemoveBackgroundDetails(bb.Struct):
    """
    Removed team background displayed on shared link headers.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamProfileRemoveBackgroundDetails_validator = ...
class TeamProfileRemoveBackgroundType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileRemoveBackgroundType_validator = ...
class TeamProfileRemoveLogoDetails(bb.Struct):
    """
    Removed team logo displayed on shared link headers.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TeamProfileRemoveLogoDetails_validator = ...
class TeamProfileRemoveLogoType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamProfileRemoveLogoType_validator = ...
class TeamSelectiveSyncPolicy(bb.Union):
    """
    Policy for controlling whether team selective sync is enabled for team.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TeamSelectiveSyncPolicy_validator = ...
class TeamSelectiveSyncPolicyChangedDetails(bb.Struct):
    """
    Enabled/disabled Team Selective Sync for team.

    :ivar team_log.TeamSelectiveSyncPolicyChangedDetails.new_value: New Team
        Selective Sync policy.
    :ivar team_log.TeamSelectiveSyncPolicyChangedDetails.previous_value:
        Previous Team Selective Sync policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


TeamSelectiveSyncPolicyChangedDetails_validator = ...
class TeamSelectiveSyncPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamSelectiveSyncPolicyChangedType_validator = ...
class TeamSelectiveSyncSettingsChangedDetails(bb.Struct):
    """
    Changed sync default.

    :ivar team_log.TeamSelectiveSyncSettingsChangedDetails.previous_value:
        Previous value.
    :ivar team_log.TeamSelectiveSyncSettingsChangedDetails.new_value: New value.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


TeamSelectiveSyncSettingsChangedDetails_validator = ...
class TeamSelectiveSyncSettingsChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamSelectiveSyncSettingsChangedType_validator = ...
class TeamSharingWhitelistSubjectsChangedDetails(bb.Struct):
    """
    Edited the approved list for sharing externally.

    :ivar
        team_log.TeamSharingWhitelistSubjectsChangedDetails.added_whitelist_subjects:
        Domains or emails added to the approved list for sharing externally.
    :ivar
        team_log.TeamSharingWhitelistSubjectsChangedDetails.removed_whitelist_subjects:
        Domains or emails removed from the approved list for sharing externally.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, added_whitelist_subjects=..., removed_whitelist_subjects=...) -> None:
        ...
    
    added_whitelist_subjects = ...
    removed_whitelist_subjects = ...


TeamSharingWhitelistSubjectsChangedDetails_validator = ...
class TeamSharingWhitelistSubjectsChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TeamSharingWhitelistSubjectsChangedType_validator = ...
class TfaAddBackupPhoneDetails(bb.Struct):
    """
    Added backup phone for two-step verification.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaAddBackupPhoneDetails_validator = ...
class TfaAddBackupPhoneType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaAddBackupPhoneType_validator = ...
class TfaAddExceptionDetails(bb.Struct):
    """
    Added members to two factor authentication exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaAddExceptionDetails_validator = ...
class TfaAddExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaAddExceptionType_validator = ...
class TfaAddSecurityKeyDetails(bb.Struct):
    """
    Added security key for two-step verification.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaAddSecurityKeyDetails_validator = ...
class TfaAddSecurityKeyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaAddSecurityKeyType_validator = ...
class TfaChangeBackupPhoneDetails(bb.Struct):
    """
    Changed backup phone for two-step verification.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaChangeBackupPhoneDetails_validator = ...
class TfaChangeBackupPhoneType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaChangeBackupPhoneType_validator = ...
class TfaChangePolicyDetails(bb.Struct):
    """
    Changed two-step verification setting for team.

    :ivar team_log.TfaChangePolicyDetails.new_value: New change policy.
    :ivar team_log.TfaChangePolicyDetails.previous_value: Previous change
        policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


TfaChangePolicyDetails_validator = ...
class TfaChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaChangePolicyType_validator = ...
class TfaChangeStatusDetails(bb.Struct):
    """
    Enabled/disabled/changed two-step verification setting.

    :ivar team_log.TfaChangeStatusDetails.new_value: The new two factor
        authentication configuration.
    :ivar team_log.TfaChangeStatusDetails.previous_value: The previous two
        factor authentication configuration. Might be missing due to historical
        data gap.
    :ivar team_log.TfaChangeStatusDetails.used_rescue_code: Used two factor
        authentication rescue code. This flag is relevant when the two factor
        authentication configuration is disabled.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=..., used_rescue_code=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...
    used_rescue_code = ...


TfaChangeStatusDetails_validator = ...
class TfaChangeStatusType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaChangeStatusType_validator = ...
class TfaConfiguration(bb.Union):
    """
    Two factor authentication configuration. Note: the enabled option is
    deprecated.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    authenticator = ...
    disabled = ...
    enabled = ...
    sms = ...
    other = ...
    def is_authenticator(self):
        """
        Check if the union tag is ``authenticator``.

        :rtype: bool
        """
        ...
    
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_sms(self):
        """
        Check if the union tag is ``sms``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TfaConfiguration_validator = ...
class TfaRemoveBackupPhoneDetails(bb.Struct):
    """
    Removed backup phone for two-step verification.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaRemoveBackupPhoneDetails_validator = ...
class TfaRemoveBackupPhoneType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaRemoveBackupPhoneType_validator = ...
class TfaRemoveExceptionDetails(bb.Struct):
    """
    Removed members from two factor authentication exception list.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaRemoveExceptionDetails_validator = ...
class TfaRemoveExceptionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaRemoveExceptionType_validator = ...
class TfaRemoveSecurityKeyDetails(bb.Struct):
    """
    Removed security key for two-step verification.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaRemoveSecurityKeyDetails_validator = ...
class TfaRemoveSecurityKeyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaRemoveSecurityKeyType_validator = ...
class TfaResetDetails(bb.Struct):
    """
    Reset two-step verification for team member.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


TfaResetDetails_validator = ...
class TfaResetType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TfaResetType_validator = ...
class TimeUnit(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    days = ...
    hours = ...
    milliseconds = ...
    minutes = ...
    months = ...
    seconds = ...
    weeks = ...
    years = ...
    other = ...
    def is_days(self):
        """
        Check if the union tag is ``days``.

        :rtype: bool
        """
        ...
    
    def is_hours(self):
        """
        Check if the union tag is ``hours``.

        :rtype: bool
        """
        ...
    
    def is_milliseconds(self):
        """
        Check if the union tag is ``milliseconds``.

        :rtype: bool
        """
        ...
    
    def is_minutes(self):
        """
        Check if the union tag is ``minutes``.

        :rtype: bool
        """
        ...
    
    def is_months(self):
        """
        Check if the union tag is ``months``.

        :rtype: bool
        """
        ...
    
    def is_seconds(self):
        """
        Check if the union tag is ``seconds``.

        :rtype: bool
        """
        ...
    
    def is_weeks(self):
        """
        Check if the union tag is ``weeks``.

        :rtype: bool
        """
        ...
    
    def is_years(self):
        """
        Check if the union tag is ``years``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TimeUnit_validator = ...
class TrustedNonTeamMemberLogInfo(UserLogInfo):
    """
    User that is not a member of the team but considered trusted.

    :ivar team_log.TrustedNonTeamMemberLogInfo.trusted_non_team_member_type:
        Indicates the type of the member of a trusted team.
    :ivar team_log.TrustedNonTeamMemberLogInfo.team: Details about this user's
        trusted team.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, trusted_non_team_member_type=..., account_id=..., display_name=..., email=..., team=...) -> None:
        ...
    
    trusted_non_team_member_type = ...
    team = ...


TrustedNonTeamMemberLogInfo_validator = ...
class TrustedNonTeamMemberType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    enterprise_admin = ...
    multi_instance_admin = ...
    other = ...
    def is_enterprise_admin(self):
        """
        Check if the union tag is ``enterprise_admin``.

        :rtype: bool
        """
        ...
    
    def is_multi_instance_admin(self):
        """
        Check if the union tag is ``multi_instance_admin``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TrustedNonTeamMemberType_validator = ...
class TrustedTeamsRequestAction(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    accepted = ...
    declined = ...
    expired = ...
    invited = ...
    revoked = ...
    other = ...
    def is_accepted(self):
        """
        Check if the union tag is ``accepted``.

        :rtype: bool
        """
        ...
    
    def is_declined(self):
        """
        Check if the union tag is ``declined``.

        :rtype: bool
        """
        ...
    
    def is_expired(self):
        """
        Check if the union tag is ``expired``.

        :rtype: bool
        """
        ...
    
    def is_invited(self):
        """
        Check if the union tag is ``invited``.

        :rtype: bool
        """
        ...
    
    def is_revoked(self):
        """
        Check if the union tag is ``revoked``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TrustedTeamsRequestAction_validator = ...
class TrustedTeamsRequestState(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    invited = ...
    linked = ...
    unlinked = ...
    other = ...
    def is_invited(self):
        """
        Check if the union tag is ``invited``.

        :rtype: bool
        """
        ...
    
    def is_linked(self):
        """
        Check if the union tag is ``linked``.

        :rtype: bool
        """
        ...
    
    def is_unlinked(self):
        """
        Check if the union tag is ``unlinked``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TrustedTeamsRequestState_validator = ...
class TwoAccountChangePolicyDetails(bb.Struct):
    """
    Enabled/disabled option for members to link personal Dropbox account and
    team account to same computer.

    :ivar team_log.TwoAccountChangePolicyDetails.new_value: New two account
        policy.
    :ivar team_log.TwoAccountChangePolicyDetails.previous_value: Previous two
        account policy. Might be missing due to historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


TwoAccountChangePolicyDetails_validator = ...
class TwoAccountChangePolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


TwoAccountChangePolicyType_validator = ...
class TwoAccountPolicy(bb.Union):
    """
    Policy for pairing personal account to work account

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TwoAccountPolicy_validator = ...
class UndoNamingConventionDetails(bb.Struct):
    """
    Reverted naming convention.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


UndoNamingConventionDetails_validator = ...
class UndoNamingConventionType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


UndoNamingConventionType_validator = ...
class UndoOrganizeFolderWithTidyDetails(bb.Struct):
    """
    Removed multi-file organize.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


UndoOrganizeFolderWithTidyDetails_validator = ...
class UndoOrganizeFolderWithTidyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


UndoOrganizeFolderWithTidyType_validator = ...
class UserLinkedAppLogInfo(AppLogInfo):
    """
    User linked app
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_id=..., display_name=...) -> None:
        ...
    


UserLinkedAppLogInfo_validator = ...
class UserNameLogInfo(bb.Struct):
    """
    User's name logged information

    :ivar team_log.UserNameLogInfo.given_name: Given name.
    :ivar team_log.UserNameLogInfo.surname: Surname.
    :ivar team_log.UserNameLogInfo.locale: Locale. Might be missing due to
        historical data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, given_name=..., surname=..., locale=...) -> None:
        ...
    
    given_name = ...
    surname = ...
    locale = ...


UserNameLogInfo_validator = ...
class UserOrTeamLinkedAppLogInfo(AppLogInfo):
    """
    User or team linked app. Used when linked type is missing due to historical
    data gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, app_id=..., display_name=...) -> None:
        ...
    


UserOrTeamLinkedAppLogInfo_validator = ...
class UserTagsAddedDetails(bb.Struct):
    """
    Tagged a file.

    :ivar team_log.UserTagsAddedDetails.values: values.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, values=...) -> None:
        ...
    
    values = ...


UserTagsAddedDetails_validator = ...
class UserTagsAddedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


UserTagsAddedType_validator = ...
class UserTagsRemovedDetails(bb.Struct):
    """
    Removed tags.

    :ivar team_log.UserTagsRemovedDetails.values: values.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, values=...) -> None:
        ...
    
    values = ...


UserTagsRemovedDetails_validator = ...
class UserTagsRemovedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


UserTagsRemovedType_validator = ...
class ViewerInfoPolicyChangedDetails(bb.Struct):
    """
    Changed team policy for viewer info.

    :ivar team_log.ViewerInfoPolicyChangedDetails.previous_value: Previous
        Viewer Info policy.
    :ivar team_log.ViewerInfoPolicyChangedDetails.new_value: New Viewer Info
        policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


ViewerInfoPolicyChangedDetails_validator = ...
class ViewerInfoPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


ViewerInfoPolicyChangedType_validator = ...
class WatermarkingPolicy(bb.Union):
    """
    Policy for controlling team access to watermarking feature

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    disabled = ...
    enabled = ...
    other = ...
    def is_disabled(self):
        """
        Check if the union tag is ``disabled``.

        :rtype: bool
        """
        ...
    
    def is_enabled(self):
        """
        Check if the union tag is ``enabled``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


WatermarkingPolicy_validator = ...
class WatermarkingPolicyChangedDetails(bb.Struct):
    """
    Changed watermarking policy for team.

    :ivar team_log.WatermarkingPolicyChangedDetails.new_value: New watermarking
        policy.
    :ivar team_log.WatermarkingPolicyChangedDetails.previous_value: Previous
        watermarking policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


WatermarkingPolicyChangedDetails_validator = ...
class WatermarkingPolicyChangedType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


WatermarkingPolicyChangedType_validator = ...
class WebDeviceSessionLogInfo(DeviceSessionLogInfo):
    """
    Information on active web sessions

    :ivar team_log.WebDeviceSessionLogInfo.session_info: Web session unique id.
    :ivar team_log.WebDeviceSessionLogInfo.user_agent: Information on the
        hosting device.
    :ivar team_log.WebDeviceSessionLogInfo.os: Information on the hosting
        operating system.
    :ivar team_log.WebDeviceSessionLogInfo.browser: Information on the browser
        used for this web session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, user_agent=..., os=..., browser=..., ip_address=..., created=..., updated=..., session_info=...) -> None:
        ...
    
    session_info = ...
    user_agent = ...
    os = ...
    browser = ...


WebDeviceSessionLogInfo_validator = ...
class WebSessionLogInfo(SessionLogInfo):
    """
    Web session.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, session_id=...) -> None:
        ...
    


WebSessionLogInfo_validator = ...
class WebSessionsChangeActiveSessionLimitDetails(bb.Struct):
    """
    Changed limit on active sessions per member.

    :ivar team_log.WebSessionsChangeActiveSessionLimitDetails.previous_value:
        Previous max number of concurrent active sessions policy.
    :ivar team_log.WebSessionsChangeActiveSessionLimitDetails.new_value: New max
        number of concurrent active sessions policy.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, previous_value=..., new_value=...) -> None:
        ...
    
    previous_value = ...
    new_value = ...


WebSessionsChangeActiveSessionLimitDetails_validator = ...
class WebSessionsChangeActiveSessionLimitType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


WebSessionsChangeActiveSessionLimitType_validator = ...
class WebSessionsChangeFixedLengthPolicyDetails(bb.Struct):
    """
    Changed how long members can stay signed in to Dropbox.com.

    :ivar team_log.WebSessionsChangeFixedLengthPolicyDetails.new_value: New
        session length policy. Might be missing due to historical data gap.
    :ivar team_log.WebSessionsChangeFixedLengthPolicyDetails.previous_value:
        Previous session length policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


WebSessionsChangeFixedLengthPolicyDetails_validator = ...
class WebSessionsChangeFixedLengthPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


WebSessionsChangeFixedLengthPolicyType_validator = ...
class WebSessionsChangeIdleLengthPolicyDetails(bb.Struct):
    """
    Changed how long team members can be idle while signed in to Dropbox.com.

    :ivar team_log.WebSessionsChangeIdleLengthPolicyDetails.new_value: New idle
        length policy. Might be missing due to historical data gap.
    :ivar team_log.WebSessionsChangeIdleLengthPolicyDetails.previous_value:
        Previous idle length policy. Might be missing due to historical data
        gap.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, new_value=..., previous_value=...) -> None:
        ...
    
    new_value = ...
    previous_value = ...


WebSessionsChangeIdleLengthPolicyDetails_validator = ...
class WebSessionsChangeIdleLengthPolicyType(bb.Struct):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, description=...) -> None:
        ...
    
    description = ...


WebSessionsChangeIdleLengthPolicyType_validator = ...
class WebSessionsFixedLengthPolicy(bb.Union):
    """
    Web sessions fixed length policy.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar DurationLogInfo WebSessionsFixedLengthPolicy.defined: Defined fixed
        session length.
    :ivar team_log.WebSessionsFixedLengthPolicy.undefined: Undefined fixed
        session length.
    """
    _catch_all = ...
    undefined = ...
    other = ...
    @classmethod
    def defined(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``defined`` tag with value
        ``val``.

        :param DurationLogInfo val:
        :rtype: WebSessionsFixedLengthPolicy
        """
        ...
    
    def is_defined(self):
        """
        Check if the union tag is ``defined``.

        :rtype: bool
        """
        ...
    
    def is_undefined(self):
        """
        Check if the union tag is ``undefined``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_defined(self): # -> None:
        """
        Defined fixed session length.

        Only call this if :meth:`is_defined` is true.

        :rtype: DurationLogInfo
        """
        ...
    


WebSessionsFixedLengthPolicy_validator = ...
class WebSessionsIdleLengthPolicy(bb.Union):
    """
    Web sessions idle length policy.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar DurationLogInfo WebSessionsIdleLengthPolicy.defined: Defined idle
        session length.
    :ivar team_log.WebSessionsIdleLengthPolicy.undefined: Undefined idle session
        length.
    """
    _catch_all = ...
    undefined = ...
    other = ...
    @classmethod
    def defined(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``defined`` tag with value
        ``val``.

        :param DurationLogInfo val:
        :rtype: WebSessionsIdleLengthPolicy
        """
        ...
    
    def is_defined(self):
        """
        Check if the union tag is ``defined``.

        :rtype: bool
        """
        ...
    
    def is_undefined(self):
        """
        Check if the union tag is ``undefined``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_defined(self): # -> None:
        """
        Defined idle session length.

        Only call this if :meth:`is_defined` is true.

        :rtype: DurationLogInfo
        """
        ...
    


WebSessionsIdleLengthPolicy_validator = ...
AppId_validator = ...
EmailAddress_validator = ...
FilePath_validator = ...
IpAddress_validator = ...
NamespaceId_validator = ...
RequestId_validator = ...
TeamEventList_validator = ...
get_events = ...
get_events_continue = ...
ROUTES = ...
