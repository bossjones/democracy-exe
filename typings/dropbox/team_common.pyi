"""
This type stub file was generated by pyright.
"""

from stone.backends.python_rsrc import stone_base as bb

class GroupManagementType(bb.Union):
    """
    The group type determines how a group is managed.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_common.GroupManagementType.user_managed: A group which is managed
        by selected users.
    :ivar team_common.GroupManagementType.company_managed: A group which is
        managed by team admins only.
    :ivar team_common.GroupManagementType.system_managed: A group which is
        managed automatically by Dropbox.
    """
    _catch_all = ...
    user_managed = ...
    company_managed = ...
    system_managed = ...
    other = ...
    def is_user_managed(self):
        """
        Check if the union tag is ``user_managed``.

        :rtype: bool
        """
        ...
    
    def is_company_managed(self):
        """
        Check if the union tag is ``company_managed``.

        :rtype: bool
        """
        ...
    
    def is_system_managed(self):
        """
        Check if the union tag is ``system_managed``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


GroupManagementType_validator = ...
class GroupSummary(bb.Struct):
    """
    Information about a group.

    :ivar team_common.GroupSummary.group_external_id: External ID of group. This
        is an arbitrary ID that an admin can attach to a group.
    :ivar team_common.GroupSummary.member_count: The number of members in the
        group.
    :ivar team_common.GroupSummary.group_management_type: Who is allowed to
        manage the group.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, group_name=..., group_id=..., group_management_type=..., group_external_id=..., member_count=...) -> None:
        ...
    
    group_name = ...
    group_id = ...
    group_external_id = ...
    member_count = ...
    group_management_type = ...


GroupSummary_validator = ...
class GroupType(bb.Union):
    """
    The group type determines how a group is created and managed.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_common.GroupType.team: A group to which team members are
        automatically added. Applicable to `team folders
        <https://www.dropbox.com/help/986>`_ only.
    :ivar team_common.GroupType.user_managed: A group is created and managed by
        a user.
    """
    _catch_all = ...
    team = ...
    user_managed = ...
    other = ...
    def is_team(self):
        """
        Check if the union tag is ``team``.

        :rtype: bool
        """
        ...
    
    def is_user_managed(self):
        """
        Check if the union tag is ``user_managed``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


GroupType_validator = ...
class MemberSpaceLimitType(bb.Union):
    """
    The type of the space limit imposed on a team member.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar team_common.MemberSpaceLimitType.off: The team member does not have
        imposed space limit.
    :ivar team_common.MemberSpaceLimitType.alert_only: The team member has soft
        imposed space limit - the limit is used for display and for
        notifications.
    :ivar team_common.MemberSpaceLimitType.stop_sync: The team member has hard
        imposed space limit - Dropbox file sync will stop after the limit is
        reached.
    """
    _catch_all = ...
    off = ...
    alert_only = ...
    stop_sync = ...
    other = ...
    def is_off(self):
        """
        Check if the union tag is ``off``.

        :rtype: bool
        """
        ...
    
    def is_alert_only(self):
        """
        Check if the union tag is ``alert_only``.

        :rtype: bool
        """
        ...
    
    def is_stop_sync(self):
        """
        Check if the union tag is ``stop_sync``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


MemberSpaceLimitType_validator = ...
class TimeRange(bb.Struct):
    """
    Time range.

    :ivar team_common.TimeRange.start_time: Optional starting time (inclusive).
    :ivar team_common.TimeRange.end_time: Optional ending time (exclusive).
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, start_time=..., end_time=...) -> None:
        ...
    
    start_time = ...
    end_time = ...


TimeRange_validator = ...
GroupExternalId_validator = ...
GroupId_validator = ...
MemberExternalId_validator = ...
ResellerId_validator = ...
TeamId_validator = ...
TeamMemberId_validator = ...
ROUTES = ...
