"""
This type stub file was generated by pyright.
"""

from stone.backends.python_rsrc import stone_base as bb

class PathRoot(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar common.PathRoot.home: Paths are relative to the authenticating user's
        home namespace, whether or not that user belongs to a team.
    :ivar str common.PathRoot.root: Paths are relative to the authenticating
        user's root namespace (This results in
        :field:`PathRootError.invalid_root` if the user's root namespace has
        changed.).
    :ivar str common.PathRoot.namespace_id: Paths are relative to given
        namespace id (This results in :field:`PathRootError.no_permission` if
        you don't have access to this namespace.).
    """
    _catch_all = ...
    home = ...
    other = ...
    @classmethod
    def root(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``root`` tag with value
        ``val``.

        :param str val:
        :rtype: PathRoot
        """
        ...
    
    @classmethod
    def namespace_id(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``namespace_id`` tag with
        value ``val``.

        :param str val:
        :rtype: PathRoot
        """
        ...
    
    def is_home(self):
        """
        Check if the union tag is ``home``.

        :rtype: bool
        """
        ...
    
    def is_root(self):
        """
        Check if the union tag is ``root``.

        :rtype: bool
        """
        ...
    
    def is_namespace_id(self):
        """
        Check if the union tag is ``namespace_id``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_root(self): # -> None:
        """
        Paths are relative to the authenticating user's root namespace (This
        results in ``PathRootError.invalid_root`` if the user's root namespace
        has changed.).

        Only call this if :meth:`is_root` is true.

        :rtype: str
        """
        ...
    
    def get_namespace_id(self): # -> None:
        """
        Paths are relative to given namespace id (This results in
        ``PathRootError.no_permission`` if you don't have access to this
        namespace.).

        Only call this if :meth:`is_namespace_id` is true.

        :rtype: str
        """
        ...
    


PathRoot_validator = ...
class PathRootError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar RootInfo PathRootError.invalid_root: The root namespace id in
        Dropbox-API-Path-Root header is not valid. The value of this error is
        the user's latest root info.
    :ivar common.PathRootError.no_permission: You don't have permission to
        access the namespace id in Dropbox-API-Path-Root  header.
    """
    _catch_all = ...
    no_permission = ...
    other = ...
    @classmethod
    def invalid_root(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``invalid_root`` tag with
        value ``val``.

        :param RootInfo val:
        :rtype: PathRootError
        """
        ...
    
    def is_invalid_root(self):
        """
        Check if the union tag is ``invalid_root``.

        :rtype: bool
        """
        ...
    
    def is_no_permission(self):
        """
        Check if the union tag is ``no_permission``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_invalid_root(self): # -> None:
        """
        The root namespace id in Dropbox-API-Path-Root header is not valid. The
        value of this error is the user's latest root info.

        Only call this if :meth:`is_invalid_root` is true.

        :rtype: RootInfo
        """
        ...
    


PathRootError_validator = ...
class RootInfo(bb.Struct):
    """
    Information about current user's root.

    :ivar common.RootInfo.root_namespace_id: The namespace ID for user's root
        namespace. It will be the namespace ID of the shared team root if the
        user is member of a team with a separate team root. Otherwise it will be
        same as ``RootInfo.home_namespace_id``.
    :ivar common.RootInfo.home_namespace_id: The namespace ID for user's home
        namespace.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, root_namespace_id=..., home_namespace_id=...) -> None:
        ...
    
    root_namespace_id = ...
    home_namespace_id = ...


RootInfo_validator = ...
class TeamRootInfo(RootInfo):
    """
    Root info when user is member of a team with a separate root namespace ID.

    :ivar common.TeamRootInfo.home_path: The path for user's home directory
        under the shared team root.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, root_namespace_id=..., home_namespace_id=..., home_path=...) -> None:
        ...
    
    home_path = ...


TeamRootInfo_validator = ...
class UserRootInfo(RootInfo):
    """
    Root info when user is not member of a team or the user is a member of a
    team and the team does not have a separate root namespace.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, root_namespace_id=..., home_namespace_id=...) -> None:
        ...
    


UserRootInfo_validator = ...
Date_validator = ...
DisplayName_validator = ...
DisplayNameLegacy_validator = ...
DropboxTimestamp_validator = ...
EmailAddress_validator = ...
LanguageCode_validator = ...
NamePart_validator = ...
NamespaceId_validator = ...
OptionalNamePart_validator = ...
SessionId_validator = ...
SharedFolderId_validator = ...
ROUTES = ...
