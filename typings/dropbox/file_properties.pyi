"""
This type stub file was generated by pyright.
"""

from stone.backends.python_rsrc import stone_base as bb

"""
This namespace contains helpers for property and template metadata endpoints.

These endpoints enable you to tag arbitrary key/value data to Dropbox files.

The most basic unit in this namespace is the :class:`PropertyField`. These fields encapsulate the actual key/value data.

Fields are added to a Dropbox file using a :class:`PropertyGroup`. Property groups contain a reference to a Dropbox file and a :class:`PropertyGroupTemplate`. Property groups are uniquely identified by the combination of their associated Dropbox file and template.

The :class:`PropertyGroupTemplate` is a way of restricting the possible key names and value types of the data within a property group. The possible key names and value types are explicitly enumerated using :class:`PropertyFieldTemplate` objects.

You can think of a property group template as a class definition for a particular key/value metadata object, and the property groups themselves as the instantiations of these objects.

Templates are owned either by a user/app pair or team/app pair. Templates and their associated properties can't be accessed by any app other than the app that created them, and even then, only when the app is linked with the owner of the template (either a user or team).

User-owned templates are accessed via the user-auth file_properties/templates/*_for_user endpoints, while team-owned templates are accessed via the team-auth file_properties/templates/*_for_team endpoints. Properties associated with either type of template can be accessed via the user-auth properties/* endpoints.

Finally, properties can be accessed from a number of endpoints that return metadata, including `files/get_metadata`, and `files/list_folder`. Properties can also be added during upload, using `files/upload`.
"""
class AddPropertiesArg(bb.Struct):
    """
    :ivar file_properties.AddPropertiesArg.path: A unique identifier for the
        file or folder.
    :ivar file_properties.AddPropertiesArg.property_groups: The property groups
        which are to be added to a Dropbox file. No two groups in the input
        should  refer to the same template.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, path=..., property_groups=...) -> None:
        ...
    
    path = ...
    property_groups = ...


AddPropertiesArg_validator = ...
class TemplateError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar str file_properties.TemplateError.template_not_found: Template does
        not exist for the given identifier.
    :ivar file_properties.TemplateError.restricted_content: You do not have
        permission to modify this template.
    """
    _catch_all = ...
    restricted_content = ...
    other = ...
    @classmethod
    def template_not_found(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``template_not_found`` tag
        with value ``val``.

        :param str val:
        :rtype: TemplateError
        """
        ...
    
    def is_template_not_found(self):
        """
        Check if the union tag is ``template_not_found``.

        :rtype: bool
        """
        ...
    
    def is_restricted_content(self):
        """
        Check if the union tag is ``restricted_content``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_template_not_found(self): # -> None:
        """
        Template does not exist for the given identifier.

        Only call this if :meth:`is_template_not_found` is true.

        :rtype: str
        """
        ...
    


TemplateError_validator = ...
class PropertiesError(TemplateError):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.PropertiesError.unsupported_folder: This folder cannot
        be tagged. Tagging folders is not supported for team-owned templates.
    """
    unsupported_folder = ...
    @classmethod
    def path(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``path`` tag with value
        ``val``.

        :param LookupError val:
        :rtype: PropertiesError
        """
        ...
    
    def is_path(self):
        """
        Check if the union tag is ``path``.

        :rtype: bool
        """
        ...
    
    def is_unsupported_folder(self):
        """
        Check if the union tag is ``unsupported_folder``.

        :rtype: bool
        """
        ...
    
    def get_path(self): # -> None:
        """
        Only call this if :meth:`is_path` is true.

        :rtype: LookupError
        """
        ...
    


PropertiesError_validator = ...
class InvalidPropertyGroupError(PropertiesError):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.InvalidPropertyGroupError.property_field_too_large:
        One or more of the supplied property field values is too large.
    :ivar file_properties.InvalidPropertyGroupError.does_not_fit_template: One
        or more of the supplied property fields does not conform to the template
        specifications.
    :ivar file_properties.InvalidPropertyGroupError.duplicate_property_groups:
        There are 2 or more property groups referring to the same templates in
        the input.
    """
    property_field_too_large = ...
    does_not_fit_template = ...
    duplicate_property_groups = ...
    def is_property_field_too_large(self):
        """
        Check if the union tag is ``property_field_too_large``.

        :rtype: bool
        """
        ...
    
    def is_does_not_fit_template(self):
        """
        Check if the union tag is ``does_not_fit_template``.

        :rtype: bool
        """
        ...
    
    def is_duplicate_property_groups(self):
        """
        Check if the union tag is ``duplicate_property_groups``.

        :rtype: bool
        """
        ...
    


InvalidPropertyGroupError_validator = ...
class AddPropertiesError(InvalidPropertyGroupError):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.AddPropertiesError.property_group_already_exists: A
        property group associated with this template and file already exists.
    """
    property_group_already_exists = ...
    def is_property_group_already_exists(self):
        """
        Check if the union tag is ``property_group_already_exists``.

        :rtype: bool
        """
        ...
    


AddPropertiesError_validator = ...
class PropertyGroupTemplate(bb.Struct):
    """
    Defines how a property group may be structured.

    :ivar file_properties.PropertyGroupTemplate.name: Display name for the
        template. Template names can be up to 256 bytes.
    :ivar file_properties.PropertyGroupTemplate.description: Description for the
        template. Template descriptions can be up to 1024 bytes.
    :ivar file_properties.PropertyGroupTemplate.fields: Definitions of the
        property fields associated with this template. There can be up to 32
        properties in a single template.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, name=..., description=..., fields=...) -> None:
        ...
    
    name = ...
    description = ...
    fields = ...


PropertyGroupTemplate_validator = ...
class AddTemplateArg(PropertyGroupTemplate):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, name=..., description=..., fields=...) -> None:
        ...
    


AddTemplateArg_validator = ...
class AddTemplateResult(bb.Struct):
    """
    :ivar file_properties.AddTemplateResult.template_id: An identifier for
        template added by  See
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_user`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_team`.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_id=...) -> None:
        ...
    
    template_id = ...


AddTemplateResult_validator = ...
class GetTemplateArg(bb.Struct):
    """
    :ivar file_properties.GetTemplateArg.template_id: An identifier for template
        added by route  See
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_user`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_team`.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_id=...) -> None:
        ...
    
    template_id = ...


GetTemplateArg_validator = ...
class GetTemplateResult(PropertyGroupTemplate):
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, name=..., description=..., fields=...) -> None:
        ...
    


GetTemplateResult_validator = ...
class ListTemplateResult(bb.Struct):
    """
    :ivar file_properties.ListTemplateResult.template_ids: List of identifiers
        for templates added by  See
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_user`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_team`.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_ids=...) -> None:
        ...
    
    template_ids = ...


ListTemplateResult_validator = ...
class LogicalOperator(bb.Union):
    """
    Logical operator to join search queries together.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.LogicalOperator.or_operator: Append a query with an
        "or" operator.
    """
    _catch_all = ...
    or_operator = ...
    other = ...
    def is_or_operator(self):
        """
        Check if the union tag is ``or_operator``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


LogicalOperator_validator = ...
class LookUpPropertiesError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.LookUpPropertiesError.property_group_not_found: No
        property group was found.
    """
    _catch_all = ...
    property_group_not_found = ...
    other = ...
    def is_property_group_not_found(self):
        """
        Check if the union tag is ``property_group_not_found``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


LookUpPropertiesError_validator = ...
class LookupError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.LookupError.not_found: There is nothing at the given
        path.
    :ivar file_properties.LookupError.not_file: We were expecting a file, but
        the given path refers to something that isn't a file.
    :ivar file_properties.LookupError.not_folder: We were expecting a folder,
        but the given path refers to something that isn't a folder.
    :ivar file_properties.LookupError.restricted_content: The file cannot be
        transferred because the content is restricted. For example, we might
        restrict a file due to legal requirements.
    """
    _catch_all = ...
    not_found = ...
    not_file = ...
    not_folder = ...
    restricted_content = ...
    other = ...
    @classmethod
    def malformed_path(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``malformed_path`` tag with
        value ``val``.

        :param str val:
        :rtype: LookupError
        """
        ...
    
    def is_malformed_path(self):
        """
        Check if the union tag is ``malformed_path``.

        :rtype: bool
        """
        ...
    
    def is_not_found(self):
        """
        Check if the union tag is ``not_found``.

        :rtype: bool
        """
        ...
    
    def is_not_file(self):
        """
        Check if the union tag is ``not_file``.

        :rtype: bool
        """
        ...
    
    def is_not_folder(self):
        """
        Check if the union tag is ``not_folder``.

        :rtype: bool
        """
        ...
    
    def is_restricted_content(self):
        """
        Check if the union tag is ``restricted_content``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_malformed_path(self): # -> None:
        """
        Only call this if :meth:`is_malformed_path` is true.

        :rtype: str
        """
        ...
    


LookupError_validator = ...
class ModifyTemplateError(TemplateError):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.ModifyTemplateError.conflicting_property_names: A
        property field key with that name already exists in the template.
    :ivar file_properties.ModifyTemplateError.too_many_properties: There are too
        many properties in the changed template. The maximum number of
        properties per template is 32.
    :ivar file_properties.ModifyTemplateError.too_many_templates: There are too
        many templates for the team.
    :ivar file_properties.ModifyTemplateError.template_attribute_too_large: The
        template name, description or one or more of the property field keys is
        too large.
    """
    conflicting_property_names = ...
    too_many_properties = ...
    too_many_templates = ...
    template_attribute_too_large = ...
    def is_conflicting_property_names(self):
        """
        Check if the union tag is ``conflicting_property_names``.

        :rtype: bool
        """
        ...
    
    def is_too_many_properties(self):
        """
        Check if the union tag is ``too_many_properties``.

        :rtype: bool
        """
        ...
    
    def is_too_many_templates(self):
        """
        Check if the union tag is ``too_many_templates``.

        :rtype: bool
        """
        ...
    
    def is_template_attribute_too_large(self):
        """
        Check if the union tag is ``template_attribute_too_large``.

        :rtype: bool
        """
        ...
    


ModifyTemplateError_validator = ...
class OverwritePropertyGroupArg(bb.Struct):
    """
    :ivar file_properties.OverwritePropertyGroupArg.path: A unique identifier
        for the file or folder.
    :ivar file_properties.OverwritePropertyGroupArg.property_groups: The
        property groups "snapshot" updates to force apply. No two groups in the
        input should  refer to the same template.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, path=..., property_groups=...) -> None:
        ...
    
    path = ...
    property_groups = ...


OverwritePropertyGroupArg_validator = ...
class PropertiesSearchArg(bb.Struct):
    """
    :ivar file_properties.PropertiesSearchArg.queries: Queries to search.
    :ivar file_properties.PropertiesSearchArg.template_filter: Filter results to
        contain only properties associated with these template IDs.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, queries=..., template_filter=...) -> None:
        ...
    
    queries = ...
    template_filter = ...


PropertiesSearchArg_validator = ...
class PropertiesSearchContinueArg(bb.Struct):
    """
    :ivar file_properties.PropertiesSearchContinueArg.cursor: The cursor
        returned by your last call to
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_properties_search`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_properties_search_continue`.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, cursor=...) -> None:
        ...
    
    cursor = ...


PropertiesSearchContinueArg_validator = ...
class PropertiesSearchContinueError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.PropertiesSearchContinueError.reset: Indicates that
        the cursor has been invalidated. Call
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_properties_search`
        to obtain a new cursor.
    """
    _catch_all = ...
    reset = ...
    other = ...
    def is_reset(self):
        """
        Check if the union tag is ``reset``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PropertiesSearchContinueError_validator = ...
class PropertiesSearchError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def property_group_lookup(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``property_group_lookup``
        tag with value ``val``.

        :param LookUpPropertiesError val:
        :rtype: PropertiesSearchError
        """
        ...
    
    def is_property_group_lookup(self):
        """
        Check if the union tag is ``property_group_lookup``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_property_group_lookup(self): # -> None:
        """
        Only call this if :meth:`is_property_group_lookup` is true.

        :rtype: LookUpPropertiesError
        """
        ...
    


PropertiesSearchError_validator = ...
class PropertiesSearchMatch(bb.Struct):
    """
    :ivar file_properties.PropertiesSearchMatch.id: The ID for the matched file
        or folder.
    :ivar file_properties.PropertiesSearchMatch.path: The path for the matched
        file or folder.
    :ivar file_properties.PropertiesSearchMatch.is_deleted: Whether the file or
        folder is deleted.
    :ivar file_properties.PropertiesSearchMatch.property_groups: List of custom
        property groups associated with the file.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, id=..., path=..., is_deleted=..., property_groups=...) -> None:
        ...
    
    id = ...
    path = ...
    is_deleted = ...
    property_groups = ...


PropertiesSearchMatch_validator = ...
class PropertiesSearchMode(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar str file_properties.PropertiesSearchMode.field_name: Search for a
        value associated with this field name.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def field_name(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``field_name`` tag with
        value ``val``.

        :param str val:
        :rtype: PropertiesSearchMode
        """
        ...
    
    def is_field_name(self):
        """
        Check if the union tag is ``field_name``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_field_name(self): # -> None:
        """
        Search for a value associated with this field name.

        Only call this if :meth:`is_field_name` is true.

        :rtype: str
        """
        ...
    


PropertiesSearchMode_validator = ...
class PropertiesSearchQuery(bb.Struct):
    """
    :ivar file_properties.PropertiesSearchQuery.query: The property field value
        for which to search across templates.
    :ivar file_properties.PropertiesSearchQuery.mode: The mode with which to
        perform the search.
    :ivar file_properties.PropertiesSearchQuery.logical_operator: The logical
        operator with which to append the query.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, query=..., mode=..., logical_operator=...) -> None:
        ...
    
    query = ...
    mode = ...
    logical_operator = ...


PropertiesSearchQuery_validator = ...
class PropertiesSearchResult(bb.Struct):
    """
    :ivar file_properties.PropertiesSearchResult.matches: A list (possibly
        empty) of matches for the query.
    :ivar file_properties.PropertiesSearchResult.cursor: Pass the cursor into
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_properties_search_continue`
        to continue to receive search results. Cursor will be null when there
        are no more results.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, matches=..., cursor=...) -> None:
        ...
    
    matches = ...
    cursor = ...


PropertiesSearchResult_validator = ...
class PropertyField(bb.Struct):
    """
    Raw key/value data to be associated with a Dropbox file. Property fields are
    added to Dropbox files as a :class:`PropertyGroup`.

    :ivar file_properties.PropertyField.name: Key of the property field
        associated with a file and template. Keys can be up to 256 bytes.
    :ivar file_properties.PropertyField.value: Value of the property field
        associated with a file and template. Values can be up to 1024 bytes.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, name=..., value=...) -> None:
        ...
    
    name = ...
    value = ...


PropertyField_validator = ...
class PropertyFieldTemplate(bb.Struct):
    """
    Defines how a single property field may be structured. Used exclusively by
    :class:`PropertyGroupTemplate`.

    :ivar file_properties.PropertyFieldTemplate.name: Key of the property field
        being described. Property field keys can be up to 256 bytes.
    :ivar file_properties.PropertyFieldTemplate.description: Description of the
        property field. Property field descriptions can be up to 1024 bytes.
    :ivar file_properties.PropertyFieldTemplate.type: Data type of the value of
        this property field. This type will be enforced upon property creation
        and modifications.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, name=..., description=..., type=...) -> None:
        ...
    
    name = ...
    description = ...
    type = ...


PropertyFieldTemplate_validator = ...
class PropertyGroup(bb.Struct):
    """
    A subset of the property fields described by the corresponding
    :class:`PropertyGroupTemplate`. Properties are always added to a Dropbox
    file as a :class:`PropertyGroup`. The possible key names and value types in
    this group are defined by the corresponding :class:`PropertyGroupTemplate`.

    :ivar file_properties.PropertyGroup.template_id: A unique identifier for the
        associated template.
    :ivar file_properties.PropertyGroup.fields: The actual properties associated
        with the template. There can be up to 32 property types per template.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_id=..., fields=...) -> None:
        ...
    
    template_id = ...
    fields = ...


PropertyGroup_validator = ...
class PropertyGroupUpdate(bb.Struct):
    """
    :ivar file_properties.PropertyGroupUpdate.template_id: A unique identifier
        for a property template.
    :ivar file_properties.PropertyGroupUpdate.add_or_update_fields: Property
        fields to update. If the property field already exists, it is updated.
        If the property field doesn't exist, the property group is added.
    :ivar file_properties.PropertyGroupUpdate.remove_fields: Property fields to
        remove (by name), provided they exist.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_id=..., add_or_update_fields=..., remove_fields=...) -> None:
        ...
    
    template_id = ...
    add_or_update_fields = ...
    remove_fields = ...


PropertyGroupUpdate_validator = ...
class PropertyType(bb.Union):
    """
    Data type of the given property field added.

    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.PropertyType.string: The associated property field
        will be of type string. Unicode is supported.
    """
    _catch_all = ...
    string = ...
    other = ...
    def is_string(self):
        """
        Check if the union tag is ``string``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


PropertyType_validator = ...
class RemovePropertiesArg(bb.Struct):
    """
    :ivar file_properties.RemovePropertiesArg.path: A unique identifier for the
        file or folder.
    :ivar file_properties.RemovePropertiesArg.property_template_ids: A list of
        identifiers for a template created by
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_user`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_team`.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, path=..., property_template_ids=...) -> None:
        ...
    
    path = ...
    property_template_ids = ...


RemovePropertiesArg_validator = ...
class RemovePropertiesError(PropertiesError):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    @classmethod
    def property_group_lookup(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``property_group_lookup``
        tag with value ``val``.

        :param LookUpPropertiesError val:
        :rtype: RemovePropertiesError
        """
        ...
    
    def is_property_group_lookup(self):
        """
        Check if the union tag is ``property_group_lookup``.

        :rtype: bool
        """
        ...
    
    def get_property_group_lookup(self): # -> None:
        """
        Only call this if :meth:`is_property_group_lookup` is true.

        :rtype: LookUpPropertiesError
        """
        ...
    


RemovePropertiesError_validator = ...
class RemoveTemplateArg(bb.Struct):
    """
    :ivar file_properties.RemoveTemplateArg.template_id: An identifier for a
        template created by
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_user`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_team`.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_id=...) -> None:
        ...
    
    template_id = ...


RemoveTemplateArg_validator = ...
class TemplateFilterBase(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar list of [str] file_properties.TemplateFilterBase.filter_some: Only
        templates with an ID in the supplied list will be returned (a subset of
        templates will be returned).
    """
    _catch_all = ...
    other = ...
    @classmethod
    def filter_some(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``filter_some`` tag with
        value ``val``.

        :param list of [str] val:
        :rtype: TemplateFilterBase
        """
        ...
    
    def is_filter_some(self):
        """
        Check if the union tag is ``filter_some``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_filter_some(self): # -> None:
        """
        Only templates with an ID in the supplied list will be returned (a
        subset of templates will be returned).

        Only call this if :meth:`is_filter_some` is true.

        :rtype: list of [str]
        """
        ...
    


TemplateFilterBase_validator = ...
class TemplateFilter(TemplateFilterBase):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.TemplateFilter.filter_none: No templates will be
        filtered from the result (all templates will be returned).
    """
    filter_none = ...
    def is_filter_none(self):
        """
        Check if the union tag is ``filter_none``.

        :rtype: bool
        """
        ...
    


TemplateFilter_validator = ...
class TemplateOwnerType(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar file_properties.TemplateOwnerType.user: Template will be associated
        with a user.
    :ivar file_properties.TemplateOwnerType.team: Template will be associated
        with a team.
    """
    _catch_all = ...
    user = ...
    team = ...
    other = ...
    def is_user(self):
        """
        Check if the union tag is ``user``.

        :rtype: bool
        """
        ...
    
    def is_team(self):
        """
        Check if the union tag is ``team``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


TemplateOwnerType_validator = ...
class UpdatePropertiesArg(bb.Struct):
    """
    :ivar file_properties.UpdatePropertiesArg.path: A unique identifier for the
        file or folder.
    :ivar file_properties.UpdatePropertiesArg.update_property_groups: The
        property groups "delta" updates to apply.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, path=..., update_property_groups=...) -> None:
        ...
    
    path = ...
    update_property_groups = ...


UpdatePropertiesArg_validator = ...
class UpdatePropertiesError(InvalidPropertyGroupError):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    @classmethod
    def property_group_lookup(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``property_group_lookup``
        tag with value ``val``.

        :param LookUpPropertiesError val:
        :rtype: UpdatePropertiesError
        """
        ...
    
    def is_property_group_lookup(self):
        """
        Check if the union tag is ``property_group_lookup``.

        :rtype: bool
        """
        ...
    
    def get_property_group_lookup(self): # -> None:
        """
        Only call this if :meth:`is_property_group_lookup` is true.

        :rtype: LookUpPropertiesError
        """
        ...
    


UpdatePropertiesError_validator = ...
class UpdateTemplateArg(bb.Struct):
    """
    :ivar file_properties.UpdateTemplateArg.template_id: An identifier for
        template added by  See
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_user`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_team`.
    :ivar file_properties.UpdateTemplateArg.name: A display name for the
        template. template names can be up to 256 bytes.
    :ivar file_properties.UpdateTemplateArg.description: Description for the new
        template. Template descriptions can be up to 1024 bytes.
    :ivar file_properties.UpdateTemplateArg.add_fields: Property field templates
        to be added to the group template. There can be up to 32 properties in a
        single template.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_id=..., name=..., description=..., add_fields=...) -> None:
        ...
    
    template_id = ...
    name = ...
    description = ...
    add_fields = ...


UpdateTemplateArg_validator = ...
class UpdateTemplateResult(bb.Struct):
    """
    :ivar file_properties.UpdateTemplateResult.template_id: An identifier for
        template added by route  See
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_user`
        or
        :meth:`dropbox.dropbox_client.Dropbox.file_properties_templates_add_for_team`.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, template_id=...) -> None:
        ...
    
    template_id = ...


UpdateTemplateResult_validator = ...
Id_validator = ...
PathOrId_validator = ...
PropertiesSearchCursor_validator = ...
TemplateId_validator = ...
properties_add = ...
properties_overwrite = ...
properties_remove = ...
properties_search = ...
properties_search_continue = ...
properties_update = ...
templates_add_for_team = ...
templates_add_for_user = ...
templates_get_for_team = ...
templates_get_for_user = ...
templates_list_for_team = ...
templates_list_for_user = ...
templates_remove_for_team = ...
templates_remove_for_user = ...
templates_update_for_team = ...
templates_update_for_user = ...
ROUTES = ...
