"""
This type stub file was generated by pyright.
"""

from stone.backends.python_rsrc import stone_base as bb

class DeleteManualContactsArg(bb.Struct):
    """
    :ivar contacts.DeleteManualContactsArg.email_addresses: List of manually
        added contacts to be deleted.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, email_addresses=...) -> None:
        ...
    
    email_addresses = ...


DeleteManualContactsArg_validator = ...
class DeleteManualContactsError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar list of [str] contacts.DeleteManualContactsError.contacts_not_found:
        Can't delete contacts from this list. Make sure the list only has
        manually added contacts. The deletion was cancelled.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def contacts_not_found(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``contacts_not_found`` tag
        with value ``val``.

        :param list of [str] val:
        :rtype: DeleteManualContactsError
        """
        ...
    
    def is_contacts_not_found(self):
        """
        Check if the union tag is ``contacts_not_found``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_contacts_not_found(self): # -> None:
        """
        Can't delete contacts from this list. Make sure the list only has
        manually added contacts. The deletion was cancelled.

        Only call this if :meth:`is_contacts_not_found` is true.

        :rtype: list of [str]
        """
        ...
    


DeleteManualContactsError_validator = ...
delete_manual_contacts = ...
delete_manual_contacts_batch = ...
ROUTES = ...
