"""
This type stub file was generated by pyright.
"""

from stone.backends.python_rsrc import stone_base as bb

class OpenIdError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.

    :ivar openid.OpenIdError.incorrect_openid_scopes: Missing openid claims for
        the associated access token.
    """
    _catch_all = ...
    incorrect_openid_scopes = ...
    other = ...
    def is_incorrect_openid_scopes(self):
        """
        Check if the union tag is ``incorrect_openid_scopes``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    


OpenIdError_validator = ...
class UserInfoArgs(bb.Struct):
    """
    No Parameters
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self) -> None:
        ...
    


UserInfoArgs_validator = ...
class UserInfoError(bb.Union):
    """
    This class acts as a tagged union. Only one of the ``is_*`` methods will
    return true. To get the associated value of a tag (if one exists), use the
    corresponding ``get_*`` method.
    """
    _catch_all = ...
    other = ...
    @classmethod
    def openid_error(cls, val): # -> Self:
        """
        Create an instance of this class set to the ``openid_error`` tag with
        value ``val``.

        :param OpenIdError val:
        :rtype: UserInfoError
        """
        ...
    
    def is_openid_error(self):
        """
        Check if the union tag is ``openid_error``.

        :rtype: bool
        """
        ...
    
    def is_other(self):
        """
        Check if the union tag is ``other``.

        :rtype: bool
        """
        ...
    
    def get_openid_error(self): # -> None:
        """
        Only call this if :meth:`is_openid_error` is true.

        :rtype: OpenIdError
        """
        ...
    


UserInfoError_validator = ...
class UserInfoResult(bb.Struct):
    """
    :ivar openid.UserInfoResult.family_name: Last name of user.
    :ivar openid.UserInfoResult.given_name: First name of user.
    :ivar openid.UserInfoResult.email: Email address of user.
    :ivar openid.UserInfoResult.email_verified: If user is email verified.
    :ivar openid.UserInfoResult.iss: Issuer of token (in this case Dropbox).
    :ivar openid.UserInfoResult.sub: An identifier for the user. This is the
        Dropbox account_id, a string value such as
        dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc.
    """
    __slots__ = ...
    _has_required_fields = ...
    def __init__(self, family_name=..., given_name=..., email=..., email_verified=..., iss=..., sub=...) -> None:
        ...
    
    family_name = ...
    given_name = ...
    email = ...
    email_verified = ...
    iss = ...
    sub = ...


UserInfoResult_validator = ...
userinfo = ...
ROUTES = ...
