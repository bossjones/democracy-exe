"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Any, AsyncIterator, Iterator, Optional, Sequence, Union
from langchain_core.runnables import Runnable, RunnableConfig
from langchain_core.runnables.graph import Graph as DrawableGraph
from typing_extensions import Self
from langgraph.pregel.types import All, StateSnapshot, StreamMode

class PregelProtocol(Runnable[Union[dict[str, Any], Any], Union[dict[str, Any], Any]], ABC):
    @abstractmethod
    def with_config(self, config: Optional[RunnableConfig] = ..., **kwargs: Any) -> Self:
        ...
    
    @abstractmethod
    def get_graph(self, config: Optional[RunnableConfig] = ..., *, xray: Union[int, bool] = ...) -> DrawableGraph:
        ...
    
    @abstractmethod
    async def aget_graph(self, config: Optional[RunnableConfig] = ..., *, xray: Union[int, bool] = ...) -> DrawableGraph:
        ...
    
    @abstractmethod
    def get_state(self, config: RunnableConfig, *, subgraphs: bool = ...) -> StateSnapshot:
        ...
    
    @abstractmethod
    async def aget_state(self, config: RunnableConfig, *, subgraphs: bool = ...) -> StateSnapshot:
        ...
    
    @abstractmethod
    def get_state_history(self, config: RunnableConfig, *, filter: Optional[dict[str, Any]] = ..., before: Optional[RunnableConfig] = ..., limit: Optional[int] = ...) -> Iterator[StateSnapshot]:
        ...
    
    @abstractmethod
    def aget_state_history(self, config: RunnableConfig, *, filter: Optional[dict[str, Any]] = ..., before: Optional[RunnableConfig] = ..., limit: Optional[int] = ...) -> AsyncIterator[StateSnapshot]:
        ...
    
    @abstractmethod
    def update_state(self, config: RunnableConfig, values: Optional[Union[dict[str, Any], Any]], as_node: Optional[str] = ...) -> RunnableConfig:
        ...
    
    @abstractmethod
    async def aupdate_state(self, config: RunnableConfig, values: Optional[Union[dict[str, Any], Any]], as_node: Optional[str] = ...) -> RunnableConfig:
        ...
    
    @abstractmethod
    def stream(self, input: Union[dict[str, Any], Any], config: Optional[RunnableConfig] = ..., *, stream_mode: Optional[Union[StreamMode, list[StreamMode]]] = ..., interrupt_before: Optional[Union[All, Sequence[str]]] = ..., interrupt_after: Optional[Union[All, Sequence[str]]] = ..., subgraphs: bool = ...) -> Iterator[Union[dict[str, Any], Any]]:
        ...
    
    @abstractmethod
    def astream(self, input: Union[dict[str, Any], Any], config: Optional[RunnableConfig] = ..., *, stream_mode: Optional[Union[StreamMode, list[StreamMode]]] = ..., interrupt_before: Optional[Union[All, Sequence[str]]] = ..., interrupt_after: Optional[Union[All, Sequence[str]]] = ..., subgraphs: bool = ...) -> AsyncIterator[Union[dict[str, Any], Any]]:
        ...
    
    @abstractmethod
    def invoke(self, input: Union[dict[str, Any], Any], config: Optional[RunnableConfig] = ..., *, interrupt_before: Optional[Union[All, Sequence[str]]] = ..., interrupt_after: Optional[Union[All, Sequence[str]]] = ...) -> Union[dict[str, Any], Any]:
        ...
    
    @abstractmethod
    async def ainvoke(self, input: Union[dict[str, Any], Any], config: Optional[RunnableConfig] = ..., *, interrupt_before: Optional[Union[All, Sequence[str]]] = ..., interrupt_after: Optional[Union[All, Sequence[str]]] = ...) -> Union[dict[str, Any], Any]:
        ...
    


