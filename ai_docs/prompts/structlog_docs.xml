<documents>
<document index="1">
<source>/Users/malcolm/dev/structlog/docs/Makefile</source>
<document_content>
# Makefile for Sphinx documentation
#

# You can set these variables from the command line.
SPHINXOPTS    =
SPHINXBUILD   = sphinx-build
PAPER         =
BUILDDIR      = _build

# Internal variables.
PAPEROPT_a4     = -D latex_paper_size=a4
PAPEROPT_letter = -D latex_paper_size=letter
ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
# the i18n builder cannot share the environment and doctrees with the others
I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .

.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext

help:
	@echo "Please use \`make <target>' where <target> is one of"
	@echo "  html       to make standalone HTML files"
	@echo "  dirhtml    to make HTML files named index.html in directories"
	@echo "  singlehtml to make a single large HTML file"
	@echo "  pickle     to make pickle files"
	@echo "  json       to make JSON files"
	@echo "  htmlhelp   to make HTML files and a HTML help project"
	@echo "  qthelp     to make HTML files and a qthelp project"
	@echo "  devhelp    to make HTML files and a Devhelp project"
	@echo "  epub       to make an epub"
	@echo "  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
	@echo "  latexpdf   to make LaTeX files and run them through pdflatex"
	@echo "  text       to make text files"
	@echo "  man        to make manual pages"
	@echo "  texinfo    to make Texinfo files"
	@echo "  info       to make Texinfo files and run them through makeinfo"
	@echo "  gettext    to make PO message catalogs"
	@echo "  changes    to make an overview of all changed/added/deprecated items"
	@echo "  linkcheck  to check all external links for integrity"
	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"

clean:
	-rm -rf $(BUILDDIR)/*

html:
	$(SPHINXBUILD) -n -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
	@echo
	@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."

dirhtml:
	$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml
	@echo
	@echo "Build finished. The HTML pages are in $(BUILDDIR)/dirhtml."

singlehtml:
	$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml
	@echo
	@echo "Build finished. The HTML page is in $(BUILDDIR)/singlehtml."

pickle:
	$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle
	@echo
	@echo "Build finished; now you can process the pickle files."

json:
	$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json
	@echo
	@echo "Build finished; now you can process the JSON files."

htmlhelp:
	$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp
	@echo
	@echo "Build finished; now you can run HTML Help Workshop with the" \
	      ".hhp project file in $(BUILDDIR)/htmlhelp."

qthelp:
	$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp
	@echo
	@echo "Build finished; now you can run "qcollectiongenerator" with the" \
	      ".qhcp project file in $(BUILDDIR)/qthelp, like this:"
	@echo "# qcollectiongenerator $(BUILDDIR)/qthelp/structlog.qhcp"
	@echo "To view the help file:"
	@echo "# assistant -collectionFile $(BUILDDIR)/qthelp/structlog.qhc"

devhelp:
	$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp
	@echo
	@echo "Build finished."
	@echo "To view the help file:"
	@echo "# mkdir -p $$HOME/.local/share/devhelp/structlog"
	@echo "# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/structlog"
	@echo "# devhelp"

epub:
	$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub
	@echo
	@echo "Build finished. The epub file is in $(BUILDDIR)/epub."

latex:
	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
	@echo
	@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."
	@echo "Run \`make' in that directory to run these through (pdf)latex" \
	      "(use \`make latexpdf' here to do that automatically)."

latexpdf:
	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
	@echo "Running LaTeX files through pdflatex..."
	$(MAKE) -C $(BUILDDIR)/latex all-pdf
	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."

text:
	$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text
	@echo
	@echo "Build finished. The text files are in $(BUILDDIR)/text."

man:
	$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man
	@echo
	@echo "Build finished. The manual pages are in $(BUILDDIR)/man."

texinfo:
	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
	@echo
	@echo "Build finished. The Texinfo files are in $(BUILDDIR)/texinfo."
	@echo "Run \`make' in that directory to run these through makeinfo" \
	      "(use \`make info' here to do that automatically)."

info:
	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
	@echo "Running Texinfo files through makeinfo..."
	make -C $(BUILDDIR)/texinfo info
	@echo "makeinfo finished; the Info files are in $(BUILDDIR)/texinfo."

gettext:
	$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale
	@echo
	@echo "Build finished. The message catalogs are in $(BUILDDIR)/locale."

changes:
	$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes
	@echo
	@echo "The overview file is in $(BUILDDIR)/changes."

linkcheck:
	$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck
	@echo
	@echo "Link check complete; look for any errors in the above output " \
	      "or in $(BUILDDIR)/linkcheck/output.txt."

doctest:
	$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest
	@echo "Testing of doctests in the sources finished, look at the " \
	      "results in $(BUILDDIR)/doctest/output.txt."

</document_content>
</document>
<document index="2">
<source>/Users/malcolm/dev/structlog/docs/api.rst</source>
<document_content>
.. _api:

API Reference
=============

.. note::
   The examples here use a very simplified configuration using the minimalist `structlog.processors.KeyValueRenderer` for brevity and to enable doctests.
   The output is going to be different (nicer!) with the default configuration.


.. testsetup:: *

   import structlog
   structlog.configure(
       processors=[structlog.processors.KeyValueRenderer()],
   )

.. testcleanup:: *

   import structlog
   structlog.reset_defaults()


.. module:: structlog

`structlog` Package
-------------------

.. autofunction:: get_logger

.. autofunction:: getLogger

.. autofunction:: wrap_logger

.. autofunction:: configure

.. autofunction:: configure_once

.. autofunction:: reset_defaults

.. autofunction:: is_configured

.. autofunction:: get_config

.. autoclass:: BoundLogger
   :members: new, bind, unbind

.. autofunction:: make_filtering_bound_logger

.. autofunction:: get_context

.. autoclass:: PrintLogger
   :members: msg, err, debug, info, warning, error, critical, log, failure, fatal

.. autoclass:: PrintLoggerFactory

.. autoclass:: WriteLogger
   :members: msg, err, debug, info, warning, error, critical, log, failure, fatal

.. autoclass:: WriteLoggerFactory

.. autoclass:: BytesLogger
   :members: msg, err, debug, info, warning, error, critical, log, failure, fatal

.. autoclass:: BytesLoggerFactory

.. autoexception:: DropEvent

.. autoclass:: BoundLoggerBase
   :members: new, bind, unbind, try_unbind, _logger, _process_event, _proxy_to_logger


`structlog.dev` Module
----------------------

.. automodule:: structlog.dev

.. autoclass:: ConsoleRenderer
   :members: get_default_level_styles

.. autoclass:: Column
.. autoclass:: ColumnFormatter(typing.Protocol)
   :members: __call__
.. autoclass:: KeyValueColumnFormatter
.. autoclass:: LogLevelColumnFormatter

.. autofunction:: plain_traceback
.. autoclass:: RichTracebackFormatter
.. autofunction:: rich_traceback
.. autofunction:: better_traceback

.. autofunction:: set_exc_info


`structlog.testing` Module
--------------------------

.. automodule:: structlog.testing

.. autofunction:: capture_logs
.. autoclass:: LogCapture

.. autoclass:: CapturingLogger

   >>> from pprint import pprint
   >>> cl = structlog.testing.CapturingLogger()
   >>> cl.info("hello")
   >>> cl.info("hello", when="again")
   >>> pprint(cl.calls)
   [CapturedCall(method_name='info', args=('hello',), kwargs={}),
    CapturedCall(method_name='info', args=('hello',), kwargs={'when': 'again'})]

.. autoclass:: CapturingLoggerFactory
.. autoclass:: CapturedCall

.. autoclass:: ReturnLogger
   :members: msg, err, debug, info, warning, error, critical, log, failure, fatal

.. autoclass:: ReturnLoggerFactory


`structlog.contextvars` Module
------------------------------

.. automodule:: structlog.contextvars

.. autofunction:: bind_contextvars
.. autofunction:: bound_contextvars
.. autofunction:: get_contextvars
.. autofunction:: get_merged_contextvars
.. autofunction:: merge_contextvars
.. autofunction:: clear_contextvars
.. autofunction:: unbind_contextvars
.. autofunction:: reset_contextvars

`structlog.threadlocal` Module
------------------------------

.. automodule:: structlog.threadlocal
   :noindex:


.. _procs:

`structlog.processors` Module
-----------------------------

.. automodule:: structlog.processors

.. autoclass:: JSONRenderer

   .. doctest::

      >>> from structlog.processors import JSONRenderer
      >>> JSONRenderer(sort_keys=True)(None, None, {"a": 42, "b": [1, 2, 3]})
      '{"a": 42, "b": [1, 2, 3]}'

   Bound objects are attempted to be serialize using a ``__structlog__`` method.
   If none is defined, ``repr()`` is used:

   .. doctest::

      >>> class C1:
      ...     def __structlog__(self):
      ...         return ["C1!"]
      ...     def __repr__(self):
      ...         return "__structlog__ took precedence"
      >>> class C2:
      ...     def __repr__(self):
      ...         return "No __structlog__, so this is used."
      >>> from structlog.processors import JSONRenderer
      >>> JSONRenderer(sort_keys=True)(None, None, {"c1": C1(), "c2": C2()})
      '{"c1": ["C1!"], "c2": "No __structlog__, so this is used."}'

   Please note that additionally to strings, you can also return any type the standard library JSON module knows about -- like in this example a list.

   If you choose to pass a *default* parameter as part of *dumps_kw*, support for ``__structlog__`` is disabled.
   That can be useful with more elegant serialization methods like `functools.singledispatch`: `Better Python Object Serialization <https://hynek.me/articles/serialization/>`_.
   It can also be helpful if you are using *orjson* and want to rely on it to serialize `datetime.datetime` and other objects natively.

   .. tip::

      If you use this processor, you may also wish to add structured tracebacks for exceptions.
      You can do this by adding the :class:`~structlog.processors.dict_tracebacks` to your list of processors:

      .. doctest::

         >>> structlog.configure(
         ...     processors=[
         ...         structlog.processors.dict_tracebacks,
         ...         structlog.processors.JSONRenderer(),
         ...     ],
         ... )
         >>> log = structlog.get_logger()
         >>> var = "spam"
         >>> try:
         ...     1 / 0
         ... except ZeroDivisionError:
         ...     log.exception("Cannot compute!")
         {"event": "Cannot compute!", "exception": [{"exc_type": "ZeroDivisionError", "exc_value": "division by zero", "syntax_error": null, "is_cause": false, "frames": [{"filename": "<doctest default[3]>", "lineno": 2, "name": "<module>", "locals": {..., "var": "'spam'"}}]}]}

.. autoclass:: KeyValueRenderer

   .. doctest::

      >>> from structlog.processors import KeyValueRenderer
      >>> KeyValueRenderer(sort_keys=True)(None, None, {"a": 42, "b": [1, 2, 3]})
      'a=42 b=[1, 2, 3]'
      >>> KeyValueRenderer(key_order=["b", "a"])(None, None,
      ...                                       {"a": 42, "b": [1, 2, 3]})
      'b=[1, 2, 3] a=42'

.. autoclass:: LogfmtRenderer

   .. doctest::

      >>> from structlog.processors import LogfmtRenderer
      >>> event_dict = {"a": 42, "b": [1, 2, 3], "flag": True}
      >>> LogfmtRenderer(sort_keys=True)(None, None, event_dict)
      'a=42 b="[1, 2, 3]" flag'
      >>> LogfmtRenderer(key_order=["b", "a"], bool_as_flag=False)(None, None, event_dict)
      'b="[1, 2, 3]" a=42 flag=true'

.. autoclass:: EventRenamer

.. autofunction:: add_log_level

.. autoclass:: UnicodeDecoder

.. autoclass:: UnicodeEncoder

.. autoclass:: ExceptionRenderer

.. autofunction:: format_exc_info

   .. doctest::

      >>> from structlog.processors import format_exc_info
      >>> try:
      ...     raise ValueError
      ... except ValueError:
      ...     format_exc_info(None, None, {"exc_info": True})  # doctest: +ELLIPSIS
      {'exception': 'Traceback (most recent call last):...

.. autofunction:: dict_tracebacks

   .. doctest::

      >>> from structlog.processors import dict_tracebacks
      >>> try:
      ...     raise ValueError("onoes")
      ... except ValueError:
      ...     dict_tracebacks(None, None, {"exc_info": True})  # doctest: +ELLIPSIS
      {'exception': [{'exc_type': 'ValueError', 'exc_value': 'onoes', ..., 'frames': [{'filename': ...

.. autoclass:: StackInfoRenderer

.. autoclass:: ExceptionPrettyPrinter

.. autoclass:: TimeStamper

   .. doctest::

      >>> from structlog.processors import TimeStamper
      >>> TimeStamper()(None, None, {})  # doctest: +SKIP
      {'timestamp': 1378994017}
      >>> TimeStamper(fmt="iso")(None, None, {})  # doctest: +SKIP
      {'timestamp': '2013-09-12T13:54:26.996778Z'}
      >>> TimeStamper(fmt="%Y", key="year")(None, None, {})  # doctest: +SKIP
      {'year': '2013'}

.. autoclass:: MaybeTimeStamper

   .. doctest::

      >>> from structlog.processors import MaybeTimeStamper
      >>> MaybeTimeStamper()(None, None, {})  # doctest: +SKIP
      {'timestamp': 1690036074.494428}
      >>> MaybeTimeStamper()(None, None, {"timestamp": 42})
      {'timestamp': 42}

.. autoclass:: CallsiteParameter
   :members:

.. autoclass:: CallsiteParameterAdder


`structlog.stdlib` Module
-------------------------

.. automodule:: structlog.stdlib

.. autofunction:: recreate_defaults

.. autofunction:: get_logger

.. autoclass:: BoundLogger
   :members: bind, unbind, try_unbind, new, debug, info, warning, warn, error, critical, exception, log, adebug, ainfo, awarning, aerror, acritical, aexception, alog

.. autoclass:: AsyncBoundLogger
   :members: sync_bl

.. autoclass:: LoggerFactory
   :members: __call__

.. autofunction:: render_to_log_kwargs

.. autofunction:: filter_by_level

.. autofunction:: add_log_level

.. autofunction:: add_log_level_number

.. autofunction:: add_logger_name

.. autofunction:: ExtraAdder

.. autoclass:: PositionalArgumentsFormatter

.. autoclass:: ProcessorFormatter
   :members: wrap_for_formatter, remove_processors_meta


`structlog.tracebacks` Module
-----------------------------

.. automodule:: structlog.tracebacks

.. autofunction:: extract
.. autoclass:: ExceptionDictTransformer
.. autoclass:: Trace
.. autoclass:: Stack
.. autoclass:: Frame
.. autoclass:: SyntaxError_


`structlog.typing` Module
-------------------------

.. automodule:: structlog.typing

.. autoclass:: BindableLogger

   Additionally to the methods listed below, bound loggers **must** have a ``__init__`` method with the following signature:

   .. method:: __init__(self, wrapped_logger: WrappedLogger, processors: Iterable[Processor], context: Context) -> None
      :noindex:

   Unfortunately it's impossible to define initializers using :pep:`544` Protocols.

   They currently also have to carry a `Context` as a ``_context`` attribute.

   .. note::

     Currently Sphinx has no support for Protocols, so please click ``[source]`` for this entry to see the full definition.

.. autoclass:: FilteringBoundLogger

   .. note::

     Currently Sphinx has no support for Protocols, so please click ``[source]`` for this entry to see the full definition.

.. autoclass:: ExceptionTransformer

   .. note::

     Currently Sphinx has no support for Protocols, so please click ``[source]`` for this entry to see the full definition.

.. autodata:: EventDict
.. autodata:: WrappedLogger
.. autodata:: Processor
.. autodata:: Context
.. autodata:: ExcInfo
.. autodata:: ExceptionRenderer


`structlog.twisted` Module
--------------------------

.. automodule:: structlog.twisted

.. autoclass:: BoundLogger
   :members: bind, unbind, new, msg, err

.. autoclass:: LoggerFactory
   :members: __call__

.. autoclass:: EventAdapter

.. autoclass:: JSONRenderer

.. autofunction:: plainJSONStdOutLogger

.. autofunction:: JSONLogObserverWrapper

.. autoclass:: PlainFileLogObserver

</document_content>
</document>
<document index="3">
<source>/Users/malcolm/dev/structlog/docs/bound-loggers.md</source>
<document_content>
# Bound Loggers

The centerpiece of *structlog* that you will interact with most is called a *bound logger*.

It's what you get back from {func}`structlog.get_logger()` and it's called a *bound logger* because you can *bind* key-value pairs to it.

As far as *structlog* is concerned, it consists of three parts:

```{image} _static/BoundLogger.svg
```

1. A *context dictionary* that you can *bind* key-value pairs to.
   This dictionary is *merged* into each log entry that is logged from *this logger specifically*.

   You can inspect a context of a *bound logger* by calling {func}`structlog.get_context()` on it.
2. A list of {doc}`processors <processors>` that are called on every log entry.
   Each processor receives the return value of its predecessor passed as an argument.

   This list is usually set using {doc}`configuration`.
3. And finally a *logger* that it's wrapping.
   This wrapped logger is responsible for the *output* of the log entry that has been returned by the last processor.
   This *can* be standard library's {class}`logging.Logger` like in the image above, but absolutely doesn't have to:
   By default it's *structlog*'s {class}`~structlog.PrintLogger`.

   This wrapped logger also is usually set using {doc}`configuration`.

:::{important}
Bound loggers themselves do *not* do any I/O themselves.

All they do is manage the *context* and proxy log calls to a *wrapped logger*.
:::


## Context

To manipulate the context dictionary, a *bound logger* can:

- Recreate itself with (optional) *additional* context data: {func}`~structlog.BoundLoggerBase.bind` and {func}`~structlog.BoundLoggerBase.new`.
- Recreate itself with *less* context data: {func}`~structlog.BoundLoggerBase.unbind` and {func}`~structlog.BoundLoggerBase.try_unbind`.

In any case, the original bound logger or its context are never mutated.
They always return a *copy* of the bound logger with a *new* context that reflects your changes.

This part of the API is defined in the {class}`typing.Protocol` called {class}`structlog.typing.BindableLogger`.
The protocol is marked {func}`typing.runtime_checkable` which means that you can check an object for being a *bound logger* using `isinstance(obj, structlog.typing.BindableLogger)`.


## Output

Finally, a *bound logger* also **indirectly** exposes the logging methods of the *wrapped logger*.
By default, that's a {class}`~structlog.typing.FilteringBoundLogger` that is wrapping a {class}`~structlog.PrintLogger`.
They both share the set of log methods that's present in the standard library: `debug()`, `info()`, `warning()`, `error()`, and `critical()`.

Whenever you call one of those methods on the *bound logger*, it will:

1. Make a copy of its context -- now it becomes the *event dictionary*,
2. Add the keyword arguments of the method call to the event dict.
3. Add a new key `event` with the value of the first positional argument of the method call to the event dict.
4. Run the processors successively on the event dict.
   Each processor receives the result of its predecessor.
5. Finally, it takes the result of the final processor and calls the method with the same name – that got called on the *bound logger* – on the wrapped logger.

   For flexibility, the final processor can return either a string[^str] that is passed directly as a positional parameter, or a tuple `(args, kwargs)` that are passed as `wrapped_logger.log_method(*args, **kwargs)`.

[^str]: {any}`str`, {any}`bytes`, or {any}`bytearray` to be exact.


### Step-by-Step Example

Assuming you've left the default configuration and have:

```python
import structlog

logger = structlog.get_logger()

log = logger.bind(foo="bar")
```

Now, `log` is a *bound logger* of type {class}`~structlog.typing.FilteringBoundLogger` (but in the default config there's no filtering).
`log`'s context is `{"foo": "bar"}` and its wrapped logger is a {class}`structlog.PrintLogger`.

If you call `log.info("Hello, %s!", "world", number=42)` now, the following happens:

1. `"world"` gets interpolated into `"Hello, %s!"`, making the event "Hello, world!"[^interpolation].
2. The *bound logger*'s context gets copied and the key-value pairs from the `info` call are added to it.
   It becomes an *event dict* and is `{"foo": "bar", "number": 42}` now.
3. The event from step 1 is added too.
   The *event dict* is `{"foo": "bar", "number": 42, "event": "Hello, world!"}` now.
4. The *event dict* is fed into the [processor chain](processors.md).
   In this case the processors add a timestamp and the log level name to the *event dict*.

   Before it hits the last processor, the *event dict* looks something like `{"foo": "bar", "number": 42, "event": "Hello, world!", "level": "info", "timestamp": "2022-10-13 16:29:27"}`.

   The last processor is {class}`structlog.dev.ConsoleRenderer` and renders the *event dict* into a colorful string[^json].
5. Finally, the *wrapped logger*'s (a {class}`~structlog.PrintLogger`) `info()` method is called with that string.

[^json]: Until this very step, the *event dict* was a dictionary.
   By replacing the last processor, you decide on the **format** of your logs.
   For example, if you wanted JSON logs, you just have to replace the last processor with {class}`structlog.processors.JSONRenderer`.

[^interpolation]: String interpolation only takes place if you pass positional arguments.

(filtering)=

## Filtering by Log Levels

Filtering based on log levels can be done in a processor very easily[^stdlib], however that means unnecessary performance overhead through function calls.
We care a lot about performance and that's why *structlog*'s default *bound logger* class implements level-filtering as close to the users as possible: in the *bound logger*'s logging methods *before* even creating an *event dict* and starting the processor chain.

{func}`structlog.make_filtering_bound_logger` allows you to create a *bound logger* whose log methods with a log level beneath the configured one consist of a plain `return None`.

Here's an example:

```pycon
>>> import structlog
>>> logger = structlog.get_logger()
>>> logger.debug("hi!")
2022-10-15 11:39:03 [debug    ] hi!
>>> import logging
>>> structlog.configure(wrapper_class=structlog.make_filtering_bound_logger(logging.INFO))
>>> logger.debug("hi!")
# no output!
```

In this example, we first log out using the default logger that doesn't filter at all.
Then we change the configuration to filtering at the info level and try again:
no log output!

Let's have a look at the `debug` method:

```pycon
>>> import inspect
>>> print(inspect.getsource(logger.debug))
def _nop(self: Any, event: str, **kw: Any) -> Any:
    return None
```

This is as effective as it gets and usually as flexible as the vast majority of users need.

:::{important}
*structlog* uses the constants from {mod}`logging`, but does **not** share any code.
Passing `20` instead of `logging.INFO` would have worked too.
:::

[^stdlib]: And it's in fact supported for standard library logging with the {func}`structlog.stdlib.filter_by_level` processor.


## Wrapping Loggers Manually

In practice, you won't be instantiating bound loggers yourself.
You will configure *structlog* as explained in the {doc}`next chapter <configuration>` and then just call {func}`structlog.get_logger`.

However, in some rare cases you may not want to do that.
For example because you don't control how you get the logger that you would like to wrap (famous example: Celery).
For that times there is the {func}`structlog.wrap_logger` function that can be used to wrap a logger -- optionally without any global state (in other words, configuration):

(proc)=

```{doctest}
>>> import structlog
>>> class CustomPrintLogger:
...     def msg(self, message):
...         print(message)
>>> def proc(logger, method_name, event_dict):
...     print("I got called with", event_dict)
...     return repr(event_dict)
>>> log = structlog.wrap_logger(
...     CustomPrintLogger(),
...     wrapper_class=structlog.BoundLogger,
...     processors=[proc],
... )
>>> log2 = log.bind(x=42)
>>> log == log2
False
>>> log.msg("hello world")
I got called with {'event': 'hello world'}
{'event': 'hello world'}
>>> log2.msg("hello world")
I got called with {'x': 42, 'event': 'hello world'}
{'x': 42, 'event': 'hello world'}
>>> log3 = log2.unbind("x")
>>> log == log3
True
>>> log3.msg("nothing bound anymore", foo="but you can structure the event too")
I got called with {'foo': 'but you can structure the event too', 'event': 'nothing bound anymore'}
{'foo': 'but you can structure the event too', 'event': 'nothing bound anymore'}
```

</document_content>
</document>
<document index="4">
<source>/Users/malcolm/dev/structlog/docs/conf.py</source>
<document_content>
# SPDX-License-Identifier: MIT OR Apache-2.0
# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the MIT License.  See the LICENSE file in the root of this
# repository for complete details.

import os

from importlib import metadata


# Set canonical URL from the Read the Docs Domain
html_baseurl = os.environ.get("READTHEDOCS_CANONICAL_URL", "")

# Tell Jinja2 templates the build is running on Read the Docs
if os.environ.get("READTHEDOCS", "") == "True":
    html_context = {"READTHEDOCS": True}

# We want an image in the README and include the README in the docs.
suppress_warnings = ["image.nonlocal_uri"]


# -- General configuration ----------------------------------------------------

extensions = [
    "myst_parser",
    "notfound.extension",
    "sphinx.ext.autodoc",
    "sphinx.ext.autodoc.typehints",
    "sphinx.ext.napoleon",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
    "sphinxcontrib.mermaid",
    "sphinxext.opengraph",
]

myst_enable_extensions = [
    "colon_fence",
    "smartquotes",
    "deflist",
]
mermaid_init_js = "mermaid.initialize({startOnLoad:true,theme:'neutral'});"

ogp_image = "_static/structlog_logo.png"


# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix of source filenames.
source_suffix = [".rst", ".md"]

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "structlog"
author = "Hynek Schlawack"
copyright = f"2013, { author }"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

# The full version, including alpha/beta/rc tags.
release = metadata.version("structlog")
# The short X.Y version.
version = release.rsplit(".", 1)[0]

if "dev" in release:
    release = version = "UNRELEASED"

exclude_patterns = ["_build"]

# The reST default role (used for this markup: `text`) to use for all
# documents.
default_role = "any"

nitpick_ignore = [
    ("py:class", "Context"),
    ("py:class", "EventDict"),
    ("py:class", "ILogObserver"),
    ("py:class", "PlainFileObserver"),
    ("py:class", "Processor"),
    ("py:class", "Styles"),
    ("py:class", "WrappedLogger"),
    ("py:class", "structlog.threadlocal.TLLogger"),
    ("py:class", "structlog.typing.EventDict"),
    ("py:class", "ModuleType"),
]

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

# Move type hints into the description block, instead of the func definition.
autodoc_typehints = "description"
autodoc_typehints_description_target = "documented"

# -- Options for HTML output --------------------------------------------------

html_theme = "furo"
html_theme_options = {
    "top_of_page_buttons": [],
    "light_css_variables": {
        "font-stack": "Inter, sans-serif",
        "font-stack--monospace": "BerkeleyMono, MonoLisa, ui-monospace, "
        "SFMono-Regular, Menlo, Consolas, Liberation Mono, monospace",
    },
}
html_logo = "_static/structlog_logo.svg"
html_static_path = ["_static"]
html_css_files = ["custom.css"]

htmlhelp_basename = "structlogdoc"

latex_documents = [
    ("index", "structlog.tex", "structlog Documentation", "Author", "manual")
]

# -- Options for manual page output -------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [("index", "structlog", "structlog Documentation", ["Author"], 1)]


# -- Options for Texinfo output -----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        "index",
        "structlog",
        "structlog Documentation",
        "Author",
        "structlog",
        "One line description of project.",
        "Miscellaneous",
    )
]


# -- Options for Epub output --------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# GitHub has rate limits
linkcheck_ignore = [
    r"https://github.com/.*/(issues|pull|compare)/\d+",
    r"https://twitter.com/.*",
]

# Twisted's trac tends to be slow
linkcheck_timeout = 300

intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "rich": ("https://rich.readthedocs.io/en/stable/", None),
}

</document_content>
</document>
<document index="5">
<source>/Users/malcolm/dev/structlog/docs/configuration.md</source>
<document_content>
# Configuration

The focus of *structlog* has always been to be flexible to a fault.
The goal is that a user can use it with *any* logger of their own that is wrapped by *structlog*.

That's the reason why there's an overwhelming amount of knobs to tweak, but
– ideally – once you find your configuration, you don't touch it ever again and, more importantly:
don't see any of it in your application code.

---

Let's start at the end and introduce the ultimate convenience function that relies purely on configuration: {func}`structlog.get_logger`.

The goal is to reduce your per-file application logging boilerplate to:

```
import structlog

logger = structlog.get_logger()
```

To that end, you'll have to call {func}`structlog.configure` on app initialization.
You can call {func}`structlog.configure` repeatedly and only set one or more settings -- the rest will not be affected.

If necessary, you can always reset your global configuration back to default values using {func}`structlog.reset_defaults`.
That can be handy in tests.

At any time, you can check whether and how *structlog* is configured using {func}`structlog.is_configured` and {func}`structlog.get_config`}:

```pycon
>>> structlog.is_configured()
False
>>> structlog.configure(logger_factory=structlog.stdlib.LoggerFactory())
>>> structlog.is_configured()
True
>>> cfg = structlog.get_config()
>>> cfg["logger_factory"]
<class 'structlog.stdlib.LoggerFactory'>
```

:::{important}
Since you'll call {func}`structlog.get_logger` in module scope, it runs at import time *before* you had a chance to configure *structlog*.
Therefore it returns a **lazy proxy** that returns a correctly configured *bound logger* on its first call to one of the context-managing methods like `bind()`.

Thus, you must never call `new()` or `bind()` in module or class scope because , you will receive a logger configured with *structlog*'s default values.
Use {func}`~structlog.get_logger`'s `initial_values` to achieve pre-populated contexts.

To enable you to log with the module-global logger, it will create a temporary *bound logger* **on each call**.
Therefore if you have nothing to bind but intend to do lots of log calls in a function, it makes sense performance-wise to create a local logger by calling `bind()` or `new()` without any parameters.
See also {doc}`performance`.
:::


## What To Configure

You can find the details in the API documentation of {func}`structlog.configure`, but let's introduce the most important ones at a high level first.


### Wrapper Classes

You've met {doc}`bound-loggers` in the last chapter.
They're the objects returned by {func}`~structlog.get_logger` and allow to bind key-value pairs into their private context.
You can configure their type using the `wrapper_class` keyword.

Whenever you bind or unbind data to a *bound logger*, this class is instantiated with the new context and returned.


### Logger Factories

We've already talked about wrapped loggers responsible for the output, but we haven't explained where they come from until now.
Unlike with *bound loggers*, you often need more flexibility when instantiating them.
Therefore you don't configure a class; you configure a *factory* using the `logger_factory` keyword.

It's a callable that returns the logger that gets wrapped and returned.
In the simplest case, it's a function that returns a logger -- or just a class.
But you can also pass in an instance of a class with a `__call__` method for more complicated setups.

These will be passed to the logger factories.
For example, if you use `structlog.get_logger("a name")` and configure *structlog* to use the standard library {class}`~structlog.stdlib.LoggerFactory`, which has support for positional parameters, the returned logger will have the name `"a name"`.

For the common cases of standard library logging and Twisted logging, *structlog* comes with two factories built right in:

- {class}`structlog.stdlib.LoggerFactory`
- {class}`structlog.twisted.LoggerFactory`

So all it takes to use standard library {mod}`logging` for output is:

```
>>> from structlog import get_logger, configure
>>> from structlog.stdlib import LoggerFactory
>>> configure(logger_factory=LoggerFactory())
>>> log = get_logger()
>>> log.critical("this is too easy!")
event='this is too easy!'
```

By using *structlog*'s {class}`structlog.stdlib.LoggerFactory`, it is also ensured that variables like function names and line numbers are expanded correctly in your log format.
See {doc}`standard-library` for more details.

Calling {func}`structlog.get_logger` without configuration gives you a perfectly useful {class}`structlog.PrintLogger`.
We don't believe silent loggers are a sensible default.


### Processors

You will meet {doc}`processors` in the next chapter.
They are configured using the `processors` keyword that takes an {class}`~collections.abc.Iterable` of callables that act as processors.

</document_content>
</document>
<document index="6">
<source>/Users/malcolm/dev/structlog/docs/console-output.md</source>
<document_content>
# Console Output

To make development a more pleasurable experience, *structlog* comes with the {mod}`structlog.dev` module.

The highlight is {class}`structlog.dev.ConsoleRenderer` that offers nicely aligned and colorful[^win] console output.

[^win]: Requires the [Colorama package](https://pypi.org/project/colorama/) on Windows.

If either of the [Rich](https://rich.readthedocs.io/) or [*better-exceptions*](https://github.com/Qix-/better-exceptions) packages is installed, it will also pretty-print exceptions with helpful contextual data.
Rich takes precedence over *better-exceptions*, but you can configure it by passing {func}`structlog.dev.plain_traceback` or {func}`structlog.dev.better_traceback` for the `exception_formatter` parameter of {class}`~structlog.dev.ConsoleRenderer`.

The following output is rendered using Rich:

```{figure} _static/console_renderer.png
Colorful console output by ConsoleRenderer.
```

You can find the code for the output above [in the repo](https://github.com/hynek/structlog/blob/main/show_off.py).

To use it, just add it as a renderer to your processor chain.
It will recognize logger names, log levels, time stamps, stack infos, and `exc_info` as produced by *structlog*'s processors and render them in special ways.

:::{warning}
For pretty exceptions to work, {func}`~structlog.processors.format_exc_info` must be **absent** from the processors chain.
:::

*structlog*'s default configuration already uses {class}`~structlog.dev.ConsoleRenderer`, therefore if you want nice colorful output on the console, you don't have to do anything except installing Rich or *better-exceptions* (and Colorama on Windows).
If you want to use it along with standard library logging, there's the {func}`structlog.stdlib.recreate_defaults` helper.

:::{seealso}
{doc}`exceptions` for more information on how to configure exception rendering.
For the console and beyond.
:::

(columns-config)=

## Console Output Configuration

:::{versionadded} 23.3.0
:::

You can freely configure how the key-value pairs are formatted: colors, order, and how values are stringified.

For that {class}`~structlog.dev.ConsoleRenderer` accepts the *columns* parameter that takes a list of {class}`~structlog.dev.Column`s.
It allows you to assign a formatter to each key and a default formatter for the rest (by passing an empty key name).
The order of the column definitions is the order in which the columns are rendered;
the rest is -- depending on the *sort_keys* argument to {class}`~structlog.dev.ConsoleRenderer` -- either sorted alphabetically or in the order of the keys in the event dictionary.

You can use a column definition to drop a key-value pair from the output by returning an empty string from the formatter.

When the API talks about "styles", it means ANSI control strings.
You can find them, for example, in [Colorama](https://github.com/tartley/colorama).


It's best demonstrated by an example:

```python
import structlog
import colorama

cr = structlog.dev.ConsoleRenderer(
    columns=[
        # Render the timestamp without the key name in yellow.
        structlog.dev.Column(
            "timestamp",
            structlog.dev.KeyValueColumnFormatter(
                key_style=None,
                value_style=colorama.Fore.YELLOW,
                reset_style=colorama.Style.RESET_ALL,
                value_repr=str,
            ),
        ),
        # Render the event without the key name in bright magenta.
        structlog.dev.Column(
            "event",
            structlog.dev.KeyValueColumnFormatter(
                key_style=None,
                value_style=colorama.Style.BRIGHT + colorama.Fore.MAGENTA,
                reset_style=colorama.Style.RESET_ALL,
                value_repr=str,
            ),
        ),
        # Default formatter for all keys not explicitly mentioned. The key is
        # cyan, the value is green.
        structlog.dev.Column(
            "",
            structlog.dev.KeyValueColumnFormatter(
                key_style=colorama.Fore.CYAN,
                value_style=colorama.Fore.GREEN,
                reset_style=colorama.Style.RESET_ALL,
                value_repr=str,
            ),
        ),
    ]
)

structlog.configure(processors=structlog.get_config()["processors"][:-1]+[cr])
```

:::{hint}
You can replace only the last processor using:

```python
structlog.configure(processors=structlog.get_config()["processors"][:-1]+[cr])
```
:::


## Standard Environment Variables

*structlog*'s default configuration uses colors if standard out is a TTY (that is, an interactive session).

It's possible to override this behavior by setting two standard environment variables to any value except an empty string:

- `FORCE_COLOR` *activates* colors, regardless of where output is going.
- [`NO_COLOR`](https://no-color.org) *disables* colors, regardless of where the output is going and regardless the value of `FORCE_COLOR`.
  Please note that `NO_COLOR` disables _all_ styling, including bold and italics.


## Disabling Exception Pretty-Printing

If you prefer the default terse Exception rendering, but still want Rich installed, you can disable the pretty-printing by instantiating {class}`structlog.dev.ConsoleRenderer()` yourself and passing `exception_formatter=structlog.dev.plain_traceback`.

</document_content>
</document>
<document index="7">
<source>/Users/malcolm/dev/structlog/docs/contextvars.md</source>
<document_content>
(contextvars)=

# Context Variables

```{testsetup}
import structlog
```

```{testcleanup}
import structlog
structlog.reset_defaults()
```

The {mod}`contextvars` module in the Python standard library allows having a global *structlog* context that is local to the current execution context.
The execution context can be thread-local if using threads, stored in the {mod}`asyncio` event loop, or [*greenlet*](https://greenlet.readthedocs.io/) respectively.

For example, you may want to bind certain values like a request ID or the peer's IP address at the beginning of a web request and have them logged out along with the local contexts you build within our views.

For that *structlog* provides the {mod}`structlog.contextvars` module with a set of functions to bind variables to a context-local context.
This context is safe to be used both in threaded as well as asynchronous code.

:::{warning}
Since the storage mechanics of your context variables is different for each concurrency method, they are _isolated_ from each other.

This can be a problem in hybrid applications like those based on [*starlette*](https://www.starlette.io) (this [includes FastAPI](https://github.com/tiangolo/fastapi/discussions/5999)) where context variables set in a synchronous context don't appear in logs from an async context and vice versa.
:::

The general flow is:

- Use {func}`structlog.configure` with {func}`structlog.contextvars.merge_contextvars` as your first processor (part of default configuration).
- Call {func}`structlog.contextvars.clear_contextvars` at the beginning of your request handler (or whenever you want to reset the context-local context).
- Call {func}`structlog.contextvars.bind_contextvars` and {func}`structlog.contextvars.unbind_contextvars` instead of your bound logger's `bind()` and `unbind()` when you want to bind and unbind key-value pairs to the context-local context.
  You can also use the {func}`structlog.contextvars.bound_contextvars` context manager / decorator.
- Use *structlog* as normal.
  Loggers act as they always do, but the {func}`structlog.contextvars.merge_contextvars` processor ensures that any context-local binds get included in all of your log messages.
- If you want to access the context-local storage, you use {func}`structlog.contextvars.get_contextvars` and {func}`structlog.contextvars.get_merged_contextvars`.

We're sorry the word *context* means three different things in this itemization depending on ... context.

```{doctest}
>>> from structlog.contextvars import (
...     bind_contextvars,
...     bound_contextvars,
...     clear_contextvars,
...     merge_contextvars,
...     unbind_contextvars,
... )
>>> from structlog import configure
>>> configure(
...     processors=[
...         merge_contextvars,
...         structlog.processors.KeyValueRenderer(key_order=["event", "a"]),
...     ]
... )
>>> log = structlog.get_logger()
>>> # At the top of your request handler (or, ideally, some general
>>> # middleware), clear the contextvars-local context and bind some common
>>> # values:
>>> clear_contextvars()
>>> bind_contextvars(a=1, b=2)
{'a': <Token var=<ContextVar name='structlog_a' default=Ellipsis at ...> at ...>, 'b': <Token var=<ContextVar name='structlog_b' default=Ellipsis at ...> at ...>}
>>> # Then use loggers as per normal
>>> # (perhaps by using structlog.get_logger() to create them).
>>> log.info("hello")
event='hello' a=1 b=2
>>> # Use unbind_contextvars to remove a variable from the context.
>>> unbind_contextvars("b")
>>> log.info("world")
event='world' a=1
>>> # You can also bind key-value pairs temporarily.
>>> with bound_contextvars(b=2):
...    log.info("hi")
event='hi' a=1 b=2
>>> # Now it's gone again.
>>> log.info("hi")
event='hi' a=1
>>> # And when we clear the contextvars state again, it goes away.
>>> # a=None is printed due to the key_order argument passed to
>>> # KeyValueRenderer, but it is NOT present anymore.
>>> clear_contextvars()
>>> log.info("hi there")
event='hi there' a=None
```


## Support for `contextvars.Token`

If, for example, your request handler calls a helper function that needs to temporarily override some contextvars before restoring them back to their original values, you can use the {class}`~contextvars.Token`s returned by {func}`~structlog.contextvars.bind_contextvars` along with {func}`~structlog.contextvars.reset_contextvars` to accomplish this (much like how {meth}`contextvars.ContextVar.reset` works):

```python
def foo():
    bind_contextvars(a=1)
    _helper()
    log.info("a is restored!")  # a=1

def _helper():
    tokens = bind_contextvars(a=2)
    log.info("a is overridden")  # a=2
    reset_contextvars(**tokens)
```

(flask-example)=

## Example: Flask and Thread-Local Data

Let's assume you want to bind a unique request ID, the URL path, and the peer's IP to every log entry by storing it in thread-local storage that is managed by context variables:

```python
import logging
import sys
import uuid

import flask

from .some_module import some_function

import structlog

logger = structlog.get_logger()
app = flask.Flask(__name__)

@app.route("/login", methods=["POST", "GET"])
def some_route():
    # You would put this into some kind of middleware or processor so it's set
    # automatically for all requests in all views.
    structlog.contextvars.clear_contextvars()
    structlog.contextvars.bind_contextvars(
        view=flask.request.path,
        request_id=str(uuid.uuid4()),
        peer=flask.request.access_route[0],
    )
    # End of belongs-to-middleware.

    log = logger.bind()
    # do something
    # ...
    log.info("user logged in", user="test-user")
    # ...
    some_function()
    # ...
    return "logged in!"


if __name__ == "__main__":
    logging.basicConfig(
        format="%(message)s", stream=sys.stdout, level=logging.INFO
    )
    structlog.configure(
        processors=[
            structlog.contextvars.merge_contextvars,  # <--!!!
            structlog.processors.KeyValueRenderer(
                key_order=["event", "view", "peer"]
            ),
        ],
        logger_factory=structlog.stdlib.LoggerFactory(),
    )
    app.run()

```

`some_module.py`:

```python
from structlog import get_logger

logger = get_logger()

def some_function():
    # ...
    logger.error("user did something", something="shot_in_foot")
    # ...
```

This would result among other the following lines to be printed:

```text
event='user logged in' view='/login' peer='127.0.0.1' user='test-user' request_id='e08ddf0d-23a5-47ce-b20e-73ab8877d736'
event='user did something' view='/login' peer='127.0.0.1' something='shot_in_foot' request_id='e08ddf0d-23a5-47ce-b20e-73ab8877d736'
```

As you can see, `view`, `peer`, and `request_id` are present in **both** log entries.

</document_content>
</document>
<document index="8">
<source>/Users/malcolm/dev/structlog/docs/exceptions.md</source>
<document_content>
# Exceptions

While you should use a proper crash reporter like [Sentry](https://sentry.io) in production, *structlog* has helpers for formatting exceptions for humans and machines.

All *structlog*'s exception features center around passing an `exc_info` key-value pair in the event dict.
There are three possible behaviors depending on its value:

1. If the value is a tuple, render it as if it was returned by {func}`sys.exc_info`.
2. If the value is an Exception, render it.
3. If the value is true but no tuple, call {func}`sys.exc_info` and render that.

If there is no `exc_info` key or false, the event dict is not touched.
This behavior is analog to the one of the stdlib's logging.


## Transformations

*structlog* comes with {class}`structlog.processors.ExceptionRenderer` that deduces and removes the `exc_info` key as outlined above, calls a user-supplied function with the synthesized `exc_info`, and stores its return value in the `exception` key.
The most common use-cases are already covered by the following processors:

{func}`structlog.processors.format_exc_info`

: Formats it to a flat string like the standard library would on the console.

{obj}`structlog.processors.dict_tracebacks`

: Uses {class}`structlog.tracebacks.ExceptionDictTransformer` to give you a structured and JSON-serializable `exception` key.


## Console Rendering

Our {doc}`console-output`'s {class}`structlog.dev.ConsoleRenderer` takes an *exception_formatter* argument that allows for customizing the output of exceptions.

{func}`structlog.dev.plain_traceback`

: Is the default if neither [Rich] nor [*better-exceptions*] are installed.
  As the name suggests, it renders a plain traceback.

{func}`structlog.dev.better_traceback`

: Uses [*better-exceptions*] to render a colorful traceback.
: It's the default if *better-exceptions* is installed and Rich is not.

{class}`structlog.dev.RichTracebackFormatter`

: Uses [Rich] to render a colorful traceback.
  It's a class because it allows for customizing the output by passing arguments to Rich.
: It's the default if Rich is installed.

:::{seealso}
{doc}`console-output` for more information on *structlog*'s console features.
:::

[*better-exceptions*]: https://github.com/qix-/better-exceptions
[Rich]: https://github.com/Textualize/rich

</document_content>
</document>
<document index="9">
<source>/Users/malcolm/dev/structlog/docs/frameworks.md</source>
<document_content>
# Frameworks

To have consistent log output, it makes sense to configure *structlog* *before* any logging is done.
The best place to perform your configuration varies with applications and frameworks.
If you use standard library's {mod}`logging`, it makes sense to configure them next to each other.


## Celery

[Celery](https://docs.celeryq.dev/)'s multi-process architecture leads unavoidably to race conditions that show up as interleaved logs.
It ships standard library-based helpers in the form of [`celery.utils.log.get_task_logger()`](https://docs.celeryq.dev/en/stable/userguide/tasks.html#logging) that you should use inside of tasks to prevent that problem.

The most straight-forward way to integrate that with *structlog* is using {doc}`standard-library` and wrapping that logger using {func}`structlog.wrap_logger`:

```python
from celery.utils.log import get_task_logger

logger = structlog.wrap_logger(get_task_logger(__name__))
```

If you want to automatically bind task metadata to your {doc}`contextvars`, you can use [Celery's signals](https://docs.celeryq.dev/en/stable/userguide/signals.html):

```python
from celery import signals

@signals.task_prerun.connect
def on_task_prerun(sender, task_id, task, args, kwargs, **_):
    structlog.contextvars.bind_contextvars(task_id=task_id, task_name=task.name)
```

See [this issue](https://github.com/hynek/structlog/issues/287) for more details.


## Django

[*django-structlog*](https://pypi.org/project/django-structlog/) is a popular and well-maintained package that does all the heavy lifting.


## Flask

See Flask's [Logging docs](https://flask.palletsprojects.com/en/latest/logging/).

Generally speaking: configure *structlog* *before* instantiating `flask.Flask`.

Here's a [signal handler](https://flask.palletsprojects.com/en/latest/signals/) that binds various request details into [*context variables*](contextvars.md):

```python
def bind_request_details(sender: Flask, **extras: dict[str, Any]) -> None:
    structlog.contextvars.clear_contextvars()
    structlog.contextvars.bind_contextvars(
        request_id=request.headers.get("X-Unique-ID", "NONE"),
        peer=peer,
    )

    if current_user.is_authenticated:
        structlog.contextvars.bind_contextvars(
            user_id=current_user.get_id(),
        )
```

You add it to an existing `app` like this:

```python
from flask import request_started

request_started.connect(bind_request_details, app)
```


## Litestar

[Litestar](https://docs.litestar.dev/) comes with *structlog* support [out of the box](https://docs.litestar.dev/latest/usage/logging.html).


## OpenTelemetry

The [Python OpenTelemetry SDK](https://opentelemetry.io/docs/languages/python/) offers an easy API to get the current span, so you can enrich your logs with a straight-forward processor:

```python
from opentelemetry import trace

def add_open_telemetry_spans(_, __, event_dict):
    span = trace.get_current_span()
    if not span.is_recording():
        event_dict["span"] = None
        return event_dict

    ctx = span.get_span_context()
    parent = getattr(span, "parent", None)

    event_dict["span"] = {
        "span_id": hex(ctx.span_id),
        "trace_id": hex(ctx.trace_id),
        "parent_span_id": None if not parent else hex(parent.span_id),
    }

    return event_dict
```


## Pyramid

Configure it in the [application constructor](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/startup.html#the-startup-process).

Here's an example for a Pyramid [*tween*](https://docs.pylonsproject.org/projects/pyramid/en/latest/glossary.html#term-tween) that stores various request-specific data into [*context variables*](contextvars.md):

```python
@dataclass
class StructLogTween:
    handler: Callable[[Request], Response]
    registry: Registry

    def __call__(self, request: Request) -> Response:
        structlog.contextvars.clear_contextvars()
        structlog.contextvars.bind_contextvars(
            peer=request.client_addr,
            request_id=request.headers.get("X-Unique-ID", "NONE"),
            user_agent=request.environ.get("HTTP_USER_AGENT", "UNKNOWN"),
            user=request.authenticated_userid,
        )

        return self.handler(request)
```


## Twisted

The [plugin definition](https://docs.twisted.org/en/stable/core/howto/plugin.html) is the best place.
If your app is not a plugin, put it into your [tac file](https://docs.twisted.org/en/stable/core/howto/application.html).

</document_content>
</document>
<document index="10">
<source>/Users/malcolm/dev/structlog/docs/getting-started.md</source>
<document_content>
# Getting Started

(install)=

## Installation

You can install *structlog* from [PyPI](https://pypi.org/project/structlog/) using *pip*:

```console
$ python -m pip install structlog
```

If you want pretty exceptions in development (you know you do!), additionally install either [Rich] or [*better-exceptions*].
Try both to find out which one you like better -- the screenshot in the README and docs homepage is rendered by Rich.

On **Windows**, you also have to install [Colorama](https://pypi.org/project/colorama/) if you want colorful output beside exceptions.


## Your First Log Entry

A lot of effort went into making *structlog* accessible without reading pages of documentation.
As a result, the simplest possible usage looks like this:

```{doctest}
>>> import structlog
>>> log = structlog.get_logger()
>>> log.info("hello, %s!", "world", key="value!", more_than_strings=[1, 2, 3])  # doctest: +SKIP
2022-10-07 10:41:29 [info     ] hello, world!   key=value! more_than_strings=[1, 2, 3]
```

Here, *structlog* takes advantage of its default settings:

- Output is sent to **[standard out](https://en.wikipedia.org/wiki/Standard_out#Standard_output_.28stdout.29)** instead of doing nothing.
- It **imitates** standard library {mod}`logging`'s **log level names** for familiarity.
  By default, no level-based filtering is done, but it comes with a **very fast [filtering machinery](filtering)**.
- Like in `logging`, positional arguments are [**interpolated into the message string using %**](https://docs.python.org/3/library/stdtypes.html#old-string-formatting).
  That might look dated, but it's *much* faster than using {any}`str.format` and allows *structlog* to be used as drop-in replacement for {mod}`logging`.
  If you *know* that the log entry is *always* gonna be logged out, just use [f-strings](https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals) which are the fastest.
- All keywords are formatted using {class}`structlog.dev.ConsoleRenderer`.
  That in turn uses {func}`repr` to serialize **any value to a string**.
- It's rendered in nice **{doc}`colors <console-output>`**.
- If you have [Rich] or [*better-exceptions*] installed, **exceptions** will be rendered in **colors** and with additional **helpful information**.

Please note that even in most complex logging setups the example would still look just like that thanks to {doc}`configuration`.
Using the defaults, as above, is equivalent to:

```python
import logging
import structlog

structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.processors.add_log_level,
        structlog.processors.StackInfoRenderer(),
        structlog.dev.set_exc_info,
        structlog.processors.TimeStamper(fmt="%Y-%m-%d %H:%M:%S", utc=False),
        structlog.dev.ConsoleRenderer()
    ],
    wrapper_class=structlog.make_filtering_bound_logger(logging.NOTSET),
    context_class=dict,
    logger_factory=structlog.PrintLoggerFactory(),
    cache_logger_on_first_use=False
)
log = structlog.get_logger()
```

:::{note}
- {func}`structlog.stdlib.recreate_defaults()` allows you to switch *structlog* to using standard library's `logging` module for output for better interoperability with just one function call.
- {func}`~structlog.make_filtering_bound_logger()` (re-)uses {any}`logging`'s log levels, but doesn't use `logging` at all.
  The exposed API is {class}`~structlog.typing.FilteringBoundLogger`.
- For brevity and to enable doctests, all further examples in *structlog*'s documentation use the more simplistic {class}`~structlog.processors.KeyValueRenderer()` without timestamps.
:::

There you go, structured logging!


However, this alone wouldn't warrant its own package.
After all, there's even a [recipe] on structured logging for the standard library.
So let's go a step further.

(building-ctx)=

## Building a Context

Imagine a hypothetical web application that wants to log out all relevant data with just the APIs that we've introduced so far:

```python
def view(request):
    user_agent = request.get("HTTP_USER_AGENT", "UNKNOWN")
    peer_ip = request.client_addr
    if something:
        log.info("something", user_agent=user_agent, peer_ip=peer_ip)
        return "something"
    elif something_else:
        log.info("something_else", user_agent=user_agent, peer_ip=peer_ip)
        return "something_else"
    else:
        log.info("else", user_agent=user_agent, peer_ip=peer_ip)
        return "else"
```

The calls themselves are nice and straight to the point, however you're repeating yourself all over the place.
It's easy to forget to add a key-value pair in one of the incantations.

At this point, you'll be tempted to write a closure like:

```python
def log_closure(event):
    log.info(event, user_agent=user_agent, peer_ip=peer_ip)
```

inside of the view.
Problem solved?
Not quite.
What if the parameters are introduced step by step?
And do you really want to have a logging closure in each of your views?

Let's have a look at a better approach:

```python
def view(request):
    log = log.bind(
        user_agent=request.get("HTTP_USER_AGENT", "UNKNOWN"),
        peer_ip=request.client_addr,
    )

    if foo := request.get("foo"):
        log = log.bind(foo=foo)

    if something:
        log.info("something")
        return "something"
    elif something_else:
        log.info("something_else")
        return "something_else"
    else:
        log.info("else")
        return "else"

```

Suddenly your logger becomes your closure!

---

To *structlog*, a log entry is just a dictionary called *event dict\[ionary\]*:

- You can pre-build a part of the dictionary step by step.
  These pre-saved values are called the *context*.
- As soon as an *event* happens -- which are the `kwargs` of the log call -- it is merged together with the *context* to an *event dict* and logged out.
- Each logger with its context is *immutable*.
  You manipulate the context by creating new loggers using `bind()` and `unbind()`.

The last point is very clean and easy to reason about, but sometimes it's useful to store _some_ data globally.

In our example above the peer IP comes to mind.
There's no point in extracting it in every view!
For that, *structlog* gives you thread-local context storage based on the {mod}`contextvars` module:

```pycon
>>> structlog.contextvars.bind_contextvars(peer_ip="1.2.3.4")
>>> structlog.get_logger().info("something")
2022-10-10 10:18:05 [info     ] something    peer_ip=1.2.3.4
```

See {doc}`contextvars` for more information and a more complete example.


## Manipulating Log Entries in Flight

Now that your log events are dictionaries, it's also much easier to manipulate them than if they were plain strings.

To facilitate that, *structlog* has the concept of {doc}`processor chains <processors>`.
A processor is a function that receives the event dictionary along with two other arguments and returns a new event dictionary that may or may not differ from the one it got passed.
The next processor in the chain receives that returned dictionary instead of the original one.

Let's assume you wanted to add a timestamp to every event dict.
The processor would look like this:

```{doctest}
>>> import datetime
>>> def timestamper(_, __, event_dict):
...     event_dict["time"] = datetime.datetime.now().isoformat()
...     return event_dict
```

Plain Python, plain dictionaries.
Now you have to tell *structlog* about your processor by {doc}`configuring <configuration>` it:

```{doctest}
>>> structlog.configure(processors=[timestamper, structlog.processors.KeyValueRenderer()])
>>> structlog.get_logger().info("hi")  # doctest: +SKIP
event='hi' time='2018-01-21T09:37:36.976816'
```


## Rendering

Finally you want to have control over the actual format of your log entries.

As you may have noticed in the previous section, renderers are just processors too.
The type of the return value that is required from the renderer depends on the input that the *logger* that is wrapped by *structlog* needs.
While usually it's a string or bytes, there's no rule saying it _has_ to be a string!

So assuming you want to follow [best practices](logging-best-practices.md) and render your event dictionary to JSON that is picked up by a log aggregation system like ELK or Graylog, *structlog* comes with batteries included -- you just have to tell it to use its {class}`~structlog.processors.JSONRenderer`:

```{doctest}
>>> structlog.configure(processors=[structlog.processors.JSONRenderer()])
>>> structlog.get_logger().info("hi")
{"event": "hi"}
```


## *structlog* and Standard Library's `logging`

While *structlog*'s loggers are very fast and sufficient for the majority of our users, you're not bound to them.
Instead, it's been designed from day one to wrap your *existing* loggers and **add** *structure* and *incremental context building* to them.

The most prominent example of such an "existing logger" is certainly the logging module in the standard library.
To make this common case as simple as possible, *structlog* comes with [some tools](standard-library.md) to help you.

As noted before, the fastest way to transform *structlog* into a `logging`-friendly package is calling {func}`structlog.stdlib.recreate_defaults()`.


## asyncio

The default *bound logger* that you get back from {func}`structlog.get_logger()` and standard library's {class}`structlog.stdlib.BoundLogger` don't have just the familiar log methods like `debug()` or `info()`, but also their async cousins, that simply prefix the name with an a:

```pycon
>>> import asyncio
>>> logger = structlog.get_logger()
>>> async def f():
...     await logger.ainfo("async hi!")
...
>>> logger.info("Loop isn't running yet, but we can log!")
2023-04-06 07:25:48 [info     ] Loop isn't running yet, but we can log!
>>> asyncio.run(f())
2023-04-06 07:26:08 [info     ] async hi!
```

You can use the sync and async logging methods interchangeably within the same application.


## Liked what you saw?

Now you're all set for the rest of the user's guide and can start reading about [bound loggers](bound-loggers.md) -- the heart of *structlog*.

```{include} ../README.md
:start-after: <!-- begin tutorials -->
:end-before: <!-- end tutorials -->
```

[*better-exceptions*]: https://github.com/qix-/better-exceptions
[recipe]: https://docs.python.org/3/howto/logging-cookbook.html#implementing-structured-logging
[Rich]: https://github.com/Textualize/rich

</document_content>
</document>
<document index="11">
<source>/Users/malcolm/dev/structlog/docs/glossary.md</source>
<document_content>
# Glossary

Please feel free to [file an issue](https://github.com/hynek/structlog/issues) if you think some important concept is missing here.

:::{glossary}

Event Dictionary
    Often abbreviated as *event dict*.
    It's a dictionary that contains all the information that is logged, with the `event` key having the special role of being the name of the event.

    It's the result of the values bound to the {term}`bound logger`'s context and the key-value pairs passed to the logging method.
    It is then passed through the {term}`processor` chain that can add, modify, and even remove key-value pairs.

Bound Logger
    An instance of a {class}`structlog.typing.BindableLogger` that is returned by either {func}`structlog.get_logger` or the bind/unbind/new methods on it.

    As the name suggests, it's possible to bind key-value pairs to it -- this data is called the {term}`context` of the logger.

    Its methods are the user's logging API and depend on the type of the bound logger.
    The two most common implementations are {class}`structlog.BoundLogger` and {class}`structlog.stdlib.BoundLogger`.

    Bound loggers are **immutable**.
    The context can only be modified by creating a new bound logger using its `bind()`and `unbind()` methods.

    :::{seealso}
    {doc}`bound-loggers`
    :::

Context
    A dictionary of key-value pairs belonging to a {term}`bound logger`.
    When a log entry is logged out, the context is the base for the event dictionary with the keyword arguments of the logging method call merged in.

    Bound loggers are **immutable**, so it's not possible to modify a context directly.
    But you can create a new bound logger with a different context using its `bind()` and `unbind()` methods.

Native Loggers
    Loggers created using {func}`structlog.make_filtering_bound_logger` which includes the default configuration.

    These loggers are very fast and do **not** use the standard library.

Wrapped Logger
    The logger that is wrapped by *structlog* and that is responsible for the actual output.

    By default it's a {class}`structlog.PrintLogger` for native logging.
    Another popular choice is {class}`logging.Logger` for standard library logging.

    :::{seealso}
    {doc}`standard-library`
    :::

Processor
    A callable that is called on every log entry.

    It receives the return value of its predecessor as an argument and returns a new event dictionary.
    This allows for composable transformations of the event dictionary.

    The result of the final processor is passed to the {term}`wrapped logger`.

    :::{seealso}
    {doc}`processors`
    :::

:::

</document_content>
</document>
<document index="12">
<source>/Users/malcolm/dev/structlog/docs/index.md</source>
<document_content>
# structlog

*Simple. Powerful. Fast. Pick three.*

Release **{sub-ref}`release`**  ([What's new?](https://github.com/hynek/structlog/blob/main/CHANGELOG.md))

---

```{include} ../README.md
:start-after: <!-- begin-short -->
:end-before: <!-- pause-short -->
```

<!-- [[[cog
# This is mainly called from RTD's pre_build job!

import pathlib, tomllib, importlib.metadata

if "dev" in (version := importlib.metadata.version("structlog")):
    version = "latest"

for sponsor in tomllib.loads(pathlib.Path("pyproject.toml").read_text())["tool"]["sponcon"]["sponsors"]:
      print(f'<a href="{sponsor["url"]}"><img title="{sponsor["title"]}" src="/en/{version}/_static/sponsors/{sponsor["img"]}" width="200" height="60" /></a>')
]]] -->
<a href="https://www.variomedia.de/"><img title="Variomedia AG" src="/en/latest/_static/sponsors/Variomedia.svg" width="200" height="60" /></a>
<a href="https://tidelift.com/?utm_source=lifter&utm_medium=referral&utm_campaign=hynek"><img title="Tidelift" src="/en/latest/_static/sponsors/Tidelift.svg" width="200" height="60" /></a>
<a href="https://klaviyo.com/"><img title="Klaviyo" src="/en/latest/_static/sponsors/Klaviyo.svg" width="200" height="60" /></a>
<a href="https://filepreviews.io/"><img title="FilePreviews" src="/en/latest/_static/sponsors/FilePreviews.svg" width="200" height="60" /></a>
<!-- [[[end]]] -->

```{include} ../README.md
:start-after: <!-- continue-short -->
:end-before: <!-- end-short -->
```

If you'd like more information on why structured logging in general – and *structlog* in particular – are good ideas, we've prepared a [summary](why.md) just for you.

Otherwise, let's dive right in!

```{toctree}
:hidden: true

why
```


## Basics

The first chapters teach you all you need to use *structlog* productively.
They build gently on each other, so ideally, read them in order.
If anything seems confusing, don't hesitate to have a look at our {doc}`glossary`!


```{toctree}
:maxdepth: 2
:caption: Basics

getting-started
bound-loggers
configuration
processors
contextvars
exceptions
```


## Development Affordances

*structlog*'s focus is production systems, but it comes with **pretty console logging** and handy in-development helpers both for your **comfort** and your code's **quality**.

```{toctree}
:maxdepth: 2
:caption: Development Affordances

console-output
testing
typing
```

(integration)=

## Integration with Existing Systems

*structlog* is both zero-config as well as highly configurable.
You can use it on its own or integrate with existing systems.
Dedicated support for the standard library and Twisted is shipped out-of-the-box.

```{toctree}
:maxdepth: 2
:caption: Integrations

frameworks
standard-library
twisted
```


## *structlog* in Practice

The following chapters deal with considerations of using *structlog* in the real world.


```{toctree}
:maxdepth: 2
:caption: In Practice

recipes
logging-best-practices
performance
```


## Reference

```{toctree}
:maxdepth: 2
:caption: Reference

api
glossary
genindex
modindex
```


## Deprecated Features

```{toctree}
:maxdepth: 1
:caption: Deprecated Features

thread-local
```


```{toctree}
:hidden:
:caption: Meta

license
PyPI <https://pypi.org/project/structlog/>
GitHub <https://github.com/hynek/structlog/>
Changelog <https://github.com/hynek/structlog/blob/main/CHANGELOG.md>
Contributing <https://github.com/hynek/structlog/blob/main/.github/CONTRIBUTING.md>
Security Policy <https://github.com/hynek/structlog/blob/main/.github/SECURITY.md>
Funding <https://hynek.me/say-thanks/>
```

</document_content>
</document>
<document index="13">
<source>/Users/malcolm/dev/structlog/docs/license.md</source>
<document_content>
# License and Hall of Fame

*structlog* is licensed both under the [Apache License, Version 2](https://choosealicense.com/licenses/apache/) and the [MIT license](https://choosealicense.com/licenses/mit/).

Any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.

---

The reason for that is to be both protected against patent claims by own contributors and still allow the usage within GPLv2 software. For more legal details, see [this issue](https://github.com/pyca/cryptography/issues/1209) on the bug tracker of PyCA's *cryptography* project.

The full license texts can be also found in the source code repository:

- [Apache License 2.0](https://github.com/hynek/structlog/blob/main/LICENSE-APACHE)
- [MIT](https://github.com/hynek/structlog/blob/main/LICENSE-MIT)


## Credits

```{include} ../README.md
:parser: myst_parser.sphinx_
:start-after: "## Credits"
:end-before: <!-- begin-meta -->
```

</document_content>
</document>
<document index="14">
<source>/Users/malcolm/dev/structlog/docs/logging-best-practices.md</source>
<document_content>
# Logging Best Practices

Logging is not a new concept and is in no way unique to Python.
Logfiles have existed for decades, and there's little reason to reinvent the wheel in our little world.
Therefore, let's rely on proven tools as much as possible and do only the bare minimum inside Python applications[^unix].

A simple but powerful approach is to log to unbuffered [standard out](https://en.wikipedia.org/wiki/Standard_out#Standard_output_.28stdout.29
) and let other tools take care of the rest.

That can be your terminal window while developing; it can be [*systemd*](https://en.wikipedia.org/wiki/Systemd) redirecting your log entries to [*syslogd*](https://en.wikipedia.org/wiki/Syslogd) and rotating them using [*logrotate*](https://github.com/logrotate/logrotate); or it can be your [cluster manager](https://kubernetes.io/docs/concepts/cluster-administration/logging/) forwarding them to an obscenely expensive log aggregator service.

It doesn't matter where or how your application runs -- it just works, and the reason why the popular [*Twelve-Factor App* methodology](https://12factor.net/logs) suggests just that.

[^unix]: This is obviously a privileged UNIX-centric view but even Windows has tools and means for log management although we won't be able to discuss them here.


## Canonical Log Lines

Generally speaking, having as few log entries per request as possible is a good thing.
The less noise, the more insights.

*structlog*'s ability to {ref}`bind data to loggers incrementally <building-ctx>` -- plus {doc}`loggers that are local to the current execution context <contextvars>` -- can help you to minimize the output to a *single log entry*.

At Stripe, this concept is called [Canonical Log Lines](https://brandur.org/canonical-log-lines).


## Pretty Printing vs. Structured Output

Colorful and pretty printed log messages are nice during development when you locally run your code.

However, in production you should emit structured output (like JSON) which is a lot easier to parse by log aggregators.
Since you already log in a structured way, writing JSON output with *structlog* comes naturally.
You can even generate structured exception tracebacks.
This makes analyzing errors easier, since log aggregators can render JSON much better than multiline strings with a lot escaped quotation marks.

Here is a simple example of how you can have pretty logs during development and JSON output when your app is running in a production context:

```{doctest}
>>> import sys
>>> import structlog
>>>
>>> shared_processors = [
...     # Processors that have nothing to do with output,
...     # e.g., add timestamps or log level names.
... ]
>>> if sys.stderr.isatty():
...     # Pretty printing when we run in a terminal session.
...     # Automatically prints pretty tracebacks when "rich" is installed
...     processors = shared_processors + [
...         structlog.dev.ConsoleRenderer(),
...     ]
... else:
...     # Print JSON when we run, e.g., in a Docker container.
...     # Also print structured tracebacks.
...     processors = shared_processors + [
...         structlog.processors.dict_tracebacks,
...         structlog.processors.JSONRenderer(),
...     ]
>>> structlog.configure(processors)

```


## Centralized Logging

Nowadays you usually don't want your log files in compressed archives distributed over dozens -- if not thousands -- of servers or cluster nodes.
You want them in a single location.
Parsed, indexed, and easy to search.


### ELK

The ELK stack ([**E**lasticsearch][elasticsearch], [**L**ogstash][logstash], [**K**ibana][kibana]) from Elastic is a great way to store, parse, and search your logs.

The way it works is that you have local log shippers like [Filebeat] that parse your log files and forward the log entries to your [Logstash] server.
Logstash parses the log entries and stores them in [Elasticsearch].
Finally, you can view and search them in [Kibana].

If your log entries consist of a JSON dictionary, this is fairly easy and efficient.
All you have to do is to tell [Logstash] either that your log entries are prepended with a timestamp from {class}`~structlog.processors.TimeStamper` or the name of your timestamp field.


### Graylog

[Graylog](https://graylog.org/) goes one step further.
It not only supports everything those above do (and then some); you can also directly log JSON entries towards it -- optionally even through an AMQP server (like [RabbitMQ](https://www.rabbitmq.com/)) for better reliability.
Additionally, [Graylog's Extended Log Format](https://go2docs.graylog.org/current/getting_in_log_data/gelf.html) (GELF) allows for structured data which makes it an obvious choice to use together with *structlog*.


[elasticsearch]: https://www.elastic.co/elasticsearch
[filebeat]: https://github.com/elastic/beats/tree/main/filebeat
[kibana]: https://www.elastic.co/kibana
[logstash]: https://www.elastic.co/logstash

</document_content>
</document>
<document index="15">
<source>/Users/malcolm/dev/structlog/docs/make.bat</source>
<document_content>
@ECHO OFF

REM Command file for Sphinx documentation

if "%SPHINXBUILD%" == "" (
	set SPHINXBUILD=sphinx-build
)
set BUILDDIR=_build
set ALLSPHINXOPTS=-d %BUILDDIR%/doctrees %SPHINXOPTS% .
set I18NSPHINXOPTS=%SPHINXOPTS% .
if NOT "%PAPER%" == "" (
	set ALLSPHINXOPTS=-D latex_paper_size=%PAPER% %ALLSPHINXOPTS%
	set I18NSPHINXOPTS=-D latex_paper_size=%PAPER% %I18NSPHINXOPTS%
)

if "%1" == "" goto help

if "%1" == "help" (
	:help
	echo.Please use `make ^<target^>` where ^<target^> is one of
	echo.  html       to make standalone HTML files
	echo.  dirhtml    to make HTML files named index.html in directories
	echo.  singlehtml to make a single large HTML file
	echo.  pickle     to make pickle files
	echo.  json       to make JSON files
	echo.  htmlhelp   to make HTML files and a HTML help project
	echo.  qthelp     to make HTML files and a qthelp project
	echo.  devhelp    to make HTML files and a Devhelp project
	echo.  epub       to make an epub
	echo.  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter
	echo.  text       to make text files
	echo.  man        to make manual pages
	echo.  texinfo    to make Texinfo files
	echo.  gettext    to make PO message catalogs
	echo.  changes    to make an overview over all changed/added/deprecated items
	echo.  linkcheck  to check all external links for integrity
	echo.  doctest    to run all doctests embedded in the documentation if enabled
	goto end
)

if "%1" == "clean" (
	for /d %%i in (%BUILDDIR%\*) do rmdir /q /s %%i
	del /q /s %BUILDDIR%\*
	goto end
)

if "%1" == "html" (
	%SPHINXBUILD% -b html %ALLSPHINXOPTS% %BUILDDIR%/html
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The HTML pages are in %BUILDDIR%/html.
	goto end
)

if "%1" == "dirhtml" (
	%SPHINXBUILD% -b dirhtml %ALLSPHINXOPTS% %BUILDDIR%/dirhtml
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The HTML pages are in %BUILDDIR%/dirhtml.
	goto end
)

if "%1" == "singlehtml" (
	%SPHINXBUILD% -b singlehtml %ALLSPHINXOPTS% %BUILDDIR%/singlehtml
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The HTML pages are in %BUILDDIR%/singlehtml.
	goto end
)

if "%1" == "pickle" (
	%SPHINXBUILD% -b pickle %ALLSPHINXOPTS% %BUILDDIR%/pickle
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished; now you can process the pickle files.
	goto end
)

if "%1" == "json" (
	%SPHINXBUILD% -b json %ALLSPHINXOPTS% %BUILDDIR%/json
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished; now you can process the JSON files.
	goto end
)

if "%1" == "htmlhelp" (
	%SPHINXBUILD% -b htmlhelp %ALLSPHINXOPTS% %BUILDDIR%/htmlhelp
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished; now you can run HTML Help Workshop with the ^
.hhp project file in %BUILDDIR%/htmlhelp.
	goto end
)

if "%1" == "qthelp" (
	%SPHINXBUILD% -b qthelp %ALLSPHINXOPTS% %BUILDDIR%/qthelp
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished; now you can run "qcollectiongenerator" with the ^
.qhcp project file in %BUILDDIR%/qthelp, like this:
	echo.^> qcollectiongenerator %BUILDDIR%\qthelp\structlog.qhcp
	echo.To view the help file:
	echo.^> assistant -collectionFile %BUILDDIR%\qthelp\structlog.ghc
	goto end
)

if "%1" == "devhelp" (
	%SPHINXBUILD% -b devhelp %ALLSPHINXOPTS% %BUILDDIR%/devhelp
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished.
	goto end
)

if "%1" == "epub" (
	%SPHINXBUILD% -b epub %ALLSPHINXOPTS% %BUILDDIR%/epub
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The epub file is in %BUILDDIR%/epub.
	goto end
)

if "%1" == "latex" (
	%SPHINXBUILD% -b latex %ALLSPHINXOPTS% %BUILDDIR%/latex
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished; the LaTeX files are in %BUILDDIR%/latex.
	goto end
)

if "%1" == "text" (
	%SPHINXBUILD% -b text %ALLSPHINXOPTS% %BUILDDIR%/text
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The text files are in %BUILDDIR%/text.
	goto end
)

if "%1" == "man" (
	%SPHINXBUILD% -b man %ALLSPHINXOPTS% %BUILDDIR%/man
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The manual pages are in %BUILDDIR%/man.
	goto end
)

if "%1" == "texinfo" (
	%SPHINXBUILD% -b texinfo %ALLSPHINXOPTS% %BUILDDIR%/texinfo
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The Texinfo files are in %BUILDDIR%/texinfo.
	goto end
)

if "%1" == "gettext" (
	%SPHINXBUILD% -b gettext %I18NSPHINXOPTS% %BUILDDIR%/locale
	if errorlevel 1 exit /b 1
	echo.
	echo.Build finished. The message catalogs are in %BUILDDIR%/locale.
	goto end
)

if "%1" == "changes" (
	%SPHINXBUILD% -b changes %ALLSPHINXOPTS% %BUILDDIR%/changes
	if errorlevel 1 exit /b 1
	echo.
	echo.The overview file is in %BUILDDIR%/changes.
	goto end
)

if "%1" == "linkcheck" (
	%SPHINXBUILD% -b linkcheck %ALLSPHINXOPTS% %BUILDDIR%/linkcheck
	if errorlevel 1 exit /b 1
	echo.
	echo.Link check complete; look for any errors in the above output ^
or in %BUILDDIR%/linkcheck/output.txt.
	goto end
)

if "%1" == "doctest" (
	%SPHINXBUILD% -b doctest %ALLSPHINXOPTS% %BUILDDIR%/doctest
	if errorlevel 1 exit /b 1
	echo.
	echo.Testing of doctests in the sources finished, look at the ^
results in %BUILDDIR%/doctest/output.txt.
	goto end
)

:end

</document_content>
</document>
<document index="16">
<source>/Users/malcolm/dev/structlog/docs/performance.md</source>
<document_content>
# Performance

Here are a few hints how to get the best performance out of *structlog* in production:

- Use *structlog*'s native *BoundLogger* (created using {func}`structlog.make_filtering_bound_logger`) if you want to use level-based filtering.
  `return None` is hard to beat.

- Avoid (frequently) calling log methods on loggers you get back from {func}`structlog.get_logger` or {func}`structlog.wrap_logger`.
  Since those functions are usually called in module scope and thus before you are able to configure them, they return a proxy object that assembles the correct logger on demand.

  Create a local logger if you expect to log frequently without binding:

  ```python
  logger = structlog.get_logger()
  def f():
      log = logger.bind()
      for i in range(1000000000):
         log.info("iterated", i=i)
  ```

  Since global scope lookups are expensive in Python, it's generally a good idea to copy frequently-used symbols into local scope.

- Set the *cache_logger_on_first_use* option to `True` so the aforementioned on-demand loggers will be assembled only once and cached for future uses:

  ```python
  configure(cache_logger_on_first_use=True)
  ```

  This has two drawbacks:

  1. Later calls of {func}`~structlog.configure` don't have any effect on already cached loggers -- that shouldn't matter outside of {doc}`testing <testing>` though.
  2. The resulting bound logger is not pickleable.
      Therefore, you can't set this option if you, for example, plan on passing loggers around using {mod}`multiprocessing`.

- Avoid sending your log entries through the standard library if you can: its dynamic nature and flexibility make it a major bottleneck.
  Instead use {class}`structlog.WriteLoggerFactory` or -- if your serializer returns bytes (for example, [*orjson*] or [*msgspec*]) -- {class}`structlog.BytesLoggerFactory`.

  You can still configure `logging` for packages that you don't control, but avoid it for your *own* log entries.

- Configure {class}`~structlog.processors.JSONRenderer` to use a faster JSON serializer than the standard library.
  Possible alternatives are among others are [*orjson*], [*msgspec*], or [RapidJSON](https://pypi.org/project/python-rapidjson/).

- Be conscious about whether and how you use *structlog*'s *asyncio* support.
  While it's true that moving log processing into separate threads prevents your application from hanging, it also comes with a performance cost.

  Decide judiciously whether or not you're willing to pay that price.
  If your processor chain has a good and predictable performance without external dependencies (as it should), it might not be worth it.


## Example

Here's an example for a production-ready *structlog* configuration that's as fast as it gets:

```python
import logging
import orjson
import structlog

structlog.configure(
    cache_logger_on_first_use=True,
    wrapper_class=structlog.make_filtering_bound_logger(logging.INFO),
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.processors.add_log_level,
        structlog.processors.format_exc_info,
        structlog.processors.TimeStamper(fmt="iso", utc=True),
        structlog.processors.JSONRenderer(serializer=orjson.dumps),
    ],
    logger_factory=structlog.BytesLoggerFactory(),
)
```

It has the following properties:

- Caches all loggers on first use.
- Filters all log entries below the `info` log level **very** efficiently.
  The `debug` method literally consists of `return None`.
- Supports {doc}`contextvars` (thread-local contexts outside of *asyncio*).
- Adds the log level name.
- Renders exceptions into the `exception` key.
- Adds an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp under the `timestamp` key in the UTC timezone.
- Renders the log entries as JSON using [*orjson*] which is faster than *plain* logging in {mod}`logging`.
- Uses {class}`structlog.BytesLoggerFactory` because *orjson* returns bytes.
  That saves encoding ping-pong.

Therefore a log entry might look like this:

```json
{"event":"hello","level":"info","timestamp":"2023-11-02T08:03:38.298565Z"}
```

---

If you need standard library support for external projects, you can either just use a JSON formatter like [*python-json-logger*](https://pypi.org/project/python-json-logger/), or pipe them through *structlog* as documented in {doc}`standard-library`.

[*orjson*]: https://github.com/ijl/orjson
[*msgspec*]: https://jcristharif.com/msgspec/

</document_content>
</document>
<document index="17">
<source>/Users/malcolm/dev/structlog/docs/processors.md</source>
<document_content>
# Processors

The true power of *structlog* lies in its *combinable log processors*.
A log processor is a regular callable or in other words:
A function or an instance of a class with a `__call__()` method.

(chains)=

## Chains

The *processor chain* is a list of processors.
Each processors receives three positional arguments:

**logger**

: Your wrapped logger object.
  For example {class}`logging.Logger` or {class}`structlog.typing.FilteringBoundLogger` (default).

**method_name**

: The name of the wrapped method.
  If you called `log.warning("foo")`, it will be `"warning"`.

**event_dict**

: Current context together with the current event.
  If the context was `{"a": 42}` and the event is `"foo"`, the initial `event_dict` will be `{"a":42, "event": "foo"}`.

The return value of each processor is passed on to the next one as `event_dict` until finally the return value of the last processor gets passed into the wrapped logging method.

:::{note}
*structlog* only looks at the return value of the **last** processor.
That means that as long as you control the next processor in the chain (the processor that will get your return value passed as an argument), you can return whatever you want.

Returning a modified event dictionary from your processors is just a convention to make processors composable.
:::


### Examples

If you set up your logger like:

```python
structlog.configure(processors=[f1, f2, f3])
log = structlog.get_logger().bind(x=42)
```

and call `log.info("some_event", y=23)`, it results in the following call chain:

```python
wrapped_logger.info(
   f3(wrapped_logger, "info",
      f2(wrapped_logger, "info",
         f1(wrapped_logger, "info", {"event": "some_event", "x": 42, "y": 23})
      )
   )
)
```

In this case, `f3` has to make sure it returns something `wrapped_logger.info` can handle (see {ref}`adapting`).
For the example with `PrintLogger` above, this means `f3` must return a string.

The simplest modification a processor can make is adding new values to the `event_dict`.
Parsing human-readable timestamps is tedious, not so [UNIX timestamps](https://en.wikipedia.org/wiki/UNIX_time) -- let's add one to each log entry:

```python
import calendar
import time

def timestamper(logger, log_method, event_dict):
    event_dict["timestamp"] = calendar.timegm(time.gmtime())
    return event_dict
```

:::{important}
You're explicitly allowed to modify the `event_dict` parameter, because a copy has been created before calling the first processor.
:::

Please note that *structlog* comes with such a processor built in: {class}`~structlog.processors.TimeStamper`.


## Filtering

If a processor raises {class}`structlog.DropEvent`, the event is silently dropped.

Therefore, the following processor drops every entry:

```python
from structlog import DropEvent

def dropper(logger, method_name, event_dict):
    raise DropEvent
```

But we can do better than that!

(cond-drop)=

How about dropping only log entries that are marked as coming from a certain peer (for example, monitoring)?

```python
class ConditionalDropper:
    def __init__(self, peer_to_ignore):
        self._peer_to_ignore = peer_to_ignore

    def __call__(self, logger, method_name, event_dict):
        """
        >>> cd = ConditionalDropper("127.0.0.1")
        >>> cd(None, None, {"event": "foo", "peer": "10.0.0.1"})
        {'peer': '10.0.0.1', 'event': 'foo'}
        >>> cd(None, None, {"event": "foo", "peer": "127.0.0.1"})
        Traceback (most recent call last):
        ...
        DropEvent
        """
        if event_dict.get("peer") == self._peer_to_ignore:
            raise DropEvent

        return event_dict
```

Since it's so common to filter by the log level, *structlog* comes with {func}`structlog.make_filtering_bound_logger` that filters log entries before they even enter the processor chain.
It does **not** use the standard library, but it does use its names and order of log levels.

(adapting)=

## Adapting and Rendering

An important role is played by the *last* processor because its duty is to adapt the `event_dict` into something the logging methods of the *wrapped logger* understand.
With that, it's also the *only* processor that needs to know anything about the underlying system.

It can return one of three types:

- An Unicode string ({any}`str`), a bytes string ({any}`bytes`), or a {any}`bytearray` that is passed as the first (and only) positional argument to the underlying logger.
- A tuple of `(args, kwargs)` that are passed as `log_method(*args, **kwargs)`.
- A dictionary which is passed as `log_method(**kwargs)`.

Therefore `return "hello world"` is a shortcut for `return (("hello world",), {})` (the example in {ref}`chains` assumes this shortcut has been taken).

This should give you enough power to use *structlog* with any logging system while writing agnostic processors that operate on dictionaries.

:::{versionchanged} 14.0.0 Allow final processor to return a {any}`dict`.
:::

:::{versionchanged} 20.2.0 Allow final processor to return a {any}`bytes`.
:::

:::{versionchanged} 21.2.0 Allow final processor to return a {any}`bytearray`.
:::

### Examples

The probably most useful formatter for string based loggers is {class}`structlog.processors.JSONRenderer`.
Advanced log aggregation and analysis tools like [*Logstash*](https://www.elastic.co/logstash) offer features like telling them "this is JSON, deal with it" instead of fiddling with regular expressions.

For a list of shipped processors, check out the {ref}`API documentation <procs>`.


## Third-Party Packages

*structlog* was specifically designed to be as composable and reusable as possible, so whatever you're missing:
chances are, you can solve it with a processor!
Since processors are self-contained callables, it's easy to write your own and to share them in separate packages.

We collect those packages in our [GitHub Wiki](https://github.com/hynek/structlog/wiki/Third-Party-Extensions) and encourage you to add your package too!

</document_content>
</document>
<document index="18">
<source>/Users/malcolm/dev/structlog/docs/recipes.md</source>
<document_content>
# Recipes

Because *structlog* is entirely based on dictionaries and callables, the sky is the limit with what you can achieve.
That can be daunting in the beginning, so here are a few examples of tasks that have come up repeatedly.

Please note that recipes related to integration with frameworks have an [own chapter](frameworks.md).

(rename-event)=

## Renaming the `event` Key

The name of the event is hard-coded in *structlog* to `event`.
But that doesn't mean it has to be called that in your logs.

With the {class}`structlog.processors.EventRenamer` processor, you can, for instance, rename  the log message to `msg` and use `event` for something custom, that you bind to `_event` in your code:

```pycon
>>> from structlog.processors import EventRenamer
>>> event_dict = {"event": "something happened", "_event": "our event!"}
>>> EventRenamer("msg", "_event")(None, None, event_dict)
{'msg': 'something happened', 'event': 'our event!'}
```

(finer-filtering)=

## Fine-Grained Log-Level Filtering

*structlog*'s native log levels as provided by {func}`structlog.make_filtering_bound_logger` only know **one** log level – the one that is passed to `make_filtering_bound_logger()`.
Sometimes, that can be a bit too coarse, though.

You can achieve finer control by adding the {class}`~structlog.processors.CallsiteParameterAdder` processor and writing a simple processor that acts on the call site data added.

Let's assume you have the following code:

```python
logger = structlog.get_logger()

def f():
    logger.info("f called")

def g():
    logger.info("g called")

f()
g()
```

And you don't want to see log entries from function `f`.
You add {class}`~structlog.processors.CallsiteParameterAdder` to the processor chain and then look at the `func_name` field in the *event dict*:

```python
def filter_f(_, __, event_dict):
    if event_dict.get("func_name") == "f":
        raise structlog.DropEvent

    return event_dict

structlog.configure(
    processors=[
        structlog.processors.CallsiteParameterAdder(
            [structlog.processors.CallsiteParameter.FUNC_NAME]
        ),
        filter_f,  # <-- your processor!
        structlog.processors.KeyValueRenderer(),
    ]
)
```

Running this gives you:

```
event='g called' func_name='g'
```

{class}`~structlog.processors.CallsiteParameterAdder` is *very* powerful in what info it can add, so your possibilities are limitless.
Pick the data you're interested in from the {class}`structlog.processors.CallsiteParameter` {class}`~enum.Enum`.


(custom-wrappers)=

## Custom Wrappers

```{testsetup}
import structlog
structlog.configure(
    processors=[structlog.processors.KeyValueRenderer()],
)
```

```{testcleanup}
import structlog
structlog.reset_defaults()
```

The type of the *bound loggers* that are returned by {func}`structlog.get_logger()` is called the *wrapper class*, because it wraps the original logger that takes care of the output.
This wrapper class is [configurable](configuration.md).

Originally, *structlog* used a generic wrapper class {class}`structlog.BoundLogger` by default.
That class still ships with *structlog* and can wrap *any* logger class by intercepting unknown method names and proxying them to the wrapped logger.

Nowadays, the default is a {class}`structlog.typing.FilteringBoundLogger` that imitates standard library's log levels with the possibility of efficiently filtering at a certain level (inactive log methods are a plain `return None` each).

If you're integrating with {mod}`logging` or Twisted, you may want to use one of their specific *bound loggers* ({class}`structlog.stdlib.BoundLogger` and {class}`structlog.twisted.BoundLogger`, respectively).

---

On top of that all, you can also write your own wrapper classes.
To make it easy for you, *structlog* comes with the class {class}`structlog.BoundLoggerBase` which takes care of all data binding duties so you just add your log methods if you choose to sub-class it.

(wrapper-class-example)=

### Example

It's easiest to demonstrate with an example:

```{doctest}
>>> from structlog import BoundLoggerBase, PrintLogger, wrap_logger
>>> class SemanticLogger(BoundLoggerBase):
...    def info(self, event, **kw):
...        if not "status" in kw:
...            return self._proxy_to_logger("info", event, status="ok", **kw)
...        else:
...            return self._proxy_to_logger("info", event, **kw)
...
...    def user_error(self, event, **kw):
...        self.info(event, status="user_error", **kw)
>>> log = wrap_logger(PrintLogger(), wrapper_class=SemanticLogger)
>>> log = log.bind(user="fprefect")
>>> log.user_error("user.forgot_towel")
user='fprefect' status='user_error' event='user.forgot_towel'
```

You can observe the following:

- The wrapped logger can be found in the instance variable {attr}`structlog.BoundLoggerBase._logger`.
- The helper method {meth}`structlog.BoundLoggerBase._proxy_to_logger` that is a [DRY] convenience function that runs the processor chain, handles possible {class}`structlog.DropEvent`s and calls a named function on `_logger`.
- You can run the chain by hand through using {meth}`structlog.BoundLoggerBase._process_event` .

These two methods and one attribute are all you need to write own *bound loggers*.

[dry]: https://en.wikipedia.org/wiki/Don%27t_repeat_yourself


## Passing Context to Worker Threads

Thread-local context data based on [context variables](contextvars.md) is -- as the name says -- local to the thread that binds it.
When using threads to process work in parallel, you have to pass the thread-local context **into** the worker threads.
One way is to retrieve the context vars and pass them along to the worker threads.
Then, Inside of the worker, re-bind them using `bind_contextvars`.

The following example uses [*pathos*](https://pypi.org/project/pathos/) to create a `ThreadPool`.
The context variables are retrieved and passed as the first argument to the partial function.
The pool invokes the partial function, once for each element of `workers`.
Inside of `do_some_work`, the context vars are bound and a message about the great work being performed is logged -- including the `request_id` key / value pair.

```
from functools import partial

import structlog

from structlog.contextvars import bind_contextvars
from pathos.threading import ThreadPool

logger = structlog.get_logger(__name__)


def do_some_work(ctx, this_worker):
    bind_contextvars(**ctx)
    logger.info("WorkerDidSomeWork", worker=this_worker)


def structlog_with_threadpool(f):
    ctx = structlog.contextvars.get_contextvars()
    func = partial(f, ctx)
    workers = ["1", "2", "3"]

    with ThreadPool() as pool:
        return list(pool.map(func, workers))


def manager(request_id: str):
    bind_contextvars(request_id=request_id)
    logger.info("StartingWorkers")
    structlog_with_threadpool(do_some_work)

```

See the [issue 425](https://github.com/hynek/structlog/issues/425) for a more complete example.


## Switching Console Output to Standard Error

When using structlog without standard library integration and want the log output to go to standard error (*stderr*) instead of standard out (*stdout*), you can switch with a single line of configuration:

```python
structlog.configure(logger_factory=structlog.PrintLoggerFactory(sys.stderr))
```

</document_content>
</document>
<document index="19">
<source>/Users/malcolm/dev/structlog/docs/standard-library.md</source>
<document_content>
# Standard Library Logging

Ideally, *structlog* should be able to be used as a drop-in replacement for standard library's {mod}`logging` by wrapping it.
In other words, you should be able to replace your call to {func}`logging.getLogger` by a call to {func}`structlog.get_logger` and things should keep working as before (if *structlog* is configured right, see {ref}`stdlib-config` below).

If you run into incompatibilities, it is a *bug* so please take the time to [report it](https://github.com/hynek/structlog/issues)!
If you're a heavy `logging` user, your [help](https://github.com/hynek/structlog/issues?q=is%3Aopen+is%3Aissue+label%3Astdlib) to ensure a better compatibility would be highly appreciated!

:::{important}
The quickest way to get started with *structlog* and `logging` is {func}`structlog.stdlib.recreate_defaults()`.
It will recreate the default configuration on top of `logging` and optionally configure `logging` for you.
:::


## Just Enough `logging`

If you want to use *structlog* with `logging`, you should have at least a fleeting understanding on how the standard library operates because *structlog* will *not* do any magic things in the background for you.
Most importantly you have to *configure* the `logging` system *additionally* to configuring *structlog*.

Usually it is enough to use:

```
import logging
import sys

logging.basicConfig(
    format="%(message)s",
    stream=sys.stdout,
    level=logging.INFO,
)
```

This will send all log messages with the [log level](https://docs.python.org/3/library/logging.html#logging-levels) `logging.INFO` and above (that means that, for example, `logging.debug` calls are ignored) to standard out without any special formatting by the standard library.

If you require more complex behavior, please refer to the standard library's `logging` documentation.


## Concrete Bound Logger

*structlog* ships a stdlib-specific [*bound logger*](bound-loggers.md) that  mirrors the log methods of standard library's {any}`logging.Logger` with correct type hints.

If you want to take advantage of said type hints, you have to either annotate the logger coming from {func}`structlog.get_logger`, or use {func}`structlog.stdlib.get_logger()` that has the appropriate type hints.
Please note though, that it will neither configure nor verify your configuration.
It will call `structlog.get_logger()` just like if you would've called it -- the only difference are the type hints.

See also {doc}`typing`.


### `asyncio`

For `asyncio` applications, you may not want your whole application to block while the processor chain is formatting your log entries.

For that use case *structlog* comes with a set of non-standard methods that will do all processing in a thread pool executor.
They have the same names as the regular methods, except they are prefixed by an `a`.
So instead of `logger.info("event!")` you write `await logger.ainfo("event!)`.
No extra configuration is necessary and you can mix-and-match both types of methods within the same application.

This means an increased computational cost per log entry, but your application will not block because of logging.

```{versionadded} 23.1.0
```

---


*structlog* also comes with {class}`structlog.stdlib.AsyncBoundLogger` that blankly makes all logging methods asynchronous (in other words, you have to use `await log.info()` instead of just `log.info()`).

To use it, {doc}`configure <configuration>` *structlog* to use `AsyncBoundLogger` as `wrapper_class`.

```{versionadded} 20.2.0
```
```{deprecated} 23.1.0
```


## Processors

*structlog* comes with a few standard library-specific processors:

{func}`~structlog.stdlib.render_to_log_kwargs`:

: Renders the event dictionary into keyword arguments for `logging.log` that attaches everything except the `event` field to the *extra* argument.
  This is useful if you want to render your log entries entirely within `logging`.

{func}`~structlog.stdlib.filter_by_level`:

: Checks the log entry's log level against the configuration of standard library's logging.
  Log entries below the threshold get silently dropped.
  Put it at the beginning of your processing chain to avoid expensive operations from happening in the first place.

{func}`~structlog.stdlib.add_logger_name`:

: Adds the name of the logger to the event dictionary under the key `logger`.

{func}`~structlog.stdlib.ExtraAdder`:

: Add extra attributes of `logging.LogRecord` objects to the event dictionary.

  This processor can be used for adding data passed in the `extra` parameter of the `logging` module's log methods to the event dictionary.

{func}`~structlog.stdlib.add_log_level`:

: Adds the log level to the event dictionary under the key `level`.

{func}`~structlog.stdlib.add_log_level_number`:

: Adds the log level number to the event dictionary under the key `level_number`.
  Log level numbers map to the log level names.
  The Python stdlib uses them for filtering logic.
  This adds the same numbers so users can leverage similar filtering.
  Compare:

  ```
  level in ("warning", "error", "critical")
  level_number >= 30
  ```

  The mapping of names to numbers is in `structlog.stdlib._NAME_TO_LEVEL`.

{func}`~structlog.stdlib.PositionalArgumentsFormatter`:

: This processes and formats positional arguments (if any) passed to log methods in the same way the `logging` module would do, for example, `logger.info("Hello, %s", name)`.

*structlog* also comes with {class}`~structlog.stdlib.ProcessorFormatter` which is a `logging.Formatter` that enables you to format non-*structlog* log entries using *structlog* renderers *and* multiplex *structlog*'s output with different renderers (see [below](processor-formatter) for an example).

(stdlib-config)=

## Suggested Configurations

:::{note}
We do appreciate that fully integrating *structlog* with standard library's `logging` is fiddly when done for the first time.

This is the price of flexibility and unfortunately -- given the different needs of our users -- we can't make it any simpler without compromising someone's use-cases.
However, once it is set up, you can rely on not having to ever touch it again.
:::

Depending *where* you'd like to do your formatting, you can take one of four approaches:


### Don't Integrate

The most straight-forward option is to configure standard library `logging` close enough to what *structlog* is logging and leaving it at that.

Since these are usually log entries from third parties that don't take advantage of *structlog*'s features, this is surprisingly often a perfectly adequate approach.

For instance, if you log JSON in production, configure `logging` to use [*python-json-logger*] to make it print JSON too, and then tweak the configuration to match their outputs.
You can also use {class}`~structlog.stdlib.ProcessorFormatter` as a formatter for `logging` to get the same output for both *structlog* and `logging` log entries -- see [below](processor-formatter) for an example.

:::{note}
If you want to use same file (for example, `sys.stdout` or `sys.stderr`) for both *structlog* and `logging.StreamHandler` output, you must use {class}`~structlog.WriteLogger` instead of {class}`~structlog.PrintLogger`.

This is because {class}`~structlog.PrintLogger` uses `print(log, file=file, flush=True)` to write log, and `print` writes the `log` message and a newline ("\n") to the stream separately.
This can cause interleaving of log entries from *structlog* and `logging` loggers.
{class}`~structlog.WriteLogger` writes log entries atomically to the file (for example, `file.write(log+"\n")`).
:::


### Rendering Within *structlog*

This is the simplest approach where *structlog* does all the heavy lifting and passes a fully-formatted string to `logging`.
Chances are, this is all you need.

```{mermaid}
:align: center

flowchart TD
    User
    structlog
    stdlib[Standard Library\ne.g. logging.StreamHandler]

    User --> |"structlog.get_logger().info('foo')"| structlog
    User --> |"logging.getLogger().info('foo')"| stdlib
    structlog --> |"logging.getLogger().info(#quot;{'event': 'foo'}#quot;)"| stdlib ==> Output

    Output
```

A basic configuration to output structured logs in JSON format looks like this:

```python
import structlog

structlog.configure(
    processors=[
        # If log level is too low, abort pipeline and throw away log entry.
        structlog.stdlib.filter_by_level,
        # Add the name of the logger to event dict.
        structlog.stdlib.add_logger_name,
        # Add log level to event dict.
        structlog.stdlib.add_log_level,
        # Perform %-style formatting.
        structlog.stdlib.PositionalArgumentsFormatter(),
        # Add a timestamp in ISO 8601 format.
        structlog.processors.TimeStamper(fmt="iso"),
        # If the "stack_info" key in the event dict is true, remove it and
        # render the current stack trace in the "stack" key.
        structlog.processors.StackInfoRenderer(),
        # If the "exc_info" key in the event dict is either true or a
        # sys.exc_info() tuple, remove "exc_info" and render the exception
        # with traceback into the "exception" key.
        structlog.processors.format_exc_info,
        # If some value is in bytes, decode it to a Unicode str.
        structlog.processors.UnicodeDecoder(),
        # Add callsite parameters.
        structlog.processors.CallsiteParameterAdder(
            {
                structlog.processors.CallsiteParameter.FILENAME,
                structlog.processors.CallsiteParameter.FUNC_NAME,
                structlog.processors.CallsiteParameter.LINENO,
            }
        ),
        # Render the final event dict as JSON.
        structlog.processors.JSONRenderer()
    ],
    # `wrapper_class` is the bound logger that you get back from
    # get_logger(). This one imitates the API of `logging.Logger`.
    wrapper_class=structlog.stdlib.BoundLogger,
    # `logger_factory` is used to create wrapped loggers that are used for
    # OUTPUT. This one returns a `logging.Logger`. The final value (a JSON
    # string) from the final processor (`JSONRenderer`) will be passed to
    # the method of the same name as that you've called on the bound logger.
    logger_factory=structlog.stdlib.LoggerFactory(),
    # Effectively freeze configuration after creating the first bound
    # logger.
    cache_logger_on_first_use=True,
)
```

To make your program behave like a proper [*12 Factor App*](https://12factor.net/logs) that outputs only JSON to `stdout`, configure the `logging` module like this:

```
import logging
import sys

logging.basicConfig(
    format="%(message)s",
    stream=sys.stdout,
    level=logging.INFO,
)
```

In this case *only* your own logs are formatted as JSON:

```pycon
>>> structlog.get_logger("test").warning("hello")
{"event": "hello", "logger": "test", "level": "warning", "timestamp": "2017-03-06T07:39:09.518720Z"}

>>> logging.getLogger("test").warning("hello")
hello
```


### Rendering Using `logging`-based Formatters

You can choose to use *structlog* only for building the event dictionary and leave all formatting -- additionally to the output -- to the standard library.

```{mermaid}
:align: center

flowchart TD
    User
    structlog
    stdlib[Standard Library\ne.g. logging.StreamHandler]

    User --> |"structlog.get_logger().info('foo', bar=42)"| structlog
    User --> |"logging.getLogger().info('foo')"| stdlib
    structlog --> |"logging.getLogger().info('foo', extra={&quot;bar&quot;: 42})"| stdlib ==> Output

    Output
```

```python
import structlog

structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        # Transform event dict into `logging.Logger` method arguments.
        # "event" becomes "msg" and the rest is passed as a dict in
        # "extra". IMPORTANT: This means that the standard library MUST
        # render "extra" for the context to appear in log entries! See
        # warning below.
        structlog.stdlib.render_to_log_kwargs,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)
```

Now you have the event dict available within each log record.
If you want *all* your log entries (meaning: also those not from your application / *structlog*) to be formatted as JSON, you can use the [*python-json-logger*] library:

```python
import logging
import sys

from pythonjsonlogger import jsonlogger

handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(jsonlogger.JsonFormatter())
root_logger = logging.getLogger()
root_logger.addHandler(handler)
```

Now both *structlog* and `logging` will emit JSON logs:

```pycon
>>> structlog.get_logger("test").warning("hello")
{"message": "hello", "logger": "test", "level": "warning"}

>>> logging.getLogger("test").warning("hello")
{"message": "hello"}
```

:::{warning}
With this approach, it's the standard library `logging` formatter's duty to do something useful with the event dict.
In the above example that's `jsonlogger.JsonFormatter`.

Keep this in mind if you only get the event name without any context, and exceptions are ostensibly swallowed.
:::

(processor-formatter)=

### Rendering Using *structlog*-based Formatters Within `logging`

Finally, the most ambitious approach.
Here, you use *structlog*'s {class}`~structlog.stdlib.ProcessorFormatter` as a {any}`logging.Formatter` for both `logging` as well as *structlog* log entries.

Consequently, the output is the duty of the standard library too.

```{mermaid}
:align: center

flowchart TD
    User
    structlog
    structlog2[structlog]
    stdlib["Standard Library"]

    User --> |"structlog.get_logger().info(#quot;foo#quot;, bar=42)"| structlog
    User --> |"logging.getLogger().info(#quot;foo#quot;)"| stdlib
    structlog --> |"logging.getLogger().info(event_dict, {#quot;extra#quot;: {#quot;_logger#quot;: logger, #quot;_name#quot;: name})"| stdlib

    stdlib --> |"structlog.stdlib.ProcessorFormatter.format(logging.Record)"| structlog2
    structlog2 --> |"Returns a string that is passed into logging handlers.\nThis flow is controlled by the logging configuration."| stdlib2

    stdlib2[Standard Library\ne.g. logging.StreamHandler] ==> Output
```

{class}`~structlog.stdlib.ProcessorFormatter` has two parts to its API:

1. On the *structlog* side, the {doc}`processor chain <processors>` must be configured to end with {func}`structlog.stdlib.ProcessorFormatter.wrap_for_formatter` as the renderer.
   It converts the processed event dictionary into something that `ProcessorFormatter` understands.

2. On the `logging` side, you must configure `ProcessorFormatter` as your formatter of choice.
   `logging` then calls `ProcessorFormatter`'s `format()` method.

   For that, `ProcessorFormatter` wraps a processor chain that is responsible for rendering your log entries to strings.

Thus, the simplest possible configuration looks like the following:

```python
import logging
import structlog

structlog.configure(
    processors=[
        # Prepare event dict for `ProcessorFormatter`.
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
)

formatter = structlog.stdlib.ProcessorFormatter(
    processors=[structlog.dev.ConsoleRenderer()],
)

handler = logging.StreamHandler()
# Use OUR `ProcessorFormatter` to format all `logging` entries.
handler.setFormatter(formatter)
root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.INFO)
```

which will allow both of these to work in other modules:

```pycon
>>> import logging
>>> import structlog

>>> logging.getLogger("stdlog").info("woo")
woo      _from_structlog=False _record=<LogRecord:...>
>>> structlog.get_logger("structlog").info("amazing", events="oh yes")
amazing  _from_structlog=True _record=<LogRecord:...> events=oh yes
```

Of course, you probably want timestamps and log levels in your output.
The `ProcessorFormatter` has a `foreign_pre_chain` argument which is responsible for adding properties to events from the standard library -- in other words, those that do not originate from a *structlog* logger -- and which should in general match the `processors` argument to {func}`structlog.configure` so you get a consistent output.

`_from_structlog` and `_record` allow your processors to determine whether the log entry is coming from *structlog*, and to extract information from `logging.LogRecord`s and add them to the event dictionary.
However, you probably don't want to have them in your log files, thus we've added the `ProcessorFormatter.remove_processors_meta` processor to do so conveniently.

For example, to add timestamps, log levels, and traceback handling to your logs without `_from_structlog` and `_record` noise you should do:

```python
timestamper = structlog.processors.TimeStamper(fmt="%Y-%m-%d %H:%M:%S")
shared_processors = [
    structlog.stdlib.add_log_level,
    timestamper,
]

structlog.configure(
    processors=shared_processors + [
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

formatter = structlog.stdlib.ProcessorFormatter(
    # These run ONLY on `logging` entries that do NOT originate within
    # structlog.
    foreign_pre_chain=shared_processors,
    # These run on ALL entries after the pre_chain is done.
    processors=[
        # Remove _record & _from_structlog.
        structlog.stdlib.ProcessorFormatter.remove_processors_meta,
        structlog.dev.ConsoleRenderer(),
    ],
)
```

which (given the same `logging.*` calls as in the previous example) will result in:

```pycon
>>> logging.getLogger("stdlog").info("woo")
2021-11-15 11:41:47 [info     ] woo
>>> structlog.get_logger("structlog").info("amazing", events="oh yes")
2021-11-15 11:41:47 [info     ] amazing    events=oh yes
```

This allows you to set up some sophisticated logging configurations.
For example, to use the standard library's `logging.config.dictConfig` to log colored logs to the console and plain logs to a file you could do:

```python
import logging.config
import structlog

timestamper = structlog.processors.TimeStamper(fmt="%Y-%m-%d %H:%M:%S")
pre_chain = [
    # Add the log level and a timestamp to the event_dict if the log entry
    # is not from structlog.
    structlog.stdlib.add_log_level,
    # Add extra attributes of LogRecord objects to the event dictionary
    # so that values passed in the extra parameter of log methods pass
    # through to log output.
    structlog.stdlib.ExtraAdder(),
    timestamper,
]


def extract_from_record(_, __, event_dict):
    """
    Extract thread and process names and add them to the event dict.
    """
    record = event_dict["_record"]
    event_dict["thread_name"] = record.threadName
    event_dict["process_name"] = record.processName
    return event_dict


logging.config.dictConfig(
    {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "plain": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processors": [
                    structlog.stdlib.ProcessorFormatter.remove_processors_meta,
                    structlog.dev.ConsoleRenderer(colors=False),
                ],
                "foreign_pre_chain": pre_chain,
            },
            "colored": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processors": [
                    extract_from_record,
                    structlog.stdlib.ProcessorFormatter.remove_processors_meta,
                    structlog.dev.ConsoleRenderer(colors=True),
                ],
                "foreign_pre_chain": pre_chain,
            },
        },
        "handlers": {
            "default": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
                "formatter": "colored",
            },
            "file": {
                "level": "DEBUG",
                "class": "logging.handlers.WatchedFileHandler",
                "filename": "test.log",
                "formatter": "plain",
            },
        },
        "loggers": {
            "": {
                "handlers": ["default", "file"],
                "level": "DEBUG",
                "propagate": True,
            },
        },
    }
)
structlog.configure(
    processors=[
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        timestamper,
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)
```

This defines two formatters: one plain and one colored.
Both are run for each log entry.
Log entries that do not originate from *structlog*, are additionally pre-processed using a cached `timestamper` and {func}`~structlog.stdlib.add_log_level`.

Additionally, for both `logging` and *structlog* -- but only for the colorful logger -- we also extract some data from {class}`logging.LogRecord`:

```pycon
>>> logging.getLogger().warning("bar")
2021-11-15 13:26:52 [warning  ] bar    process_name=MainProcess thread_name=MainThread

>>> structlog.get_logger("structlog").warning("foo", x=42)
2021-11-15 13:26:52 [warning  ] foo    process_name=MainProcess thread_name=MainThread x=42

>>> pathlib.Path("test.log").read_text()
2021-11-15 13:26:52 [warning  ] bar
2021-11-15 13:26:52 [warning  ] foo    x=42
```

(Sadly, you have to imagine the colors in the first two outputs.)

If you leave `foreign_pre_chain` as `None`, formatting will be left to `logging`.
Meaning: you can define a `format` for {class}`~structlog.stdlib.ProcessorFormatter` too!


[*python-json-logger*]: https://github.com/madzak/python-json-logger

</document_content>
</document>
<document index="20">
<source>/Users/malcolm/dev/structlog/docs/testing.md</source>
<document_content>
# Testing

*structlog* comes with tools for testing the logging behavior of your application.

If you need functionality similar to {meth}`unittest.TestCase.assertLogs`, or you want to capture all logs for some other reason, you can use the {func}`structlog.testing.capture_logs` context manager:

```{doctest}
>>> from structlog import get_logger
>>> from structlog.testing import capture_logs
>>> with capture_logs() as cap_logs:
...    get_logger().bind(x="y").info("hello")
>>> cap_logs
[{'x': 'y', 'event': 'hello', 'log_level': 'info'}]
```

Note that inside the context manager all configured processors are disabled.

:::{note}
`capture_logs()` relies on changing the configuration.
If you have *cache_logger_on_first_use* enabled for {doc}`performance <performance>`, any cached loggers will not be affected, so it's recommended you do not enable it during tests.
:::

You can build your own helpers using {class}`structlog.testing.LogCapture`.
For example a [*pytest*](https://docs.pytest.org/) fixture to capture log output could look like this:

```
@pytest.fixture(name="log_output")
def fixture_log_output():
    return LogCapture()

@pytest.fixture(autouse=True)
def fixture_configure_structlog(log_output):
    structlog.configure(
        processors=[log_output]
    )

def test_my_stuff(log_output):
    do_something()
    assert log_output.entries == [...]
```

---

You can also use {class}`structlog.testing.CapturingLogger` (directly, or via {class}`~structlog.testing.CapturingLoggerFactory` that always returns the same logger) that is more low-level and great for unit tests:

```{doctest}
>>> import structlog
>>> cf = structlog.testing.CapturingLoggerFactory()
>>> structlog.configure(logger_factory=cf, processors=[structlog.processors.JSONRenderer()])
>>> log = get_logger()
>>> log.info("test!")
>>> cf.logger.calls
[CapturedCall(method_name='info', args=('{"event": "test!"}',), kwargs={})]
```

```{testcleanup}
import structlog
structlog.reset_defaults()
```

---

Additionally *structlog* also ships with a logger that just returns whatever it gets passed into it: {class}`structlog.testing.ReturnLogger`.

```{doctest}
>>> from structlog import ReturnLogger
>>> ReturnLogger().info(42) == 42
True
>>> obj = ["hi"]
>>> ReturnLogger().info(obj) is obj
True
>>> ReturnLogger().info("hello", when="again")
(('hello',), {'when': 'again'})
```

</document_content>
</document>
<document index="21">
<source>/Users/malcolm/dev/structlog/docs/thread-local.md</source>
<document_content>
# Legacy Thread-local Context

:::{attention}
The `structlog.threadlocal` module is deprecated as of *structlog* 22.1.0 in favor of {doc}`contextvars`.

The standard library {mod}`contextvars` module provides a more feature-rich superset of the thread-local APIs and works with thread-local data, async code, and greenlets.

Therefore, as of 22.1.0, the `structlog.threadlocal` module is frozen and will be removed after May 2023.
:::

```{testsetup} *
import structlog
structlog.configure(
      processors=[structlog.processors.KeyValueRenderer()],
)
```

```{testcleanup} *
import structlog
structlog.reset_defaults()
```


## The `merge_threadlocal` Processor

*structlog* provides a simple set of functions that allow explicitly binding certain fields to a global (thread-local) context and merge them later using a processor into the event dict.

The general flow of using these functions is:

- Use {func}`structlog.configure` with {func}`structlog.threadlocal.merge_threadlocal` as your first processor.
- Call {func}`structlog.threadlocal.clear_threadlocal` at the beginning of your request handler (or whenever you want to reset the thread-local context).
- Call {func}`structlog.threadlocal.bind_threadlocal` as an alternative to your bound logger's `bind()` when you want to bind a particular variable to the thread-local context.
- Use *structlog* as normal.
  Loggers act as they always do, but the {func}`structlog.threadlocal.merge_threadlocal` processor ensures that any thread-local binds get included in all of your log messages.
- If you want to access the thread-local storage, you use {func}`structlog.threadlocal.get_threadlocal` and {func}`structlog.threadlocal.get_merged_threadlocal`.

These functions map 1:1 to the {doc}`contextvars` APIs, so please use those instead:

- {func}`structlog.contextvars.merge_contextvars`
- {func}`structlog.contextvars.clear_contextvars`
- {func}`structlog.contextvars.bind_contextvars`
- {func}`structlog.contextvars.get_contextvars`
- {func}`structlog.contextvars.get_merged_contextvars`


## Thread-local Contexts

*structlog* also provides thread-local context storage in a form that you may already know from [*Flask*](https://flask.palletsprojects.com/en/latest/design/#thread-locals) and that makes the *entire context* global to your thread or greenlet.

This makes its behavior more difficult to reason about which is why we generally recommend to use the {func}`~structlog.contextvars.merge_contextvars` route.
Therefore, there are currently no plans to re-implement this behavior on top of context variables.


### Wrapped Dicts

In order to make your context thread-local, *structlog* ships with a function that can wrap any dict-like class to make it usable for thread-local storage: {func}`structlog.threadlocal.wrap_dict`.

Within one thread, every instance of the returned class will have a *common* instance of the wrapped dict-like class:

```{doctest}
>>> from structlog.threadlocal import wrap_dict
>>> WrappedDictClass = wrap_dict(dict)
>>> d1 = WrappedDictClass({"a": 1})
>>> d2 = WrappedDictClass({"b": 2})
>>> d3 = WrappedDictClass()
>>> d3["c"] = 3
>>> d1 is d3
False
>>> d1 == d2 == d3 == WrappedDictClass()
True
>>> d3  # doctest: +ELLIPSIS
<WrappedDict-...({'a': 1, 'b': 2, 'c': 3})>
```

To enable thread-local context use the generated class as the context class:

```python
configure(context_class=WrappedDictClass)
```

:::{note}
Creation of a new `BoundLogger` initializes the logger's context as `context_class(initial_values)`, and then adds any values passed via `.bind()`.
As all instances of a wrapped dict-like class share the same data, in the case above, the new logger's context will contain all previously bound values in addition to the new ones.
:::

`structlog.threadlocal.wrap_dict` returns always a completely *new* wrapped class:

```{doctest}
>>> from structlog.threadlocal import wrap_dict
>>> WrappedDictClass = wrap_dict(dict)
>>> AnotherWrappedDictClass = wrap_dict(dict)
>>> WrappedDictClass() != AnotherWrappedDictClass()
True
>>> WrappedDictClass.__name__  # doctest: +SKIP
WrappedDict-41e8382d-bee5-430e-ad7d-133c844695cc
>>> AnotherWrappedDictClass.__name__   # doctest: +SKIP
WrappedDict-e0fc330e-e5eb-42ee-bcec-ffd7bd09ad09
```

In order to be able to bind values temporarily to a logger, `structlog.threadlocal` comes with a [context manager](https://docs.python.org/2/library/stdtypes.html#context-manager-types): {func}`structlog.threadlocal.tmp_bind`:

```{testsetup} ctx
from structlog import PrintLogger, wrap_logger
from structlog.threadlocal import tmp_bind, wrap_dict
WrappedDictClass = wrap_dict(dict)
log = wrap_logger(PrintLogger(), context_class=WrappedDictClass)
```

```{doctest} ctx
>>> log.bind(x=42)  # doctest: +ELLIPSIS
<BoundLoggerFilteringAtNotset(context=<WrappedDict-...({'x': 42})>, ...)>
>>> log.msg("event!")
x=42 event='event!'
>>> with tmp_bind(log, x=23, y="foo") as tmp_log:
...     tmp_log.msg("another event!")
x=23 y='foo' event='another event!'
>>> log.msg("one last event!")
x=42 event='one last event!'
```

The state before the `with` statement is saved and restored once it's left.

If you want to detach a logger from thread-local data, there's {func}`structlog.threadlocal.as_immutable`.


#### Downsides & Caveats

The convenience of having a thread-local context comes at a price though:

:::{warning}
- If you can't rule out that your application re-uses threads, you *must* remember to **initialize your thread-local context** at the start of each request using {func}`~structlog.BoundLogger.new` (instead of {func}`~structlog.BoundLogger.bind`).
  Otherwise you may start a new request with the context still filled with data from the request before.

- **Don't** stop assigning the results of your `bind()`s and `new()`s!

  **Do**:

  ```
  log = log.new(y=23)
  log = log.bind(x=42)
  ```

  **Don't**:

  ```
  log.new(y=23)
  log.bind(x=42)
  ```

  Although the state is saved in a global data structure, you still need the global wrapped logger produce a real bound logger.
  Otherwise each log call will result in an instantiation of a temporary BoundLogger.

  See `configuration` for more details.

- It [doesn't play well](https://github.com/hynek/structlog/issues/296) with `os.fork` and thus `multiprocessing` (unless configured to use the `spawn` start method).
:::


## API

```{eval-rst}
.. module:: structlog.threadlocal

.. autofunction:: bind_threadlocal

.. autofunction:: unbind_threadlocal

.. autofunction:: bound_threadlocal

.. autofunction:: get_threadlocal

.. autofunction:: get_merged_threadlocal

.. autofunction:: merge_threadlocal

.. autofunction:: clear_threadlocal

.. autofunction:: wrap_dict

.. autofunction:: tmp_bind(logger, **tmp_values)

.. autofunction:: as_immutable
```

</document_content>
</document>
<document index="22">
<source>/Users/malcolm/dev/structlog/docs/twisted.md</source>
<document_content>
# Twisted

:::{warning}
Since `sys.exc_clear` has been dropped in Python 3, there is currently no way to avoid multiple tracebacks in your log files if using *structlog* together with Twisted on Python 3.
:::

:::{note}
*structlog* currently only supports the legacy -- but still perfectly working -- Twisted logging system found in `twisted.python.log`.
:::


## Concrete Bound Logger

To make *structlog*'s behavior less magical, it ships with a Twisted-specific wrapper class that has an explicit API instead of improvising: `structlog.twisted.BoundLogger`.
It behaves exactly like the generic `structlog.BoundLogger` except:

- it's slightly faster due to less overhead,
- has an explicit API ({func}`~structlog.twisted.BoundLogger.msg` and {func}`~structlog.twisted.BoundLogger.err`),
- hence causing less cryptic error messages if you get method names wrong.

In order to avoid that *structlog* disturbs your CamelCase harmony, it comes with an alias for `structlog.get_logger` called `structlog.getLogger`.


## Processors

*structlog* comes with two Twisted-specific processors:

{func}`structlog.twisted.EventAdapter`

: This is useful if you have an existing Twisted application and just want to wrap your loggers for now.
  It takes care of transforming your event dictionary into something [twisted.python.log.err](https://docs.twisted.org/en/stable/api/twisted.python.log.html#err) can digest.

  For example:

  ```python
  def onError(fail):
     failure = fail.trap(MoonExploded)
     log.err(failure, _why="event-that-happened")
  ```

  will still work as expected.

  Needs to be put at the end of the processing chain.
  It formats the event using a renderer that needs to be passed into the constructor:

  ```python
  configure(processors=[EventAdapter(KeyValueRenderer()])
  ```

  The drawback of this approach is that Twisted will format your exceptions as multi-line log entries which is painful to parse.
  Therefore *structlog* comes with:

{func}`structlog.twisted.JSONRenderer`

: Goes a step further and circumvents Twisted logger's Exception / Failure handling and renders it itself as JSON strings.
  That gives you regular and simple-to-parse single-line JSON log entries no matter what happens.


## Bending Foreign Logging To Your Will

*structlog* comes with a wrapper for Twisted's log observers to ensure the rest of your logs are in JSON too: `structlog.twisted.JSONLogObserverWrapper`.

What it does is determining whether a log entry has been formatted by `structlog.twisted.JSONRenderer`  and if not, converts the log entry to JSON with `event` being the log message and putting Twisted's `system` into a second key.

So for example:

```
2013-09-15 22:02:18+0200 [-] Log opened.
```

becomes:

```
2013-09-15 22:02:18+0200 [-] {"event": "Log opened.", "system": "-"}
```

There is obviously some redundancy here.
Also, I'm presuming that if you write out JSON logs, you're going to let something else parse them which makes the human-readable date entries more trouble than they're worth.

To get a clean log without timestamps and additional system fields (`[-]`), *structlog* comes with `structlog.twisted.PlainFileLogObserver` that writes only the plain message to a file and `structlog.twisted.plainJSONStdOutLogger` that composes it with the aforementioned `structlog.twisted.JSONLogObserverWrapper` and gives you a pure JSON log without any timestamps or other noise straight to [standard out]:

```console
$ twistd -n --logger structlog.twisted.plainJSONStdOutLogger web
{"event": "Log opened.", "system": "-"}
{"event": "twistd 13.1.0 (python 2.7.3) starting up.", "system": "-"}
{"event": "reactor class: twisted...EPollReactor.", "system": "-"}
{"event": "Site starting on 8080", "system": "-"}
{"event": "Starting factory <twisted.web.server.Site ...>", ...}
...
```

## Suggested Configuration

```python
import structlog

structlog.configure(
   processors=[
       structlog.processors.StackInfoRenderer(),
       structlog.twisted.JSONRenderer()
   ],
   context_class=dict,
   logger_factory=structlog.twisted.LoggerFactory(),
   wrapper_class=structlog.twisted.BoundLogger,
   cache_logger_on_first_use=True,
)
```

See also {doc}`logging-best-practices`.

[standard out]: https://en.wikipedia.org/wiki/Standard_out#Standard_output_.28stdout.29

</document_content>
</document>
<document index="23">
<source>/Users/malcolm/dev/structlog/docs/typing.md</source>
<document_content>
# Type Hints

Static type hints -- together with a type checker like [Mypy](https://mypy.readthedocs.io/en/stable/) -- are an excellent way to make your code more robust, self-documenting, and maintainable in the long run.
And as of 20.2.0, *structlog* comes with type hints for all of its APIs.

Since *structlog* is highly configurable and tries to give a clean façade to its users, adding types without breaking compatibility -- while remaining useful! -- was a formidable task.

---

The main problem is that `structlog.get_logger()` returns whatever you've configured the *bound logger* to be.
The only commonality are the binding methods like `bind()` and we've extracted them into the {class}`structlog.typing.BindableLogger` {class}`~typing.Protocol`.
But using that as a return type is worse than useless, because you'd have to use {func}`typing.cast` on every logger returned by `structlog.get_logger()`, if you wanted to actually call any logging methods.

The second problem is that said `bind()` and its cousins are inherited from a common base class (a [big](https://www.youtube.com/watch?v=3MNVP9-hglc) [mistake](https://python-patterns.guide/gang-of-four/composition-over-inheritance/) in hindsight) and can't know what concrete class subclasses them and therefore what type they are returning.

The chosen solution is adding {func}`structlog.stdlib.get_logger()` that just calls `structlog.get_logger()` but has the correct type hints and adding `structlog.stdlib.BoundLogger.bind` et al that also only delegate to the base class.

`structlog.get_logger()` is typed as returning {any}`typing.Any` so you can use your own type annotation and stick to the old APIs, if that's what you prefer:

```
import structlog

logger: structlog.stdlib.BoundLogger = structlog.get_logger()
logger.info("hi")  # <- ok
logger.msg("hi")   # <- Mypy: 'error: "BoundLogger" has no attribute "msg"'
```

</document_content>
</document>
<document index="24">
<source>/Users/malcolm/dev/structlog/docs/why.md</source>
<document_content>
# Why …

## … Structured Logging?

> I believe the widespread use of format strings in logging is based on two presumptions:
>
> - The first level consumer of a log message is a human.
> - The programmer knows what information is needed to debug an issue.
>
> I believe these presumptions are **no longer correct** in server side software.
>
> —<cite>[Paul Querna](https://paul.querna.org/articles/2011/12/26/log-for-machines-in-json/)</cite>

Structured logging means that you don't write hard-to-parse and hard-to-keep-consistent prose in your log entries.
Instead, you log *events* that happen in a *context* of key-value pairs.

:::{tip}
More general advice about production-grade logging can be found in the later chapter on {doc}`logging-best-practices`.
:::


## … structlog?

### Easier Logging

You can stop writing prose and start thinking in terms of an event that happens in the context of key-value pairs:

```pycon
>>> from structlog import get_logger
>>> log = get_logger()
>>> log.info("key_value_logging", out_of_the_box=True, effort=0)
2020-11-18 09:17:09 [info     ] key_value_logging    effort=0 out_of_the_box=True
```

Each log entry is a meaningful dictionary instead of an opaque string now!

That said, *structlog* is not taking anything away from you.
You can still use string interpolation using positional arguments:

```pycon
>>> log.info("Hello, %s!", "world")
2022-10-10 07:19:25 [info     ] Hello, world!
```

### Data Binding

Since log entries are dictionaries, you can start binding and re-binding key-value pairs to your loggers to ensure they are present in every following logging call:

```pycon
>>> log = log.bind(user="anonymous", some_key=23)
>>> log = log.bind(user="hynek", another_key=42)
>>> log.info("user.logged_in", happy=True)
2020-11-18 09:18:28 [info     ] user.logged_in    another_key=42 happy=True some_key=23 user=hynek
```

You can also bind key-value pairs to {doc}`context variables <contextvars>` that look global, but are local to your thread or *asyncio* context -- which usually means your web request.


### Powerful Pipelines

Each log entry goes through a [processor pipeline](processors.md) that is just a chain of functions that receive a dictionary and return a new dictionary that gets fed into the next function.
That allows for simple but powerful data manipulation:

```python
def timestamper(logger, log_method, event_dict):
    """Add a timestamp to each log entry."""
    event_dict["timestamp"] = time.time()
    return event_dict
```

There are [plenty of processors](structlog.processors) for most common tasks coming with *structlog*:

- Collectors of [call stack information](structlog.processors.StackInfoRenderer) ("How did this log entry happen?"),
- …and [exceptions](structlog.processors.format_exc_info) ("What happened‽").
- Flexible [timestamping](structlog.processors.TimeStamper).


### Formatting

*structlog* is completely flexible about *how* the resulting log entry is emitted.
Since each log entry is a dictionary, it can be formatted to **any** format:

- A colorful key-value format for [local development](console-output.md),
- [JSON](structlog.processors.JSONRenderer) of [*logfmt*](structlog.processors.LogfmtRenderer) for easy parsing,
- or some standard format you have parsers for like *nginx* or Apache *httpd*.

Internally, formatters are processors whose return value (usually a string) is passed into loggers that are responsible for the output of your message.
*structlog* comes with multiple useful formatters out-of-the-box.


### Output

*structlog* is also flexible with the final output of your log entries:

- A **built-in** lightweight printer like in the examples above.
  Easy to use and fast.
- Use the [**standard library**](standard-library.md)'s or [**Twisted**](twisted.md)'s logging modules for compatibility.
  In this case *structlog* works like a wrapper that formats a string and passes them off into existing systems that won't know that *structlog* even exists.

  Or the other way round: *structlog* comes with a `logging` formatter that allows for processing third party log records.
- Don't format it to a string at all!
  *structlog* passes you a dictionary and you can do with it whatever you want.
  Reported use cases are sending them out via network or saving them to a database.


### Highly Testable

*structlog* is thoroughly tested and we see it as our duty to help you to achieve the same in *your* applications.
That's why it ships with a [test helpers](testing.md) to introspect your application's logging behavior with little-to-no boilerplate.

</document_content>
</document>
<document index="25">
<source>/Users/malcolm/dev/structlog/docs/_static/BoundLogger.svg</source>
<document_content>
<svg xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round" clip-rule="evenodd" viewBox="0 0 702 182"><path fill="#fff" fill-rule="nonzero" d="M1 1h700v180H1z"/><path fill="#fff" fill-rule="nonzero" d="M3 1h696c1.097 0 2 .903 2 2v176c0 1.097-.903 2-2 2H3c-1.097 0-2-.903-2-2V3c0-1.097.903-2 2-2z"/><path fill="none" stroke="#000" stroke-width="2" d="M3 1h696c1.097 0 2 .903 2 2v176c0 1.097-.903 2-2 2H3c-1.097 0-2-.903-2-2V3c0-1.097.903-2 2-2z"/><path fill-rule="nonzero" d="M28.738 12.547h4.578c.906 0 1.582.038 2.027.113.446.076.844.233 1.196.473.351.239.644.558.879.957.234.398.351.845.351 1.34 0 .536-.144 1.028-.433 1.476-.29.448-.681.784-1.176 1.008.698.203 1.234.55 1.609 1.039.375.49.563 1.065.563 1.727a3.39 3.39 0 0 1-.364 1.519 3.061 3.061 0 0 1-.992 1.18c-.419.294-.936.475-1.551.543-.385.042-1.315.068-2.789.078h-3.898V12.547zm2.312 1.906v2.649h1.516c.901 0 1.461-.013 1.68-.039.396-.047.707-.184.933-.411.227-.226.34-.524.34-.894 0-.354-.098-.642-.293-.863-.195-.222-.486-.356-.871-.403-.229-.026-.888-.039-1.977-.039H31.05zm0 4.555v3.062h2.141c.833 0 1.362-.023 1.586-.07a1.43 1.43 0 0 0 .84-.457c.216-.242.324-.566.324-.973 0-.343-.083-.635-.25-.875a1.416 1.416 0 0 0-.723-.523c-.315-.109-.998-.164-2.05-.164H31.05zm8.711.726c0-.729.18-1.435.539-2.117a3.703 3.703 0 0 1 1.528-1.562c.659-.36 1.394-.539 2.207-.539 1.255 0 2.284.407 3.086 1.222s1.203 1.845 1.203 3.09c0 1.255-.405 2.296-1.215 3.121-.81.826-1.829 1.239-3.059 1.239-.76 0-1.485-.172-2.175-.516A3.54 3.54 0 0 1 40.3 22.16c-.359-.664-.539-1.472-.539-2.426zm2.25.118c0 .822.196 1.453.586 1.89.391.438.873.656 1.446.656.572 0 1.053-.218 1.441-.656.388-.437.582-1.073.582-1.906 0-.813-.194-1.438-.582-1.875a1.849 1.849 0 0 0-1.441-.656c-.573 0-1.055.218-1.446.656-.39.437-.586 1.068-.586 1.891zM55.503 24v-1.242a3.202 3.202 0 0 1-1.191 1.047 3.343 3.343 0 0 1-1.559.383 3.047 3.047 0 0 1-1.5-.368 2.16 2.16 0 0 1-.96-1.031c-.198-.443-.297-1.055-.297-1.836v-5.25h2.195v3.813c0 1.166.04 1.881.121 2.144.081.263.228.472.441.625.214.154.485.231.813.231.375 0 .711-.103 1.008-.309.297-.206.5-.461.609-.766.11-.304.164-1.05.164-2.238v-3.5h2.196V24h-2.04zm11.86 0h-2.195v-4.234c0-.896-.047-1.476-.141-1.739a1.22 1.22 0 0 0-.457-.613 1.306 1.306 0 0 0-.762-.219c-.38 0-.721.104-1.023.313a1.572 1.572 0 0 0-.621.828c-.112.344-.168.979-.168 1.906V24H59.8v-8.297h2.039v1.219c.724-.938 1.636-1.406 2.735-1.406.484 0 .927.087 1.328.261.401.175.704.397.91.668.206.271.349.578.43.922.081.344.121.836.121 1.477V24zm9.836 0H75.16v-1.219c-.339.474-.739.827-1.199 1.059a3.076 3.076 0 0 1-1.395.348c-.953 0-1.77-.385-2.449-1.153-.68-.768-1.02-1.84-1.02-3.215 0-1.406.331-2.475.992-3.207.662-.731 1.498-1.097 2.508-1.097.927 0 1.729.385 2.406 1.156v-4.125h2.196V24zm-5.86-4.328c0 .885.123 1.526.368 1.922.354.573.849.859 1.484.859.505 0 .935-.215 1.289-.644.354-.43.531-1.072.531-1.926 0-.953-.172-1.64-.515-2.059a1.633 1.633 0 0 0-1.321-.629c-.52 0-.957.207-1.308.621-.352.414-.528 1.033-.528 1.856zM79.441 24V12.641h2.312v9.429h5.75V24h-8.062zm9.187-4.266c0-.729.18-1.435.54-2.117a3.695 3.695 0 0 1 1.527-1.562c.659-.36 1.394-.539 2.207-.539 1.255 0 2.284.407 3.086 1.222s1.203 1.845 1.203 3.09c0 1.255-.405 2.296-1.215 3.121-.81.826-1.829 1.239-3.058 1.239a4.814 4.814 0 0 1-2.176-.516 3.537 3.537 0 0 1-1.574-1.512c-.36-.664-.54-1.472-.54-2.426zm2.25.118c0 .822.196 1.453.586 1.89.391.438.873.656 1.446.656s1.053-.218 1.441-.656c.388-.437.582-1.073.582-1.906 0-.813-.194-1.438-.582-1.875a1.847 1.847 0 0 0-1.441-.656c-.573 0-1.055.218-1.446.656-.39.437-.586 1.068-.586 1.891zm7.829 4.695 2.507.305c.042.291.138.492.289.601.209.156.537.235.985.235.573 0 1.002-.086 1.289-.258.193-.115.338-.3.437-.555.068-.182.102-.518.102-1.008v-1.211c-.656.896-1.484 1.344-2.484 1.344-1.115 0-1.998-.471-2.649-1.414-.51-.745-.765-1.672-.765-2.781 0-1.391.334-2.453 1.003-3.188.67-.734 1.502-1.101 2.497-1.101 1.026 0 1.872.45 2.539 1.351v-1.164h2.054v7.445c0 .98-.08 1.711-.242 2.196-.161.484-.388.864-.68 1.14-.291.276-.681.493-1.168.649-.487.156-1.102.234-1.847.234-1.406 0-2.404-.241-2.992-.722-.589-.482-.883-1.093-.883-1.832 0-.073.002-.162.008-.266zm1.961-4.867c0 .88.17 1.524.511 1.933.341.409.762.614 1.262.614.536 0 .99-.21 1.359-.629.37-.42.555-1.041.555-1.864 0-.859-.177-1.497-.531-1.914a1.69 1.69 0 0 0-1.344-.625c-.526 0-.96.205-1.301.614-.341.408-.511 1.032-.511 1.871zm7.812 4.867 2.508.305c.042.291.138.492.289.601.208.156.536.235.984.235.573 0 1.003-.086 1.289-.258.193-.115.339-.3.438-.555.068-.182.101-.518.101-1.008v-1.211c-.656.896-1.484 1.344-2.484 1.344-1.115 0-1.997-.471-2.648-1.414-.511-.745-.766-1.672-.766-2.781 0-1.391.335-2.453 1.004-3.188.669-.734 1.501-1.101 2.496-1.101 1.026 0 1.872.45 2.539 1.351v-1.164h2.055v7.445c0 .98-.081 1.711-.242 2.196-.162.484-.388.864-.68 1.14-.292.276-.681.493-1.168.649-.487.156-1.103.234-1.848.234-1.406 0-2.403-.241-2.992-.722-.588-.482-.883-1.093-.883-1.832 0-.073.003-.162.008-.266zm1.961-4.867c0 .88.171 1.524.512 1.933.341.409.761.614 1.261.614.537 0 .99-.21 1.36-.629.37-.42.554-1.041.554-1.864 0-.859-.177-1.497-.531-1.914a1.69 1.69 0 0 0-1.344-.625 1.62 1.62 0 0 0-1.3.614c-.341.408-.512 1.032-.512 1.871zm12.82 1.679 2.188.368c-.281.802-.725 1.412-1.332 1.832-.607.419-1.366.629-2.278.629-1.442 0-2.51-.472-3.203-1.415-.547-.755-.82-1.708-.82-2.859 0-1.375.359-2.452 1.078-3.23.719-.779 1.628-1.168 2.727-1.168 1.234 0 2.208.407 2.922 1.222.713.815 1.054 2.064 1.023 3.746h-5.5c.016.651.193 1.158.531 1.52.339.362.761.543 1.266.543.344 0 .633-.094.867-.281.234-.188.412-.49.531-.907zm.125-2.218c-.015-.636-.179-1.119-.492-1.45a1.513 1.513 0 0 0-1.141-.496c-.479 0-.875.175-1.187.524-.313.349-.466.823-.461 1.422h3.281zM129.457 24h-2.196v-8.297h2.039v1.18c.349-.557.663-.925.942-1.102a1.73 1.73 0 0 1 .949-.265c.5 0 .982.138 1.445.414l-.679 1.914c-.37-.24-.714-.36-1.032-.36a1.22 1.22 0 0 0-.781.254c-.213.17-.381.476-.504.918-.122.443-.183 1.37-.183 2.782V24z"/><path fill="#ffc0ff" fill-rule="nonzero" d="M28 40.75h196c1.097 0 2 .903 2 2v116c0 1.097-.903 2-2 2H28c-1.097 0-2-.903-2-2v-116c0-1.097.903-2 2-2z"/><path fill="none" stroke="#f0f" stroke-width="2" d="M28 40.75h196c1.097 0 2 .903 2 2v116c0 1.097-.903 2-2 2H28c-1.097 0-2-.903-2-2v-116c0-1.097.903-2 2-2z"/><path fill-rule="nonzero" d="M45.675 98.532h-.617c-.75 0-1.29-.202-1.621-.606-.331-.403-.496-1.152-.496-2.246v-.75c0-.974-.128-1.652-.383-2.035-.255-.383-.666-.574-1.234-.574v-1.273c.568 0 .979-.192 1.234-.575.255-.383.383-1.061.383-2.035v-.758c0-1.088.165-1.834.496-2.238.331-.404.871-.605 1.621-.605h.617v1.023h-.234c-.484 0-.822.104-1.012.313-.19.208-.285.705-.285 1.492v.5c0 1.078-.125 1.872-.375 2.383-.25.51-.674.888-1.273 1.132.599.25 1.023.631 1.273 1.141s.375 1.305.375 2.383v.5c0 .786.095 1.284.285 1.492.19.208.528.312 1.012.312h.234v1.024zm-.336 6.18-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm13.555 9.148h-1.219v-1.203c-.875.932-1.797 1.398-2.765 1.398-1.526 0-2.289-.924-2.289-2.773v-5.563h1.218v5.211c0 .693.11 1.21.328 1.551.219.341.589.512 1.11.512.745 0 1.544-.464 2.398-1.391v-5.883h1.219v8.141zm8.766-6.977c-.683-.224-1.326-.335-1.93-.335-.661 0-1.185.11-1.57.332-.386.221-.578.516-.578.886 0 .235.088.439.265.614.177.174.531.337 1.063.488l1.164.336c.536.151.974.332 1.312.543.339.211.593.466.762.765.169.3.254.647.254 1.043 0 .776-.326 1.39-.977 1.84-.651.451-1.479.676-2.484.676-1 0-1.826-.151-2.477-.453l.235-1.055a5.065 5.065 0 0 0 2.195.485c.677 0 1.228-.127 1.652-.379.425-.253.637-.588.637-1.004 0-.282-.105-.533-.316-.754-.211-.222-.707-.452-1.489-.692a92.647 92.647 0 0 1-1.39-.433 2.905 2.905 0 0 1-.828-.426 1.879 1.879 0 0 1-.582-.672c-.133-.26-.2-.552-.2-.875 0-.703.308-1.26.922-1.672.615-.411 1.43-.617 2.446-.617.656 0 1.385.112 2.187.336l-.273 1.023zm10.695 2.946h-5.586c0 .922.267 1.682.801 2.281.534.599 1.189.898 1.965.898a7.13 7.13 0 0 0 2.289-.398l.211.977c-.719.322-1.558.484-2.516.484-1.208 0-2.182-.388-2.922-1.164-.739-.776-1.109-1.823-1.109-3.141 0-1.291.332-2.321.996-3.09.664-.768 1.522-1.152 2.574-1.152.938 0 1.721.357 2.352 1.07.63.714.945 1.664.945 2.852v.383zm-1.328-.992c0-.636-.198-1.171-.594-1.606-.396-.435-.838-.652-1.328-.652-.63 0-1.152.208-1.566.625-.414.416-.645.961-.692 1.633h4.18zm10.812-2.899-.492 1.172c-.536-.234-1-.352-1.39-.352-.36 0-.711.103-1.055.309-.344.206-.66.5-.949.883-.289.383-.434.598-.434.644v5.266H79.48v-8.141h1.211v1.649c.651-1.229 1.495-1.844 2.531-1.844.615 0 1.211.138 1.789.414zm8.336-1.226-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm10.352.89c.265 0 .489.09.672.27a.89.89 0 0 1 .273.66c0 .26-.091.48-.273.66a.922.922 0 0 1-.672.27.895.895 0 0 1-.66-.27.898.898 0 0 1-.27-.66c0-.261.09-.481.27-.66a.895.895 0 0 1 .66-.27zm0 6.531a.93.93 0 0 1 .672.266.89.89 0 0 1 .273.664.878.878 0 0 1-.273.656.93.93 0 0 1-.672.266.903.903 0 0 1-.66-.266.883.883 0 0 1-.27-.656c0-.265.09-.487.27-.664a.903.903 0 0 1 .66-.266zm21.281-7.421-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm13.969 8.367a4.945 4.945 0 0 1-2.993.992c-1.432 0-2.518-.486-3.257-1.457-.74-.971-1.11-2.392-1.11-4.262 0-1.807.358-3.213 1.074-4.219.717-1.005 1.814-1.507 3.293-1.507.532 0 1.058.067 1.579.203.52.135.94.315 1.257.539l-.422 1.008a4.803 4.803 0 0 0-2.414-.625c-1.01 0-1.764.369-2.261 1.109-.498.74-.746 1.904-.746 3.492 0 3.063 1.002 4.594 3.007 4.594.756 0 1.326-.159 1.711-.477v-2.718h-1.984v-1.11h3.266v4.438zm9.187.781h-1.219v-1.203c-.875.932-1.797 1.398-2.765 1.398-1.526 0-2.289-.924-2.289-2.773v-5.563h1.218v5.211c0 .693.11 1.21.329 1.551.218.341.588.512 1.109.512.745 0 1.544-.464 2.398-1.391v-5.883h1.219v8.141zm6.992-11.219c.229 0 .425.082.586.246a.81.81 0 0 1 .242.59.824.824 0 0 1-.828.844.768.768 0 0 1-.566-.254.822.822 0 0 1 0-1.176.775.775 0 0 1 .566-.25zm.594 11.219h-1.219v-7.086h-2.398v-1.055h3.617v8.141zm11.602 0h-1.219v-1.172c-.25.401-.608.732-1.074.992a2.97 2.97 0 0 1-1.473.391c-.932 0-1.669-.415-2.211-1.246-.542-.831-.812-1.884-.812-3.16 0-1.193.282-2.181.847-2.965.565-.784 1.314-1.176 2.246-1.176 1.026 0 1.852.417 2.477 1.25v-3.937h1.219v11.023zm-1.219-2.492v-3.383c-.583-.937-1.287-1.406-2.11-1.406-.671 0-1.203.298-1.593.894-.391.597-.586 1.351-.586 2.262 0 .938.183 1.712.551 2.324.367.612.871.918 1.511.918.308 0 .617-.083.93-.25.312-.166.607-.416.883-.75.276-.333.414-.536.414-.609zm7.695-5.844c1.12 0 2.011.391 2.672 1.172.662.781.992 1.81.992 3.086 0 1.286-.33 2.323-.992 3.109-.661.787-1.552 1.18-2.672 1.18-1.125 0-2.017-.392-2.676-1.176-.658-.784-.988-1.821-.988-3.113 0-1.281.331-2.311.992-3.09.662-.779 1.552-1.168 2.672-1.168zm0 7.484c.74 0 1.323-.312 1.75-.937.427-.625.641-1.383.641-2.273 0-.938-.211-1.709-.633-2.313-.422-.604-1.008-.906-1.758-.906-.755 0-1.341.298-1.758.894-.416.597-.625 1.371-.625 2.325 0 .906.211 1.667.633 2.285.422.617 1.005.925 1.75.925zm11.617-8.296-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm10.43 9.359a1.041 1.041 0 0 1-.672-.336.944.944 0 0 1-.266-.656c0-.266.086-.49.258-.672a.856.856 0 0 1 .649-.274c.291 0 .544.119.757.356.214.237.321.522.321.855 0 1.021-.568 1.818-1.703 2.391l-.297-.562c.635-.313.953-.68.953-1.102zm-142.024 8.641-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm10.946-2.071c.229 0 .424.082.586.246a.813.813 0 0 1 .242.59c0 .24-.08.44-.238.602a.797.797 0 0 1-.59.242.769.769 0 0 1-.567-.254.822.822 0 0 1 0-1.176.776.776 0 0 1 .567-.25zm.593 11.219h-1.218v-7.086h-2.399v-1.055h3.617v8.141zm6.579-7.086c.27-.375.636-.677 1.097-.906a3.235 3.235 0 0 1 1.457-.344c.938 0 1.673.387 2.207 1.16.534.774.801 1.78.801 3.02 0 1.25-.28 2.29-.84 3.121-.56.831-1.314 1.246-2.262 1.246-.505 0-.977-.126-1.417-.379a2.873 2.873 0 0 1-1.043-1.004v4.391H59.41v-11.36h1.219v1.055zm0 1.211v3.383c.229.458.539.841.929 1.148.391.308.795.461 1.211.461.656 0 1.179-.307 1.567-.922.388-.614.582-1.377.582-2.289 0-.937-.185-1.703-.555-2.297-.37-.593-.885-.89-1.547-.89-.859 0-1.588.469-2.187 1.406zm13.515-3.273-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm10.352.89c.265 0 .489.09.671.27a.887.887 0 0 1 .274.66.89.89 0 0 1-.274.66.918.918 0 0 1-.671.27.898.898 0 0 1-.661-.27.9.9 0 0 1-.269-.66c0-.261.09-.481.269-.66.18-.18.4-.27.661-.27zm0 6.531c.265 0 .489.089.671.266a.886.886 0 0 1 .274.664.875.875 0 0 1-.274.656.926.926 0 0 1-.671.266.907.907 0 0 1-.661-.266.885.885 0 0 1-.269-.656c0-.265.09-.487.269-.664.18-.177.4-.266.661-.266zm21.281-7.421-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm11.523 3.101c.75.219 1.332.591 1.746 1.117.414.526.621 1.141.621 1.844 0 1.01-.334 1.813-1.004 2.406-.669.594-1.493.891-2.472.891-1.026 0-1.869-.3-2.528-.898-.658-.599-.988-1.394-.988-2.383 0-.698.214-1.313.641-1.844.427-.531 1.023-.909 1.789-1.133-.61-.156-1.098-.457-1.465-.902a2.295 2.295 0 0 1-.551-1.496c0-.709.281-1.351.844-1.926.562-.576 1.305-.863 2.227-.863.911 0 1.665.286 2.261.859.597.573.895 1.216.895 1.93 0 .536-.188 1.03-.563 1.48a2.786 2.786 0 0 1-1.453.918zm-1.14-.531c.026 0 .151-.031.375-.094.224-.062.415-.139.574-.23.159-.091.306-.207.441-.348.136-.141.245-.306.328-.496.084-.19.125-.402.125-.637 0-.5-.179-.915-.539-1.246a1.855 1.855 0 0 0-1.304-.496c-.495 0-.92.169-1.274.508-.354.338-.531.75-.531 1.234 0 .307.064.576.191.805.128.229.287.414.477.555.19.14.409.25.656.328.247.078.408.117.481.117zm0 1.094c-1.428.416-2.141 1.2-2.141 2.351 0 .672.216 1.21.648 1.613.433.404.94.606 1.524.606.604 0 1.113-.199 1.527-.598.414-.398.621-.939.621-1.621 0-.515-.143-.978-.429-1.387-.287-.408-.87-.73-1.75-.964zm9.585 3.695c.277 0 .508.094.696.281a.947.947 0 0 1 .281.696c0 .281-.095.522-.285.722a.917.917 0 0 1-.692.301.894.894 0 0 1-.679-.301 1.016 1.016 0 0 1-.281-.722.948.948 0 0 1 .96-.977zm10.758-4.258c.75.219 1.332.591 1.746 1.117.414.526.621 1.141.621 1.844 0 1.01-.334 1.813-1.003 2.406-.67.594-1.494.891-2.473.891-1.026 0-1.869-.3-2.527-.898-.659-.599-.989-1.394-.989-2.383 0-.698.214-1.313.641-1.844.427-.531 1.023-.909 1.789-1.133-.609-.156-1.098-.457-1.465-.902a2.295 2.295 0 0 1-.551-1.496c0-.709.282-1.351.844-1.926.563-.576 1.305-.863 2.227-.863.911 0 1.665.286 2.261.859.597.573.895 1.216.895 1.93 0 .536-.188 1.03-.563 1.48a2.786 2.786 0 0 1-1.453.918zm-1.14-.531c.026 0 .151-.031.375-.094.224-.062.415-.139.574-.23.159-.091.306-.207.441-.348.136-.141.245-.306.328-.496.084-.19.125-.402.125-.637 0-.5-.179-.915-.539-1.246a1.855 1.855 0 0 0-1.304-.496c-.495 0-.92.169-1.274.508-.354.338-.531.75-.531 1.234 0 .307.064.576.191.805.128.229.287.414.477.555.19.14.409.25.656.328.248.078.408.117.481.117zm0 1.094c-1.427.416-2.141 1.2-2.141 2.351 0 .672.216 1.21.648 1.613.433.404.941.606 1.524.606.604 0 1.113-.199 1.527-.598.414-.398.621-.939.621-1.621 0-.515-.143-.978-.429-1.387-.287-.408-.87-.73-1.75-.964zm9.586 3.695c.276 0 .507.094.695.281a.947.947 0 0 1 .281.696c0 .281-.095.522-.285.722a.916.916 0 0 1-.691.301.895.895 0 0 1-.68-.301 1.016 1.016 0 0 1-.281-.722.948.948 0 0 1 .961-.977zm10.757-4.258c.75.219 1.332.591 1.747 1.117.414.526.621 1.141.621 1.844 0 1.01-.335 1.813-1.004 2.406-.67.594-1.494.891-2.473.891-1.026 0-1.868-.3-2.527-.898-.659-.599-.989-1.394-.989-2.383 0-.698.214-1.313.641-1.844.427-.531 1.023-.909 1.789-1.133-.609-.156-1.098-.457-1.465-.902a2.295 2.295 0 0 1-.551-1.496c0-.709.282-1.351.844-1.926.563-.576 1.305-.863 2.227-.863.911 0 1.665.286 2.262.859.596.573.894 1.216.894 1.93 0 .536-.187 1.03-.562 1.48a2.79 2.79 0 0 1-1.454.918zm-1.14-.531c.026 0 .151-.031.375-.094.224-.062.415-.139.574-.23.159-.091.306-.207.441-.348a1.69 1.69 0 0 0 .329-.496c.083-.19.125-.402.125-.637 0-.5-.18-.915-.54-1.246a1.855 1.855 0 0 0-1.304-.496c-.495 0-.919.169-1.274.508-.354.338-.531.75-.531 1.234 0 .307.064.576.192.805.127.229.286.414.476.555.19.14.409.25.656.328.248.078.408.117.481.117zm0 1.094c-1.427.416-2.141 1.2-2.141 2.351 0 .672.216 1.21.649 1.613.432.404.94.606 1.523.606.604 0 1.113-.199 1.527-.598.414-.398.621-.939.621-1.621 0-.515-.143-.978-.429-1.387-.287-.408-.87-.73-1.75-.964zm9.586 3.695c.276 0 .508.094.695.281a.943.943 0 0 1 .281.696c0 .281-.095.522-.285.722a.915.915 0 0 1-.691.301.896.896 0 0 1-.68-.301 1.02 1.02 0 0 1-.281-.722.948.948 0 0 1 .961-.977zm10.758-4.258c.75.219 1.332.591 1.746 1.117.414.526.621 1.141.621 1.844 0 1.01-.335 1.813-1.004 2.406-.669.594-1.494.891-2.473.891-1.026 0-1.868-.3-2.527-.898-.659-.599-.988-1.394-.988-2.383 0-.698.213-1.313.64-1.844.427-.531 1.024-.909 1.789-1.133-.609-.156-1.097-.457-1.465-.902a2.294 2.294 0 0 1-.55-1.496c0-.709.281-1.351.843-1.926.563-.576 1.305-.863 2.227-.863.911 0 1.665.286 2.262.859.596.573.894 1.216.894 1.93 0 .536-.187 1.03-.562 1.48a2.79 2.79 0 0 1-1.453.918zm-1.141-.531c.026 0 .151-.031.375-.094.224-.062.415-.139.574-.23a1.98 1.98 0 0 0 .442-.348c.135-.141.244-.306.328-.496.083-.19.125-.402.125-.637 0-.5-.18-.915-.539-1.246a1.859 1.859 0 0 0-1.305-.496c-.495 0-.919.169-1.274.508-.354.338-.531.75-.531 1.234 0 .307.064.576.192.805.127.229.286.414.476.555.19.14.409.25.656.328.248.078.408.117.481.117zm0 1.094c-1.427.416-2.141 1.2-2.141 2.351 0 .672.216 1.21.649 1.613.432.404.94.606 1.523.606.604 0 1.113-.199 1.528-.598.414-.398.621-.939.621-1.621 0-.515-.144-.978-.43-1.387-.287-.408-.87-.73-1.75-.964zm11.648-3.664-.281 2.187h-.625l-.289-2.187v-1.875h1.195v1.875zm-2.828 0-.289 2.187h-.625l-.289-2.187v-1.875h1.203v1.875zm10.43 9.359a1.041 1.041 0 0 1-.672-.336.944.944 0 0 1-.266-.656c0-.266.086-.49.258-.672a.856.856 0 0 1 .649-.274c.291 0 .544.119.757.356.214.237.321.522.321.855 0 1.021-.568 1.818-1.703 2.391l-.297-.562c.635-.313.953-.68.953-1.102zm-142.07 14.25c-.563 0-.973.191-1.231.574-.258.383-.387 1.061-.387 2.035v.75c0 1.094-.164 1.843-.492 2.246-.328.404-.867.606-1.617.606h-.625v-1.024h.242c.485 0 .822-.104 1.012-.312.19-.208.285-.706.285-1.492v-.5c0-1.078.125-1.873.375-2.383s.675-.891 1.274-1.141c-.599-.244-1.024-.622-1.274-1.132-.25-.511-.375-1.305-.375-2.383v-.5c0-.787-.095-1.284-.285-1.492-.19-.209-.527-.313-1.012-.313h-.242v-1.023h.625c.75 0 1.289.201 1.617.605.328.404.492 1.15.492 2.238v.758c0 .88.115 1.535.344 1.965.229.43.654.645 1.274.645v1.273zm-4.557-90.258 2.242.711c-.343 1.25-.915 2.178-1.714 2.785-.8.607-1.814.91-3.043.91-1.521 0-2.771-.519-3.75-1.558-.98-1.039-1.469-2.46-1.469-4.262 0-1.906.492-3.387 1.476-4.441.985-1.055 2.279-1.582 3.883-1.582 1.401 0 2.539.414 3.414 1.242.521.489.912 1.192 1.172 2.109l-2.289.547c-.135-.594-.418-1.062-.848-1.406-.429-.344-.951-.516-1.566-.516-.849 0-1.538.305-2.066.914-.529.61-.793 1.597-.793 2.961 0 1.448.26 2.479.781 3.094.521.614 1.198.922 2.031.922a2.32 2.32 0 0 0 1.586-.586c.443-.391.76-1.005.953-1.844zm3.703-.055c0-.729.18-1.435.539-2.117a3.703 3.703 0 0 1 1.528-1.562c.659-.36 1.394-.539 2.207-.539 1.255 0 2.284.407 3.086 1.222s1.203 1.845 1.203 3.09c0 1.255-.405 2.296-1.215 3.121-.81.826-1.829 1.239-3.059 1.239-.76 0-1.485-.172-2.175-.516a3.54 3.54 0 0 1-1.575-1.512c-.359-.664-.539-1.472-.539-2.426zm2.25.118c0 .822.196 1.453.586 1.89.391.438.873.656 1.446.656.572 0 1.053-.218 1.441-.656.388-.437.582-1.073.582-1.906 0-.813-.194-1.438-.582-1.875a1.849 1.849 0 0 0-1.441-.656c-.573 0-1.055.218-1.446.656-.39.437-.586 1.068-.586 1.891zm15.578 4.148h-2.195V56.04c0-.896-.047-1.476-.14-1.739a1.222 1.222 0 0 0-.458-.613 1.3 1.3 0 0 0-.761-.219c-.38 0-.722.104-1.024.313a1.572 1.572 0 0 0-.621.828c-.112.344-.168.979-.168 1.906v3.758h-2.195v-8.297h2.039v1.219c.724-.938 1.635-1.406 2.734-1.406.485 0 .927.087 1.329.261.401.175.704.397.91.668.205.271.349.578.429.922.081.344.121.836.121 1.477v5.156zm6.032-8.297v1.75h-1.5v3.344c0 .677.014 1.071.043 1.183a.479.479 0 0 0 .195.278.619.619 0 0 0 .371.109c.203 0 .497-.07.883-.211l.187 1.703c-.51.219-1.088.329-1.734.329-.396 0-.753-.067-1.07-.2-.318-.133-.551-.304-.7-.515-.148-.211-.251-.496-.308-.856-.047-.255-.07-.771-.07-1.547v-3.617h-1.008v-1.75h1.008v-1.648l2.203-1.282v2.93h1.5zm6.328 5.656 2.187.368c-.281.802-.725 1.412-1.332 1.832-.606.419-1.366.629-2.277.629-1.443 0-2.51-.472-3.203-1.415-.547-.755-.82-1.708-.82-2.859 0-1.375.359-2.452 1.078-3.23.718-.779 1.627-1.168 2.726-1.168 1.235 0 2.209.407 2.922 1.222.714.815 1.055 2.064 1.024 3.746h-5.5c.015.651.192 1.158.531 1.52.338.362.76.543 1.265.543.344 0 .633-.094.868-.281.234-.188.411-.49.531-.907zm.125-2.218c-.016-.636-.18-1.119-.492-1.45a1.514 1.514 0 0 0-1.141-.496c-.479 0-.875.175-1.187.524-.313.349-.467.823-.461 1.422h3.281zm2.914 4.859 2.992-4.273-2.867-4.024h2.68l1.468 2.281 1.547-2.281h2.578l-2.812 3.93 3.07 4.367h-2.695l-1.688-2.57-1.703 2.57h-2.57zm13.758-8.297v1.75h-1.5v3.344c0 .677.014 1.071.043 1.183a.479.479 0 0 0 .195.278.619.619 0 0 0 .371.109c.203 0 .497-.07.883-.211l.187 1.703c-.51.219-1.088.329-1.734.329-.396 0-.753-.067-1.07-.2-.318-.133-.551-.304-.7-.515-.148-.211-.251-.496-.308-.856-.047-.255-.07-.771-.07-1.547v-3.617h-1.008v-1.75h1.008v-1.648l2.203-1.282v2.93h1.5z"/><path fill="#c0ffc0" fill-rule="nonzero" d="M251 40.75h200v120H251z"/><path fill="none" stroke="#0f0" stroke-width="2" d="M251 40.75h200v120H251z"/><path fill-rule="nonzero" d="M265.925 99.868h4.641v1.188h-4.641zm24.727 4.719a5.578 5.578 0 0 1-2.336.484c-1.281 0-2.303-.389-3.066-1.168-.763-.779-1.145-1.814-1.145-3.105 0-1.292.384-2.327 1.152-3.106.769-.779 1.778-1.168 3.028-1.168a6.4 6.4 0 0 1 2.336.43l-.321 1.008c-.739-.256-1.406-.383-2-.383-.895 0-1.605.289-2.128.867-.524.578-.786 1.362-.786 2.352 0 .906.271 1.667.813 2.285.542.617 1.247.925 2.117.925.688 0 1.396-.132 2.125-.398l.211.977zm9.875-3.758h-5.586c0 .922.267 1.682.801 2.281.534.599 1.189.898 1.965.898a7.13 7.13 0 0 0 2.289-.398l.211.977c-.719.322-1.558.484-2.516.484-1.208 0-2.182-.388-2.922-1.164-.739-.776-1.109-1.823-1.109-3.141 0-1.291.332-2.321.996-3.09.664-.768 1.522-1.152 2.574-1.152.938 0 1.721.357 2.352 1.07.63.714.945 1.664.945 2.852v.383zm-1.328-.992c0-.636-.198-1.171-.594-1.606-.396-.435-.838-.652-1.328-.652-.63 0-1.152.208-1.566.625-.414.416-.645.961-.692 1.633h4.18zm10.687 5.023h-1.218v-5.219c0-.724-.116-1.248-.348-1.574-.232-.325-.595-.488-1.09-.488-.745 0-1.544.463-2.398 1.39v5.891h-1.219v-8.141h1.219v1.196c.875-.927 1.797-1.391 2.765-1.391 1.526 0 2.289.922 2.289 2.766v5.57zm8.75-6.977c-.682-.224-1.325-.335-1.929-.335-.662 0-1.185.11-1.571.332-.385.221-.578.516-.578.886 0 .235.089.439.266.614.177.174.531.337 1.062.488l1.164.336c.537.151.974.332 1.313.543.338.211.592.466.762.765.169.3.254.647.254 1.043 0 .776-.326 1.39-.977 1.84-.651.451-1.479.676-2.484.676-1 0-1.826-.151-2.477-.453l.234-1.055a5.072 5.072 0 0 0 2.196.485c.677 0 1.228-.127 1.652-.379.425-.253.637-.588.637-1.004 0-.282-.106-.533-.317-.754-.211-.222-.707-.452-1.488-.692a89.044 89.044 0 0 1-1.39-.433 2.924 2.924 0 0 1-.829-.426 1.898 1.898 0 0 1-.582-.672 1.907 1.907 0 0 1-.199-.875c0-.703.307-1.26.922-1.672.615-.411 1.43-.617 2.445-.617.657 0 1.386.112 2.188.336l-.274 1.023zm7.297-1.359c1.12 0 2.011.391 2.672 1.172.662.781.992 1.81.992 3.086 0 1.286-.33 2.323-.992 3.109-.661.787-1.552 1.18-2.672 1.18-1.125 0-2.017-.392-2.676-1.176-.658-.784-.988-1.821-.988-3.113 0-1.281.331-2.311.992-3.09.662-.779 1.552-1.168 2.672-1.168zm0 7.484c.74 0 1.323-.312 1.75-.937.427-.625.641-1.383.641-2.273 0-.938-.211-1.709-.633-2.313-.422-.604-1.008-.906-1.758-.906-.755 0-1.341.298-1.758.894-.416.597-.625 1.371-.625 2.325 0 .906.211 1.667.633 2.285.422.617 1.005.925 1.75.925zm12.883-7.07-.492 1.172c-.537-.234-1-.352-1.391-.352-.359 0-.711.103-1.054.309a3.38 3.38 0 0 0-.95.883c-.289.383-.433.598-.433.644v5.266h-1.211v-8.141h1.211v1.649c.651-1.229 1.495-1.844 2.531-1.844.615 0 1.211.138 1.789.414zm1.524 10.383h9.602v1.023h-9.602zm14.929-13.68c.229 0 .425.082.586.246a.81.81 0 0 1 .242.59.824.824 0 0 1-.828.844.768.768 0 0 1-.566-.254.822.822 0 0 1 0-1.176.775.775 0 0 1 .566-.25zm.594 11.219h-1.219v-7.086h-2.398v-1.055h3.617v8.141zm6.578-7.086a2.934 2.934 0 0 1 1.098-.906 3.232 3.232 0 0 1 1.457-.344c.937 0 1.673.387 2.207 1.16.534.774.801 1.78.801 3.02 0 1.25-.28 2.29-.84 3.121-.56.831-1.314 1.246-2.262 1.246-.505 0-.978-.126-1.418-.379a2.88 2.88 0 0 1-1.043-1.004v4.391h-1.219v-11.36h1.219v1.055zm0 1.211v3.383c.229.458.539.841.93 1.148.39.308.794.461 1.211.461.656 0 1.178-.307 1.566-.922.388-.614.582-1.377.582-2.289 0-.937-.185-1.703-.555-2.297-.369-.593-.885-.89-1.546-.89-.86 0-1.589.469-2.188 1.406zm14.188 7.508-.477.672c-1.161-.881-2.047-1.904-2.656-3.071a7.861 7.861 0 0 1-.914-3.695c0-1.307.302-2.54.906-3.699.604-1.159 1.492-2.179 2.664-3.059l.477.672c-.954.854-1.64 1.749-2.059 2.684-.419.935-.629 2.064-.629 3.386 0 1.37.218 2.523.652 3.457.435.935 1.114 1.819 2.036 2.653zm4.711-12.852c1.166.88 2.052 1.9 2.656 3.059a7.89 7.89 0 0 1 .906 3.699 7.893 7.893 0 0 1-.91 3.695c-.607 1.167-1.491 2.19-2.652 3.071l-.485-.672c.953-.844 1.639-1.741 2.059-2.692.419-.95.629-2.089.629-3.418 0-1.369-.217-2.515-.649-3.437-.432-.922-1.112-1.8-2.039-2.633l.485-.672zm-115.415 24.227h4.641v1.188h-4.641zm24.961 4.992h-1.211c-.099-.328-.148-.766-.148-1.312-.693 1.015-1.635 1.523-2.828 1.523-.604 0-1.137-.215-1.598-.645-.461-.429-.691-.983-.691-1.66 0-.401.081-.755.242-1.062.161-.308.398-.567.711-.778a3.841 3.841 0 0 1 1.141-.5 8.54 8.54 0 0 1 1.593-.253l1.368-.11v-.39c0-1.396-.652-2.094-1.954-2.094-.307 0-.696.066-1.168.199a5.96 5.96 0 0 0-1.214.473l-.321-.875c1.11-.568 2.141-.852 3.094-.852 1.854 0 2.781.982 2.781 2.945v3.5c0 .709.068 1.339.203 1.891zm-1.421-2.414v-1.477c-1.099.099-1.853.192-2.262.278a2.555 2.555 0 0 0-1.063.48c-.299.235-.449.552-.449.953 0 .365.128.659.383.883.255.224.581.336.976.336.433 0 .862-.129 1.29-.387a3.782 3.782 0 0 0 1.125-1.066zm10.789 2.414h-1.219v-1.172c-.25.401-.608.732-1.074.992a2.973 2.973 0 0 1-1.473.391c-.932 0-1.669-.415-2.211-1.246-.542-.831-.812-1.884-.812-3.16 0-1.193.282-2.181.847-2.965.565-.784 1.314-1.176 2.246-1.176 1.026 0 1.852.417 2.477 1.25v-3.937h1.219v11.023zm-1.219-2.492v-3.383c-.584-.937-1.287-1.406-2.11-1.406-.671 0-1.203.298-1.593.894-.391.597-.586 1.351-.586 2.262 0 .938.183 1.712.551 2.324.367.612.871.918 1.511.918.308 0 .617-.083.93-.25.312-.166.607-.416.883-.75.276-.333.414-.536.414-.609zm10.82 2.492h-1.219v-1.172c-.25.401-.608.732-1.074.992a2.97 2.97 0 0 1-1.472.391c-.933 0-1.67-.415-2.211-1.246-.542-.831-.813-1.884-.813-3.16 0-1.193.283-2.181.848-2.965.565-.784 1.314-1.176 2.246-1.176 1.026 0 1.851.417 2.476 1.25v-3.937h1.219v11.023zm-1.219-2.492v-3.383c-.583-.937-1.286-1.406-2.109-1.406-.672 0-1.203.298-1.594.894-.39.597-.586 1.351-.586 2.262 0 .938.184 1.712.551 2.324.367.612.871.918 1.512.918.307 0 .617-.083.93-.25.312-.166.606-.416.882-.75.276-.333.414-.536.414-.609zm2.899 4.953h9.602v1.023h-9.602zm17.633-2.828c-.818.375-1.623.562-2.414.562-1.454 0-2.18-.768-2.18-2.304v-4.977h-1.563v-1.055h1.563v-2.226h1.187v2.226h2.766v1.055h-2.766v4.656c0 .495.11.879.329 1.153.218.273.515.41.89.41.667 0 1.326-.149 1.977-.445l.211.945zm6.898-10.852c.229 0 .425.082.586.246a.813.813 0 0 1 .242.59.824.824 0 0 1-.828.844.768.768 0 0 1-.566-.254.822.822 0 0 1 0-1.176.775.775 0 0 1 .566-.25zm.594 11.219h-1.219v-7.086h-2.398v-1.055h3.617v8.141zm12.273 0h-1.218v-5.344c0-1.291-.24-1.937-.719-1.937-.245 0-.515.222-.809.668-.294.445-.441.691-.441.738v5.875h-1.211v-5.344c0-1.291-.242-1.937-.727-1.937-.239 0-.506.222-.801.668-.294.445-.441.691-.441.738v5.875h-1.219v-8.141h1.172v1.227c.229-.432.501-.777.817-1.035.315-.258.629-.387.941-.387.328 0 .622.129.883.387.26.258.44.603.539 1.035.229-.432.502-.777.82-1.035.318-.258.63-.387.938-.387.984 0 1.476.88 1.476 2.641v5.695zm9.203-4.031h-5.586c0 .922.267 1.682.801 2.281.534.599 1.189.898 1.965.898a7.12 7.12 0 0 0 2.289-.398l.211.977c-.719.322-1.557.484-2.516.484-1.208 0-2.182-.388-2.921-1.164-.74-.776-1.11-1.823-1.11-3.141 0-1.291.332-2.321.996-3.09.664-.768 1.522-1.152 2.575-1.152.937 0 1.721.357 2.351 1.07.63.714.945 1.664.945 2.852v.383zm-1.328-.992c0-.636-.198-1.171-.593-1.606-.396-.435-.839-.652-1.329-.652-.63 0-1.152.208-1.566.625-.414.416-.645.961-.691 1.633h4.179zm9.836-1.954c-.682-.224-1.325-.335-1.929-.335-.662 0-1.185.11-1.571.332-.385.221-.578.516-.578.886 0 .235.089.439.266.614.177.174.531.337 1.062.488l1.164.336c.537.151.974.332 1.313.543.338.211.592.466.761.765.17.3.254.647.254 1.043 0 .776-.325 1.39-.976 1.84-.651.451-1.479.676-2.485.676-1 0-1.825-.151-2.476-.453l.234-1.055a5.07 5.07 0 0 0 2.196.485c.677 0 1.227-.127 1.652-.379.424-.253.637-.588.637-1.004 0-.282-.106-.533-.317-.754-.211-.222-.707-.452-1.488-.692a93.67 93.67 0 0 1-1.391-.433 2.905 2.905 0 0 1-.828-.426 1.898 1.898 0 0 1-.582-.672 1.894 1.894 0 0 1-.199-.875c0-.703.307-1.26.922-1.672.614-.411 1.43-.617 2.445-.617.656 0 1.386.112 2.188.336l-.274 1.023zm10.531 6.61c-.817.375-1.622.562-2.414.562-1.453 0-2.179-.768-2.179-2.304v-4.977h-1.563v-1.055h1.563v-2.226h1.187v2.226h2.766v1.055h-2.766v4.656c0 .495.11.879.328 1.153.219.273.516.41.891.41a4.74 4.74 0 0 0 1.977-.445l.21.945zm9.727.367h-1.211c-.099-.328-.148-.766-.148-1.312-.693 1.015-1.636 1.523-2.828 1.523-.605 0-1.137-.215-1.598-.645-.461-.429-.692-.983-.692-1.66 0-.401.081-.755.243-1.062.161-.308.398-.567.711-.778a3.835 3.835 0 0 1 1.14-.5 8.552 8.552 0 0 1 1.594-.253l1.367-.11v-.39c0-1.396-.651-2.094-1.953-2.094-.307 0-.697.066-1.168.199s-.876.29-1.215.473l-.32-.875c1.109-.568 2.141-.852 3.094-.852 1.854 0 2.781.982 2.781 2.945v3.5c0 .709.068 1.339.203 1.891zm-1.422-2.414v-1.477c-1.099.099-1.853.192-2.262.278a2.55 2.55 0 0 0-1.062.48c-.3.235-.449.552-.449.953 0 .365.127.659.383.883.255.224.58.336.976.336.432 0 .862-.129 1.289-.387a3.782 3.782 0 0 0 1.125-1.066zm11.461 2.414h-1.219v-5.344c0-1.291-.239-1.937-.718-1.937-.245 0-.515.222-.809.668-.294.445-.441.691-.441.738v5.875h-1.211v-5.344c0-1.291-.243-1.937-.727-1.937-.24 0-.506.222-.801.668-.294.445-.441.691-.441.738v5.875h-1.219v-8.141h1.172v1.227a3.33 3.33 0 0 1 .816-1.035c.316-.258.629-.387.942-.387.328 0 .622.129.883.387.26.258.44.603.539 1.035.229-.432.502-.777.82-1.035.318-.258.63-.387.938-.387.984 0 1.476.88 1.476 2.641v5.695zm3.906-7.086a2.934 2.934 0 0 1 1.098-.906 3.235 3.235 0 0 1 1.457-.344c.938 0 1.673.387 2.207 1.16.534.774.801 1.78.801 3.02 0 1.25-.28 2.29-.84 3.121-.56.831-1.314 1.246-2.262 1.246-.505 0-.978-.126-1.418-.379a2.889 2.889 0 0 1-1.043-1.004v4.391h-1.218v-11.36h1.218v1.055zm0 1.211v3.383c.229.458.539.841.93 1.148.391.308.794.461 1.211.461.656 0 1.178-.307 1.566-.922.388-.614.582-1.377.582-2.289 0-.937-.185-1.703-.554-2.297-.37-.593-.886-.89-1.547-.89-.86 0-1.589.469-2.188 1.406zm14.188 7.508-.477.672c-1.161-.881-2.047-1.904-2.656-3.071a7.873 7.873 0 0 1-.914-3.695c0-1.307.302-2.54.906-3.699.604-1.159 1.492-2.179 2.664-3.059l.477.672c-.953.854-1.64 1.749-2.059 2.684-.419.935-.629 2.064-.629 3.386 0 1.37.218 2.523.653 3.457.435.935 1.113 1.819 2.035 2.653zm4.711-12.852c1.166.88 2.052 1.9 2.656 3.059a7.89 7.89 0 0 1 .906 3.699 7.893 7.893 0 0 1-.91 3.695c-.607 1.167-1.491 2.19-2.652 3.071l-.485-.672c.954-.844 1.64-1.741 2.059-2.692.419-.95.629-2.089.629-3.418 0-1.369-.216-2.515-.649-3.437-.432-.922-1.112-1.8-2.039-2.633l.485-.672zm-153.821 24.227h4.641v1.188h-4.641zm24.836-5.906-.32.992c-.578-.167-1.096-.25-1.555-.25-.437 0-.738.123-.902.371-.164.247-.246.746-.246 1.496v.148h2.734v1.055h-2.734v7.086h-1.219v-7.086h-2.047v-1.055h2.047v-.273c0-1.037.177-1.763.531-2.18.355-.416.967-.625 1.836-.625.563 0 1.188.107 1.875.321zm6.368 2.562c1.119 0 2.01.391 2.671 1.172.662.781.993 1.81.993 3.086 0 1.286-.331 2.323-.993 3.109-.661.787-1.552 1.18-2.671 1.18-1.125 0-2.017-.392-2.676-1.176-.659-.784-.988-1.821-.988-3.113 0-1.281.33-2.311.992-3.09.661-.779 1.552-1.168 2.672-1.168zm0 7.484c.739 0 1.322-.312 1.75-.937.427-.625.64-1.383.64-2.273 0-.938-.211-1.709-.633-2.313-.421-.604-1.007-.906-1.757-.906-.756 0-1.342.298-1.758.894-.417.597-.625 1.371-.625 2.325 0 .906.211 1.667.633 2.285.421.617 1.005.925 1.75.925zm12.882-7.07-.492 1.172c-.536-.234-1-.352-1.39-.352-.36 0-.711.103-1.055.309-.344.206-.66.5-.949.883-.289.383-.434.598-.434.644v5.266h-1.211v-8.141h1.211v1.649c.651-1.229 1.495-1.844 2.531-1.844.615 0 1.211.138 1.789.414zm10.118 7.922h-1.219v-5.344c0-1.291-.24-1.937-.719-1.937-.245 0-.514.222-.809.668-.294.445-.441.691-.441.738v5.875h-1.211v-5.344c0-1.291-.242-1.937-.726-1.937-.24 0-.507.222-.801.668-.294.445-.442.691-.442.738v5.875h-1.218v-8.141h1.172v1.227a3.33 3.33 0 0 1 .816-1.035c.315-.258.629-.387.941-.387.328 0 .623.129.883.387.261.258.44.603.539 1.035.229-.432.503-.777.821-1.035.317-.258.63-.387.937-.387.984 0 1.477.88 1.477 2.641v5.695zm9.164 0h-1.211c-.099-.328-.149-.766-.149-1.312-.692 1.015-1.635 1.523-2.828 1.523-.604 0-1.137-.215-1.598-.645-.46-.429-.691-.983-.691-1.66 0-.401.081-.755.242-1.062.162-.308.399-.567.711-.778a3.852 3.852 0 0 1 1.141-.5 8.552 8.552 0 0 1 1.594-.253l1.367-.11v-.39c0-1.396-.651-2.094-1.953-2.094-.308 0-.697.066-1.168.199-.472.133-.877.29-1.215.473l-.32-.875c1.109-.568 2.14-.852 3.093-.852 1.854 0 2.782.982 2.782 2.945v3.5c0 .709.067 1.339.203 1.891zm-1.422-2.414v-1.477c-1.099.099-1.853.192-2.262.278a2.545 2.545 0 0 0-1.062.48c-.3.235-.45.552-.45.953 0 .365.128.659.383.883.255.224.581.336.977.336.432 0 .862-.129 1.289-.387a3.782 3.782 0 0 0 1.125-1.066zm10.898 2.047c-.818.375-1.622.562-2.414.562-1.453 0-2.18-.768-2.18-2.304v-4.977h-1.562v-1.055h1.562v-2.226h1.188v2.226h2.766v1.055h-2.766v4.656c0 .495.109.879.328 1.153.219.273.516.41.891.41.666 0 1.325-.149 1.976-.445l.211.945zm1.571 2.828h9.602v1.023h-9.602zm17.632-2.828c-.817.375-1.622.562-2.414.562-1.453 0-2.179-.768-2.179-2.304v-4.977h-1.563v-1.055h1.563v-2.226h1.187v2.226h2.766v1.055h-2.766v4.656c0 .495.109.879.328 1.153.219.273.516.41.891.41.666 0 1.325-.149 1.976-.445l.211.945zm6.368-7.969c1.119 0 2.01.391 2.671 1.172.662.781.993 1.81.993 3.086 0 1.286-.331 2.323-.993 3.109-.661.787-1.552 1.18-2.671 1.18-1.125 0-2.017-.392-2.676-1.176-.659-.784-.989-1.821-.989-3.113 0-1.281.331-2.311.993-3.09.661-.779 1.552-1.168 2.672-1.168zm0 7.484c.739 0 1.322-.312 1.75-.937.427-.625.64-1.383.64-2.273 0-.938-.211-1.709-.633-2.313-.422-.604-1.007-.906-1.757-.906-.756 0-1.342.298-1.758.894-.417.597-.625 1.371-.625 2.325 0 .906.211 1.667.633 2.285.421.617 1.005.925 1.75.925zm4.804 3.313h9.602v1.023h-9.602zm14.93-13.68c.229 0 .424.082.586.246a.813.813 0 0 1 .242.59.824.824 0 0 1-.828.844.77.77 0 0 1-.567-.254.822.822 0 0 1 0-1.176.777.777 0 0 1 .567-.25zm.594 11.633c0 1.021-.176 1.744-.528 2.168-.351.425-.965.637-1.84.637-.562 0-1.187-.107-1.875-.321l.321-.992c.578.167 1.096.25 1.554.25.438 0 .739-.123.903-.371.164-.247.246-.746.246-1.496v-7.375h-2.399v-1.055h3.618v8.555zm10.781-7.391c-.682-.224-1.326-.335-1.93-.335-.661 0-1.185.11-1.57.332-.386.221-.578.516-.578.886 0 .235.088.439.265.614.177.174.532.337 1.063.488l1.164.336c.536.151.974.332 1.312.543.339.211.593.466.762.765.169.3.254.647.254 1.043 0 .776-.325 1.39-.976 1.84-.652.451-1.48.676-2.485.676-1 0-1.825-.151-2.476-.453l.234-1.055a5.065 5.065 0 0 0 2.195.485c.677 0 1.228-.127 1.653-.379.424-.253.636-.588.636-1.004 0-.282-.105-.533-.316-.754-.211-.222-.707-.452-1.488-.692a89.996 89.996 0 0 1-1.391-.433 2.905 2.905 0 0 1-.828-.426 1.898 1.898 0 0 1-.582-.672 1.894 1.894 0 0 1-.199-.875c0-.703.307-1.26.922-1.672.614-.411 1.429-.617 2.445-.617.656 0 1.385.112 2.187.336l-.273 1.023zm7.297-1.359c1.12 0 2.01.391 2.672 1.172.661.781.992 1.81.992 3.086 0 1.286-.331 2.323-.992 3.109-.662.787-1.552 1.18-2.672 1.18-1.125 0-2.017-.392-2.676-1.176-.659-.784-.988-1.821-.988-3.113 0-1.281.33-2.311.992-3.09.661-.779 1.552-1.168 2.672-1.168zm0 7.484c.739 0 1.323-.312 1.75-.937.427-.625.64-1.383.64-2.273 0-.938-.211-1.709-.632-2.313-.422-.604-1.008-.906-1.758-.906-.755 0-1.341.298-1.758.894-.417.597-.625 1.371-.625 2.325 0 .906.211 1.667.633 2.285.422.617 1.005.925 1.75.925zm12.758.852h-1.219v-5.219c0-.724-.116-1.248-.348-1.574-.232-.325-.595-.488-1.09-.488-.744 0-1.544.463-2.398 1.39v5.891h-1.219v-8.141h1.219v1.196c.875-.927 1.797-1.391 2.766-1.391 1.526 0 2.289.922 2.289 2.766v5.57zm9.132 1.633-.476.672c-1.162-.881-2.047-1.904-2.656-3.071a7.861 7.861 0 0 1-.914-3.695c0-1.307.302-2.54.906-3.699.604-1.159 1.492-2.179 2.664-3.059l.476.672c-.953.854-1.639 1.749-2.058 2.684-.419.935-.629 2.064-.629 3.386 0 1.37.217 2.523.652 3.457.435.935 1.114 1.819 2.035 2.653zm4.711-12.852c1.167.88 2.052 1.9 2.657 3.059a7.89 7.89 0 0 1 .906 3.699 7.905 7.905 0 0 1-.91 3.695c-.607 1.167-1.491 2.19-2.653 3.071l-.484-.672c.953-.844 1.639-1.741 2.059-2.692.419-.95.628-2.089.628-3.418 0-1.369-.216-2.515-.648-3.437-.432-.922-1.112-1.8-2.039-2.633l.484-.672zM257.604 60.274V48.821h3.711c1.406 0 2.323.057 2.75.172.656.172 1.206.545 1.648 1.121.443.575.665 1.319.665 2.23 0 .703-.128 1.295-.383 1.774-.256.479-.58.855-.973 1.129a3.367 3.367 0 0 1-1.199.543c-.552.109-1.352.164-2.399.164h-1.507v4.32h-2.313zm2.313-9.516v3.25h1.265c.912 0 1.521-.06 1.828-.179.308-.12.548-.308.723-.563.174-.255.262-.552.262-.89 0-.417-.123-.761-.367-1.032a1.595 1.595 0 0 0-.93-.507c-.276-.053-.831-.079-1.664-.079h-1.117zm10.445 9.516h-2.195v-8.297h2.039v1.18c.349-.557.662-.925.941-1.102.279-.177.595-.265.949-.265.5 0 .982.138 1.446.414l-.68 1.914c-.37-.24-.714-.36-1.031-.36-.308 0-.568.085-.782.254-.213.17-.381.476-.504.918-.122.443-.183 1.37-.183 2.782v2.562zm3.617-4.266c0-.729.18-1.435.539-2.117a3.706 3.706 0 0 1 1.527-1.562c.659-.36 1.395-.539 2.208-.539 1.255 0 2.283.407 3.085 1.222.803.815 1.204 1.845 1.204 3.09 0 1.255-.405 2.296-1.215 3.121-.81.826-1.83 1.239-3.059 1.239-.76 0-1.486-.172-2.176-.516a3.543 3.543 0 0 1-1.574-1.512c-.359-.664-.539-1.472-.539-2.426zm2.25.118c0 .822.195 1.453.586 1.89a1.86 1.86 0 0 0 1.445.656 1.85 1.85 0 0 0 1.442-.656c.388-.437.582-1.073.582-1.906 0-.813-.194-1.438-.582-1.875a1.85 1.85 0 0 0-1.442-.656 1.86 1.86 0 0 0-1.445.656c-.391.437-.586 1.068-.586 1.891zm15.266-1.696-2.164.391c-.073-.432-.239-.758-.496-.977-.258-.218-.593-.328-1.004-.328-.547 0-.983.189-1.309.567-.325.377-.488 1.009-.488 1.894 0 .985.165 1.68.496 2.086.331.406.775.609 1.332.609.417 0 .758-.118 1.023-.355.266-.237.453-.645.563-1.223l2.156.368c-.224.989-.654 1.736-1.289 2.242-.635.505-1.487.758-2.555.758-1.213 0-2.181-.383-2.902-1.149-.721-.766-1.082-1.825-1.082-3.18 0-1.369.362-2.436 1.086-3.199.724-.763 1.703-1.144 2.937-1.144 1.011 0 1.814.217 2.411.652.596.435 1.024 1.098 1.285 1.988zm6.468 3.203 2.188.368c-.281.802-.725 1.412-1.332 1.832-.607.419-1.366.629-2.277.629-1.443 0-2.511-.472-3.204-1.415-.546-.755-.82-1.708-.82-2.859 0-1.375.36-2.452 1.078-3.23.719-.779 1.628-1.168 2.727-1.168 1.234 0 2.208.407 2.922 1.222.713.815 1.054 2.064 1.023 3.746h-5.5c.016.651.193 1.158.531 1.52.339.362.761.543 1.266.543.344 0 .633-.094.867-.281.235-.188.412-.49.531-.907zm.125-2.218c-.015-.636-.179-1.119-.492-1.45a1.51 1.51 0 0 0-1.14-.496c-.48 0-.875.175-1.188.524-.312.349-.466.823-.461 1.422h3.281zm3.196 2.492 2.203-.336c.094.427.284.751.57.973.287.221.688.332 1.203.332.568 0 .995-.105 1.282-.313a.7.7 0 0 0 .289-.586.572.572 0 0 0-.157-.414c-.109-.104-.354-.2-.734-.289-1.771-.391-2.893-.747-3.367-1.07-.656-.448-.985-1.071-.985-1.867 0-.719.284-1.323.852-1.813.568-.49 1.448-.734 2.641-.734 1.135 0 1.979.185 2.531.554.552.37.932.917 1.141 1.641l-2.071.383a1.271 1.271 0 0 0-.504-.742c-.247-.172-.6-.258-1.058-.258-.578 0-.992.08-1.242.242a.52.52 0 0 0-.25.445c0 .157.072.289.218.399.198.146.882.351 2.051.617s1.986.591 2.449.976c.459.391.688.935.688 1.633 0 .761-.318 1.414-.953 1.961-.636.547-1.576.821-2.821.821-1.13 0-2.024-.23-2.683-.688a3.166 3.166 0 0 1-1.293-1.867zm8.898 0 2.203-.336c.094.427.284.751.571.973.286.221.687.332 1.203.332.567 0 .995-.105 1.281-.313a.697.697 0 0 0 .289-.586.576.576 0 0 0-.156-.414c-.11-.104-.354-.2-.735-.289-1.77-.391-2.893-.747-3.367-1.07-.656-.448-.984-1.071-.984-1.867 0-.719.284-1.323.851-1.813.568-.49 1.448-.734 2.641-.734 1.135 0 1.979.185 2.531.554.552.37.933.917 1.141 1.641l-2.07.383a1.28 1.28 0 0 0-.504-.742c-.248-.172-.601-.258-1.059-.258-.578 0-.992.08-1.242.242a.52.52 0 0 0-.25.445c0 .157.073.289.219.399.198.146.881.351 2.05.617 1.17.266 1.986.591 2.45.976.458.391.687.935.687 1.633 0 .761-.318 1.414-.953 1.961-.635.547-1.575.821-2.82.821-1.13 0-2.025-.23-2.684-.688a3.166 3.166 0 0 1-1.293-1.867zm9.164-1.899c0-.729.18-1.435.539-2.117a3.703 3.703 0 0 1 1.528-1.562c.659-.36 1.394-.539 2.207-.539 1.255 0 2.284.407 3.086 1.222s1.203 1.845 1.203 3.09c0 1.255-.405 2.296-1.215 3.121-.81.826-1.83 1.239-3.059 1.239-.76 0-1.485-.172-2.175-.516a3.54 3.54 0 0 1-1.575-1.512c-.359-.664-.539-1.472-.539-2.426zm2.25.118c0 .822.196 1.453.586 1.89.391.438.873.656 1.446.656.572 0 1.053-.218 1.441-.656.388-.437.582-1.073.582-1.906 0-.813-.194-1.438-.582-1.875a1.849 1.849 0 0 0-1.441-.656c-.573 0-1.055.218-1.446.656-.39.437-.586 1.068-.586 1.891zm10.133 4.148h-2.195v-8.297h2.039v1.18c.349-.557.663-.925.941-1.102.279-.177.595-.265.949-.265.5 0 .982.138 1.446.414l-.68 1.914c-.37-.24-.713-.36-1.031-.36-.307 0-.568.085-.781.254-.214.17-.382.476-.504.918-.123.443-.184 1.37-.184 2.782v2.562zm3.352-2.367 2.203-.336c.094.427.284.751.57.973.287.221.688.332 1.203.332.568 0 .995-.105 1.281-.313a.698.698 0 0 0 .29-.586.576.576 0 0 0-.157-.414c-.109-.104-.354-.2-.734-.289-1.771-.391-2.893-.747-3.367-1.07-.657-.448-.985-1.071-.985-1.867 0-.719.284-1.323.852-1.813.568-.49 1.448-.734 2.641-.734 1.135 0 1.979.185 2.531.554.552.37.932.917 1.14 1.641l-2.07.383a1.271 1.271 0 0 0-.504-.742c-.247-.172-.6-.258-1.058-.258-.579 0-.993.08-1.243.242a.522.522 0 0 0-.25.445c0 .157.073.289.219.399.198.146.882.351 2.051.617s1.986.591 2.449.976c.458.391.688.935.688 1.633 0 .761-.318 1.414-.953 1.961-.636.547-1.576.821-2.821.821-1.13 0-2.025-.23-2.683-.688a3.166 3.166 0 0 1-1.293-1.867z"/><path fill="#ffffc0" fill-rule="nonzero" d="M476 40.75h200v120H476z"/><path fill="none" stroke="#fffc00" stroke-width="2" d="M476 40.75h200v120H476z"/><path fill-rule="nonzero" d="M495.886 122.86h-3.328v-9.969h-2.125v-1.054h3.344v9.968h2.109v1.055zm7.039-8.336c1.12 0 2.011.391 2.672 1.172.662.781.993 1.81.993 3.086 0 1.286-.331 2.323-.993 3.109-.661.787-1.552 1.18-2.672 1.18-1.125 0-2.016-.392-2.675-1.176-.659-.784-.989-1.821-.989-3.113 0-1.281.331-2.311.993-3.09.661-.779 1.552-1.168 2.671-1.168zm0 7.484c.74 0 1.323-.312 1.75-.937.428-.625.641-1.383.641-2.273 0-.938-.211-1.709-.633-2.313-.422-.604-1.008-.906-1.758-.906-.755 0-1.341.298-1.757.894-.417.597-.625 1.371-.625 2.325 0 .906.211 1.667.632 2.285.422.617 1.006.925 1.75.925zm8.743-2.218c-.761.369-1.141.695-1.141.976 0 .151.087.279.262.383.174.104.412.156.715.156l2.742-.078c.651 0 1.157.159 1.519.477.362.317.543.768.543 1.351 0 .922-.411 1.657-1.234 2.203-.823.547-1.784.821-2.883.821-.901 0-1.638-.189-2.211-.567-.573-.377-.859-.866-.859-1.464 0-.652.442-1.201 1.328-1.649-.734-.344-1.102-.766-1.102-1.266 0-.572.474-1.106 1.422-1.601a2.78 2.78 0 0 1-1.008-1.031 2.717 2.717 0 0 1-.351-1.336c0-.766.26-1.395.781-1.887s1.172-.738 1.953-.738c.563 0 1.071.117 1.524.351l2.414-.367v1.188h-1.555c.234.411.352.895.352 1.453 0 .739-.258 1.364-.774 1.875-.515.51-1.169.765-1.961.765a7.22 7.22 0 0 1-.476-.015zm.476-.93c.448 0 .814-.155 1.098-.465.284-.31.426-.715.426-1.215 0-.526-.138-.937-.414-1.234-.276-.297-.646-.445-1.11-.445-.432 0-.795.155-1.09.464-.294.31-.441.715-.441 1.215 0 .49.147.892.441 1.207.295.315.658.473 1.09.473zm.047 6.273c.802 0 1.486-.178 2.051-.535.565-.356.848-.798.848-1.324 0-.542-.402-.812-1.204-.812-.265 0-.724.015-1.375.046-.411.021-.734.032-.968.032-.115 0-.293.093-.536.281a2.483 2.483 0 0 0-.554.566c-.128.19-.192.387-.192.59 0 .318.177.59.532.817.354.226.82.339 1.398.339zm9.078-5.343c-.76.369-1.14.695-1.14.976 0 .151.087.279.261.383.175.104.413.156.715.156l2.742-.078c.651 0 1.158.159 1.52.477.362.317.543.768.543 1.351 0 .922-.412 1.657-1.235 2.203-.822.547-1.783.821-2.882.821-.901 0-1.638-.189-2.211-.567-.573-.377-.86-.866-.86-1.464 0-.652.443-1.201 1.328-1.649-.734-.344-1.101-.766-1.101-1.266 0-.572.474-1.106 1.422-1.601a2.766 2.766 0 0 1-1.36-2.367c0-.766.261-1.395.782-1.887.52-.492 1.172-.738 1.953-.738.562 0 1.07.117 1.523.351l2.414-.367v1.188h-1.554c.234.411.351.895.351 1.453a2.54 2.54 0 0 1-.773 1.875c-.516.51-1.17.765-1.961.765a7.23 7.23 0 0 1-.477-.015zm.477-.93c.448 0 .814-.155 1.097-.465.284-.31.426-.715.426-1.215 0-.526-.138-.937-.414-1.234-.276-.297-.646-.445-1.109-.445-.433 0-.796.155-1.09.464-.294.31-.441.715-.441 1.215 0 .49.147.892.441 1.207.294.315.657.473 1.09.473zm.047 6.273c.802 0 1.485-.178 2.05-.535.566-.356.848-.798.848-1.324 0-.542-.401-.812-1.203-.812a33.3 33.3 0 0 0-1.375.046c-.412.021-.734.032-.969.032-.114 0-.293.093-.535.281a2.51 2.51 0 0 0-.555.566 1.05 1.05 0 0 0-.191.59c0 .318.177.59.531.817.354.226.821.339 1.399.339zm10.468-13.492a.79.79 0 0 1 .586.246.81.81 0 0 1 .243.59.825.825 0 0 1-.829.844.768.768 0 0 1-.566-.254.822.822 0 0 1 0-1.176.775.775 0 0 1 .566-.25zm.594 11.219h-1.219v-7.086h-2.398v-1.055h3.617v8.141zm11.633 0h-1.219v-5.219c0-.724-.116-1.248-.347-1.574-.232-.325-.596-.488-1.09-.488-.745 0-1.545.463-2.399 1.39v5.891h-1.218v-8.141h1.218v1.196c.875-.927 1.797-1.391 2.766-1.391 1.526 0 2.289.922 2.289 2.766v5.57zm5.586-3.07c-.761.369-1.141.695-1.141.976 0 .151.087.279.262.383.174.104.413.156.715.156l2.742-.078c.651 0 1.158.159 1.52.477.362.317.543.768.543 1.351 0 .922-.412 1.657-1.235 2.203-.823.547-1.784.821-2.883.821-.901 0-1.638-.189-2.211-.567-.573-.377-.859-.866-.859-1.464 0-.652.443-1.201 1.328-1.649-.734-.344-1.101-.766-1.101-1.266 0-.572.474-1.106 1.421-1.601a2.77 2.77 0 0 1-1.359-2.367c0-.766.26-1.395.781-1.887s1.172-.738 1.953-.738c.563 0 1.071.117 1.524.351l2.414-.367v1.188h-1.555c.235.411.352.895.352 1.453 0 .739-.258 1.364-.774 1.875-.515.51-1.169.765-1.961.765a7.22 7.22 0 0 1-.476-.015zm.476-.93c.448 0 .814-.155 1.098-.465.284-.31.426-.715.426-1.215 0-.526-.138-.937-.414-1.234-.276-.297-.646-.445-1.11-.445-.432 0-.795.155-1.089.464-.295.31-.442.715-.442 1.215 0 .49.147.892.442 1.207a1.43 1.43 0 0 0 1.089.473zm.047 6.273c.802 0 1.486-.178 2.051-.535.565-.356.848-.798.848-1.324 0-.542-.401-.812-1.203-.812a33.3 33.3 0 0 0-1.375.046c-.412.021-.735.032-.969.032-.115 0-.293.093-.535.281a2.51 2.51 0 0 0-.555.566c-.128.19-.191.387-.191.59 0 .318.177.59.531.817.354.226.82.339 1.398.339zm9.891-4.062c.276 0 .508.094.695.281a.944.944 0 0 1 .282.696c0 .281-.096.522-.286.722a.915.915 0 0 1-.691.301.896.896 0 0 1-.68-.301 1.02 1.02 0 0 1-.281-.722.948.948 0 0 1 .961-.977zm12.852 1.789h-6v-11.023h1.281v9.906h4.719v1.117zm6.398-8.336c1.12 0 2.01.391 2.672 1.172.661.781.992 1.81.992 3.086 0 1.286-.331 2.323-.992 3.109-.662.787-1.552 1.18-2.672 1.18-1.125 0-2.017-.392-2.676-1.176-.659-.784-.988-1.821-.988-3.113 0-1.281.331-2.311.992-3.09.662-.779 1.552-1.168 2.672-1.168zm0 7.484c.74 0 1.323-.312 1.75-.937.427-.625.641-1.383.641-2.273 0-.938-.211-1.709-.633-2.313-.422-.604-1.008-.906-1.758-.906-.755 0-1.341.298-1.758.894-.417.597-.625 1.371-.625 2.325 0 .906.211 1.667.633 2.285.422.617 1.005.925 1.75.925zm8.742-2.218c-.76.369-1.14.695-1.14.976 0 .151.087.279.261.383.175.104.413.156.715.156l2.742-.078c.651 0 1.158.159 1.52.477.362.317.543.768.543 1.351 0 .922-.412 1.657-1.235 2.203-.823.547-1.783.821-2.882.821-.901 0-1.638-.189-2.211-.567-.573-.377-.86-.866-.86-1.464 0-.652.443-1.201 1.328-1.649-.734-.344-1.101-.766-1.101-1.266 0-.572.474-1.106 1.422-1.601a2.766 2.766 0 0 1-1.36-2.367c0-.766.261-1.395.782-1.887.52-.492 1.171-.738 1.953-.738.562 0 1.07.117 1.523.351l2.414-.367v1.188h-1.554c.234.411.351.895.351 1.453a2.54 2.54 0 0 1-.773 1.875c-.516.51-1.17.765-1.961.765a7.23 7.23 0 0 1-.477-.015zm.477-.93c.448 0 .813-.155 1.097-.465.284-.31.426-.715.426-1.215 0-.526-.138-.937-.414-1.234-.276-.297-.646-.445-1.109-.445-.433 0-.796.155-1.09.464-.294.31-.442.715-.442 1.215 0 .49.148.892.442 1.207.294.315.657.473 1.09.473zm.047 6.273c.802 0 1.485-.178 2.05-.535.565-.356.848-.798.848-1.324 0-.542-.401-.812-1.203-.812a33.3 33.3 0 0 0-1.375.046c-.412.021-.734.032-.969.032-.114 0-.293.093-.535.281a2.51 2.51 0 0 0-.555.566 1.05 1.05 0 0 0-.191.59c0 .318.177.59.531.817.354.226.82.339 1.399.339zm9.078-5.343c-.761.369-1.141.695-1.141.976 0 .151.087.279.262.383.174.104.413.156.715.156l2.742-.078c.651 0 1.157.159 1.519.477.362.317.543.768.543 1.351 0 .922-.411 1.657-1.234 2.203-.823.547-1.784.821-2.883.821-.901 0-1.638-.189-2.211-.567-.573-.377-.859-.866-.859-1.464 0-.652.443-1.201 1.328-1.649-.734-.344-1.102-.766-1.102-1.266 0-.572.474-1.106 1.422-1.601a2.78 2.78 0 0 1-1.008-1.031 2.717 2.717 0 0 1-.351-1.336c0-.766.26-1.395.781-1.887s1.172-.738 1.953-.738c.563 0 1.071.117 1.524.351l2.414-.367v1.188h-1.555c.234.411.352.895.352 1.453 0 .739-.258 1.364-.774 1.875-.515.51-1.169.765-1.961.765a7.22 7.22 0 0 1-.476-.015zm.476-.93c.448 0 .814-.155 1.098-.465.284-.31.426-.715.426-1.215 0-.526-.138-.937-.414-1.234-.276-.297-.646-.445-1.11-.445-.432 0-.795.155-1.09.464-.294.31-.441.715-.441 1.215 0 .49.147.892.441 1.207.295.315.658.473 1.09.473zm.047 6.273c.802 0 1.486-.178 2.051-.535.565-.356.848-.798.848-1.324 0-.542-.401-.812-1.204-.812-.265 0-.724.015-1.375.046-.411.021-.734.032-.968.032-.115 0-.293.093-.535.281a2.469 2.469 0 0 0-.555.566c-.128.19-.192.387-.192.59 0 .318.178.59.532.817.354.226.82.339 1.398.339zm13.336-6.304h-5.586c0 .922.267 1.682.801 2.281.534.599 1.189.898 1.965.898a7.13 7.13 0 0 0 2.289-.398l.211.977c-.719.322-1.558.484-2.516.484-1.208 0-2.182-.388-2.922-1.164-.739-.776-1.109-1.823-1.109-3.141 0-1.291.332-2.321.996-3.09.664-.768 1.522-1.152 2.574-1.152.938 0 1.722.357 2.352 1.07.63.714.945 1.664.945 2.852v.383zm-1.328-.992c0-.636-.198-1.171-.594-1.606-.396-.435-.838-.652-1.328-.652-.63 0-1.152.208-1.566.625-.414.416-.645.961-.692 1.633h4.18zm10.812-2.899-.492 1.172c-.536-.234-1-.352-1.39-.352-.36 0-.711.103-1.055.309-.344.206-.66.5-.949.883-.289.383-.434.598-.434.644v5.266h-1.211v-8.141h1.211v1.649c.651-1.229 1.495-1.844 2.531-1.844.615 0 1.211.138 1.789.414zM485 60.274l-2.734-11.453h2.367l1.726 7.867 2.094-7.867h2.75l2.008 8 1.758-8h2.328l-2.781 11.453h-2.453l-2.282-8.562-2.273 8.562H485zm15.274 0h-2.196v-8.297h2.039v1.18c.349-.557.663-.925.942-1.102a1.73 1.73 0 0 1 .949-.265c.5 0 .982.138 1.445.414l-.679 1.914c-.37-.24-.714-.36-1.032-.36a1.22 1.22 0 0 0-.781.254c-.214.17-.382.476-.504.918-.122.443-.183 1.37-.183 2.782v2.562zm5.765-5.766-1.992-.359c.224-.802.609-1.396 1.156-1.781.547-.386 1.36-.578 2.438-.578.979 0 1.708.116 2.187.347.479.232.817.526 1.012.883.195.357.293 1.012.293 1.965l-.024 2.562c0 .73.036 1.267.106 1.614.07.346.202.717.394 1.113h-2.171a7.722 7.722 0 0 1-.211-.648 4.536 4.536 0 0 0-.078-.258 3.966 3.966 0 0 1-1.204.82 3.448 3.448 0 0 1-1.367.274c-.854 0-1.527-.232-2.019-.696-.493-.463-.739-1.049-.739-1.758 0-.468.112-.886.336-1.254.224-.367.538-.648.942-.843.403-.196.985-.366 1.746-.512 1.026-.193 1.737-.372 2.133-.539v-.219c0-.422-.105-.722-.313-.902-.208-.18-.601-.27-1.18-.27-.39 0-.695.077-.914.231-.218.153-.395.423-.531.808zm2.938 1.782c-.282.093-.727.205-1.336.336-.61.13-1.008.257-1.196.382-.286.204-.429.461-.429.774 0 .307.114.573.343.797.23.224.521.336.875.336.396 0 .774-.131 1.133-.391.266-.198.44-.44.524-.727.057-.187.086-.544.086-1.07v-.437zm4.257-4.313h2.047v1.219a3.07 3.07 0 0 1 1.078-1.016c.454-.26.956-.39 1.508-.39.964 0 1.782.377 2.453 1.132.672.756 1.008 1.808 1.008 3.157 0 1.385-.338 2.462-1.015 3.23-.678.768-1.498 1.153-2.461 1.153-.459 0-.874-.092-1.246-.274-.373-.182-.765-.495-1.176-.937v4.179h-2.196V51.977zm2.172 4.008c0 .932.185 1.621.555 2.066.37.446.82.668 1.352.668.51 0 .934-.204 1.273-.613.339-.409.508-1.079.508-2.012 0-.869-.175-1.515-.524-1.937-.349-.422-.781-.633-1.296-.633-.537 0-.982.207-1.336.621-.355.414-.532 1.027-.532 1.84zm7.602-4.008h2.047v1.219a3.061 3.061 0 0 1 1.078-1.016c.453-.26.956-.39 1.508-.39.963 0 1.781.377 2.453 1.132.672.756 1.008 1.808 1.008 3.157 0 1.385-.339 2.462-1.016 3.23-.677.768-1.497 1.153-2.461 1.153a2.8 2.8 0 0 1-1.246-.274c-.372-.182-.764-.495-1.176-.937v4.179h-2.195V51.977zm2.172 4.008c0 .932.185 1.621.554 2.066.37.446.821.668 1.352.668.51 0 .935-.204 1.273-.613.339-.409.508-1.079.508-2.012 0-.869-.174-1.515-.523-1.937-.349-.422-.781-.633-1.297-.633-.537 0-.982.207-1.336.621-.354.414-.531 1.027-.531 1.84zm12.469 1.648 2.187.368c-.281.802-.725 1.412-1.332 1.832-.607.419-1.366.629-2.277.629-1.443 0-2.511-.472-3.203-1.415-.547-.755-.821-1.708-.821-2.859 0-1.375.36-2.452 1.078-3.23.719-.779 1.628-1.168 2.727-1.168 1.234 0 2.208.407 2.922 1.222.713.815 1.054 2.064 1.023 3.746h-5.5c.016.651.193 1.158.531 1.52.339.362.761.543 1.266.543.344 0 .633-.094.867-.281.235-.188.412-.49.532-.907zm.125-2.218c-.016-.636-.18-1.119-.493-1.45a1.51 1.51 0 0 0-1.14-.496c-.479 0-.875.175-1.188.524-.312.349-.466.823-.461 1.422h3.282zm11.578 4.859h-2.039v-1.219c-.339.474-.739.827-1.2 1.059a3.072 3.072 0 0 1-1.394.348c-.953 0-1.77-.385-2.449-1.153-.68-.768-1.02-1.84-1.02-3.215 0-1.406.331-2.475.992-3.207.662-.731 1.498-1.097 2.508-1.097.927 0 1.729.385 2.406 1.156v-4.125h2.196v11.453zm-5.86-4.328c0 .885.123 1.526.367 1.922.355.573.849.859 1.485.859.505 0 .935-.215 1.289-.644.354-.43.531-1.072.531-1.926 0-.953-.172-1.64-.515-2.059a1.633 1.633 0 0 0-1.321-.629c-.521 0-.957.207-1.308.621-.352.414-.528 1.033-.528 1.856zm12.547 4.328V48.915h2.313v9.429h5.75v1.93h-8.063zm9.188-4.266c0-.729.179-1.435.539-2.117a3.695 3.695 0 0 1 1.527-1.562c.659-.36 1.395-.539 2.207-.539 1.255 0 2.284.407 3.086 1.222s1.203 1.845 1.203 3.09c0 1.255-.405 2.296-1.215 3.121-.81.826-1.829 1.239-3.058 1.239a4.814 4.814 0 0 1-2.176-.516 3.537 3.537 0 0 1-1.574-1.512c-.36-.664-.539-1.472-.539-2.426zm2.25.118c0 .822.195 1.453.586 1.89.39.438.872.656 1.445.656.573 0 1.053-.218 1.441-.656.388-.437.582-1.073.582-1.906 0-.813-.194-1.438-.582-1.875a1.847 1.847 0 0 0-1.441-.656c-.573 0-1.055.218-1.445.656-.391.437-.586 1.068-.586 1.891zm7.828 4.695 2.508.305c.041.291.138.492.289.601.208.156.536.235.984.235.573 0 1.003-.086 1.289-.258.193-.115.339-.3.438-.555.067-.182.101-.518.101-1.008V58.93c-.656.896-1.484 1.344-2.484 1.344-1.115 0-1.998-.471-2.649-1.414-.51-.745-.765-1.672-.765-2.781 0-1.391.334-2.453 1.004-3.188.669-.734 1.501-1.101 2.496-1.101 1.026 0 1.872.45 2.539 1.351v-1.164h2.054v7.445c0 .98-.08 1.711-.242 2.196-.161.484-.388.864-.679 1.14-.292.276-.681.493-1.168.649-.487.156-1.103.234-1.848.234-1.406 0-2.404-.241-2.992-.722-.589-.482-.883-1.093-.883-1.832 0-.073.003-.162.008-.266zm1.961-4.867c0 .88.17 1.524.511 1.933.342.409.762.614 1.262.614.537 0 .99-.21 1.36-.629.369-.42.554-1.041.554-1.864 0-.859-.177-1.497-.531-1.914a1.69 1.69 0 0 0-1.344-.625c-.526 0-.959.205-1.301.614-.341.408-.511 1.032-.511 1.871zm7.812 4.867 2.508.305c.042.291.138.492.289.601.208.156.537.235.984.235.573 0 1.003-.086 1.29-.258.192-.115.338-.3.437-.555.068-.182.102-.518.102-1.008V58.93c-.657.896-1.485 1.344-2.485 1.344-1.114 0-1.997-.471-2.648-1.414-.511-.745-.766-1.672-.766-2.781 0-1.391.335-2.453 1.004-3.188.669-.734 1.501-1.101 2.496-1.101 1.026 0 1.873.45 2.539 1.351v-1.164h2.055v7.445c0 .98-.081 1.711-.242 2.196-.162.484-.388.864-.68 1.14-.292.276-.681.493-1.168.649-.487.156-1.103.234-1.848.234-1.406 0-2.403-.241-2.992-.722-.588-.482-.883-1.093-.883-1.832 0-.073.003-.162.008-.266zm1.961-4.867c0 .88.171 1.524.512 1.933.341.409.762.614 1.262.614.536 0 .989-.21 1.359-.629.37-.42.555-1.041.555-1.864 0-.859-.177-1.497-.532-1.914a1.69 1.69 0 0 0-1.343-.625c-.526 0-.96.205-1.301.614-.341.408-.512 1.032-.512 1.871zm12.82 1.679 2.188.368c-.281.802-.725 1.412-1.332 1.832-.607.419-1.366.629-2.277.629-1.443 0-2.511-.472-3.204-1.415-.546-.755-.82-1.708-.82-2.859 0-1.375.36-2.452 1.078-3.23.719-.779 1.628-1.168 2.727-1.168 1.234 0 2.208.407 2.922 1.222.713.815 1.054 2.064 1.023 3.746h-5.5c.016.651.193 1.158.531 1.52.339.362.761.543 1.266.543.344 0 .633-.094.867-.281.235-.188.412-.49.531-.907zm.125-2.218c-.015-.636-.179-1.119-.492-1.45a1.51 1.51 0 0 0-1.14-.496c-.48 0-.875.175-1.188.524-.312.349-.466.823-.461 1.422h3.281zm6.071 4.859h-2.196v-8.297h2.04v1.18c.348-.557.662-.925.941-1.102.279-.177.595-.265.949-.265.5 0 .982.138 1.445.414l-.679 1.914c-.37-.24-.714-.36-1.031-.36-.308 0-.568.085-.782.254-.213.17-.381.476-.504.918-.122.443-.183 1.37-.183 2.782v2.562z"/></svg>
</document_content>
</document>
<document index="26">
<source>/Users/malcolm/dev/structlog/docs/_static/Justfile</source>
<document_content>
rebuild-logos: && compress-logos
    magick structlog_logo.svg structlog_logo.png
    magick structlog_logo.svg -resize 220 structlog_logo_small.png
    magick structlog_logo.svg -resize 16x16 docset-icon.png
    magick structlog_logo.svg -resize 32x32 docset-icon@2x.png


compress-logos:
    svgo *.svg
    oxipng --opt max --strip safe --zopfli *.png


</document_content>
</document>
<document index="27">
<source>/Users/malcolm/dev/structlog/docs/_static/custom.css</source>
<document_content>
@import url('https://rsms.me/inter/inter.css');
@import url('https://assets.hynek.me/css/bm.css');


:root {
  font-feature-settings: 'liga' 1, 'calt' 1;
  /* fix for Chrome */
}

@supports (font-variation-settings: normal) {
  :root {
    font-family: InterVariable, sans-serif;
  }
}


/* Hide ToC caption text within the main body (but leave them in the side-bar). */
#furo-main-content span.caption-text {
  display: none;
}
</document_content>
</document>
<document index="28">
<source>/Users/malcolm/dev/structlog/docs/_static/structlog_logo.svg</source>
<document_content>
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2" viewBox="0 0 1500 1320"><path d="m1390.56 297.95 38.39 37.656-54.58 87.541 14.41-111.905 1.78-13.292Zm847.86 37.846 37.56-37.931 17.1 126.094-20.07-31.722-34.59-56.441Z" style="fill:#601a17;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1416.7 290.712 47.53-11.869-34.62 56.027-38.02-37.793 25.11-6.365Zm787.11-11.393 71.95 18.106-37.54 38.05-34.41-56.156Z" style="fill:#3f1917;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1528.39 560.273-10.33-55.854 85.36 19.352 3.15 41.538.33 5.834.12.04.01.144-.33-.116-.01.365-78.3-11.303Zm531.85 10.937 2.5-46.94 1.32-.304-.03.125 31.52-7.367 53.12-12.215-9.41 55.408-78.57 11.333v-.198l-.45.158Z" style="fill:#1c0d0c;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1539.19 958.115 66.73-198.83 4.93 7.277 115.41 172.743-108.01 48.602-103.56 46.393-.69-.36 25.19-75.825Zm613.9 75.915L1940 937.991l121.51-177.852 91.83 273.761-.25.13Z" style="fill:#3c2c27;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1513.43 1034.85-175.39-92.926 267.11-182.438-65.96 198.629-25.76 76.735Zm547.43-276.77-.07-.211 268.8 183.835-175.99 92.356-92.64-275.687.09-.139-.19-.154Z" style="fill:#432218;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2370.83 707.008-40.59 234.476-268.87-183.761 309.46-50.715Zm-765.19 51.86-268.66 182.719-41.58-236.673.12.021-.05.135.18-.113 1.3.226-.71.446 161.53 27.438 148.02 25.665-.16.125.01.011Z" style="fill:#703936;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1974.59 690.107 1.03-.62 85.24 68.593.1.293-121.19 179.904-55.78-33.561-47.02-28.717-.01-.147.47.216-.87-24.004-1.75-76.681 141.67-84.743-1.89-.533Zm-368.67 69.178-.28-.417.19-.129-.04-.007 84.71-68.954 77.77 46.292 63.39 38.464-2.18 97.724-.17 3.681-3.79 2.343v-.117l-6.64 4.223-91.39 56.485-116.64-172.311-4.9-7.341-.03.064Z" style="fill:#4d4847;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2370.87 705.181.75.468-310.97 52.158.24-186.354 78.77-10.998 135.89 84.967 73.04 45.791 22.29 13.996-.01-.028Zm-1073.92.002 231.56-144.094 78.18 10.817-.11 38.625-.71 147.692-148.1-25.156-160.82-27.884Z" style="fill:#a0706e;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1974.59 690.107-140.21 84.615.02.904-.47.285-.11-.067-.06-1.561-.06 1.488-2.04-1.237.02-.728-63.41-37.736-76.07-46.163 140.83-38.993.71.251v-.375l45.52 12.392 95.33 26.925Z" style="fill:#211e1d;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-141.97-38.641v-.295l225.96-78.713.02-.39Z" style="fill:#912924" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-96.45-26.249-44.82-12.661-.7.196v-.222l225.96-78.713.02-.39Z" style="fill:#5a120f" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-96.45-26.249-44.82-12.661-.7.196v-.222l225.96-78.713.02-.39Z" style="fill:#472726" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-141.97-38.641v-.295l225.96-78.713.02-.39Z" style="fill:none;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1831.43 650.35-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604Z" style="fill:#912924" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="M1606.69 571.906v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009Z" style="fill:#5a120f" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="M1606.69 571.906v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009Z" style="fill:#472726" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1831.43 650.35-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604Z" style="fill:none;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1833.88 571.67 279.82-270.848-51.67 223.941-2.31 46.629-225.84 78.73V571.67Z" style="fill:#a8614a;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="M1833.74 650.79v.375l-2.31-.815.63-.177-166.75-58.427-58.29-20.563-.45-5.874-2.29-40.255-47.53-208.003-4-17.572 48.73 47.42 231.84 225.948-.36 77.597-.22.076.22.059v.187l.3-.105.48.129Z" style="fill:#814542" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1833.03 650.914-1.6-.564.63-.177-166.75-58.427-58.29-20.563-.45-5.874-2.29-40.255-47.53-208.003-4-17.572 48.73 47.42 231.84 225.948-.36 77.597-.22.076.22.059v.187l.3-.105.34.093-.57.16Z" style="fill:#a8614a" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="M1833.74 650.79v.375l-2.31-.815.63-.177-166.75-58.427-58.29-20.563-.45-5.874-2.29-40.255-47.53-208.003-4-17.572 48.73 47.42 231.84 225.948-.36 77.597-.22.076.22.059v.187l.3-.105.48.129Z" style="fill:none;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1833.88 402.061.24-152.275 281 48.337-281.24 273.387V402.061ZM1552.55 299.22l-.41-.403 281.75-48.491-.25 305.053-.02 16.39.01-.012v.159l-.31.302v.308l-231.84-225.627-48.75-47.507-.07-.295-.11.123Z" style="fill:#b74420;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2334.06 605.46 36.81 99.721-22.28-13.968-208.26-130.764 9.02-56.158 60.12-2.432 84.5-2.967 40.09 106.568Zm-1038.54 99.475 78.12-205.983 144.36 5.452 9.98 55.766-232.33 144.787-.13-.022Z" style="fill:#a8614a;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2064.06 523.966 51.86-223.764 57.4 63.256 74.86 83.083 7.9 8.776.01-.006 38.82 43.091-85.44 3.457-60.07 2.109-.05.323-.72.03-53.08 12.403-31.49 7.242Zm-545.9-19.586-144.89-6.456 179.28-198.704.18.172.02.087-.02-.022 4.02 17.594 46.74 205.477-85.33-18.148Z" style="fill:#923012;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1829.96 875.697.69-30.351 3.11-71.063 3.67 101.785-4.02-1.882-3.45 1.511Z" style="fill:#110b0a" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1841.54 879.182.27.162 49.76 31.227-15.29 89.909-9.58-2.872-26.09-8.43.93-109.996Zm-66.39 31.239 50.39-30.485.94 109.908-35.11 10.109-16.22-89.532Z" style="fill:#d9c7c6;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2062.22 993.813 89.57 40.597-171.91-24.63-147.15 42.1-145.41-42-172.31 24.88 212.56-95.556 47.58-28.783 16.22 89.532 35.11-10.109-.94-109.908 8.6-5.205 7.4 4.451-.93 109.996.14.046-.01.598 25.96 7.786 9.55 3.082.03-.21 15.29-89.909-49.76-31.227 42.18 25.372 55.54 33.924.01-.026 122.68 55.199Z" style="fill:#371917;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2186.76 378.275-33.41-37.132 50.18-62.284.28.46-.26-.065 34 56.904.49-.502.2.32-.51.514 26.08 41.204 28.54 46.576-35.94 30.762-69.65-76.757Zm-673.79-39.441-102.32 115.653-34.31-28.885 88.44-145.311 28.14 33.798 20.05 24.745Z" style="fill:#713735;stroke:#000;stroke-width:.86px" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2113.48 298.112-279.69-48.375m-.37 400.944V251m.46 399.664V250.982" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1553.82 298.13 279.69-48.376m-1.2 321.014-278.98-270.354" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1834.99 570.751 278.98-270.354" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1552.39 299.108-179.32 197.626m180.32-195.116 50.7 223.182m510.82-225.71 179.32 197.627m-180.32-195.116-50.7 223.182m85.28-20.416-83.9 19.415m228.96-24.762-144.34 5.213m-630.39.151 83.89 19.415m1.5 1.114 3.02 45.89m-1.72.5-77.41-11.107m620.86-55.179-9.65 53.756m-76.22-33.877-3.02 45.889m1.72.5 77.41-11.106" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2139.4 560.292 230.54 144.151" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1373.76 499.037 144.33 5.213m.25.784 9.65 53.756m-.09 1.52-230.54 144.15m76.28-206.379-77.48 205.979" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2293.66 498.064 77.48 205.979m-762.7-132.535 224.06 78.907m226.36-78.925-224.06 78.907m225.66-78.439V756.46" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="M1606.84 571.976v184.501m-310.06-50.372 308.78 51.681" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2370.52 706.088-308.78 51.681" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1692.16 690.201 140.34 83.355m142.64-83.372-140.67 83.55m-1.1-122.961-142.06 38.108m142.62-38.125 142.06 38.107" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1606.92 757.401 84.09-68.274m369.37 68.256-84.09-68.274m-680.14 16.394 41.05 235.577m1033.95-235.594-41.05 235.577m-267.65-182.068 266.48 181.752m.17 1.18-177.25 92.753" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1604.85 759.013-266.48 181.751m-.17 1.18 177.25 92.756m90.08-272.854-92.39 271.184" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2061.77 761.829 92.39 271.181m-637.59.65 211.46-95.148m422.7 95.128-211.45-95.145M1606.12 760.19l120.76 177.512m334.3-177.53-120.76 177.513m-212.81 1.134 105.48-64.273m106.6 64.256-105.83-64.486m-317.47 160.564 171.25-25.37m463.27 25.36-171.25-25.38m-291.54.02 145.64 42.32m145.42-42.34-145.31 42.23m-8.37-170.906 1.06 109.025m15.25-109.042-1.07 109.025m-14.18.017-35.54 10.661m49.72-10.678 35.54 10.658m-101.07-88.789 15.81 88.809m101.07-88.826-15.81 88.806m-43.99-226.672-2.34 102.117m4.83-101.995 2.33 101.971m315.8-535.33 50.23-61.99" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1514.39 340.589-50.23-61.991m-.44.832-88.97 145.193m-.12.109 35.23 29.473m53.38-175.289-72.19 18.298m-.43.274-16.93 126.134m17.67-125.356 36.26 36.257m775.96-55.11 88.97 145.193m.12.108-35.23 29.474m-53.38-175.29 72.19 18.299m.43.273 16.93 126.135m-17.67-125.356-36.26 36.256" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:3.56px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1190.49 290.501 52.61 94.661-59.69-11.873 7.08-82.788Z" style="fill:none;stroke:#000;stroke-width:3.71px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.88637 -.48187 .6906 -1.2703 1066.83 1208.604)"/><path d="m1527.98 560.17-232.51 144.9 78.17-206.118 144.36 5.452 9.98 55.766Zm-63.75-281.327-34.62 56.027-38.09-37.868 72.71-18.159Zm142.82 292.784-78.66-11.354-10.33-55.854 85.36 19.352 3.63 47.856Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1603.49 522.528-85.33-18.148-144.89-6.456 179.39-198.827 50.83 223.431Zm-90.24-184.013-102.6 115.972-34.31-28.885 88.44-145.311 48.47 58.224Zm92.62 419.708-309.63-52.594 232.27-144.54 78.25 10.826-.89 186.308Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1690.12 689.625-83.99 68.659.57-187.073 225.36 78.962-141.94 39.452Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1690.5 689.778 141.18 84.028-2.29 102.084-101.9 62.983-121.86-180.016 84.87-69.079Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1295.4 704.914 310.43 53.825-268.85 182.848-41.58-236.673Zm310.55 54.307 120.42 180.247-212.95 95.402 92.53-275.649Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1605.15 759.486-91.49 275.484-175.62-93.046 267.11-182.438Zm228.61 14.797-4.45 101.698 4.1-1.795 4.02 1.882-3.67-101.785Zm141.86-84.796 85.43 68.747-121.52 180.406-102.56-62.641-2.59-101.277 141.24-85.235Zm-149.14 300.357-35.11 10.109-16.26-89.742 50.41-32.046.96 111.679Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1834.14 1051.62 105.96 24.29 211.69 36.56-171.91-9.38-147.15 16.04-145.41-16.01-172.31 9.49 212.56-36.42 106.57-24.57Z" style="fill:none;stroke:#000;stroke-width:2.01px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(1.16236 0 0 3.04975 -1385.285 -2416.355)"/><path d="m1876.25 1000.69-35.64-11.512.93-110.002 50.03 31.395-15.32 90.119Zm-42.67-427.907.16 78.382-226.84-80.022-2.62-46.089-51.55-225.597 280.85 273.326Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2113.7 300.822-51.67 223.941-2.33 47.019-226.74 78.984.36-78.548 280.38-271.396Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2060.49 757.283-84.78-67.852-142.97-38.911 227.95-79.468-.2 186.231Zm-226.6-506.957-.26 322.826-281.49-274.335 281.75-48.491Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1834.12 249.786 281 48.337-281.5 273.646.5-321.983Zm369.43 29.468 72.21 18.171-38.21 38.733-34-56.904Zm72.43 18.611 17.1 126.094-55.35-87.469 38.25-38.625Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2256.08 455.317-102.73-114.174 50.18-62.284 89.01 145.247-36.46 31.211Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2146.56 244.87-87.24 1.267 53.6-14.365 184.51 12.719-150.87.379Z" style="fill:none;stroke:#000;stroke-width:.36px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(1.1271 0 0 18.14502 -1307.217 -4082.889)"/><path d="m2139.26 559.917-79.03 11.399 2.51-47.046 85.93-19.761-9.41 55.408Zm231.62 145.292-230.55-144.76 9.07-56.481 145.31-5.102 76.17 206.343Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m2371.62 705.649-310.97 52.158.24-186.354 79.06-11.038 231.67 145.234Zm-310.11 54.49 91.93 274.051L1940 937.991l121.51-177.852Zm-.72-2.27 268.8 183.835-175.99 92.356-92.81-276.191Zm310.04-50.861-40.59 234.476-268.87-183.761 309.46-50.715Zm-394.35-16.368-142.04-40.119-142.24 39.386 141.73 86.004 142.55-85.271Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-1385.285 -225.934) scale(1.16236)"/><path d="m1648.74 1257.64 108.19-13.31-111.82 42.29-.08-.06-.84.01-.64-.85h.09l-18.42-25.03 23.52-3.05Zm-24.09 2.34 1.42-11.58 2.3-16.71.41.04-.06.22 75.52 5.85 60.25 4.84-115.75 15-23.62 2.91-.43-.58-.04.01Z" style="fill:#b9a098" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1636.34 1202.95 126.27 39.36-58.37-4.51-75.46-6.07.17-.69.07.01 7.32-28.1Zm.3-1.58 10.75-21.01 116.07 61.67-127.08-39.24.37-1.4-.11-.02Z" style="fill:#b9a098" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1622.05 1260.19 2.6-.21-.07.64-.15.01 19.12 25.09-389.91 3.89 366.46-29.27 3.63.1-1.68-.25Zm-230.02-6.37-170.76-4.88 4.19-49.77 390.51 60.08-223.94-5.43Z" style="fill:#4f3027" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1235.38 1290-14.12-40.32 170.77 4.14 221.88 6.34-245.36 19.87-128.43 9.93-4.74.04Zm271.53-68.74-281.28-22.56 15.49-45.95 164.31 20.14 231.21 28.48-.66 1.3.4.12-.04.16-.35-.11-7.04 28.2-.49-.04.04-.29-121.59-9.45Z" style="fill:#3a1307" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1626.07 1248.4-1.53 11.17-389.68-59.46 272.05 21.15 121.55 9.74-.09.69-.25-.02-2.05 16.73Z" style="fill:#3d2d28" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1645.11 1286.62.19.15-.7.26 8.8 6 8.13 6.28-389.35 21.56-36.47-30.57 4.41-.34 404.07-3.39.24.31.68-.26Zm-403.99-133.87-.39-.05 28.05-18.21 378.45 45.67-10.68 21.05-231.12-28.32-164.27-20.24-.04.1Z" style="fill:#231510" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1646.1 1183.49 121.6 49.89-130.75-26.56 9.15-23.33Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-2.77 -5889.489 28348.324) scale(1.16236)"/><path d="m1756.93 1244.33-112.5 42.55-20-26.25 132.5-16.3Zm-120.94-41.49 126.62 39.47-133.89-10.36 7.27-29.11Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1764.49 1242.64-139.93 18.14 3.56-29.11 136.37 10.97Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1763.44 1243.3-101.77 55.36-17.07-11.63 118.84-43.73Z" style="fill:#b9a098;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1636.55 1201.21-395.82-48.51 28.05-18.21 378.45 45.67-10.68 21.05Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1629.02 1231.05-403.39-32.35 15.53-46.05 395.59 48.74-7.73 29.66Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1628.5 1230.71-3.96 28.86-389.68-59.46 393.64 30.6Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1224.94 1199.22 400.76 60.37-404.99-11.34 4.23-49.03Z" style="fill:none;stroke:#000;stroke-width:3.96px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(1.14256 -.16976 .17339 1.16696 -1488.909 -67.778)"/><path d="m1623.07 1259.42-254.52 20.61-133.06 10.29-14.23-40.64 401.81 9.74Zm1.62.55 18.95 25.75-390 3.89 371.05-29.64Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1661.53 1299.31-389.35 21.56-36.82-30.87 409.67-3.44 16.5 12.75Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.451 -1056.675 10095.68) scale(1.16236)"/><path d="m1648.74 1257.64 108.19-13.31-111.82 42.29-.08-.06-.84.01-.64-.85h.09l-18.42-25.03 23.52-3.05Zm-24.09 2.34 1.42-11.58 2.3-16.71.41.04-.06.22 75.52 5.85 60.25 4.84-115.75 15-23.62 2.91-.43-.58-.04.01Z" style="fill:#b9a098" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1636.34 1202.95 126.27 39.36-58.37-4.51-75.46-6.07.17-.69.07.01 7.32-28.1Zm.3-1.58 10.75-21.01 116.07 61.67-127.08-39.24.37-1.4-.11-.02Z" style="fill:#b9a098" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1622.05 1260.19 2.6-.21-.07.64-.15.01 19.12 25.09-389.91 3.89 366.46-29.27 3.63.1-1.68-.25Zm-230.02-6.37-170.76-4.88 4.19-49.77 390.51 60.08-223.94-5.43Z" style="fill:#4f3027" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1235.38 1290-14.12-40.32 170.77 4.14 221.88 6.34-245.36 19.87-128.43 9.93-4.74.04Zm271.53-68.74-281.28-22.56 15.49-45.95 164.31 20.14 231.21 28.48-.66 1.3.4.12-.04.16-.35-.11-7.04 28.2-.49-.04.04-.29-121.59-9.45Z" style="fill:#3a1307" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1626.07 1248.4-1.53 11.17-389.68-59.46 272.05 21.15 121.55 9.74-.09.69-.25-.02-2.05 16.73Z" style="fill:#3d2d28" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1645.11 1286.62.19.15-.7.26 8.8 6 8.13 6.28-389.35 21.56-36.47-30.57 4.41-.34 404.07-3.39.24.31.68-.26Zm-403.99-133.87-.39-.05 28.05-18.21 378.45 45.67-10.68 21.05-231.12-28.32-164.27-20.24-.04.1Z" style="fill:#231510" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1646.1 1183.49 121.6 49.89-130.75-26.56 9.15-23.33Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="scale(-1.16236 1.16236) rotate(-2.726 -5814.477 51896.161)"/><path d="m1756.93 1244.33-112.5 42.55-20-26.25 132.5-16.3Zm-120.94-41.49 126.62 39.47-133.89-10.36 7.27-29.11Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1764.49 1242.64-139.93 18.14 3.56-29.11 136.37 10.97Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1763.44 1243.3-101.77 55.36-17.07-11.63 118.84-43.73Z" style="fill:#b9a098;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1636.55 1201.21-395.82-48.51 28.05-18.21 378.45 45.67-10.68 21.05Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1629.02 1231.05-403.39-32.35 15.53-46.05 395.59 48.74-7.73 29.66Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1628.5 1230.71-3.96 28.86-389.68-59.46 393.64 30.6Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1224.94 1199.22 400.76 60.37-404.99-11.34 4.23-49.03Z" style="fill:none;stroke:#000;stroke-width:3.96px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.1427 -.16887 -.17247 1.1671 2987.973 -69.466)"/><path d="m1623.07 1259.42-254.52 20.61-133.06 10.29-14.23-40.64 401.81 9.74Zm1.62.55 18.95 25.75-390 3.89 371.05-29.64Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/><path d="m1661.53 1299.31-389.35 21.56-36.82-30.87 409.67-3.44 16.5 12.75Z" style="fill:none;stroke:#000;stroke-width:3.98px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-1.14987 -.16993 -.16993 1.14987 2994.306 -47.363)"/></svg>
</document_content>
</document>
<document index="29">
<source>/Users/malcolm/dev/structlog/docs/_static/structlog_logo_horizontal.svg</source>
<document_content>
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2" viewBox="0 0 1200 300"><path d="M.302.009c.181 0 .235-.036.235-.158 0-.096-.044-.136-.192-.169C.226-.345.191-.358.191-.38c0-.04.025-.052.108-.052.079 0 .103.013.106.059h.12C.524-.498.473-.535.3-.535c-.177 0-.23.035-.23.154 0 .092.047.127.204.156.108.02.14.037.14.077 0 .043-.026.055-.112.054C.214-.095.187-.113.186-.172H.063c-.004.14.051.181.239.181Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(401.327 175.415) scale(141.667)"/><path d="M.365.011C.402.011.46.006.524-.002v-.105a.882.882 0 0 1-.125.012c-.077 0-.086-.018-.086-.076v-.248h.195v-.103H.313v-.155l-.116.049v.106H.088l-.024.103h.129v.252c0 .119.025.178.172.178Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(486.327 175.415) scale(141.667)"/><path d="M.132 0h.12v-.257c0-.063.055-.138.096-.144a.889.889 0 0 1 .151-.004v-.12a4.822 4.822 0 0 0-.098-.002c-.086 0-.086 0-.153.112H.237l.005-.107h-.11V0Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(571.327 175.415) scale(141.667)"/><path d="M.242.009c.089 0 .125-.019.16-.082H.41V0h.122v-.522H.41v.27c0 .121-.03.157-.133.157-.069 0-.089-.022-.089-.095v-.332H.066v.33c0 .155.04.201.176.201Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(656.327 175.415) scale(141.667)"/><path d="M.318.009c.167 0 .217-.041.221-.178h-.12c-.012.056-.034.073-.096.073-.104 0-.135-.037-.135-.163 0-.132.031-.171.134-.171.064 0 .086.019.096.084h.121C.536-.492.485-.535.316-.535c-.193 0-.25.063-.25.275 0 .208.058.269.252.269Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(741.327 175.415) scale(141.667)"/><path d="M.365.011C.402.011.46.006.524-.002v-.105a.882.882 0 0 1-.125.012c-.077 0-.086-.018-.086-.076v-.248h.195v-.103H.313v-.155l-.116.049v.106H.088l-.024.103h.129v.252c0 .119.025.178.172.178Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(826.33 175.415) scale(141.667)"/><path d="M.067 0h.474v-.104H.37v-.624H.077v.104H.25v.52H.067V0Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(911.33 175.415) scale(141.667)"/><path d="M.3.009c.191 0 .248-.062.248-.271C.548-.473.491-.535.3-.535s-.248.062-.248.273c0 .209.057.271.248.271ZM.174-.262c0-.131.029-.17.126-.17s.126.039.126.17c0 .129-.029.167-.126.167S.174-.133.174-.262Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(996.33 175.415) scale(141.667)"/><path d="M.302.22C.484.22.538.173.538.015v-.537H.421v.062H.413C.387-.516.357-.533.281-.533c-.177 0-.23.062-.23.272 0 .204.055.264.215.264.091 0 .119-.017.145-.074h.008L.418.005C.417.094.391.12.303.12.215.12.196.103.193.044H.07C.073.18.126.22.302.22ZM.173-.261c0-.13.028-.169.123-.169.094 0 .122.039.122.169C.418-.137.39-.1.296-.1.201-.1.173-.137.173-.261Z" style="fill:#b74420;fill-rule:nonzero" transform="translate(1081.33 175.415) scale(141.667)"/><path d="m1390.56 297.95 38.39 37.656-54.58 87.541 14.41-111.905 1.78-13.292ZM2238.42 335.796l37.56-37.931 17.1 126.094-20.07-31.722-34.59-56.441Z" style="fill:#601a17;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1416.7 290.712 47.53-11.869-34.62 56.027-38.02-37.793 25.11-6.365ZM2203.81 279.319l71.95 18.106-37.54 38.05-34.41-56.156Z" style="fill:#3f1917;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1528.39 560.273-10.33-55.854 85.36 19.352 3.15 41.538.33 5.834.12.04.01.144-.33-.116-.01.365-78.3-11.303ZM2060.24 571.21l2.5-46.94 1.32-.304-.03.125 31.52-7.367 53.12-12.215-9.41 55.408-78.57 11.333v-.198l-.45.158Z" style="fill:#1c0d0c;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1539.19 958.115 66.73-198.83 4.93 7.277 115.41 172.743-108.01 48.602-103.56 46.393-.69-.36 25.19-75.825ZM2153.09 1034.03 1940 937.991l121.51-177.852 91.83 273.761-.25.13Z" style="fill:#3c2c27;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1513.43 1034.85-175.39-92.926 267.11-182.438-65.96 198.629-25.76 76.735ZM2060.86 758.08l-.07-.211 268.8 183.835-175.99 92.356-92.64-275.687.09-.139-.19-.154Z" style="fill:#432218;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2370.83 707.008-40.59 234.476-268.87-183.761 309.46-50.715ZM1605.64 758.868l-268.66 182.719-41.58-236.673.12.021-.05.135.18-.113 1.3.226-.71.446 161.53 27.438 148.02 25.665-.16.125.01.011Z" style="fill:#703936;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1974.59 690.107 1.03-.62 85.24 68.593.1.293-121.19 179.904-55.78-33.561-47.02-28.717-.01-.147.47.216-.87-24.004-1.75-76.681 141.67-84.743-1.89-.533ZM1605.92 759.285l-.28-.417.19-.129-.04-.007 84.71-68.954 77.77 46.292 63.39 38.464-2.18 97.724-.17 3.681-3.79 2.343v-.117l-6.64 4.223-91.39 56.485-116.64-172.311-4.9-7.341-.03.064Z" style="fill:#4d4847;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2370.87 705.181.75.468-310.97 52.158.24-186.354 78.77-10.998 135.89 84.967 73.04 45.791 22.29 13.996-.01-.028ZM1296.95 705.183l231.56-144.094 78.18 10.817-.11 38.625-.71 147.692-148.1-25.156-160.82-27.884Z" style="fill:#a0706e;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1974.59 690.107-140.21 84.615.02.904-.47.285-.11-.067-.06-1.561-.06 1.488-2.04-1.237.02-.728-63.41-37.736-76.07-46.163 140.83-38.993.71.251v-.375l45.52 12.392 95.33 26.925Z" style="fill:#211e1d;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-141.97-38.641v-.295l225.96-78.713.02-.39Z" style="fill:#912924" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-96.45-26.249-44.82-12.661-.7.196v-.222l225.96-78.713.02-.39Z" style="fill:#5a120f" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-96.45-26.249-44.82-12.661-.7.196v-.222l225.96-78.713.02-.39Z" style="fill:#472726" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2059.72 571.392.52-.182-.01.106.46-.066-.2 186.033-84.78-67.852-141.97-38.641v-.295l225.96-78.713.02-.39Z" style="fill:none;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1831.43 650.35-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604Z" style="fill:#912924" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="M1606.69 571.906v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009Z" style="fill:#5a120f" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="M1606.69 571.906v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009Z" style="fill:#472726" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1831.43 650.35-141.31 39.275-83.99 68.659.45-147.753.18-38.616-.07-.009v-.33l.36.051-.02-.3 58.28 20.419 166.12 58.604Z" style="fill:none;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1833.88 571.67 279.82-270.848-51.67 223.941-2.31 46.629-225.84 78.73V571.67Z" style="fill:#a8614a;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="M1833.74 650.79v.375l-2.31-.815.63-.177-166.75-58.427-58.29-20.563-.45-5.874-2.29-40.255-47.53-208.003-4-17.572 48.73 47.42 231.84 225.948-.36 77.597-.22.076.22.059v.187l.3-.105.48.129Z" style="fill:#814542" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1833.03 650.914-1.6-.564.63-.177-166.75-58.427-58.29-20.563-.45-5.874-2.29-40.255-47.53-208.003-4-17.572 48.73 47.42 231.84 225.948-.36 77.597-.22.076.22.059v.187l.3-.105.34.093-.57.16Z" style="fill:#a8614a" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="M1833.74 650.79v.375l-2.31-.815.63-.177-166.75-58.427-58.29-20.563-.45-5.874-2.29-40.255-47.53-208.003-4-17.572 48.73 47.42 231.84 225.948-.36 77.597-.22.076.22.059v.187l.3-.105.48.129Z" style="fill:none;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1833.88 402.061.24-152.275 281 48.337-281.24 273.387V402.061ZM1552.55 299.22l-.41-.403 281.75-48.491-.25 305.053-.02 16.39.01-.012v.159l-.31.302v.308l-231.84-225.627-48.75-47.507-.07-.295-.11.123Z" style="fill:#b74420;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2334.06 605.46 36.81 99.721-22.28-13.968-208.26-130.764 9.02-56.158 60.12-2.432 84.5-2.967 40.09 106.568ZM1295.52 704.935l78.12-205.983 144.36 5.452 9.98 55.766-232.33 144.787-.13-.022Z" style="fill:#a8614a;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2064.06 523.966 51.86-223.764 57.4 63.256 74.86 83.083 7.9 8.776.01-.006 38.82 43.091-85.44 3.457-60.07 2.109-.05.323-.72.03-53.08 12.403-31.49 7.242ZM1518.16 504.38l-144.89-6.456 179.28-198.704.18.172.02.087-.02-.022 4.02 17.594 46.74 205.477-85.33-18.148Z" style="fill:#923012;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1829.96 875.697.69-30.351 3.11-71.063 3.67 101.785-4.02-1.882-3.45 1.511Z" style="fill:#110b0a" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1841.54 879.182.27.162 49.76 31.227-15.29 89.909-9.58-2.872-26.09-8.43.93-109.996ZM1775.15 910.421l50.39-30.485.94 109.908-35.11 10.109-16.22-89.532Z" style="fill:#d9c7c6;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2062.22 993.813 89.57 40.597-171.91-24.63-147.15 42.1-145.41-42-172.31 24.88 212.56-95.556 47.58-28.783 16.22 89.532 35.11-10.109-.94-109.908 8.6-5.205 7.4 4.451-.93 109.996.14.046-.01.598 25.96 7.786 9.55 3.082.03-.21 15.29-89.909-49.76-31.227 42.18 25.372 55.54 33.924.01-.026 122.68 55.199Z" style="fill:#371917;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2186.76 378.275-33.41-37.132 50.18-62.284.28.46-.26-.065 34 56.904.49-.502.2.32-.51.514 26.08 41.204 28.54 46.576-35.94 30.762-69.65-76.757ZM1512.97 338.834l-102.32 115.653-34.31-28.885 88.44-145.311 28.14 33.798 20.05 24.745Z" style="fill:#713735;stroke:#000;stroke-width:3.71px" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2113.48 298.112-279.69-48.375M1833.42 650.681V251M1833.88 650.664V250.982" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1553.82 298.13 279.69-48.376m-1.2 321.014-278.98-270.354" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1834.99 570.751 278.98-270.354" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1552.39 299.108-179.32 197.626m180.32-195.116 50.7 223.182M2114.91 299.09l179.32 197.627m-180.32-195.116-50.7 223.182m85.28-20.416-83.9 19.415m228.96-24.762-144.34 5.213M1518.82 504.384l83.89 19.415m1.5 1.114 3.02 45.89m-1.72.5-77.41-11.107M2148.96 505.017l-9.65 53.756m-76.22-33.877-3.02 45.889m1.72.5 77.41-11.106" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2139.4 560.292 230.54 144.151" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1373.76 499.037 144.33 5.213m.25.784 9.65 53.756m-.09 1.52-230.54 144.15m76.28-206.379-77.48 205.979" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2293.66 498.064 77.48 205.979M1608.44 571.508l224.06 78.907M2058.86 571.49l-224.06 78.907M2060.46 571.958V756.46" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="M1606.84 571.976v184.501m-310.06-50.372 308.78 51.681" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2370.52 706.088-308.78 51.681" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1692.16 690.201 140.34 83.355m142.64-83.372-140.67 83.55m-1.1-122.961-142.06 38.108m142.62-38.125 142.06 38.107" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1606.92 757.401 84.09-68.274M2060.38 757.383l-84.09-68.274M1296.15 705.503l41.05 235.577M2371.15 705.486l-41.05 235.577M2062.45 758.995l266.48 181.752M2329.1 941.927l-177.25 92.753" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1604.85 759.013-266.48 181.751m-.17 1.18 177.25 92.756m90.08-272.854-92.39 271.184" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2061.77 761.829 92.39 271.181M1516.57 1033.66l211.46-95.148M2150.73 1033.64l-211.45-95.145M1606.12 760.19l120.76 177.512M2061.18 760.172l-120.76 177.513M1727.61 938.819l105.48-64.273M1939.69 938.802l-105.83-64.486M1516.39 1034.88l171.25-25.37M2150.91 1034.87l-171.25-25.38M1688.12 1009.51l145.64 42.32M1979.18 1009.49l-145.31 42.23M1825.5 880.814l1.06 109.025M1841.81 880.797l-1.07 109.025M1826.56 989.839l-35.54 10.661M1840.74 989.822l35.54 10.658M1775.21 911.691l15.81 88.809M1892.09 911.674l-15.81 88.806M1832.29 773.808l-2.34 102.117M1834.78 773.93l2.33 101.971M2152.91 340.571l50.23-61.99" style="fill:none;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1514.39 340.589-50.23-61.991m-.44.832-88.97 145.193m-.12.109 35.23 29.473m53.38-175.289-72.19 18.298m-.43.274-16.93 126.134m17.67-125.356 36.26 36.257M2203.58 279.413l88.97 145.193m.12.108-35.23 29.474m-53.38-175.29 72.19 18.299m.43.273 16.93 126.135m-17.67-125.356-36.26 36.256" style="fill:#e61a1a;fill-rule:nonzero;stroke:#000;stroke-width:15.38px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1190.49 290.501 52.61 94.661-59.69-11.873 7.08-82.788Z" style="fill:none;stroke:#000;stroke-width:16.02px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.20541 -.11167 .16004 -.29439 266.205 277.136)"/><path d="m1527.98 560.17-232.51 144.9 78.17-206.118 144.36 5.452 9.98 55.766ZM1464.23 278.843l-34.62 56.027-38.09-37.868 72.71-18.159ZM1607.05 571.627l-78.66-11.354-10.33-55.854 85.36 19.352 3.63 47.856Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1603.49 522.528-85.33-18.148-144.89-6.456 179.39-198.827 50.83 223.431ZM1513.25 338.515l-102.6 115.972-34.31-28.885 88.44-145.311 48.47 58.224ZM1605.87 758.223l-309.63-52.594 232.27-144.54 78.25 10.826-.89 186.308Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1690.12 689.625-83.99 68.659.57-187.073 225.36 78.962-141.94 39.452Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1690.5 689.778 141.18 84.028-2.29 102.084-101.9 62.983-121.86-180.016 84.87-69.079Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1295.4 704.914 310.43 53.825-268.85 182.848-41.58-236.673ZM1605.95 759.221l120.42 180.247-212.95 95.402 92.53-275.649Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1605.15 759.486-91.49 275.484-175.62-93.046 267.11-182.438ZM1833.76 774.283l-4.45 101.698 4.1-1.795 4.02 1.882-3.67-101.785Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1975.62 689.487 85.43 68.747-121.52 180.406-102.56-62.641-2.59-101.277 141.24-85.235ZM1826.48 989.844l-35.11 10.109-16.26-89.742 50.41-32.046.96 111.679Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1834.14 1051.62 105.96 24.29 211.69 36.56-171.91-9.38-147.15 16.04-145.41-16.01-172.31 9.49 212.56-36.42 106.57-24.57Z" style="fill:none;stroke:#000;stroke-width:8.65px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(.26937 0 0 .70676 -302.06 -562.93)"/><path d="m1876.25 1000.69-35.64-11.512.93-110.002 50.03 31.395-15.32 90.119ZM1833.58 572.783l.16 78.382-226.84-80.022-2.62-46.089-51.55-225.597 280.85 273.326Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2113.7 300.822-51.67 223.941-2.33 47.019-226.74 78.984.36-78.548 280.38-271.396Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2060.49 757.283-84.78-67.852-142.97-38.911 227.95-79.468-.2 186.231ZM1833.89 250.326l-.26 322.826-281.49-274.335 281.75-48.491Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1834.12 249.786 281 48.337-281.5 273.646.5-321.983ZM2203.55 279.254l72.21 18.171-38.21 38.733-34-56.904ZM2275.98 297.865l17.1 126.094-55.35-87.469 38.25-38.625Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2256.08 455.317-102.73-114.174 50.18-62.284 89.01 145.247-36.46 31.211Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2146.56 244.87-87.24 1.267 53.6-14.365 184.51 12.719-150.87.379Z" style="fill:none;stroke:#000;stroke-width:1.55px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(.2612 0 0 4.20502 -283.968 -949.14)"/><path d="m2139.26 559.917-79.03 11.399 2.51-47.046 85.93-19.761-9.41 55.408ZM2370.88 705.209l-230.55-144.76 9.07-56.481 145.31-5.102 76.17 206.343Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m2371.62 705.649-310.97 52.158.24-186.354 79.06-11.038 231.67 145.234ZM2061.51 760.139l91.93 274.051L1940 937.991l121.51-177.852ZM2060.79 757.869l268.8 183.835-175.99 92.356-92.81-276.191ZM2370.83 707.008l-40.59 234.476-268.87-183.761 309.46-50.715ZM1976.48 690.64l-142.04-40.119-142.24 39.386 141.73 86.004 142.55-85.271Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="translate(-302.06 -55.311) scale(.26937)"/><path d="m1648.74 1257.64 108.19-13.31-111.82 42.29-.08-.06-.84.01-.64-.85h.09l-18.42-25.03 23.52-3.05ZM1624.65 1259.98l1.42-11.58 2.3-16.71.41.04-.06.22 75.52 5.85 60.25 4.84-115.75 15-23.62 2.91-.43-.58-.04.01Z" style="fill:#b9a098" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1636.34 1202.95 126.27 39.36-58.37-4.51-75.46-6.07.17-.69.07.01 7.32-28.1ZM1636.64 1201.37l10.75-21.01 116.07 61.67-127.08-39.24.37-1.4-.11-.02Z" style="fill:#b9a098" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1622.05 1260.19 2.6-.21-.07.64-.15.01 19.12 25.09-389.91 3.89 366.46-29.27 3.63.1-1.68-.25ZM1392.03 1253.82l-170.76-4.88 4.19-49.77 390.51 60.08-223.94-5.43Z" style="fill:#4f3027" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1235.38 1290-14.12-40.32 170.77 4.14 221.88 6.34-245.36 19.87-128.43 9.93-4.74.04ZM1506.91 1221.26l-281.28-22.56 15.49-45.95 164.31 20.14 231.21 28.48-.66 1.3.4.12-.04.16-.35-.11-7.04 28.2-.49-.04.04-.29-121.59-9.45Z" style="fill:#3a1307" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1626.07 1248.4-1.53 11.17-389.68-59.46 272.05 21.15 121.55 9.74-.09.69-.25-.02-2.05 16.73Z" style="fill:#3d2d28" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1645.11 1286.62.19.15-.7.26 8.8 6 8.13 6.28-389.35 21.56-36.47-30.57 4.41-.34 404.07-3.39.24.31.68-.26ZM1241.12 1152.75l-.39-.05 28.05-18.21 378.45 45.67-10.68 21.05-231.12-28.32-164.27-20.24-.04.1Z" style="fill:#231510" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1646.1 1183.49 121.6 49.89-130.75-26.56 9.15-23.33Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-2.766 -1415.932 6175.917) scale(.26937)"/><path d="m1756.93 1244.33-112.5 42.55-20-26.25 132.5-16.3ZM1635.99 1202.84l126.62 39.47-133.89-10.36 7.27-29.11Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1764.49 1242.64-139.93 18.14 3.56-29.11 136.37 10.97Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1763.44 1243.3-101.77 55.36-17.07-11.63 118.84-43.73Z" style="fill:#b9a098;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1636.55 1201.21-395.82-48.51 28.05-18.21 378.45 45.67-10.68 21.05Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1629.02 1231.05-403.39-32.35 15.53-46.05 395.59 48.74-7.73 29.66Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1628.5 1230.71-3.96 28.86-389.68-59.46 393.64 30.6Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1224.94 1199.22 400.76 60.37-404.99-11.34 4.23-49.03Z" style="fill:none;stroke:#000;stroke-width:17.1px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(.26478 -.03934 .04018 .27044 -326.074 -18.66)"/><path d="m1623.07 1259.42-254.52 20.61-133.06 10.29-14.23-40.64 401.81 9.74ZM1624.69 1259.97l18.95 25.75-390 3.89 371.05-29.64Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1661.53 1299.31-389.35 21.56-36.82-30.87 409.67-3.44 16.5 12.75Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="rotate(-8.45 -255.313 2209.757) scale(.26937)"/><path d="m1648.74 1257.64 108.19-13.31-111.82 42.29-.08-.06-.84.01-.64-.85h.09l-18.42-25.03 23.52-3.05ZM1624.65 1259.98l1.42-11.58 2.3-16.71.41.04-.06.22 75.52 5.85 60.25 4.84-115.75 15-23.62 2.91-.43-.58-.04.01Z" style="fill:#b9a098" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1636.34 1202.95 126.27 39.36-58.37-4.51-75.46-6.07.17-.69.07.01 7.32-28.1ZM1636.64 1201.37l10.75-21.01 116.07 61.67-127.08-39.24.37-1.4-.11-.02Z" style="fill:#b9a098" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1622.05 1260.19 2.6-.21-.07.64-.15.01 19.12 25.09-389.91 3.89 366.46-29.27 3.63.1-1.68-.25ZM1392.03 1253.82l-170.76-4.88 4.19-49.77 390.51 60.08-223.94-5.43Z" style="fill:#4f3027" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1235.38 1290-14.12-40.32 170.77 4.14 221.88 6.34-245.36 19.87-128.43 9.93-4.74.04ZM1506.91 1221.26l-281.28-22.56 15.49-45.95 164.31 20.14 231.21 28.48-.66 1.3.4.12-.04.16-.35-.11-7.04 28.2-.49-.04.04-.29-121.59-9.45Z" style="fill:#3a1307" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1626.07 1248.4-1.53 11.17-389.68-59.46 272.05 21.15 121.55 9.74-.09.69-.25-.02-2.05 16.73Z" style="fill:#3d2d28" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1645.11 1286.62.19.15-.7.26 8.8 6 8.13 6.28-389.35 21.56-36.47-30.57 4.41-.34 404.07-3.39.24.31.68-.26ZM1241.12 1152.75l-.39-.05 28.05-18.21 378.45 45.67-10.68 21.05-231.12-28.32-164.27-20.24-.04.1Z" style="fill:#231510" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1646.1 1183.49 121.6 49.89-130.75-26.56 9.15-23.33Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26907 -.0128 -.0128 .26907 685.484 -61.616)"/><path d="m1756.93 1244.33-112.5 42.55-20-26.25 132.5-16.3ZM1635.99 1202.84l126.62 39.47-133.89-10.36 7.27-29.11Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1764.49 1242.64-139.93 18.14 3.56-29.11 136.37 10.97Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1763.44 1243.3-101.77 55.36-17.07-11.63 118.84-43.73Z" style="fill:#b9a098;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1636.55 1201.21-395.82-48.51 28.05-18.21 378.45 45.67-10.68 21.05Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1629.02 1231.05-403.39-32.35 15.53-46.05 395.59 48.74-7.73 29.66Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1628.5 1230.71-3.96 28.86-389.68-59.46 393.64 30.6Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1224.94 1199.22 400.76 60.37-404.99-11.34 4.23-49.03Z" style="fill:none;stroke:#000;stroke-width:17.1px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26481 -.03913 -.03997 .27047 711.42 -19.05)"/><path d="m1623.07 1259.42-254.52 20.61-133.06 10.29-14.23-40.64 401.81 9.74ZM1624.69 1259.97l18.95 25.75-390 3.89 371.05-29.64Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/><path d="m1661.53 1299.31-389.35 21.56-36.82-30.87 409.67-3.44 16.5 12.75Z" style="fill:none;stroke:#000;stroke-width:17.18px;stroke-linecap:round;stroke-miterlimit:1.5" transform="matrix(-.26648 -.03938 -.03938 .26648 712.888 -13.928)"/></svg>
</document_content>
</document>
<document index="30">
<source>/Users/malcolm/dev/structlog/docs/_static/sponsors/FilePreviews.svg</source>
<document_content>
<svg viewBox="0 0 180 60" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2"><path fill="#fff" d="M0 0h180v60H0z"/><path fill="#fff" d="M0 0h180v60H0z"/><path d="M27.917 35.296v9.608h-5V15.662h20v5.013h-15v9.608h8.75v5.013h-8.75zM32.5 54.93c13.807 0 25-11.222 25-25.065C57.5 16.022 46.307 4.8 32.5 4.8s-25 11.222-25 25.065c0 13.843 11.193 25.065 25 25.065zm5.417-33.002v13.368h5V21.928h-5zm30.694.302h8.95v2.16h-6.483v3.81h6.11v2.08h-6.11v5.851h-2.467v-13.9zm10.165 4.477h2.35v9.424h-2.35v-9.424zm-.333-3.2c0-.38.14-.71.421-.992.28-.282.637-.422 1.068-.422.43 0 .793.134 1.086.402.294.268.441.606.441 1.012 0 .405-.146.742-.44 1.01-.295.269-.656.403-1.087.403-.431 0-.787-.14-1.068-.422a1.358 1.358 0 01-.42-.991zm4.957-2.22h2.35v14.844H83.4V21.288zm11.203 9.19c0-.301-.042-.59-.127-.864a1.97 1.97 0 00-.402-.727 1.96 1.96 0 00-.695-.5 2.422 2.422 0 00-.989-.187c-.705 0-1.302.213-1.792.638-.49.426-.76.972-.812 1.64h4.817zm2.35 1.06v.314c0 .104-.007.21-.02.314h-7.147a2.336 2.336 0 00.861 1.66c.248.202.529.363.842.48.314.118.64.177.98.177.587 0 1.083-.108 1.488-.324.405-.217.737-.514.998-.893l1.567 1.256c-.927 1.257-2.272 1.885-4.034 1.885a5.715 5.715 0 01-2.017-.344 4.75 4.75 0 01-1.596-.971 4.39 4.39 0 01-1.058-1.542c-.255-.609-.381-1.299-.381-2.07 0-.76.127-1.45.381-2.072a4.713 4.713 0 011.048-1.59c.444-.439.97-.78 1.576-1.022a5.272 5.272 0 011.969-.363c.653 0 1.256.108 1.811.324a3.93 3.93 0 011.44.962c.404.425.72.956.95 1.59.228.635.342 1.378.342 2.229zm1.764-9.307h4.524a9.82 9.82 0 012.154.216c.64.144 1.188.38 1.645.707.457.327.81.746 1.057 1.257.249.51.373 1.125.373 1.845 0 .773-.144 1.42-.431 1.944a3.498 3.498 0 01-1.165 1.266c-.49.32-1.061.553-1.714.698a9.62 9.62 0 01-2.076.216h-1.9v5.752h-2.467v-13.9zm4.191 6.067c.404 0 .79-.029 1.155-.088.366-.059.692-.164.98-.314.287-.151.515-.357.685-.619.17-.262.254-.602.254-1.02 0-.406-.084-.737-.254-.992a1.761 1.761 0 00-.676-.6c-.28-.143-.6-.238-.96-.284a8.718 8.718 0 00-1.106-.069h-1.801v3.986h1.723zm6.112-1.59h2.252v1.57h.039a3.43 3.43 0 011.097-1.335c.47-.34 1.018-.51 1.645-.51.091 0 .189.003.293.01.105.007.196.023.274.049v2.16a2.728 2.728 0 00-.724-.098c-.536 0-.966.098-1.292.294a2.344 2.344 0 00-.764.707 2.534 2.534 0 00-.372.844 3.289 3.289 0 00-.098.687v5.046h-2.35v-9.424zm12.77 3.77c0-.301-.043-.59-.127-.864a1.97 1.97 0 00-.402-.727 1.96 1.96 0 00-.696-.5 2.42 2.42 0 00-.988-.187c-.705 0-1.302.213-1.792.638-.49.426-.76.972-.813 1.64h4.818zm2.35 1.06v.314c0 .104-.007.21-.02.314h-7.148a2.336 2.336 0 00.862 1.66c.248.202.529.363.842.48.313.118.64.177.979.177.588 0 1.083-.108 1.488-.324a2.813 2.813 0 001-.893l1.566 1.256c-.927 1.257-2.272 1.885-4.034 1.885a5.716 5.716 0 01-2.017-.344 4.748 4.748 0 01-1.596-.971 4.39 4.39 0 01-1.058-1.542c-.255-.609-.382-1.299-.382-2.07 0-.76.127-1.45.382-2.072a4.718 4.718 0 011.048-1.59c.443-.439.969-.78 1.576-1.022a5.272 5.272 0 011.968-.363c.653 0 1.257.108 1.812.324a3.93 3.93 0 011.44.962c.404.425.72.956.95 1.59.228.635.342 1.378.342 2.229zm.236-4.83h2.566l2.467 6.872h.04l2.486-6.872h2.487l-3.74 9.424h-2.506l-3.8-9.424zm10.87 0h2.35v9.424h-2.35v-9.424zm-.332-3.2c0-.38.14-.71.42-.992.281-.282.637-.422 1.068-.422.431 0 .793.134 1.087.402.293.268.44.606.44 1.012 0 .405-.146.742-.44 1.01-.294.269-.656.403-1.087.403-.43 0-.786-.14-1.067-.422a1.358 1.358 0 01-.421-.991zm11.536 6.97c0-.301-.043-.59-.127-.864a1.973 1.973 0 00-.402-.727 1.958 1.958 0 00-.695-.5 2.42 2.42 0 00-.989-.187c-.705 0-1.302.213-1.792.638-.49.426-.76.972-.812 1.64h4.817zm2.35 1.06v.314c0 .104-.007.21-.02.314h-7.147a2.336 2.336 0 00.861 1.66c.248.202.529.363.842.48.314.118.64.177.98.177.587 0 1.083-.108 1.488-.324a2.81 2.81 0 00.999-.893l1.566 1.256c-.927 1.257-2.271 1.885-4.034 1.885a5.717 5.717 0 01-2.017-.344 4.751 4.751 0 01-1.596-.971 4.385 4.385 0 01-1.057-1.542c-.255-.609-.383-1.299-.383-2.07 0-.76.128-1.45.382-2.072a4.709 4.709 0 011.048-1.59c.444-.439.97-.78 1.577-1.022a5.271 5.271 0 011.968-.363c.653 0 1.256.108 1.811.324a3.926 3.926 0 011.44.962c.404.425.72.956.95 1.59.228.635.342 1.378.342 2.229zm.315-4.83h2.546l1.958 6.754h.04l2.016-6.754h2.507l2.037 6.754h.039l1.998-6.754h2.448l-3.252 9.424h-2.388l-2.135-6.597h-.04l-2.114 6.597h-2.39l-3.27-9.424zm21.602 2.513a2.709 2.709 0 00-.862-.717 2.42 2.42 0 00-1.194-.304c-.379 0-.725.079-1.038.236-.313.157-.47.419-.47.785 0 .367.173.625.52.776.346.15.85.304 1.517.461.352.078.708.184 1.067.314.36.131.685.304.98.52.294.217.531.485.714.806.183.32.274.71.274 1.168 0 .576-.107 1.063-.323 1.463a2.757 2.757 0 01-.861.971 3.612 3.612 0 01-1.254.54c-.476.111-.97.167-1.479.167a5.853 5.853 0 01-2.134-.402c-.692-.27-1.267-.651-1.724-1.149l1.548-1.453c.26.34.6.622 1.018.844a2.91 2.91 0 001.39.334c.17 0 .343-.02.52-.059.176-.039.339-.101.49-.186.15-.085.27-.2.361-.344a.972.972 0 00.137-.53c0-.393-.179-.674-.538-.844-.36-.17-.898-.34-1.616-.51a7.739 7.739 0 01-1.028-.305 3.363 3.363 0 01-.891-.49 2.275 2.275 0 01-.627-.757c-.156-.3-.235-.674-.235-1.119 0-.524.108-.975.324-1.355.215-.38.499-.69.851-.932a3.814 3.814 0 011.195-.54c.444-.118.9-.177 1.37-.177.68 0 1.342.118 1.988.353.646.236 1.16.596 1.538 1.08l-1.528 1.355z" fill="#1083ff"/></svg>

</document_content>
</document>
<document index="31">
<source>/Users/malcolm/dev/structlog/docs/_static/sponsors/Klaviyo.svg</source>
<document_content>
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2" viewBox="0 0 9000 3000"><path d="M0 0h9000v3000H0z" style="fill:#fff"/><path d="M4903.49 584.786a170.38 170.38 0 0 1 48.02-119.443 170.43 170.43 0 0 1 117.88-51.748 173.25 173.25 0 0 1 120.47 50.725 173.2 173.2 0 0 1 50.72 120.466 169.97 169.97 0 0 1-51.63 117.996 170 170 0 0 1-119.56 47.909 167.55 167.55 0 0 1-116.84-49.061 167.52 167.52 0 0 1-49.06-116.844m1328.04 361.087c81.29 0 133.39 45.115 133.39 143.537a952.2 952.2 0 0 1-70.35 278.95c-65.06 174.95-132.83 375.65-206.57 606.29-26.24-89.23-77.88-238.59-173.63-487.96-22.64-62.08-45.28-124.16-67.91-186.24-31.4-75.26-50.87-154.98-57.75-236.25a107.1 107.1 0 0 1 3.12-44.69 107.2 107.2 0 0 1 21.14-39.489 107.1 107.1 0 0 1 35.47-27.367 107.1 107.1 0 0 1 43.57-10.441v-32.936h-569.29v32.936c77.71 7.324 140.74 81.437 223.64 301.717 120.78 319.48 241.54 638.95 362.31 958.43a387.2 387.2 0 0 1 32.34 172.74 387.2 387.2 0 0 1-47.38 169.23c-40.74 90.83-100.99 135.81-171.2 135.81-89.32 0-133.37-39.12-133.37-115.47 0-30.48 58.15-90.71 58.15-148.43 0-81.3-63.01-118.32-133.37-118.32-22.29-.78-44.54 3.19-65.18 11.64a157.9 157.9 0 0 0-54.67 37.36 158.1 158.1 0 0 0-34.51 56.5 158.1 158.1 0 0 0-8.3 65.68c3.29 76.91 36.85 149.41 93.37 201.66a291.58 291.58 0 0 0 208.36 77.3c37.46 1.28 74.84-4.84 109.93-18.03a284.8 284.8 0 0 0 94.6-58.83c30.09-22.37 67.97-100.57 88.24-138.25a609.4 609.4 0 0 0 37.81-93.13c17.49-42.69 27.7-77.79 34.97-100.43 7.3-22.69 22.8-60.67 40.67-118.33 13.55-42.7 27.1-85.39 40.66-128.08 114.33-356.34 217.05-645.73 309.45-880.36 57.75-143.56 133.39-228.938 171.18-246.415a215 215 0 0 1 65.07-22.771v-32.938h-413.96zM2260.4 2135.67c-73.15-12.6-135.82-78.02-135.82-216.33V252.164l-414.75 89.865v35.376c70.32-7.724 141.09 55.29 141.09 188.676V1919.34c0 130.95-70.77 206.16-141.09 216.33-6.65.82-13.29 1.63-19.93 2.44a217.16 217.16 0 0 1-104.92-18.71 313.13 313.13 0 0 1-141.91-130.53l-192.33-309.03a353.4 353.4 0 0 0-171.99-142.13 353.38 353.38 0 0 0-222.849-10.77c72.109-79.69 144.219-159.39 216.329-239.09 161.85-180.06 314.05-296.617 457.86-344.416v-32.938h-474.53v32.938c119.43 46.579 118.73 149.956-25.21 319.206q-152.085 177.495-304.163 354.99V251.757l-415.169 90.272v35.376c70.336 0 141.1 70.341 141.1 193.556V1919.34c0 148.49-67.973 206.17-141.1 216.33v32.53H862v-32.53c-90.844-12.63-135.813-81.58-135.813-216.33v-248.85l118.328-128.91c95.558 156.83 191.115 313.65 286.675 470.48 67.89 113 130.51 158.17 231.37 158.17h957.2v-25.61c-2.46-.33-29.19-3.92-59.36-8.95m1276.81 3.66v32.94c-3.52 1.26-282.73 100.17-367.59-70.76a346.2 346.2 0 0 1-36.59-145.98A455.86 455.86 0 0 1 2963 2136.81a455.9 455.9 0 0 1-239.86 65.14c-203.34 0-349.7-95.59-349.7-304.56a262.7 262.7 0 0 1 45.54-148.42c60.19-90.29 130.56-138.26 261.47-188.68 65.45-24.8 122.02-42.7 162.65-55.3 41.74-12.94 100.39-25.66 162.64-37.41 42.43-10.17 84.86-20.33 127.29-30.5v-150.86c0-251.34-108.21-365.964-259.03-365.964-118.33 0-186.23 78.079-186.23 168.754 0 49.99 35.37 122.01 35.37 176.07 0 70.32-63.01 121.99-150.86 121.99-87.79 0-130.53-67.87-130.53-158.59 0-90.45 44.93-173.47 138.26-243.977a503.8 503.8 0 0 1 309.03-105.724c353.37 0 507.48 167.541 513.17 535.531v561.56c1.21 35.7 11.2 183.42 135 163.46m-404.18-664.43c-15.08 7.74-50.29 20.43-108.17 40.66-38.49 14.23-76.99 28.46-115.48 42.69-29.32 13.85-50.66 25.34-93.12 47.99a310.7 310.7 0 0 0-88.24 63.03 280.53 280.53 0 0 0-70.34 173.22c0 148.43 81.33 228.93 203.31 228.93a284.58 284.58 0 0 0 181.35-72.78 244 244 0 0 0 68.39-87.79 244.2 244.2 0 0 0 22.3-109.02zm4657.93 66.68a655.003 655.003 0 0 1-188.68 468.84 618.3 618.3 0 0 1-204.85 143.37 618.4 618.4 0 0 1-244.87 50.55c-84.21 0-167.56-17.2-244.89-50.55a618.4 618.4 0 0 1-204.85-143.37c-121.71-125.48-188.81-294.04-186.65-468.84a650.8 650.8 0 0 1 46.58-251.72 650.5 650.5 0 0 1 140.07-214.27 613.3 613.3 0 0 1 204.37-145.134 613.2 613.2 0 0 1 245.37-51.23 613.144 613.144 0 0 1 449.72 196.364 643.6 643.6 0 0 1 141.71 213.81 643.5 643.5 0 0 1 46.97 252.18m-411.1-447.29c-50.17-97.885-115.74-154.568-191.93-169.969-155.72-31.305-293.18 128.459-344.42 383.049a1195.4 1195.4 0 0 0-15.86 346.44 966.8 966.8 0 0 0 94.75 335.06c50.18 97.52 115.76 154.18 192.33 169.57 155.32 31.31 296.84-135.38 348.48-392.39 43.51-216.74 20.74-478.21-83.35-671.76m-2164.49 825.05V910.496h-885.23v30.497c118.31 17.483 174.45 106.527 121.99 251.297-265.73 718.72-262.62 719.93-276.69 773.3-.12.43-.75 2.81-1.44 5.4-17.47-57.65-57.75-200.07-121.99-378.58-64.08-178.03-108.18-296.88-125.65-349.7-67.88-208.5-45.19-284.631 65.47-299.276v-32.938h-574.17v32.938c85.61 17.444 162.52 115.096 224.06 291.556 29.28 76.31 58.55 152.62 87.83 228.92 96.74 247.13 210.58 588.63 248.45 704.29h190.71c61.7-179.37 307.84-894.63 340.76-965.74a563.8 563.8 0 0 1 121.99-188.68 255.36 255.36 0 0 1 170.78-71.161 129 129 0 0 1 53.28 7.34 129.2 129.2 0 0 1 45.66 28.447 129.25 129.25 0 0 1 30.07 44.604c6.76 16.79 9.92 34.89 9.24 52.98v843.35c0 140.73-67.94 206.17-138.66 216.33v32.53h548.54v-32.53c-74.76-10.16-135-75.57-135-216.33M8675.02 251.757h-962.08v658.739h962.08c-63.3-109.79-126.59-219.58-189.89-329.37 63.3-109.789 126.59-219.579 189.89-329.369M8727.77 864.141v46.355h-4.88v-46.355h-19.11v-4.474h40.66v4.474zM8775.3 910.496l-17.49-43.916v43.916h-4.47v-50.829h6.51c5.82 14.774 11.65 29.549 17.48 44.323l17.49-44.323h6.5v50.829h-4.88V866.58c-5.69 14.639-11.39 29.277-17.08 43.916z" style="fill:#232426;fill-rule:nonzero"/></svg>

</document_content>
</document>
<document index="32">
<source>/Users/malcolm/dev/structlog/docs/_static/sponsors/Sentry.svg</source>
<document_content>
<svg viewBox="0 0 180 60" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2"><path fill="#fff" d="M0 0h180v60H0z"/><path d="M29.612 13.2a3.974 3.974 0 00-3.4-1.922c-1.391 0-2.684.73-3.402 1.922l-5.594 9.582a27.415 27.415 0 0115.091 22.666H28.38a23.56 23.56 0 00-13.144-19.317l-5.178 8.953a13.547 13.547 0 017.847 10.347h-9.02a.649.649 0 01-.528-.943l2.5-4.251A9.143 9.143 0 008 38.62l-2.474 4.251a3.862 3.862 0 001.437 5.306c.587.33 1.248.506 1.922.51h12.354a16.511 16.511 0 00-6.802-14.717l1.964-3.402a20.317 20.317 0 018.757 18.119h10.466A30.537 30.537 0 0021.671 21.65l3.97-6.802a.658.658 0 01.893-.23c.451.247 17.251 29.562 17.566 29.903a.645.645 0 01-.564.96h-4.061a34.338 34.338 0 010 3.24h4.089a3.92 3.92 0 003.903-3.903v-.017a3.82 3.82 0 00-.527-1.938L29.612 13.2zm81.043 22.122l-12.55-16.205h-3.128V40.84h3.171V24.193l12.907 16.647h2.772V19.117h-3.172v16.205zm-31.603-4.03h11.249V28.47H79.044V21.93h12.694V19.11H75.813V40.84H91.9v-2.823H79.044l.008-6.725zm-13.229-2.755c-4.378-1.054-5.603-1.887-5.603-3.91 0-1.82 1.607-3.053 4.005-3.053 2.183.064 4.29.824 6.01 2.168l1.701-2.406a11.992 11.992 0 00-7.652-2.55c-4.302 0-7.303 2.55-7.303 6.18 0 3.912 2.55 5.264 7.192 6.394 4.133.952 5.4 1.837 5.4 3.818 0 1.98-1.701 3.205-4.328 3.205-2.615-.012-5.133-1-7.057-2.772l-1.913 2.287a13.554 13.554 0 008.86 3.274c4.658 0 7.651-2.508 7.651-6.386-.025-3.281-1.963-5.041-6.963-6.249zm105.521-9.42l-6.538 10.203-6.496-10.203h-3.792l8.579 13.136v8.596h3.265V32.15L175 19.117h-3.656zm-54.95 2.942h7.116v18.79h3.265v-18.79h7.117v-2.942h-17.49l-.008 2.942zm32.598 10.304c3.281-.91 5.101-3.205 5.101-6.487 0-4.174-3.052-6.801-7.975-6.801h-9.658v21.757h3.23v-7.805h5.484l5.51 7.822h3.775l-5.952-8.35.485-.136zm-9.31-2.125v-8.247h6.096c3.18 0 5 1.505 5 4.115 0 2.61-1.948 4.132-4.966 4.132h-6.13z" fill="#362d59" fill-rule="nonzero"/></svg>

</document_content>
</document>
<document index="33">
<source>/Users/malcolm/dev/structlog/docs/_static/sponsors/Tidelift.svg</source>
<document_content>
<svg viewBox="0 0 180 60" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2"><path fill="#fff" d="M0 0h180v60H0z"/><g fill-rule="nonzero"><path d="M39.99 39.07V20.93c0-1.838 0-1.838 1.937-1.838s1.937 0 1.937 1.837v18.142c0 1.837 0 1.837-1.937 1.837s-1.937 0-1.937-1.837zm9.422-1.04V21.97c0-2.883 0-2.883 2.883-2.883h4.699c6.294 0 10.168 3.142 10.58 8.259a25.26 25.26 0 010 4.483c-.416 5.084-4.29 9.08-10.58 9.08h-4.699c-2.883 0-2.883 0-2.883-2.88zm7.498-.797c4.308 0 6.524-2.433 6.774-5.779a20.04 20.04 0 000-3.72c-.284-3.38-2.466-4.963-6.774-4.963h-3.62v14.462h3.62zm15.855.797V21.97c0-2.883 0-2.883 2.882-2.883h10.914c1.904 0 1.904 0 1.904 1.788 0 1.787 0 1.82-1.904 1.82h-9.914v5.617h8.96c1.82 0 1.82 0 1.82 1.705 0 1.704 0 1.72-1.82 1.72h-8.96V37.3h9.998c1.903 0 1.903 0 1.903 1.77 0 1.838 0 1.838-1.903 1.838H75.647c-2.882 0-2.882 0-2.882-2.879zm21.261 0V20.945c0-1.871 0-1.871 1.92-1.871s1.937 0 1.937 1.837V37.3h9.64c1.953 0 1.953 0 1.953 1.82 0 1.822 0 1.788-1.953 1.788H96.909c-2.883 0-2.883 0-2.883-2.879zm20.944 1.04V20.93c0-1.838 0-1.838 1.938-1.838 1.937 0 1.937 0 1.937 1.837v18.142c0 1.837 0 1.837-1.937 1.837s-1.937 0-1.937-1.837zm9.378 0V21.988c0-2.883 0-2.883 2.882-2.883h10.914c1.87 0 1.887 0 1.887 1.821 0 1.82 0 1.787-1.887 1.787h-9.918v5.834h9.193c1.887 0 1.887 0 1.887 1.754s0 1.788-1.887 1.788h-9.193v6.983c0 1.837 0 1.837-1.937 1.837s-1.941 0-1.941-1.837zM32.533 19.092H17.346c-1.987 0-1.987 0-1.987 1.82 0 1.821 0 1.788 1.987 1.788h5.665v6.437l3.857-3.025V22.7h5.665c1.954 0 1.954 0 1.954-1.788 0-1.787 0-1.82-1.954-1.82z" fill="#4b5168"/><path d="M23.01 32.87v6.15c0 1.838 0 1.838 1.938 1.838 1.937 0 1.92 0 1.92-1.87v-9.142l-3.857 3.025z" fill="#f6914d"/><path d="M147.463 19.092h15.187c1.987 0 1.987 0 1.987 1.82 0 1.821 0 1.788-1.987 1.788h-5.665v6.437l-3.857-3.025V22.7h-5.665c-1.954 0-1.954 0-1.954-1.788 0-1.787.004-1.82 1.954-1.82z" fill="#4b5168"/><path d="M156.99 32.87v6.15c0 1.838 0 1.838-1.938 1.838-1.937 0-1.92 0-1.92-1.87v-9.142l3.857 3.025z" fill="#f6914d"/></g></svg>

</document_content>
</document>
<document index="34">
<source>/Users/malcolm/dev/structlog/docs/_static/sponsors/Variomedia.svg</source>
<document_content>
<svg viewBox="0 0 180 60" xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2"><path fill="#fff" d="M0 0h180v60H0z"/><g fill-rule="nonzero"><path d="M39.98 2.528c-.986 0-1.777.796-1.777 1.781 0 .324.087.627.238.888l18.6 38.156 6.966-17.195L53.047 3.61a1.783 1.783 0 00-1.566-1.08H39.979z" fill="#3386aa"/><path d="M74.781 2.53c-.77 0-1.424.482-1.674 1.166L57.039 43.354l6.33 13.01c.294.656.905 1.107 1.65 1.107.73 0 1.366-.38 1.716-1.177l20.67-51.241c.094-.23.166-.479.166-.745 0-.986-.797-1.772-1.781-1.779H74.78z" fill="#2ac2ba"/><path d="M89.969 55.009a1.795 1.795 0 001.656 2.463l11.005-.002c.742 0 1.379-.458 1.647-1.102l.003-.002 20.718-51.39a1.782 1.782 0 00-1.652-2.447h-11.011a1.77 1.77 0 00-1.665 1.148L89.969 55.009z" fill="#ec1e79"/><path d="M64.006 26.16l-1.763-3.629-5.204 20.823.63-1.554 6.337-15.64z" fill="#276680"/><path d="M89.873 56.02v-.002l-.009-.05v-.002a1.844 1.844 0 01-.022-.225v-.008c0-.018 0-.035-.002-.053v-.008c0-.236.047-.458.13-.664 1.946-4.833 7.794-19.328 7.794-19.328l.07-.175L87.52 3.88l.01.044c.002.015.006.03.009.044v.001l.008.044v.001l.006.044v.001l.006.045v.001l.005.045v.002l.002.045c.001.024.003.048.003.073v.065c0 .047-.004.094-.01.141 0 .016-.003.03-.005.046-.001.016-.004.03-.007.046l-.008.045v.002l-.01.043v.002l-.01.042v.003a.29.29 0 01-.011.04l-.001.006a.303.303 0 01-.011.039l-.002.007-.011.037-.003.009c-.004.01-.006.022-.01.034l-.005.013a.2.2 0 01-.011.03l-.006.016-.01.027-.008.022a.58.58 0 01-.025.061L79.586 24.43l10.322 31.74a2.272 2.272 0 01-.035-.15zm51.863-.782L125.07 3.863a1.776 1.776 0 01-.072 1.113L118.6 20.85l-1.445 3.584 10.333 31.786a1.79 1.79 0 001.701 1.25h10.838a1.777 1.777 0 001.71-2.233z" fill="#b1175b"/><path d="M118.86 29.685l-1.706-5.25 7.828-19.417-6.123 24.667zm-37.565 0l-1.707-5.25L87.42 5.02l-6.125 24.666zm14.83.581l1.709 5.24-7.831 19.417 6.122-24.657z" fill="#841245"/></g></svg>

</document_content>
</document>
</documents>
