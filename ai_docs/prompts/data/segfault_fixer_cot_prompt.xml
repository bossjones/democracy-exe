<?xml version="1.0" encoding="UTF-8"?>
<prompt_chain version="2.0">
  <!-- Core System Configuration -->
  <system_configuration>
    <knowledge_base>
      <primary_store>segfault_fixer_expert.xml</primary_store>
      <update_mechanism>artifacts command system</update_mechanism>
      <persistence_requirements>
        <scope>
          Maintain comprehensive knowledge of segfault prevention patterns,
          including implementations, validations, and relationships between patterns.
          All discoveries must be immediately persisted to maintain knowledge integrity.
        </scope>
        <update_process>
          1. Document new discoveries immediately
          2. Format for knowledge base structure
          3. Validate against existing knowledge
          4. Update using artifacts command
          5. Verify integration success
          6. Document update rationale
        </update_process>
        <validation_requirements>
          1. Cross-reference with existing patterns
          2. Verify implementation feasibility
          3. Validate pattern relationships
          4. Check documentation completeness
          5. Ensure context appropriateness
        </validation_requirements>
      </persistence_requirements>
    </knowledge_base>

    <analysis_principles>
      <complexity_management>
        <guidance>
          Start with fundamental patterns and gradually incorporate more
          sophisticated solutions only when necessary. Prefer clarity and
          maintainability over unnecessary complexity.
        </guidance>
        <progression>
          1. Basic pattern identification
          2. Simple implementation approach
          3. Necessary complexity additions
          4. Optimization considerations
          5. Advanced pattern integration
        </progression>
      </complexity_management>

      <context_awareness>
        <focus>
          Maintain strict attention to democracy_exe's specific needs
          and constraints throughout the analysis process.
        </focus>
        <adaptation_guidelines>
          1. Evaluate pattern complexity vs. necessity
          2. Simplify complex patterns appropriately
          3. Consider implementation feasibility
          4. Account for maintenance requirements
          5. Plan for future scalability
        </adaptation_guidelines>
      </context_awareness>

      <error_handling>
        <requirements>
          1. Identify potential error sources
          2. Document error scenarios
          3. Plan mitigation strategies
          4. Define recovery procedures
          5. Validate error handling
        </requirements>
        <documentation>
          Maintain clear documentation of all error handling mechanisms
          and their relationship to segfault prevention.
        </documentation>
      </error_handling>
    </analysis_principles>
  </system_configuration>



<!-- Stage 0: Initialization and Context Analysis -->
  <stage name="initialization" description="Initial context establishment and planning">
    <persistence_instructions>
      During initialization:
      1. Document current system understanding
      2. Establish baseline knowledge state
      3. Identify critical focus areas
      4. Plan knowledge acquisition strategy

      Update knowledge base with:
      1. Current state assessment
      2. Known issue catalog
      3. Priority patterns
      4. Success criteria
    </persistence_instructions>

    <pre_analysis>
      <thinking_framework>
        Consider for initialization:
        1. What are our current known segfault triggers?
        2. Which patterns have proven effective?
        3. What are our critical risk areas?
        4. How do we measure success?
        5. What context details are crucial?
      </thinking_framework>
    </pre_analysis>

    <instructions>
      Execute initialization process:

      Phase 1 - Current State Assessment:
      1. Document known segfault scenarios
      2. Catalog existing prevention patterns
      3. Identify critical system components
      4. Map current error handling
      5. Review existing documentation

      Phase 2 - Context Definition:
      1. Define system constraints
      2. Document resource limitations
      3. Identify integration requirements
      4. Map component dependencies
      5. Establish success criteria

      Phase 3 - Knowledge Base Preparation:
      1. Structure knowledge categories
      2. Define pattern relationships
      3. Establish validation criteria
      4. Create update procedures
      5. Set documentation standards

      After each phase:
      1. Format findings for persistence
      2. Update expert system
      3. Validate integration
      4. Document decisions
      5. Plan next steps
    </instructions>

    <output_structure>
      <current_state>
        <known_issues>
          <!-- Document current problems -->
        </known_issues>
        <existing_patterns>
          <!-- List current solutions -->
        </existing_patterns>
        <critical_areas>
          <!-- Identify high-risk components -->
        </critical_areas>
      </current_state>
      <knowledge_updates>
        <baseline_establishment>
          <!-- Initial knowledge state -->
        </baseline_establishment>
        <update_plan>
          <!-- Knowledge acquisition strategy -->
        </update_plan>
      </knowledge_updates>
      <validation_results>
        <completeness_check>
          <!-- Verify initialization coverage -->
        </completeness_check>
        <next_steps>
          <!-- Planned actions -->
        </next_steps>
      </validation_results>
    </output_structure>
  </stage>




<!-- Stage 1: Enhanced Code Analysis -->
  <stage name="analysis" description="Systematic code pattern analysis with continuous knowledge persistence">
    <persistence_instructions>
      During pattern discovery:
      1. Document each pattern immediately upon identification
      2. Record implementation context and requirements
      3. Note pattern relationships and dependencies
      4. Track validation criteria and results
      5. Maintain pattern hierarchy and organization

      Knowledge base updates must include:
      1. Pattern details and implementation
      2. Usage context and constraints
      3. Risk assessment and mitigation
      4. Validation requirements
      5. Related patterns and dependencies
      6. Success criteria and metrics
    </persistence_instructions>

    <pre_analysis>
      <thinking_framework>
        For each code segment, consider:
        1. What segfault prevention patterns are present?
        2. How do these patterns relate to known issues?
        3. What complexity level is appropriate?
        4. How can we adapt this for democracy_exe?
        5. What validation is required?
        6. How does this integrate with existing knowledge?
        7. What documentation is needed?
      </thinking_framework>
    </pre_analysis>

    <instructions>
      Execute iterative analysis process:

      Pass 1 - Pattern Discovery:
      1. Thread management analysis
         - Thread lifecycle control
         - Resource synchronization
         - Deadlock prevention
         - Thread pool management
         - Exception propagation

      2. Memory safety inspection
         - Resource allocation patterns
         - Cleanup mechanisms
         - Pointer safety
         - Memory management
         - Buffer handling

      3. Resource management review
         - Lifecycle control
         - Error handling
         - Resource tracking
         - Cleanup sequences
         - State management

      4. Exception handling analysis
         - Error propagation
         - Recovery mechanisms
         - State restoration
         - Cleanup procedures
         - Logging systems

      For each discovered pattern:
      1. Document complete pattern details
      2. Assess implementation requirements
      3. Evaluate complexity needs
      4. Identify integration points
      5. Plan validation approach
      6. Update knowledge base
      7. Verify persistence

      Pass 2 - Pattern Evaluation:
      1. Complexity assessment
         - Implementation difficulty
         - Maintenance requirements
         - Integration challenges
         - Testing needs
         - Documentation scope

      2. Dependency analysis
         - Pattern relationships
         - Integration requirements
         - Resource needs
         - System constraints
         - Implementation order

      3. Risk evaluation
         - Implementation risks
         - Integration challenges
         - Maintenance concerns
         - Performance impacts
         - Resource constraints

      Pass 3 - Context Adaptation:
      1. Pattern simplification
         - Reduce unnecessary complexity
         - Focus on core functionality
         - Streamline implementation
         - Optimize resource usage
         - Maintain clarity

      2. Integration planning
         - Define integration points
         - Plan implementation sequence
         - Identify dependencies
         - Document requirements
         - Establish validation criteria

      3. Documentation preparation
         - Pattern documentation
         - Implementation guides
         - Validation requirements
         - Testing procedures
         - Maintenance instructions

      After each pass:
      1. Review findings
      2. Update knowledge base
      3. Validate integration
      4. Plan next steps
      5. Document decisions
    </instructions>

    <output_structure>
      <patterns>
        <pattern>
          <identification>
            <name><!-- Pattern name --></name>
            <purpose><!-- Pattern purpose --></purpose>
            <context><!-- Usage context --></context>
            <benefits><!-- Key benefits --></benefits>
            <risks><!-- Potential risks --></risks>
          </identification>

          <implementation>
            <requirements><!-- Implementation needs --></requirements>
            <steps><!-- Implementation steps --></steps>
            <validation><!-- Validation criteria --></validation>
            <testing><!-- Testing requirements --></testing>
          </implementation>

          <relationships>
            <dependencies><!-- Pattern dependencies --></dependencies>
            <interactions><!-- Pattern interactions --></interactions>
            <conflicts><!-- Potential conflicts --></conflicts>
          </relationships>

          <persistence>
            <knowledge_updates><!-- Required updates --></knowledge_updates>
            <validation_results><!-- Update validation --></validation_results>
            <documentation><!-- Documentation needs --></documentation>
          </persistence>
        </pattern>
      </patterns>

      <analysis_results>
        <discoveries>
          <new_patterns><!-- Newly found patterns --></new_patterns>
          <pattern_updates><!-- Pattern modifications --></pattern_updates>
          <relationships><!-- New relationships --></relationships>
        </discoveries>

        <validation>
          <coverage><!-- Analysis coverage --></coverage>
          <gaps><!-- Identified gaps --></gaps>
          <improvements><!-- Needed improvements --></improvements>
        </validation>

        <next_steps>
          <priorities><!-- Priority actions --></priorities>
          <planning><!-- Next phase planning --></planning>
          <requirements><!-- Additional needs --></requirements>
        </next_steps>
      </analysis_results>
    </output_structure>
  </stage>



<!-- Stage 2: Pattern Synthesis and Integration -->
  <stage name="synthesis" description="Comprehensive pattern synthesis with knowledge integration">
    <persistence_instructions>
      During synthesis process:
      1. Document pattern relationships as discovered
      2. Record integration requirements and dependencies
      3. Update pattern hierarchy in knowledge base
      4. Maintain cross-references between related patterns
      5. Track implementation prerequisites

      Knowledge base updates must include:
      1. Updated pattern relationships
      2. Integration sequences
      3. Dependency maps
      4. Implementation priorities
      5. Validation requirements
      6. Resource needs
    </persistence_instructions>

    <pre_synthesis>
      <thinking_framework>
        For pattern integration, consider:
        1. How do patterns work together to prevent segfaults?
        2. What synergies exist between patterns?
        3. Which combinations provide maximum benefit?
        4. What are the critical implementation paths?
        5. How can we minimize integration complexity?
        6. What validation ensures proper integration?
      </thinking_framework>
    </pre_synthesis>

    <instructions>
      Execute synthesis process systematically:

      Phase 1 - Pattern Organization:
      1. Pattern Classification
         - Group related patterns
         - Establish hierarchy
         - Identify core patterns
         - Map pattern relationships
         - Document pattern families

      2. Dependency Mapping
         - Identify prerequisites
         - Map implementation order
         - Document constraints
         - Track resources needed
         - Note integration points

      3. Integration Planning
         - Define integration sequence
         - Plan resource allocation
         - Establish validation points
         - Document dependencies
         - Create rollback procedures

      Phase 2 - Pattern Optimization:
      1. Complexity Analysis
         - Evaluate current complexity
         - Identify simplification opportunities
         - Assess maintenance needs
         - Consider resource impacts
         - Plan optimizations

      2. Implementation Efficiency
         - Streamline integration
         - Optimize resource usage
         - Reduce redundancy
         - Improve maintainability
         - Enhance clarity

      3. Validation Framework
         - Define success criteria
         - Establish test cases
         - Create validation procedures
         - Plan monitoring
         - Document verification steps

      After each phase:
      1. Update knowledge base
      2. Validate changes
      3. Document decisions
      4. Plan next steps
      5. Review progress
    </instructions>

    <output_structure>
      <synthesis_results>
        <pattern_organization>
          <classifications>
            <!-- Pattern groupings -->
          </classifications>
          <hierarchies>
            <!-- Pattern relationships -->
          </hierarchies>
          <dependencies>
            <!-- Implementation requirements -->
          </dependencies>
        </pattern_organization>

        <optimization_results>
          <improvements>
            <!-- Optimization changes -->
          </improvements>
          <validations>
            <!-- Validation results -->
          </validations>
          <documentation>
            <!-- Updated documentation -->
          </documentation>
        </optimization_results>

        <integration_plan>
          <sequence>
            <!-- Implementation order -->
          </sequence>
          <requirements>
            <!-- Integration needs -->
          </requirements>
          <validation>
            <!-- Validation criteria -->
          </validation>
        </integration_plan>
      </synthesis_results>

      <knowledge_updates>
        <pattern_updates>
          <!-- Pattern modifications -->
        </pattern_updates>
        <relationship_updates>
          <!-- New relationships -->
        </relationship_updates>
        <documentation_updates>
          <!-- Documentation changes -->
        </documentation_updates>
      </knowledge_updates>
    </output_structure>
  </stage>



<!-- Stage 3: Enhanced Validation Framework -->
  <stage name="validation" description="Comprehensive validation and verification system">
    <persistence_instructions>
      During validation process:
      1. Document all validation criteria and results
      2. Record validation procedures and outcomes
      3. Update knowledge base with validation findings
      4. Track validation coverage and gaps
      5. Maintain validation history

      Knowledge base updates must include:
      1. Validation procedures
      2. Test cases and results
      3. Coverage analysis
      4. Gap assessments
      5. Improvement recommendations
      6. Future validation needs
    </persistence_instructions>

    <pre_validation>
      <thinking_framework>
        For each validation step, consider:
        1. What defines success for this pattern?
        2. How do we verify effectiveness?
        3. What edge cases need testing?
        4. How do we validate integration?
        5. What monitoring is needed?
        6. How do we measure improvement?
      </thinking_framework>
    </pre_validation>

    <instructions>
      Execute systematic validation process:

      Level 1 - Pattern Validation:
      1. Individual Pattern Testing
         - Verify implementation correctness
         - Test error handling
         - Check resource management
         - Validate cleanup procedures
         - Monitor performance impact

      2. Integration Testing
         - Verify pattern interactions
         - Test dependency handling
         - Check resource conflicts
         - Validate state management
         - Monitor system stability

      3. Edge Case Analysis
         - Identify boundary conditions
         - Test error scenarios
         - Verify recovery procedures
         - Validate error handling
         - Document limitations

      Level 2 - System Validation:
      1. Resource Management
         - Monitor resource usage
         - Track allocation patterns
         - Verify cleanup procedures
         - Test resource limits
         - Validate recovery

      2. Thread Safety
         - Verify synchronization
         - Test concurrent access
         - Check deadlock prevention
         - Validate thread lifecycle
         - Monitor thread states

      3. Error Handling
         - Test error propagation
         - Verify recovery procedures
         - Check state consistency
         - Validate cleanup
         - Monitor error patterns

      After each validation phase:
      1. Document results
      2. Update knowledge base
      3. Plan improvements
      4. Track coverage
      5. Verify documentation
    </instructions>

    <output_structure>
      <validation_results>
        <pattern_validation>
          <individual_results>
            <!-- Pattern test results -->
          </individual_results>
          <integration_results>
            <!-- Integration test results -->
          </integration_results>
          <edge_cases>
            <!-- Edge case findings -->
          </edge_cases>
        </pattern_validation>

        <system_validation>
          <resource_management>
            <!-- Resource test results -->
          </resource_management>
          <thread_safety>
            <!-- Thread safety results -->
          </thread_safety>
          <error_handling>
            <!-- Error handling results -->
          </error_handling>
        </system_validation>

        <coverage_analysis>
          <tested_scenarios>
            <!-- Validated cases -->
          </tested_scenarios>
          <gaps_identified>
            <!-- Missing coverage -->
          </gaps_identified>
          <improvements_needed>
            <!-- Required enhancements -->
          </improvements_needed>
        </coverage_analysis>
      </validation_results>

      <knowledge_updates>
        <validation_procedures>
          <!-- Updated procedures -->
        </validation_procedures>
        <test_cases>
          <!-- New test cases -->
        </test_cases>
        <documentation_updates>
          <!-- Documentation changes -->
        </documentation_updates>
      </knowledge_updates>
    </output_structure>
  </stage>


<!-- Stage 4: Implementation Planning and Execution -->
  <stage name="implementation" description="Detailed implementation strategy and execution framework">
    <persistence_instructions>
      During implementation planning:
      1. Document all implementation steps and requirements
      2. Record integration sequences and dependencies
      3. Track resource requirements and constraints
      4. Maintain implementation progress
      5. Update validation results

      Knowledge base updates must include:
      1. Implementation procedures
      2. Integration sequences
      3. Resource requirements
      4. Success metrics
      5. Validation criteria
      6. Rollback procedures
    </persistence_instructions>

    <pre_implementation>
      <thinking_framework>
        For implementation planning, consider:
        1. What is the optimal implementation sequence?
        2. How do we minimize integration risks?
        3. What resources are required?
        4. How do we validate success?
        5. What rollback procedures are needed?
        6. How do we measure progress?
      </thinking_framework>
    </pre_implementation>

    <instructions>
      Execute implementation planning process:

      Phase 1 - Strategic Planning:
      1. Implementation Sequence
         - Define implementation order
         - Identify dependencies
         - Plan resource allocation
         - Establish milestones
         - Create timeline

      2. Resource Planning
         - Identify required resources
         - Plan resource allocation
         - Define resource constraints
         - Track resource usage
         - Plan optimization

      3. Risk Management
         - Identify potential risks
         - Plan mitigation strategies
         - Create contingency plans
         - Define rollback procedures
         - Document risk responses

      Phase 2 - Implementation Framework:
      1. Pattern Implementation
         - Define implementation steps
         - Document requirements
         - Plan integration
         - Establish validation
         - Create documentation

      2. Integration Management
         - Plan integration sequence
         - Define interfaces
         - Document dependencies
         - Establish validation
         - Create rollback plans

      3. Validation Framework
         - Define success criteria
         - Create test plans
         - Establish monitoring
         - Plan verification
         - Document procedures

      After each phase:
      1. Update knowledge base
      2. Validate progress
      3. Document decisions
      4. Review effectiveness
      5. Plan improvements
    </instructions>

    <output_structure>
      <implementation_plan>
        <strategy>
          <sequence>
            <!-- Implementation order -->
          </sequence>
          <resources>
            <!-- Resource requirements -->
          </resources>
          <risks>
            <!-- Risk management -->
          </risks>
        </strategy>

        <framework>
          <patterns>
            <!-- Implementation details -->
          </patterns>
          <integration>
            <!-- Integration plans -->
          </integration>
          <validation>
            <!-- Validation procedures -->
          </validation>
        </framework>

        <documentation>
          <procedures>
            <!-- Implementation procedures -->
          </procedures>
          <requirements>
            <!-- Implementation requirements -->
          </requirements>
          <validation>
            <!-- Validation criteria -->
          </validation>
        </documentation>
      </implementation_plan>

      <knowledge_updates>
        <implementation_procedures>
          <!-- Updated procedures -->
        </implementation_procedures>
        <integration_plans>
          <!-- Integration updates -->
        </integration_plans>
        <documentation_updates>
          <!-- Documentation changes -->
        </documentation_updates>
      </knowledge_updates>
    </output_structure>
  </stage>

  <!-- Stage 5: Final Review and Knowledge Base Consolidation -->
  <stage name="review" description="Comprehensive review and knowledge consolidation">

<!-- Stage 5: Final Review and Knowledge Base Consolidation (continued) -->
  <stage name="review" description="Comprehensive review and knowledge consolidation">
    <persistence_instructions>
      During final review process:
      1. Review all accumulated knowledge thoroughly
      2. Verify completeness of documentation
      3. Validate pattern relationships
      4. Ensure implementation coverage
      5. Check validation completeness

      Final knowledge base updates must include:
      1. Consolidated pattern documentation
      2. Complete implementation guides
      3. Comprehensive validation procedures
      4. Future improvement recommendations
      5. Open questions and considerations
      6. Maintenance guidelines
    </persistence_instructions>

    <pre_review>
      <thinking_framework>
        For final review, consider:
        1. Have we addressed all critical areas?
        2. Is our documentation complete and clear?
        3. Are all patterns properly validated?
        4. Have we missed any important relationships?
        5. Is our implementation guidance sufficient?
        6. What future improvements are needed?
      </thinking_framework>
    </pre_review>

    <instructions>
      Execute comprehensive review process:

      Phase 1 - Knowledge Review:
      1. Pattern Completeness
         - Review all documented patterns
         - Verify implementation details
         - Check relationship mapping
         - Validate documentation
         - Identify gaps

      2. Implementation Coverage
         - Review implementation plans
         - Verify resource requirements
         - Check integration guidance
         - Validate procedures
         - Document limitations

      3. Validation Assessment
         - Review validation procedures
         - Check test coverage
         - Verify success criteria
         - Validate monitoring plans
         - Document improvements

      Phase 2 - Knowledge Consolidation:
      1. Documentation Organization
         - Structure documentation
         - Organize patterns
         - Create reference guides
         - Update tutorials
         - Review accessibility

      2. Relationship Mapping
         - Update pattern relationships
         - Verify dependencies
         - Document interactions
         - Check consistency
         - Validate completeness

      3. Future Planning
         - Identify improvements
         - Plan enhancements
         - Document open questions
         - Create roadmap
         - Set priorities

      After review completion:
      1. Finalize knowledge base
      2. Document conclusions
      3. Plan next steps
      4. Create maintenance guide
      5. Establish review cycle
    </instructions>

    <output_structure>
      <review_results>
        <knowledge_assessment>
          <completeness>
            <!-- Coverage evaluation -->
          </completeness>
          <quality>
            <!-- Quality assessment -->
          </quality>
          <gaps>
            <!-- Identified gaps -->
          </gaps>
        </knowledge_assessment>

        <consolidation_results>
          <organization>
            <!-- Documentation structure -->
          </organization>
          <relationships>
            <!-- Pattern relationships -->
          </relationships>
          <improvements>
            <!-- Future enhancements -->
          </improvements>
        </consolidation_results>

        <future_planning>
          <roadmap>
            <!-- Enhancement plans -->
          </roadmap>
          <maintenance>
            <!-- Maintenance procedures -->
          </maintenance>
          <review_cycle>
            <!-- Review procedures -->
          </review_cycle>
        </future_planning>
      </review_results>

      <final_knowledge_state>
        <documentation>
          <!-- Final documentation state -->
        </documentation>
        <implementation>
          <!-- Implementation status -->
        </implementation>
        <validation>
          <!-- Validation status -->
        </validation>
      </final_knowledge_state>
    </output_structure>
  </stage>

  <!-- Execution Framework -->
  <execution_framework>
    <principles>
      1. Maintain continuous knowledge persistence
      2. Validate all updates thoroughly
      3. Document decisions and rationale
      4. Enable future enhancement
      5. Support iterative improvement
    </principles>

    <process_flow>
      <step name="initialization">
        1. Review existing knowledge
        2. Plan analysis approach
        3. Establish baseline
        4. Define success criteria
      </step>

      <step name="execution">
        1. Follow stage sequence
        2. Document continuously
        3. Validate thoroughly
        4. Update knowledge base
        5. Review progress
      </step>

      <step name="validation">
        1. Verify completeness
        2. Check accuracy
        3. Validate relationships
        4. Test implementation
        5. Document results
      </step>

      <step name="iteration">
        1. Review results
        2. Identify improvements
        3. Plan updates
        4. Execute changes
        5. Validate modifications
      </step>
    </process_flow>

    <documentation_requirements>
      1. Maintain clear structure
      2. Use consistent terminology
      3. Include examples
      4. Document relationships
      5. Provide context
    </documentation_requirements>
  </execution_framework>

  <!-- Validation Framework -->
  <validation_framework>
    <principles>
      1. Validate continuously
      2. Document thoroughly
      3. Test comprehensively
      4. Review systematically
      5. Improve iteratively
    </principles>

    <requirements>
      <coverage>
        1. Pattern implementation
        2. Integration procedures
        3. Error handling
        4. Resource management
        5. Thread safety
      </coverage>

      <documentation>
        1. Implementation guides
        2. Validation procedures
        3. Test cases
        4. Error scenarios
        5. Success criteria
      </documentation>

      <verification>
        1. Pattern effectiveness
        2. Implementation correctness
        3. Integration success
        4. Error handling
        5. Resource management
      </verification>
    </requirements>
  </validation_framework>
</prompt_chain>
