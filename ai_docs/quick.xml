<documents>
<document index="1">
<source>/Users/malcolm/dev/uv-docker-example/Dockerfile</source>
<document_content>
# Use a Python image with uv pre-installed
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim

# Install the project into `/app`
WORKDIR /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
ADD . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Reset the entrypoint, don't invoke `uv`
ENTRYPOINT []

# Run the FastAPI application by default
# Uses `fastapi dev` to enable hot-reloading when the `watch` sync occurs
# Uses `--host 0.0.0.0` to allow access from outside the container
CMD ["fastapi", "dev", "--host", "0.0.0.0", "src/uv_docker_example"]

</document_content>
</document>
<document index="2">
<source>/Users/malcolm/dev/uv-docker-example/pyproject.toml</source>
<document_content>
[project]
name = "uv-docker-example"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi[standard]>=0.112.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
hello = "uv_docker_example:hello"

[tool.uv]
dev-dependencies = [
    "ruff>=0.6.2",
    "fastapi-cli>=0.0.5",
]

</document_content>
</document>
<document index="3">
<source>/Users/malcolm/dev/uv-docker-example/src/uv_docker_example/__init__.py</source>
<document_content>
from fastapi import FastAPI

app = FastAPI()


def hello():
    print("Hello world")


@app.get("/")
async def root():
    return "Hello world"

</document_content>
</document>
</documents>
