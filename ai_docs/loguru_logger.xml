<documents>
<document index="1">
<source>/Users/malcolm/Documents/ai_docs/rtdocs/loguru.readthedocs.io/en/stable/_modules/loguru/_logger.html</source>
<document_content>


<!DOCTYPE html>
<html class="writer-html5" lang="en" data-content_root="../../">
<head>
  <meta charset="utf-8" />
  <meta name="readthedocs-addons-api-version" content="1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>loguru._logger &mdash; loguru  documentation</title>
      <link rel="stylesheet" type="text/css" href="../../_static/pygments.css?v=fa44fd50" />
      <link rel="stylesheet" type="text/css" href="../../_static/css/theme.css?v=e59714d7" />
      <link rel="stylesheet" type="text/css" href="../../_static/css/loguru.css?v=a25ae5fa" />


      <script src="../../_static/jquery.js?v=5d32c60e"></script>
      <script src="../../_static/_sphinx_javascript_frameworks_compat.js?v=2cd50e6c"></script>
      <script src="../../_static/documentation_options.js?v=5929fcd5"></script>
      <script src="../../_static/doctools.js?v=9bcbadda"></script>
      <script src="../../_static/sphinx_highlight.js?v=dc90522c"></script>
      <script src="../../_static/js/copybutton.js?v=fad2344d"></script>
    <script src="../../_static/js/theme.js"></script>
    <script src="../../_static/js/versions.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
<script async type="text/javascript" src="/_/static/javascript/readthedocs-addons.js"></script><meta name="readthedocs-project-slug" content="loguru" /><meta name="readthedocs-version-slug" content="stable" /><meta name="readthedocs-resolver-filename" content="/_modules/loguru/_logger.html" /><meta name="readthedocs-http-status" content="200" /></head>

<body class="wy-body-for-nav">
  <div class="wy-grid-for-nav">
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search" >



          <a href="../../index.html" class="icon icon-home">
            loguru
          </a>
              <div class="switch-menus">
                <div class="version-switch"></div>
                <div class="language-switch"></div>
              </div>
<div role="search">
  <form id="rtd-search-form" class="wy-form" action="../../search.html" method="get">
    <input type="text" name="q" placeholder="Search docs" aria-label="Search docs" />
    <input type="hidden" name="check_keywords" value="yes" />
    <input type="hidden" name="area" value="default" />
  </form>
</div>
        </div><div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="Navigation menu">
              <ul>
<li class="toctree-l1"><a class="reference internal" href="../../overview.html">Overview</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../api.html">API Reference</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../resources.html">Help &amp; Guides</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../project.html">Project Information</a></li>
</ul>

        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap"><nav class="wy-nav-top" aria-label="Mobile navigation menu" >
          <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
          <a href="../../index.html">loguru</a>
      </nav>

      <div class="wy-nav-content">
        <div class="rst-content">
          <div role="navigation" aria-label="Page navigation">
  <ul class="wy-breadcrumbs">
      <li><a href="../../index.html" class="icon icon-home" aria-label="Home"></a></li>
          <li class="breadcrumb-item"><a href="../index.html">Module code</a></li>
      <li class="breadcrumb-item active">loguru._logger</li>

  </ul>
  <hr/>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">

           <div itemprop="articleBody">

  <h1>Source code for loguru._logger</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot;Core logging functionalities of the `Loguru` library.</span>

<span class="sd">.. References and links rendered by Sphinx are kept here as &quot;module documentation&quot; so that they can</span>
<span class="sd">   be used in the ``Logger`` docstrings but do not pollute ``help(logger)`` output.</span>

<span class="sd">.. |Logger| replace:: :class:`~Logger`</span>
<span class="sd">.. |add| replace:: :meth:`~Logger.add()`</span>
<span class="sd">.. |remove| replace:: :meth:`~Logger.remove()`</span>
<span class="sd">.. |complete| replace:: :meth:`~Logger.complete()`</span>
<span class="sd">.. |catch| replace:: :meth:`~Logger.catch()`</span>
<span class="sd">.. |bind| replace:: :meth:`~Logger.bind()`</span>
<span class="sd">.. |contextualize| replace:: :meth:`~Logger.contextualize()`</span>
<span class="sd">.. |patch| replace:: :meth:`~Logger.patch()`</span>
<span class="sd">.. |opt| replace:: :meth:`~Logger.opt()`</span>
<span class="sd">.. |log| replace:: :meth:`~Logger.log()`</span>
<span class="sd">.. |level| replace:: :meth:`~Logger.level()`</span>
<span class="sd">.. |enable| replace:: :meth:`~Logger.enable()`</span>
<span class="sd">.. |disable| replace:: :meth:`~Logger.disable()`</span>

<span class="sd">.. |Any| replace:: :obj:`~typing.Any`</span>
<span class="sd">.. |str| replace:: :class:`str`</span>
<span class="sd">.. |int| replace:: :class:`int`</span>
<span class="sd">.. |bool| replace:: :class:`bool`</span>
<span class="sd">.. |tuple| replace:: :class:`tuple`</span>
<span class="sd">.. |namedtuple| replace:: :func:`namedtuple&lt;collections.namedtuple&gt;`</span>
<span class="sd">.. |list| replace:: :class:`list`</span>
<span class="sd">.. |dict| replace:: :class:`dict`</span>
<span class="sd">.. |str.format| replace:: :meth:`str.format()`</span>
<span class="sd">.. |Path| replace:: :class:`pathlib.Path`</span>
<span class="sd">.. |match.groupdict| replace:: :meth:`re.Match.groupdict()`</span>
<span class="sd">.. |Handler| replace:: :class:`logging.Handler`</span>
<span class="sd">.. |sys.stderr| replace:: :data:`sys.stderr`</span>
<span class="sd">.. |sys.exc_info| replace:: :func:`sys.exc_info()`</span>
<span class="sd">.. |time| replace:: :class:`datetime.time`</span>
<span class="sd">.. |datetime| replace:: :class:`datetime.datetime`</span>
<span class="sd">.. |timedelta| replace:: :class:`datetime.timedelta`</span>
<span class="sd">.. |open| replace:: :func:`open()`</span>
<span class="sd">.. |logging| replace:: :mod:`logging`</span>
<span class="sd">.. |signal| replace:: :mod:`signal`</span>
<span class="sd">.. |contextvars| replace:: :mod:`contextvars`</span>
<span class="sd">.. |multiprocessing| replace:: :mod:`multiprocessing`</span>
<span class="sd">.. |Thread.run| replace:: :meth:`Thread.run()&lt;threading.Thread.run()&gt;`</span>
<span class="sd">.. |Exception| replace:: :class:`Exception`</span>
<span class="sd">.. |AbstractEventLoop| replace:: :class:`AbstractEventLoop&lt;asyncio.AbstractEventLoop&gt;`</span>
<span class="sd">.. |asyncio.get_running_loop| replace:: :func:`asyncio.get_running_loop()`</span>
<span class="sd">.. |asyncio.run| replace:: :func:`asyncio.run()`</span>
<span class="sd">.. |loop.run_until_complete| replace::</span>
<span class="sd">    :meth:`loop.run_until_complete()&lt;asyncio.loop.run_until_complete()&gt;`</span>
<span class="sd">.. |loop.create_task| replace:: :meth:`loop.create_task()&lt;asyncio.loop.create_task()&gt;`</span>

<span class="sd">.. |logger.trace| replace:: :meth:`logger.trace()&lt;Logger.trace()&gt;`</span>
<span class="sd">.. |logger.debug| replace:: :meth:`logger.debug()&lt;Logger.debug()&gt;`</span>
<span class="sd">.. |logger.info| replace:: :meth:`logger.info()&lt;Logger.info()&gt;`</span>
<span class="sd">.. |logger.success| replace:: :meth:`logger.success()&lt;Logger.success()&gt;`</span>
<span class="sd">.. |logger.warning| replace:: :meth:`logger.warning()&lt;Logger.warning()&gt;`</span>
<span class="sd">.. |logger.error| replace:: :meth:`logger.error()&lt;Logger.error()&gt;`</span>
<span class="sd">.. |logger.critical| replace:: :meth:`logger.critical()&lt;Logger.critical()&gt;`</span>

<span class="sd">.. |file-like object| replace:: ``file-like object``</span>
<span class="sd">.. _file-like object: https://docs.python.org/3/glossary.html#term-file-object</span>
<span class="sd">.. |callable| replace:: ``callable``</span>
<span class="sd">.. _callable: https://docs.python.org/3/library/functions.html#callable</span>
<span class="sd">.. |coroutine function| replace:: ``coroutine function``</span>
<span class="sd">.. _coroutine function: https://docs.python.org/3/glossary.html#term-coroutine-function</span>
<span class="sd">.. |re.Pattern| replace:: ``re.Pattern``</span>
<span class="sd">.. _re.Pattern: https://docs.python.org/3/library/re.html#re-objects</span>
<span class="sd">.. |multiprocessing.Context| replace:: ``multiprocessing.Context``</span>
<span class="sd">.. _multiprocessing.Context:</span>
<span class="sd">   https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods</span>

<span class="sd">.. |better_exceptions| replace:: ``better_exceptions``</span>
<span class="sd">.. _better_exceptions: https://github.com/Qix-/better-exceptions</span>

<span class="sd">.. |loguru-config| replace:: ``loguru-config``</span>
<span class="sd">.. _loguru-config: https://github.com/erezinman/loguru-config</span>

<span class="sd">.. _Pendulum: https://pendulum.eustace.io/docs/#tokens</span>

<span class="sd">.. _@Qix-: https://github.com/Qix-</span>
<span class="sd">.. _@erezinman: https://github.com/erezinman</span>
<span class="sd">.. _@sdispater: https://github.com/sdispater</span>

<span class="sd">.. _formatting directives: https://docs.python.org/3/library/string.html#format-string-syntax</span>
<span class="sd">.. _reentrant: https://en.wikipedia.org/wiki/Reentrancy_(computing)</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">builtins</span>
<span class="kn">import</span> <span class="nn">contextlib</span>
<span class="kn">import</span> <span class="nn">functools</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
<span class="kn">from</span> <span class="nn">inspect</span> <span class="kn">import</span> <span class="n">isclass</span><span class="p">,</span> <span class="n">iscoroutinefunction</span><span class="p">,</span> <span class="n">isgeneratorfunction</span>
<span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">current_process</span><span class="p">,</span> <span class="n">get_context</span>
<span class="kn">from</span> <span class="nn">multiprocessing.context</span> <span class="kn">import</span> <span class="n">BaseContext</span>
<span class="kn">from</span> <span class="nn">os.path</span> <span class="kn">import</span> <span class="n">basename</span><span class="p">,</span> <span class="n">splitext</span>
<span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">current_thread</span>

<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">_asyncio_loop</span><span class="p">,</span> <span class="n">_colorama</span><span class="p">,</span> <span class="n">_defaults</span><span class="p">,</span> <span class="n">_filters</span>
<span class="kn">from</span> <span class="nn">._better_exceptions</span> <span class="kn">import</span> <span class="n">ExceptionFormatter</span>
<span class="kn">from</span> <span class="nn">._colorizer</span> <span class="kn">import</span> <span class="n">Colorizer</span>
<span class="kn">from</span> <span class="nn">._contextvars</span> <span class="kn">import</span> <span class="n">ContextVar</span>
<span class="kn">from</span> <span class="nn">._datetime</span> <span class="kn">import</span> <span class="n">aware_now</span>
<span class="kn">from</span> <span class="nn">._error_interceptor</span> <span class="kn">import</span> <span class="n">ErrorInterceptor</span>
<span class="kn">from</span> <span class="nn">._file_sink</span> <span class="kn">import</span> <span class="n">FileSink</span>
<span class="kn">from</span> <span class="nn">._get_frame</span> <span class="kn">import</span> <span class="n">get_frame</span>
<span class="kn">from</span> <span class="nn">._handler</span> <span class="kn">import</span> <span class="n">Handler</span>
<span class="kn">from</span> <span class="nn">._locks_machinery</span> <span class="kn">import</span> <span class="n">create_logger_lock</span>
<span class="kn">from</span> <span class="nn">._recattrs</span> <span class="kn">import</span> <span class="n">RecordException</span><span class="p">,</span> <span class="n">RecordFile</span><span class="p">,</span> <span class="n">RecordLevel</span><span class="p">,</span> <span class="n">RecordProcess</span><span class="p">,</span> <span class="n">RecordThread</span>
<span class="kn">from</span> <span class="nn">._simple_sinks</span> <span class="kn">import</span> <span class="n">AsyncSink</span><span class="p">,</span> <span class="n">CallableSink</span><span class="p">,</span> <span class="n">StandardSink</span><span class="p">,</span> <span class="n">StreamSink</span>

<span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">version_info</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">PathLike</span>
<span class="k">else</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">PurePath</span> <span class="k">as</span> <span class="n">PathLike</span>


<span class="n">Level</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Level&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;no&quot;</span><span class="p">,</span> <span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;icon&quot;</span><span class="p">])</span>  <span class="c1"># noqa: PYI024</span>

<span class="n">start_time</span> <span class="o">=</span> <span class="n">aware_now</span><span class="p">()</span>

<span class="n">context</span> <span class="o">=</span> <span class="n">ContextVar</span><span class="p">(</span><span class="s2">&quot;loguru_context&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="p">{})</span>


<span class="k">class</span> <span class="nc">Core</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">levels</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">Level</span><span class="p">(</span>
                <span class="s2">&quot;TRACE&quot;</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_TRACE_NO</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_TRACE_COLOR</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_TRACE_ICON</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Level</span><span class="p">(</span>
                <span class="s2">&quot;DEBUG&quot;</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_DEBUG_NO</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_DEBUG_COLOR</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_DEBUG_ICON</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Level</span><span class="p">(</span>
                <span class="s2">&quot;INFO&quot;</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_INFO_NO</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_INFO_COLOR</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_INFO_ICON</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Level</span><span class="p">(</span>
                <span class="s2">&quot;SUCCESS&quot;</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_SUCCESS_NO</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_SUCCESS_COLOR</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_SUCCESS_ICON</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Level</span><span class="p">(</span>
                <span class="s2">&quot;WARNING&quot;</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_WARNING_NO</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_WARNING_COLOR</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_WARNING_ICON</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Level</span><span class="p">(</span>
                <span class="s2">&quot;ERROR&quot;</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_ERROR_NO</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_ERROR_COLOR</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_ERROR_ICON</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Level</span><span class="p">(</span>
                <span class="s2">&quot;CRITICAL&quot;</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_CRITICAL_NO</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_CRITICAL_COLOR</span><span class="p">,</span>
                <span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_CRITICAL_ICON</span><span class="p">,</span>
            <span class="p">),</span>
        <span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">levels</span> <span class="o">=</span> <span class="p">{</span><span class="n">level</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="n">level</span> <span class="k">for</span> <span class="n">level</span> <span class="ow">in</span> <span class="n">levels</span><span class="p">}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">levels_ansi_codes</span> <span class="o">=</span> <span class="p">{</span>
            <span class="o">**</span><span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="n">Colorizer</span><span class="o">.</span><span class="n">ansify</span><span class="p">(</span><span class="n">level</span><span class="o">.</span><span class="n">color</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">level</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">levels</span><span class="o">.</span><span class="n">items</span><span class="p">()},</span>
            <span class="kc">None</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="c1"># Cache used internally to quickly access level attributes based on their name or severity.</span>
        <span class="c1"># It can also contain integers as keys, it serves to avoid calling &quot;isinstance()&quot; repeatedly</span>
        <span class="c1"># when &quot;logger.log()&quot; is used.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">levels_lookup</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">name</span><span class="p">:</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">level</span><span class="o">.</span><span class="n">no</span><span class="p">,</span> <span class="n">level</span><span class="o">.</span><span class="n">icon</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">level</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">levels</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">handlers_count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">handlers</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">extra</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">patcher</span> <span class="o">=</span> <span class="kc">None</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">min_level</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">activation_list</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">activation_none</span> <span class="o">=</span> <span class="kc">True</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">thread_locals</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">local</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">lock</span> <span class="o">=</span> <span class="n">create_logger_lock</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">__getstate__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="vm">__dict__</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">state</span><span class="p">[</span><span class="s2">&quot;thread_locals&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="n">state</span><span class="p">[</span><span class="s2">&quot;lock&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">__setstate__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="vm">__dict__</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">thread_locals</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">local</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">lock</span> <span class="o">=</span> <span class="n">create_logger_lock</span><span class="p">()</span>


<div class="viewcode-block" id="Logger">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger">[docs]</a>
<span class="k">class</span> <span class="nc">Logger</span><span class="p">:</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;An object to dispatch logging messages to configured handlers.</span>

<span class="sd">    The |Logger| is the core object of ``loguru``, every logging configuration and usage pass</span>
<span class="sd">    through a call to one of its methods. There is only one logger, so there is no need to retrieve</span>
<span class="sd">    one before usage.</span>

<span class="sd">    Once the ``logger`` is imported, it can be used to write messages about events happening in your</span>
<span class="sd">    code. By reading the output logs of your application, you gain a better understanding of the</span>
<span class="sd">    flow of your program and you more easily track and debug unexpected behaviors.</span>

<span class="sd">    Handlers to which the logger sends log messages are added using the |add| method. Note that you</span>
<span class="sd">    can use the |Logger| right after import as it comes pre-configured (logs are emitted to</span>
<span class="sd">    |sys.stderr| by default). Messages can be logged with different severity levels and they can be</span>
<span class="sd">    formatted using curly braces (it uses |str.format| under the hood).</span>

<span class="sd">    When a message is logged, a &quot;record&quot; is associated with it. This record is a dict which contains</span>
<span class="sd">    information about the logging context: time, function, file, line, thread, level... It also</span>
<span class="sd">    contains the ``__name__`` of the module, this is why you don&#39;t need named loggers.</span>

<span class="sd">    You should not instantiate a |Logger| by yourself, use ``from loguru import logger`` instead.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">core</span><span class="p">,</span> <span class="n">exception</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">record</span><span class="p">,</span> <span class="n">lazy</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">raw</span><span class="p">,</span> <span class="n">capture</span><span class="p">,</span> <span class="n">patchers</span><span class="p">,</span> <span class="n">extra</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_core</span> <span class="o">=</span> <span class="n">core</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_options</span> <span class="o">=</span> <span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">record</span><span class="p">,</span> <span class="n">lazy</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">raw</span><span class="p">,</span> <span class="n">capture</span><span class="p">,</span> <span class="n">patchers</span><span class="p">,</span> <span class="n">extra</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;&lt;loguru.logger handlers=</span><span class="si">%r</span><span class="s2">&gt;&quot;</span> <span class="o">%</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>

<div class="viewcode-block" id="Logger.add">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.add">[docs]</a>
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span>
        <span class="n">sink</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">level</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_LEVEL</span><span class="p">,</span>
        <span class="nb">format</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_FORMAT</span><span class="p">,</span>
        <span class="nb">filter</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_FILTER</span><span class="p">,</span>
        <span class="n">colorize</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_COLORIZE</span><span class="p">,</span>
        <span class="n">serialize</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_SERIALIZE</span><span class="p">,</span>
        <span class="n">backtrace</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_BACKTRACE</span><span class="p">,</span>
        <span class="n">diagnose</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_DIAGNOSE</span><span class="p">,</span>
        <span class="n">enqueue</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_ENQUEUE</span><span class="p">,</span>
        <span class="n">context</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_CONTEXT</span><span class="p">,</span>
        <span class="n">catch</span><span class="o">=</span><span class="n">_defaults</span><span class="o">.</span><span class="n">LOGURU_CATCH</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span>
    <span class="p">):</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Add a handler sending log messages to a sink adequately configured.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        sink : |file-like object|_, |str|, |Path|, |callable|_, |coroutine function|_ or |Handler|</span>
<span class="sd">            An object in charge of receiving formatted logging messages and propagating them to an</span>
<span class="sd">            appropriate endpoint.</span>
<span class="sd">        level : |int| or |str|, optional</span>
<span class="sd">            The minimum severity level from which logged messages should be sent to the sink.</span>
<span class="sd">        format : |str| or |callable|_, optional</span>
<span class="sd">            The template used to format logged messages before being sent to the sink.</span>
<span class="sd">        filter : |callable|_, |str| or |dict|, optional</span>
<span class="sd">            A directive optionally used to decide for each logged message whether it should be sent</span>
<span class="sd">            to the sink or not.</span>
<span class="sd">        colorize : |bool|, optional</span>
<span class="sd">            Whether the color markups contained in the formatted message should be converted to ansi</span>
<span class="sd">            codes for terminal coloration, or stripped otherwise. If ``None``, the choice is</span>
<span class="sd">            automatically made based on the sink being a tty or not.</span>
<span class="sd">        serialize : |bool|, optional</span>
<span class="sd">            Whether the logged message and its records should be first converted to a JSON string</span>
<span class="sd">            before being sent to the sink.</span>
<span class="sd">        backtrace : |bool|, optional</span>
<span class="sd">            Whether the exception trace formatted should be extended upward, beyond the catching</span>
<span class="sd">            point, to show the full stacktrace which generated the error.</span>
<span class="sd">        diagnose : |bool|, optional</span>
<span class="sd">            Whether the exception trace should display the variables values to eases the debugging.</span>
<span class="sd">            This should be set to ``False`` in production to avoid leaking sensitive data.</span>
<span class="sd">        enqueue : |bool|, optional</span>
<span class="sd">            Whether the messages to be logged should first pass through a multiprocessing-safe queue</span>
<span class="sd">            before reaching the sink. This is useful while logging to a file through multiple</span>
<span class="sd">            processes. This also has the advantage of making logging calls non-blocking.</span>
<span class="sd">        context : |multiprocessing.Context| or |str|, optional</span>
<span class="sd">            A context object or name that will be used for all tasks involving internally the</span>
<span class="sd">            |multiprocessing| module, in particular when ``enqueue=True``. If ``None``, the default</span>
<span class="sd">            context is used.</span>
<span class="sd">        catch : |bool|, optional</span>
<span class="sd">            Whether errors occurring while sink handles logs messages should be automatically</span>
<span class="sd">            caught. If ``True``, an exception message is displayed on |sys.stderr| but the exception</span>
<span class="sd">            is not propagated to the caller, preventing your app to crash.</span>
<span class="sd">        **kwargs</span>
<span class="sd">            Additional parameters that are only valid to configure a coroutine or file sink (see</span>
<span class="sd">            below).</span>


<span class="sd">        If and only if the sink is a coroutine function, the following parameter applies:</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        loop : |AbstractEventLoop|, optional</span>
<span class="sd">            The event loop in which the asynchronous logging task will be scheduled and executed. If</span>
<span class="sd">            ``None``, the loop used is the one returned by |asyncio.get_running_loop| at the time of</span>
<span class="sd">            the logging call (task is discarded if there is no loop currently running).</span>


<span class="sd">        If and only if the sink is a file path, the following parameters apply:</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        rotation : |str|, |int|, |time|, |timedelta| or |callable|_, optional</span>
<span class="sd">            A condition indicating whenever the current logged file should be closed and a new one</span>
<span class="sd">            started.</span>
<span class="sd">        retention : |str|, |int|, |timedelta| or |callable|_, optional</span>
<span class="sd">            A directive filtering old files that should be removed during rotation or end of</span>
<span class="sd">            program.</span>
<span class="sd">        compression : |str| or |callable|_, optional</span>
<span class="sd">            A compression or archive format to which log files should be converted at closure.</span>
<span class="sd">        delay : |bool|, optional</span>
<span class="sd">            Whether the file should be created as soon as the sink is configured, or delayed until</span>
<span class="sd">            first logged message. It defaults to ``False``.</span>
<span class="sd">        watch : |bool|, optional</span>
<span class="sd">            Whether or not the file should be watched and re-opened when deleted or changed (based</span>
<span class="sd">            on its device and inode properties) by an external program. It defaults to ``False``.</span>
<span class="sd">        mode : |str|, optional</span>
<span class="sd">            The opening mode as for built-in |open| function. It defaults to ``&quot;a&quot;`` (open the</span>
<span class="sd">            file in appending mode).</span>
<span class="sd">        buffering : |int|, optional</span>
<span class="sd">            The buffering policy as for built-in |open| function. It defaults to ``1`` (line</span>
<span class="sd">            buffered file).</span>
<span class="sd">        encoding : |str|, optional</span>
<span class="sd">            The file encoding as for built-in |open| function. It defaults to ``&quot;utf8&quot;``.</span>
<span class="sd">        **kwargs</span>
<span class="sd">            Others parameters are passed to the built-in |open| function.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :class:`int`</span>
<span class="sd">            An identifier associated with the added sink and which should be used to</span>
<span class="sd">            |remove| it.</span>

<span class="sd">        Raises</span>
<span class="sd">        ------</span>
<span class="sd">        ValueError</span>
<span class="sd">            If any of the arguments passed to configure the sink is invalid.</span>

<span class="sd">        Notes</span>
<span class="sd">        -----</span>
<span class="sd">        Extended summary follows.</span>

<span class="sd">        .. _sink:</span>

<span class="sd">        .. rubric:: The sink parameter</span>

<span class="sd">        The ``sink`` handles incoming log messages and proceed to their writing somewhere and</span>
<span class="sd">        somehow. A sink can take many forms:</span>

<span class="sd">        - A |file-like object|_ like ``sys.stderr`` or ``open(&quot;file.log&quot;, &quot;w&quot;)``. Anything with</span>
<span class="sd">          a ``.write()`` method is considered as a file-like object. Custom handlers may also</span>
<span class="sd">          implement ``flush()`` (called after each logged message), ``stop()`` (called at sink</span>
<span class="sd">          termination) and ``complete()`` (awaited by the eponymous method).</span>
<span class="sd">        - A file path as |str| or |Path|. It can be parametrized with some additional parameters,</span>
<span class="sd">          see below.</span>
<span class="sd">        - A |callable|_ (such as a simple function) like ``lambda msg: print(msg)``. This</span>
<span class="sd">          allows for logging procedure entirely defined by user preferences and needs.</span>
<span class="sd">        - A asynchronous |coroutine function|_ defined with the ``async def`` statement. The</span>
<span class="sd">          coroutine object returned by such function will be added to the event loop using</span>
<span class="sd">          |loop.create_task|. The tasks should be awaited before ending the loop by using</span>
<span class="sd">          |complete|.</span>
<span class="sd">        - A built-in |Handler| like ``logging.StreamHandler``. In such a case, the `Loguru` records</span>
<span class="sd">          are automatically converted to the structure expected by the |logging| module.</span>

<span class="sd">        Note that the logging functions are not `reentrant`_. This means you should avoid using</span>
<span class="sd">        the ``logger`` inside any of your sinks or from within |signal| handlers. Otherwise, you</span>
<span class="sd">        may face deadlock if the module&#39;s sink was not explicitly disabled.</span>

<span class="sd">        .. _message:</span>

<span class="sd">        .. rubric:: The logged message</span>

<span class="sd">        The logged message passed to all added sinks is nothing more than a string of the</span>
<span class="sd">        formatted log, to which a special attribute is associated: the ``.record`` which is a dict</span>
<span class="sd">        containing all contextual information possibly needed (see below).</span>

<span class="sd">        Logged messages are formatted according to the ``format`` of the added sink. This format</span>
<span class="sd">        is usually a string containing braces fields to display attributes from the record dict.</span>

<span class="sd">        If fine-grained control is needed, the ``format`` can also be a function which takes the</span>
<span class="sd">        record as parameter and return the format template string. However, note that in such a</span>
<span class="sd">        case, you should take care of appending the line ending and exception field to the returned</span>
<span class="sd">        format, while ``&quot;\n{exception}&quot;`` is automatically appended for convenience if ``format`` is</span>
<span class="sd">        a string.</span>

<span class="sd">        The ``filter`` attribute can be used to control which messages are effectively passed to the</span>
<span class="sd">        sink and which one are ignored. A function can be used, accepting the record as an</span>
<span class="sd">        argument, and returning ``True`` if the message should be logged, ``False`` otherwise. If</span>
<span class="sd">        a string is used, only the records with the same ``name`` and its children will be allowed.</span>
<span class="sd">        One can also pass a ``dict`` mapping module names to minimum required level. In such case,</span>
<span class="sd">        each log record will search for it&#39;s closest parent in the ``dict`` and use the associated</span>
<span class="sd">        level as the filter. The ``dict`` values can be ``int`` severity, ``str`` level name or</span>
<span class="sd">        ``True`` and ``False`` to respectively authorize and discard all module logs</span>
<span class="sd">        unconditionally. In order to set a default level, the ``&quot;&quot;`` module name should be used as</span>
<span class="sd">        it is the parent of all modules (it does not suppress global ``level`` threshold, though).</span>

<span class="sd">        Note that while calling a logging method, the keyword arguments (if any) are automatically</span>
<span class="sd">        added to the ``extra`` dict for convenient contextualization (in addition to being used for</span>
<span class="sd">        formatting).</span>

<span class="sd">        .. _levels:</span>

<span class="sd">        .. rubric:: The severity levels</span>

<span class="sd">        Each logged message is associated with a severity level. These levels make it possible to</span>
<span class="sd">        prioritize messages and to choose the verbosity of the logs according to usages. For</span>
<span class="sd">        example, it allows to display some debugging information to a developer, while hiding it to</span>
<span class="sd">        the end user running the application.</span>

<span class="sd">        The ``level`` attribute of every added sink controls the minimum threshold from which log</span>
<span class="sd">        messages are allowed to be emitted. While using the ``logger``, you are in charge of</span>
<span class="sd">        configuring the appropriate granularity of your logs. It is possible to add even more custom</span>
<span class="sd">        levels by using the |level| method.</span>

<span class="sd">        Here are the standard levels with their default severity value, each one is associated with</span>
<span class="sd">        a logging method of the same name:</span>

<span class="sd">        +----------------------+------------------------+------------------------+</span>
<span class="sd">        | Level name           | Severity value         | Logger method          |</span>
<span class="sd">        +======================+========================+========================+</span>
<span class="sd">        | ``TRACE``            | 5                      | |logger.trace|         |</span>
<span class="sd">        +----------------------+------------------------+------------------------+</span>
<span class="sd">        | ``DEBUG``            | 10                     | |logger.debug|         |</span>
<span class="sd">        +----------------------+------------------------+------------------------+</span>
<span class="sd">        | ``INFO``             | 20                     | |logger.info|          |</span>
<span class="sd">        +----------------------+------------------------+------------------------+</span>
<span class="sd">        | ``SUCCESS``          | 25                     | |logger.success|       |</span>
<span class="sd">        +----------------------+------------------------+------------------------+</span>
<span class="sd">        | ``WARNING``          | 30                     | |logger.warning|       |</span>
<span class="sd">        +----------------------+------------------------+------------------------+</span>
<span class="sd">        | ``ERROR``            | 40                     | |logger.error|         |</span>
<span class="sd">        +----------------------+------------------------+------------------------+</span>
<span class="sd">        | ``CRITICAL``         | 50                     | |logger.critical|      |</span>
<span class="sd">        +----------------------+------------------------+------------------------+</span>

<span class="sd">        .. _record:</span>

<span class="sd">        .. rubric:: The record dict</span>

<span class="sd">        The record is just a Python dict, accessible from sinks by ``message.record``. It contains</span>
<span class="sd">        all contextual information of the logging call (time, function, file, line, level, etc.).</span>

<span class="sd">        Each of the record keys can be used in the handler&#39;s ``format`` so the corresponding value</span>
<span class="sd">        is properly displayed in the logged message (e.g. ``&quot;{level}&quot;`` will return ``&quot;INFO&quot;``).</span>
<span class="sd">        Some records&#39; values are objects with two or more attributes. These can be formatted with</span>
<span class="sd">        ``&quot;{key.attr}&quot;`` (``&quot;{key}&quot;`` would display one by default).</span>

<span class="sd">        Note that you can use any `formatting directives`_ available in Python&#39;s ``str.format()``</span>
<span class="sd">        method (e.g. ``&quot;{key: &gt;3}&quot;`` will right-align and pad to a width of 3 characters). This is</span>
<span class="sd">        particularly useful for time formatting (see below).</span>

<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | Key        | Description                     | Attributes                 |</span>
<span class="sd">        +============+=================================+============================+</span>
<span class="sd">        | elapsed    | The time elapsed since the      | See |timedelta|            |</span>
<span class="sd">        |            | start of the program            |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | exception  | The formatted exception if any, | ``type``, ``value``,       |</span>
<span class="sd">        |            | ``None`` otherwise              | ``traceback``              |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | extra      | The dict of attributes          | None                       |</span>
<span class="sd">        |            | bound by the user (see |bind|)  |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | file       | The file where the logging call | ``name`` (default),        |</span>
<span class="sd">        |            | was made                        | ``path``                   |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | function   | The function from which the     | None                       |</span>
<span class="sd">        |            | logging call was made           |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | level      | The severity used to log the    | ``name`` (default),        |</span>
<span class="sd">        |            | message                         | ``no``, ``icon``           |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | line       | The line number in the source   | None                       |</span>
<span class="sd">        |            | code                            |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | message    | The logged message (not yet     | None                       |</span>
<span class="sd">        |            | formatted)                      |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | module     | The module where the logging    | None                       |</span>
<span class="sd">        |            | call was made                   |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | name       | The ``__name__`` where the      | None                       |</span>
<span class="sd">        |            | logging call was made           |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | process    | The process in which the        | ``name``, ``id`` (default) |</span>
<span class="sd">        |            | logging call was made           |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | thread     | The thread in which the         | ``name``, ``id`` (default) |</span>
<span class="sd">        |            | logging call was made           |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>
<span class="sd">        | time       | The aware local time when the   | See |datetime|             |</span>
<span class="sd">        |            | logging call was made           |                            |</span>
<span class="sd">        +------------+---------------------------------+----------------------------+</span>

<span class="sd">        .. _time:</span>

<span class="sd">        .. rubric:: The time formatting</span>

<span class="sd">        To use your favorite time representation, you can set it directly in the time formatter</span>
<span class="sd">        specifier of your handler format, like for example ``format=&quot;{time:HH:mm:ss} {message}&quot;``.</span>
<span class="sd">        Note that this datetime represents your local time, and it is also made timezone-aware,</span>
<span class="sd">        so you can display the UTC offset to avoid ambiguities.</span>

<span class="sd">        The time field can be formatted using more human-friendly tokens. These constitute a subset</span>
<span class="sd">        of the one used by the `Pendulum`_ library of `@sdispater`_. To escape a token, just add</span>
<span class="sd">        square brackets around it, for example ``&quot;[YY]&quot;`` would display literally ``&quot;YY&quot;``.</span>

<span class="sd">        If you prefer to display UTC rather than local time, you can add ``&quot;!UTC&quot;`` at the very end</span>
<span class="sd">        of the time format, like ``{time:HH:mm:ss!UTC}``. Doing so will convert the ``datetime``</span>
<span class="sd">        to UTC before formatting.</span>

<span class="sd">        If no time formatter specifier is used, like for example if ``format=&quot;{time} {message}&quot;``,</span>
<span class="sd">        the default one will use ISO 8601.</span>

<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        |                        | Token   | Output                                 |</span>
<span class="sd">        +========================+=========+========================================+</span>
<span class="sd">        | Year                   | YYYY    | 2000, 2001, 2002 ... 2012, 2013        |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | YY      | 00, 01, 02 ... 12, 13                  |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Quarter                | Q       | 1 2 3 4                                |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Month                  | MMMM    | January, February, March ...           |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | MMM     | Jan, Feb, Mar ...                      |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | MM      | 01, 02, 03 ... 11, 12                  |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | M       | 1, 2, 3 ... 11, 12                     |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Day of Year            | DDDD    | 001, 002, 003 ... 364, 365             |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | DDD     | 1, 2, 3 ... 364, 365                   |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Day of Month           | DD      | 01, 02, 03 ... 30, 31                  |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | D       | 1, 2, 3 ... 30, 31                     |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Day of Week            | dddd    | Monday, Tuesday, Wednesday ...         |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | ddd     | Mon, Tue, Wed ...                      |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | d       | 0, 1, 2 ... 6                          |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Days of ISO Week       | E       | 1, 2, 3 ... 7                          |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Hour                   | HH      | 00, 01, 02 ... 23, 24                  |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | H       | 0, 1, 2 ... 23, 24                     |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | hh      | 01, 02, 03 ... 11, 12                  |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | h       | 1, 2, 3 ... 11, 12                     |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Minute                 | mm      | 00, 01, 02 ... 58, 59                  |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | m       | 0, 1, 2 ... 58, 59                     |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Second                 | ss      | 00, 01, 02 ... 58, 59                  |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | s       | 0, 1, 2 ... 58, 59                     |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Fractional Second      | S       | 0 1 ... 8 9                            |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | SS      | 00, 01, 02 ... 98, 99                  |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | SSS     | 000 001 ... 998 999                    |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | SSSS... | 000[0..] 001[0..] ... 998[0..] 999[0..]|</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | SSSSSS  | 000000 000001 ... 999998 999999        |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | AM / PM                | A       | AM, PM                                 |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Timezone               | Z       | -07:00, -06:00 ... +06:00, +07:00      |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | ZZ      | -0700, -0600 ... +0600, +0700          |</span>
<span class="sd">        |                        +---------+----------------------------------------+</span>
<span class="sd">        |                        | zz      | EST CST ... MST PST                    |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Seconds timestamp      | X       | 1381685817, 1234567890.123             |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>
<span class="sd">        | Microseconds timestamp | x       | 1234567890123                          |</span>
<span class="sd">        +------------------------+---------+----------------------------------------+</span>

<span class="sd">        .. _file:</span>

<span class="sd">        .. rubric:: The file sinks</span>

<span class="sd">        If the sink is a |str| or a |Path|, the corresponding file will be opened for writing logs.</span>
<span class="sd">        The path can also contain a special ``&quot;{time}&quot;`` field that will be formatted with the</span>
<span class="sd">        current date at file creation. The file is closed at sink stop, i.e. when the application</span>
<span class="sd">        ends or the handler is removed.</span>

<span class="sd">        The ``rotation`` check is made before logging each message. If there is already an existing</span>
<span class="sd">        file with the same name that the file to be created, then the existing file is renamed by</span>
<span class="sd">        appending the date to its basename to prevent file overwriting. This parameter accepts:</span>

<span class="sd">        - an |int| which corresponds to the maximum file size in bytes before that the current</span>
<span class="sd">          logged file is closed and a new one started over.</span>
<span class="sd">        - a |timedelta| which indicates the frequency of each new rotation.</span>
<span class="sd">        - a |time| which specifies the hour when the daily rotation should occur.</span>
<span class="sd">        - a |str| for human-friendly parametrization of one of the previously enumerated types.</span>
<span class="sd">          Examples: ``&quot;100 MB&quot;``, ``&quot;0.5 GB&quot;``, ``&quot;1 month 2 weeks&quot;``, ``&quot;4 days&quot;``, ``&quot;10h&quot;``,</span>
<span class="sd">          ``&quot;monthly&quot;``, ``&quot;18:00&quot;``, ``&quot;sunday&quot;``, ``&quot;w0&quot;``, ``&quot;monday at 12:00&quot;``, ...</span>
<span class="sd">        - a |callable|_ which will be invoked before logging. It should accept two arguments: the</span>
<span class="sd">          logged message and the file object, and it should return ``True`` if the rotation should</span>
<span class="sd">          happen now, ``False`` otherwise.</span>

<span class="sd">        The ``retention`` occurs at rotation or at sink stop if rotation is ``None``. Files</span>
<span class="sd">        resulting from previous sessions or rotations are automatically collected from disk. A file</span>
<span class="sd">        is selected if it matches the pattern ``&quot;basename(.*).ext(.*)&quot;`` (possible time fields are</span>
<span class="sd">        beforehand replaced with ``.*``) based on the configured sink. Afterwards, the list is</span>
<span class="sd">        processed to determine files to be retained. This parameter accepts:</span>

<span class="sd">        - an |int| which indicates the number of log files to keep, while older files are deleted.</span>
<span class="sd">        - a |timedelta| which specifies the maximum age of files to keep.</span>
<span class="sd">        - a |str| for human-friendly parametrization of the maximum age of files to keep.</span>
<span class="sd">          Examples: ``&quot;1 week, 3 days&quot;``, ``&quot;2 months&quot;``, ...</span>
<span class="sd">        - a |callable|_ which will be invoked before the retention process. It should accept the</span>
<span class="sd">          list of log files as argument and process to whatever it wants (moving files, removing</span>
<span class="sd">          them, etc.).</span>

<span class="sd">        The ``compression`` happens at rotation or at sink stop if rotation is ``None``. This</span>
<span class="sd">        parameter accepts:</span>

<span class="sd">        - a |str| which corresponds to the compressed or archived file extension. This can be one</span>
<span class="sd">          of: ``&quot;gz&quot;``, ``&quot;bz2&quot;``, ``&quot;xz&quot;``, ``&quot;lzma&quot;``, ``&quot;tar&quot;``, ``&quot;tar.gz&quot;``, ``&quot;tar.bz2&quot;``,</span>
<span class="sd">          ``&quot;tar.xz&quot;``, ``&quot;zip&quot;``.</span>
<span class="sd">        - a |callable|_ which will be invoked before file termination. It should accept the path of</span>
<span class="sd">          the log file as argument and process to whatever it wants (custom compression, network</span>
<span class="sd">          sending, removing it, etc.).</span>

<span class="sd">        Either way, if you use a custom function designed according to your preferences, you must be</span>
<span class="sd">        very careful not to use the ``logger`` within your function. Otherwise, there is a risk that</span>
<span class="sd">        your program hang because of a deadlock.</span>

<span class="sd">        .. _color:</span>

<span class="sd">        .. rubric:: The color markups</span>

<span class="sd">        To add colors to your logs, you just have to enclose your format string with the appropriate</span>
<span class="sd">        tags (e.g. ``&lt;red&gt;some message&lt;/red&gt;``). These tags are automatically removed if the sink</span>
<span class="sd">        doesn&#39;t support ansi codes. For convenience, you can use ``&lt;/&gt;`` to close the last opening</span>
<span class="sd">        tag without repeating its name (e.g. ``&lt;red&gt;another message&lt;/&gt;``).</span>

<span class="sd">        The special tag ``&lt;level&gt;`` (abbreviated with ``&lt;lvl&gt;``) is transformed according to</span>
<span class="sd">        the configured color of the logged message level.</span>

<span class="sd">        Tags which are not recognized will raise an exception during parsing, to inform you about</span>
<span class="sd">        possible misuse. If you wish to display a markup tag literally, you can escape it by</span>
<span class="sd">        prepending a ``\`` like for example ``\&lt;blue&gt;``. To prevent the escaping to occur, you can</span>
<span class="sd">        simply double the ``\`` (e.g. ``\\&lt;blue&gt;`` will print a literal ``\`` before colored text).</span>
<span class="sd">        If, for some reason, you need to escape a string programmatically, note that the regex used</span>
<span class="sd">        internally to parse markup tags is ``r&quot;(\\*)(&lt;/?(?:[fb]g\s)?[^&lt;&gt;\s]*&gt;)&quot;``.</span>

<span class="sd">        Note that when logging a message with ``opt(colors=True)``, color tags present in the</span>
<span class="sd">        formatting arguments (``args`` and ``kwargs``) are completely ignored. This is important if</span>
<span class="sd">        you need to log strings containing markups that might interfere with the color tags (in this</span>
<span class="sd">        case, do not use f-string).</span>

<span class="sd">        Here are the available tags (note that compatibility may vary depending on terminal):</span>

<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | Color (abbr)                       | Styles (abbr)                        |</span>
<span class="sd">        +====================================+======================================+</span>
<span class="sd">        | Black (k)                          | Bold (b)                             |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | Blue (e)                           | Dim (d)                              |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | Cyan (c)                           | Normal (n)                           |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | Green (g)                          | Italic (i)                           |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | Magenta (m)                        | Underline (u)                        |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | Red (r)                            | Strike (s)                           |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | White (w)                          | Reverse (v)                          |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        | Yellow (y)                         | Blink (l)                            |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>
<span class="sd">        |                                    | Hide (h)                             |</span>
<span class="sd">        +------------------------------------+--------------------------------------+</span>

<span class="sd">        Usage:</span>

<span class="sd">        +-----------------+-------------------------------------------------------------------+</span>
<span class="sd">        | Description     | Examples                                                          |</span>
<span class="sd">        |                 +---------------------------------+---------------------------------+</span>
<span class="sd">        |                 | Foreground                      | Background                      |</span>
<span class="sd">        +=================+=================================+=================================+</span>
<span class="sd">        | Basic colors    | ``&lt;red&gt;``, ``&lt;r&gt;``              | ``&lt;GREEN&gt;``, ``&lt;G&gt;``            |</span>
<span class="sd">        +-----------------+---------------------------------+---------------------------------+</span>
<span class="sd">        | Light colors    | ``&lt;light-blue&gt;``, ``&lt;le&gt;``      | ``&lt;LIGHT-CYAN&gt;``, ``&lt;LC&gt;``      |</span>
<span class="sd">        +-----------------+---------------------------------+---------------------------------+</span>
<span class="sd">        | 8-bit colors    | ``&lt;fg 86&gt;``, ``&lt;fg 255&gt;``       | ``&lt;bg 42&gt;``, ``&lt;bg 9&gt;``         |</span>
<span class="sd">        +-----------------+---------------------------------+---------------------------------+</span>
<span class="sd">        | Hex colors      | ``&lt;fg #00005f&gt;``, ``&lt;fg #EE1&gt;`` | ``&lt;bg #AF5FD7&gt;``, ``&lt;bg #fff&gt;`` |</span>
<span class="sd">        +-----------------+---------------------------------+---------------------------------+</span>
<span class="sd">        | RGB colors      | ``&lt;fg 0,95,0&gt;``                 | ``&lt;bg 72,119,65&gt;``              |</span>
<span class="sd">        +-----------------+---------------------------------+---------------------------------+</span>
<span class="sd">        | Stylizing       | ``&lt;bold&gt;``, ``&lt;b&gt;``,  ``&lt;underline&gt;``, ``&lt;u&gt;``                    |</span>
<span class="sd">        +-----------------+-------------------------------------------------------------------+</span>

<span class="sd">        .. _env:</span>

<span class="sd">        .. rubric:: The environment variables</span>

<span class="sd">        The default values of sink parameters can be entirely customized. This is particularly</span>
<span class="sd">        useful if you don&#39;t like the log format of the pre-configured sink.</span>

<span class="sd">        Each of the |add| default parameter can be modified by setting the ``LOGURU_[PARAM]``</span>
<span class="sd">        environment variable. For example on Linux: ``export LOGURU_FORMAT=&quot;{time} - {message}&quot;``</span>
<span class="sd">        or ``export LOGURU_DIAGNOSE=NO``.</span>

<span class="sd">        The default levels&#39; attributes can also be modified by setting the ``LOGURU_[LEVEL]_[ATTR]``</span>
<span class="sd">        environment variable. For example, on Windows: ``setx LOGURU_DEBUG_COLOR &quot;&lt;blue&gt;&quot;``</span>
<span class="sd">        or ``setx LOGURU_TRACE_ICON &quot;🚀&quot;``. If you use the ``set`` command, do not include quotes</span>
<span class="sd">        but escape special symbol as needed, e.g. ``set LOGURU_DEBUG_COLOR=^&lt;blue^&gt;``.</span>

<span class="sd">        If you want to disable the pre-configured sink, you can set the ``LOGURU_AUTOINIT``</span>
<span class="sd">        variable to ``False``.</span>

<span class="sd">        On Linux, you will probably need to edit the ``~/.profile`` file to make this persistent. On</span>
<span class="sd">        Windows, don&#39;t forget to restart your terminal for the change to be taken into account.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sys.stdout, format=&quot;{time} - {level} - {message}&quot;, filter=&quot;sub.module&quot;)</span>

<span class="sd">        &gt;&gt;&gt; logger.add(&quot;file_{time}.log&quot;, level=&quot;TRACE&quot;, rotation=&quot;100 MB&quot;)</span>

<span class="sd">        &gt;&gt;&gt; def debug_only(record):</span>
<span class="sd">        ...     return record[&quot;level&quot;].name == &quot;DEBUG&quot;</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; logger.add(&quot;debug.log&quot;, filter=debug_only)  # Other levels are filtered out</span>

<span class="sd">        &gt;&gt;&gt; def my_sink(message):</span>
<span class="sd">        ...     record = message.record</span>
<span class="sd">        ...     update_db(message, time=record[&quot;time&quot;], level=record[&quot;level&quot;])</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; logger.add(my_sink)</span>

<span class="sd">        &gt;&gt;&gt; level_per_module = {</span>
<span class="sd">        ...     &quot;&quot;: &quot;DEBUG&quot;,</span>
<span class="sd">        ...     &quot;third.lib&quot;: &quot;WARNING&quot;,</span>
<span class="sd">        ...     &quot;anotherlib&quot;: False</span>
<span class="sd">        ... }</span>
<span class="sd">        &gt;&gt;&gt; logger.add(lambda m: print(m, end=&quot;&quot;), filter=level_per_module, level=0)</span>

<span class="sd">        &gt;&gt;&gt; async def publish(message):</span>
<span class="sd">        ...     await api.post(message)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; logger.add(publish, serialize=True)</span>

<span class="sd">        &gt;&gt;&gt; from logging import StreamHandler</span>
<span class="sd">        &gt;&gt;&gt; logger.add(StreamHandler(sys.stderr), format=&quot;{message}&quot;)</span>

<span class="sd">        &gt;&gt;&gt; class RandomStream:</span>
<span class="sd">        ...     def __init__(self, seed, threshold):</span>
<span class="sd">        ...         self.threshold = threshold</span>
<span class="sd">        ...         random.seed(seed)</span>
<span class="sd">        ...     def write(self, message):</span>
<span class="sd">        ...         if random.random() &gt; self.threshold:</span>
<span class="sd">        ...             print(message)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; stream_object = RandomStream(seed=12345, threshold=0.25)</span>
<span class="sd">        &gt;&gt;&gt; logger.add(stream_object, level=&quot;INFO&quot;)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="n">handler_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers_count</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers_count</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">error_interceptor</span> <span class="o">=</span> <span class="n">ErrorInterceptor</span><span class="p">(</span><span class="n">catch</span><span class="p">,</span> <span class="n">handler_id</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">colorize</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">serialize</span><span class="p">:</span>
            <span class="n">colorize</span> <span class="o">=</span> <span class="kc">False</span>

        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">PathLike</span><span class="p">)):</span>
            <span class="n">path</span> <span class="o">=</span> <span class="n">sink</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;&#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="n">path</span>

            <span class="k">if</span> <span class="n">colorize</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">colorize</span> <span class="o">=</span> <span class="kc">False</span>

            <span class="n">wrapped_sink</span> <span class="o">=</span> <span class="n">FileSink</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
            <span class="n">kwargs</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">encoding</span> <span class="o">=</span> <span class="n">wrapped_sink</span><span class="o">.</span><span class="n">encoding</span>
            <span class="n">terminator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
            <span class="n">exception_prefix</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="s2">&quot;write&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">callable</span><span class="p">(</span><span class="n">sink</span><span class="o">.</span><span class="n">write</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">repr</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">colorize</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">colorize</span> <span class="o">=</span> <span class="n">_colorama</span><span class="o">.</span><span class="n">should_colorize</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">colorize</span> <span class="ow">is</span> <span class="kc">True</span> <span class="ow">and</span> <span class="n">_colorama</span><span class="o">.</span><span class="n">should_wrap</span><span class="p">(</span><span class="n">sink</span><span class="p">):</span>
                <span class="n">stream</span> <span class="o">=</span> <span class="n">_colorama</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">stream</span> <span class="o">=</span> <span class="n">sink</span>

            <span class="n">wrapped_sink</span> <span class="o">=</span> <span class="n">StreamSink</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
            <span class="n">encoding</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="s2">&quot;encoding&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
            <span class="n">terminator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
            <span class="n">exception_prefix</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="n">logging</span><span class="o">.</span><span class="n">Handler</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nb">repr</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">colorize</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">colorize</span> <span class="o">=</span> <span class="kc">False</span>

            <span class="n">wrapped_sink</span> <span class="o">=</span> <span class="n">StandardSink</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>
            <span class="n">encoding</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="s2">&quot;encoding&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
            <span class="n">terminator</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
            <span class="n">exception_prefix</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
        <span class="k">elif</span> <span class="n">iscoroutinefunction</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span> <span class="ow">or</span> <span class="n">iscoroutinefunction</span><span class="p">(</span>
            <span class="nb">getattr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="s2">&quot;__call__&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>  <span class="c1"># noqa: B004</span>
        <span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="s2">&quot;__name__&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">repr</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">colorize</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">colorize</span> <span class="o">=</span> <span class="kc">False</span>

            <span class="n">loop</span> <span class="o">=</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">&quot;loop&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>

            <span class="c1"># The worker thread needs an event loop, it can&#39;t create a new one internally because it</span>
            <span class="c1"># has to be accessible by the user while calling &quot;complete()&quot;, instead we use the global</span>
            <span class="c1"># one when the sink is added. If &quot;enqueue=False&quot; the event loop is dynamically retrieved</span>
            <span class="c1"># at each logging call, which is much more convenient. However, coroutine can&#39;t access</span>
            <span class="c1"># running loop in Python 3.5.2 and earlier versions, see python/asyncio#452.</span>
            <span class="k">if</span> <span class="n">enqueue</span> <span class="ow">and</span> <span class="n">loop</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">loop</span> <span class="o">=</span> <span class="n">_asyncio_loop</span><span class="o">.</span><span class="n">get_running_loop</span><span class="p">()</span>
                <span class="k">except</span> <span class="ne">RuntimeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                        <span class="s2">&quot;An event loop is required to add a coroutine sink with `enqueue=True`, &quot;</span>
                        <span class="s2">&quot;but none has been passed as argument and none is currently running.&quot;</span>
                    <span class="p">)</span> <span class="kn">from</span> <span class="nn">e</span>

            <span class="n">coro</span> <span class="o">=</span> <span class="n">sink</span> <span class="k">if</span> <span class="n">iscoroutinefunction</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span> <span class="k">else</span> <span class="n">sink</span><span class="o">.</span><span class="fm">__call__</span>
            <span class="n">wrapped_sink</span> <span class="o">=</span> <span class="n">AsyncSink</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="n">error_interceptor</span><span class="p">)</span>
            <span class="n">encoding</span> <span class="o">=</span> <span class="s2">&quot;utf8&quot;</span>
            <span class="n">terminator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
            <span class="n">exception_prefix</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="k">elif</span> <span class="nb">callable</span><span class="p">(</span><span class="n">sink</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="s2">&quot;__name__&quot;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">repr</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">colorize</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">colorize</span> <span class="o">=</span> <span class="kc">False</span>

            <span class="n">wrapped_sink</span> <span class="o">=</span> <span class="n">CallableSink</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>
            <span class="n">encoding</span> <span class="o">=</span> <span class="s2">&quot;utf8&quot;</span>
            <span class="n">terminator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
            <span class="n">exception_prefix</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">&quot;Cannot log to objects of type &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">kwargs</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">&quot;add() got an unexpected keyword argument &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">next</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)))</span>

        <span class="k">if</span> <span class="nb">filter</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">filter_func</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="k">elif</span> <span class="nb">filter</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span><span class="p">:</span>
            <span class="n">filter_func</span> <span class="o">=</span> <span class="n">_filters</span><span class="o">.</span><span class="n">filter_none</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="nb">filter</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">parent</span> <span class="o">=</span> <span class="nb">filter</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span>
            <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
            <span class="n">filter_func</span> <span class="o">=</span> <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="n">_filters</span><span class="o">.</span><span class="n">filter_by_name</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="n">parent</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">length</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="nb">filter</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">level_per_module</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">for</span> <span class="n">module</span><span class="p">,</span> <span class="n">level_</span> <span class="ow">in</span> <span class="nb">filter</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
                <span class="k">if</span> <span class="n">module</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                        <span class="s2">&quot;The filter dict contains an invalid module, &quot;</span>
                        <span class="s2">&quot;it should be a string (or None), not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">module</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
                    <span class="p">)</span>
                <span class="k">if</span> <span class="n">level_</span> <span class="ow">is</span> <span class="kc">False</span><span class="p">:</span>
                    <span class="n">levelno_</span> <span class="o">=</span> <span class="kc">False</span>
                <span class="k">elif</span> <span class="n">level_</span> <span class="ow">is</span> <span class="kc">True</span><span class="p">:</span>
                    <span class="n">levelno_</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">level_</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">levelno_</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">level</span><span class="p">(</span><span class="n">level_</span><span class="p">)</span><span class="o">.</span><span class="n">no</span>
                    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
                        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                            <span class="s2">&quot;The filter dict contains a module &#39;</span><span class="si">%s</span><span class="s2">&#39; associated to a level name &quot;</span>
                            <span class="s2">&quot;which does not exist: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">level_</span><span class="p">)</span>
                        <span class="p">)</span> <span class="kn">from</span> <span class="kc">None</span>
                <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">level_</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
                    <span class="n">levelno_</span> <span class="o">=</span> <span class="n">level_</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                        <span class="s2">&quot;The filter dict contains a module &#39;</span><span class="si">%s</span><span class="s2">&#39; associated to an invalid level, &quot;</span>
                        <span class="s2">&quot;it should be an integer, a string or a boolean, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span>
                        <span class="o">%</span> <span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">level_</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>
                    <span class="p">)</span>
                <span class="k">if</span> <span class="n">levelno_</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                        <span class="s2">&quot;The filter dict contains a module &#39;</span><span class="si">%s</span><span class="s2">&#39; associated to an invalid level, &quot;</span>
                        <span class="s2">&quot;it should be a positive integer, not: &#39;</span><span class="si">%d</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">levelno_</span><span class="p">)</span>
                    <span class="p">)</span>
                <span class="n">level_per_module</span><span class="p">[</span><span class="n">module</span><span class="p">]</span> <span class="o">=</span> <span class="n">levelno_</span>
            <span class="n">filter_func</span> <span class="o">=</span> <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span>
                <span class="n">_filters</span><span class="o">.</span><span class="n">filter_by_level</span><span class="p">,</span> <span class="n">level_per_module</span><span class="o">=</span><span class="n">level_per_module</span>
            <span class="p">)</span>
        <span class="k">elif</span> <span class="nb">callable</span><span class="p">(</span><span class="nb">filter</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">filter</span> <span class="o">==</span> <span class="n">builtins</span><span class="o">.</span><span class="n">filter</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                    <span class="s2">&quot;The built-in &#39;filter()&#39; function cannot be used as a &#39;filter&#39; parameter, &quot;</span>
                    <span class="s2">&quot;this is most likely a mistake (please double-check the arguments passed &quot;</span>
                    <span class="s2">&quot;to &#39;logger.add()&#39;).&quot;</span>
                <span class="p">)</span>
            <span class="n">filter_func</span> <span class="o">=</span> <span class="nb">filter</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid filter, it should be a function, a string or a dict, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span>
                <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="nb">filter</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">levelno</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">level</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="o">.</span><span class="n">no</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
            <span class="n">levelno</span> <span class="o">=</span> <span class="n">level</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid level, it should be an integer or a string, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span>
                <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">if</span> <span class="n">levelno</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid level value, it should be a positive integer, not: </span><span class="si">%d</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="n">levelno</span>
            <span class="p">)</span>

        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="nb">format</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">formatter</span> <span class="o">=</span> <span class="n">Colorizer</span><span class="o">.</span><span class="n">prepare_format</span><span class="p">(</span><span class="nb">format</span> <span class="o">+</span> <span class="n">terminator</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="si">{exception}</span><span class="s2">&quot;</span><span class="p">)</span>
            <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                    <span class="s2">&quot;Invalid format, color markups could not be parsed correctly&quot;</span>
                <span class="p">)</span> <span class="kn">from</span> <span class="nn">e</span>
            <span class="n">is_formatter_dynamic</span> <span class="o">=</span> <span class="kc">False</span>
        <span class="k">elif</span> <span class="nb">callable</span><span class="p">(</span><span class="nb">format</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">format</span> <span class="o">==</span> <span class="n">builtins</span><span class="o">.</span><span class="n">format</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                    <span class="s2">&quot;The built-in &#39;format()&#39; function cannot be used as a &#39;format&#39; parameter, &quot;</span>
                    <span class="s2">&quot;this is most likely a mistake (please double-check the arguments passed &quot;</span>
                    <span class="s2">&quot;to &#39;logger.add()&#39;).&quot;</span>
                <span class="p">)</span>
            <span class="n">formatter</span> <span class="o">=</span> <span class="nb">format</span>
            <span class="n">is_formatter_dynamic</span> <span class="o">=</span> <span class="kc">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid format, it should be a string or a function, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span>
                <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="nb">format</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">encoding</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">encoding</span> <span class="o">=</span> <span class="s2">&quot;ascii&quot;</span>

        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">context</span> <span class="o">=</span> <span class="n">get_context</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">context</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">BaseContext</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid context, it should be a string or a multiprocessing context, &quot;</span>
                <span class="s2">&quot;not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">context</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="n">exception_formatter</span> <span class="o">=</span> <span class="n">ExceptionFormatter</span><span class="p">(</span>
                <span class="n">colorize</span><span class="o">=</span><span class="n">colorize</span><span class="p">,</span>
                <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span>
                <span class="n">diagnose</span><span class="o">=</span><span class="n">diagnose</span><span class="p">,</span>
                <span class="n">backtrace</span><span class="o">=</span><span class="n">backtrace</span><span class="p">,</span>
                <span class="n">hidden_frames_filename</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">catch</span><span class="o">.</span><span class="vm">__code__</span><span class="o">.</span><span class="n">co_filename</span><span class="p">,</span>
                <span class="n">prefix</span><span class="o">=</span><span class="n">exception_prefix</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="n">handler</span> <span class="o">=</span> <span class="n">Handler</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
                <span class="n">sink</span><span class="o">=</span><span class="n">wrapped_sink</span><span class="p">,</span>
                <span class="n">levelno</span><span class="o">=</span><span class="n">levelno</span><span class="p">,</span>
                <span class="n">formatter</span><span class="o">=</span><span class="n">formatter</span><span class="p">,</span>
                <span class="n">is_formatter_dynamic</span><span class="o">=</span><span class="n">is_formatter_dynamic</span><span class="p">,</span>
                <span class="n">filter_</span><span class="o">=</span><span class="n">filter_func</span><span class="p">,</span>
                <span class="n">colorize</span><span class="o">=</span><span class="n">colorize</span><span class="p">,</span>
                <span class="n">serialize</span><span class="o">=</span><span class="n">serialize</span><span class="p">,</span>
                <span class="n">enqueue</span><span class="o">=</span><span class="n">enqueue</span><span class="p">,</span>
                <span class="n">multiprocessing_context</span><span class="o">=</span><span class="n">context</span><span class="p">,</span>
                <span class="n">id_</span><span class="o">=</span><span class="n">handler_id</span><span class="p">,</span>
                <span class="n">error_interceptor</span><span class="o">=</span><span class="n">error_interceptor</span><span class="p">,</span>
                <span class="n">exception_formatter</span><span class="o">=</span><span class="n">exception_formatter</span><span class="p">,</span>
                <span class="n">levels_ansi_codes</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">levels_ansi_codes</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="n">handlers</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
            <span class="n">handlers</span><span class="p">[</span><span class="n">handler_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">handler</span>

            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">min_level</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">min_level</span><span class="p">,</span> <span class="n">levelno</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span> <span class="o">=</span> <span class="n">handlers</span>

        <span class="k">return</span> <span class="n">handler_id</span></div>


<div class="viewcode-block" id="Logger.remove">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.remove">[docs]</a>
    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">handler_id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Remove a previously added handler and stop sending logs to its sink.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        handler_id : |int| or ``None``</span>
<span class="sd">            The id of the sink to remove, as it was returned by the |add| method. If ``None``, all</span>
<span class="sd">            handlers are removed. The pre-configured handler is guaranteed to have the index ``0``.</span>

<span class="sd">        Raises</span>
<span class="sd">        ------</span>
<span class="sd">        ValueError</span>
<span class="sd">            If ``handler_id`` is not ``None`` but there is no active handler with such id.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; i = logger.add(sys.stderr, format=&quot;{message}&quot;)</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;Logging&quot;)</span>
<span class="sd">        Logging</span>
<span class="sd">        &gt;&gt;&gt; logger.remove(i)</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;No longer logging&quot;)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">handler_id</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">handler_id</span><span class="p">,</span> <span class="nb">int</span><span class="p">)):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid handler id, it should be an integer as returned &quot;</span>
                <span class="s2">&quot;by the &#39;add()&#39; method (or None), not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">handler_id</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">handler_id</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">handler_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;There is no existing handler with id </span><span class="si">%d</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="n">handler_id</span><span class="p">)</span> <span class="kn">from</span> <span class="kc">None</span>

            <span class="k">if</span> <span class="n">handler_id</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">handler_ids</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">handler_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">handler_id</span><span class="p">]</span>

            <span class="k">for</span> <span class="n">handler_id</span> <span class="ow">in</span> <span class="n">handler_ids</span><span class="p">:</span>
                <span class="n">handlers</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
                <span class="n">handler</span> <span class="o">=</span> <span class="n">handlers</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">handler_id</span><span class="p">)</span>

                <span class="c1"># This needs to be done first in case &quot;stop()&quot; raises an exception</span>
                <span class="n">levelnos</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">.</span><span class="n">levelno</span> <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="n">handlers</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">min_level</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">levelnos</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">float</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">))</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span> <span class="o">=</span> <span class="n">handlers</span>

                <span class="n">handler</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span></div>


<div class="viewcode-block" id="Logger.complete">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.complete">[docs]</a>
    <span class="k">def</span> <span class="nf">complete</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Wait for the end of enqueued messages and asynchronous tasks scheduled by handlers.</span>

<span class="sd">        This method proceeds in two steps: first it waits for all logging messages added to handlers</span>
<span class="sd">        with ``enqueue=True`` to be processed, then it returns an object that can be awaited to</span>
<span class="sd">        finalize all logging tasks added to the event loop by coroutine sinks.</span>

<span class="sd">        It can be called from non-asynchronous code. This is especially recommended when the</span>
<span class="sd">        ``logger`` is utilized with ``multiprocessing`` to ensure messages put to the internal</span>
<span class="sd">        queue have been properly transmitted before leaving a child process.</span>

<span class="sd">        The returned object should be awaited before the end of a coroutine executed by</span>
<span class="sd">        |asyncio.run| or |loop.run_until_complete| to ensure all asynchronous logging messages are</span>
<span class="sd">        processed. The function |asyncio.get_running_loop| is called beforehand, only tasks</span>
<span class="sd">        scheduled in the same loop that the current one will be awaited by the method.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :term:`awaitable`</span>
<span class="sd">            An awaitable object which ensures all asynchronous logging calls are completed when</span>
<span class="sd">            awaited.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; async def sink(message):</span>
<span class="sd">        ...     await asyncio.sleep(0.1)  # IO processing...</span>
<span class="sd">        ...     print(message, end=&quot;&quot;)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; async def work():</span>
<span class="sd">        ...     logger.info(&quot;Start&quot;)</span>
<span class="sd">        ...     logger.info(&quot;End&quot;)</span>
<span class="sd">        ...     await logger.complete()</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sink)</span>
<span class="sd">        1</span>
<span class="sd">        &gt;&gt;&gt; asyncio.run(work())</span>
<span class="sd">        Start</span>
<span class="sd">        End</span>

<span class="sd">        &gt;&gt;&gt; def process():</span>
<span class="sd">        ...     logger.info(&quot;Message sent from the child&quot;)</span>
<span class="sd">        ...     logger.complete()</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sys.stderr, enqueue=True)</span>
<span class="sd">        1</span>
<span class="sd">        &gt;&gt;&gt; process = multiprocessing.Process(target=process)</span>
<span class="sd">        &gt;&gt;&gt; process.start()</span>
<span class="sd">        &gt;&gt;&gt; process.join()</span>
<span class="sd">        Message sent from the child</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">tasks</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="n">handlers</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">handler</span> <span class="ow">in</span> <span class="n">handlers</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
                <span class="n">handler</span><span class="o">.</span><span class="n">complete_queue</span><span class="p">()</span>
                <span class="n">tasks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">handler</span><span class="o">.</span><span class="n">tasks_to_complete</span><span class="p">())</span>

        <span class="k">class</span> <span class="nc">AwaitableCompleter</span><span class="p">:</span>
            <span class="k">def</span> <span class="fm">__await__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">task</span> <span class="ow">in</span> <span class="n">tasks</span><span class="p">:</span>
                    <span class="k">yield from</span> <span class="n">task</span><span class="o">.</span><span class="fm">__await__</span><span class="p">()</span>

        <span class="k">return</span> <span class="n">AwaitableCompleter</span><span class="p">()</span></div>


<div class="viewcode-block" id="Logger.catch">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.catch">[docs]</a>
    <span class="k">def</span> <span class="nf">catch</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span>
        <span class="n">exception</span><span class="o">=</span><span class="ne">Exception</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">level</span><span class="o">=</span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span>
        <span class="n">reraise</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
        <span class="n">onerror</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
        <span class="n">exclude</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
        <span class="n">default</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
        <span class="n">message</span><span class="o">=</span><span class="s2">&quot;An error has been caught in function &#39;</span><span class="si">{record[function]}</span><span class="s2">&#39;, &quot;</span>
        <span class="s2">&quot;process &#39;</span><span class="si">{record[process].name}</span><span class="s2">&#39; (</span><span class="si">{record[process].id}</span><span class="s2">), &quot;</span>
        <span class="s2">&quot;thread &#39;</span><span class="si">{record[thread].name}</span><span class="s2">&#39; (</span><span class="si">{record[thread].id}</span><span class="s2">):&quot;</span>
    <span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Return a decorator to automatically log possibly caught error in wrapped function.</span>

<span class="sd">        This is useful to ensure unexpected exceptions are logged, the entire program can be</span>
<span class="sd">        wrapped by this method. This is also very useful to decorate |Thread.run| methods while</span>
<span class="sd">        using threads to propagate errors to the main logger thread.</span>

<span class="sd">        Note that the visibility of variables values (which uses the great |better_exceptions|_</span>
<span class="sd">        library from `@Qix-`_) depends on the ``diagnose`` option of each configured sink.</span>

<span class="sd">        The returned object can also be used as a context manager.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        exception : |Exception|, optional</span>
<span class="sd">            The type of exception to intercept. If several types should be caught, a tuple of</span>
<span class="sd">            exceptions can be used too.</span>
<span class="sd">        level : |str| or |int|, optional</span>
<span class="sd">            The level name or severity with which the message should be logged.</span>
<span class="sd">        reraise : |bool|, optional</span>
<span class="sd">            Whether the exception should be raised again and hence propagated to the caller.</span>
<span class="sd">        onerror : |callable|_, optional</span>
<span class="sd">            A function that will be called if an error occurs, once the message has been logged.</span>
<span class="sd">            It should accept the exception instance as it sole argument.</span>
<span class="sd">        exclude : |Exception|, optional</span>
<span class="sd">            A type of exception (or a tuple of types) that will be purposely ignored and hence</span>
<span class="sd">            propagated to the caller without being logged.</span>
<span class="sd">        default : |Any|, optional</span>
<span class="sd">            The value to be returned by the decorated function if an error occurred without being</span>
<span class="sd">            re-raised.</span>
<span class="sd">        message : |str|, optional</span>
<span class="sd">            The message that will be automatically logged if an exception occurs. Note that it will</span>
<span class="sd">            be formatted with the ``record`` attribute.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :term:`decorator` / :term:`context manager`</span>
<span class="sd">            An object that can be used to decorate a function or as a context manager to log</span>
<span class="sd">            exceptions possibly caught.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; @logger.catch</span>
<span class="sd">        ... def f(x):</span>
<span class="sd">        ...     100 / x</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; def g():</span>
<span class="sd">        ...     f(10)</span>
<span class="sd">        ...     f(0)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; g()</span>
<span class="sd">        ERROR - An error has been caught in function &#39;g&#39;, process &#39;Main&#39; (367), thread &#39;ch1&#39; (1398):</span>
<span class="sd">        Traceback (most recent call last):</span>
<span class="sd">          File &quot;program.py&quot;, line 12, in &lt;module&gt;</span>
<span class="sd">            g()</span>
<span class="sd">            └ &lt;function g at 0x7f225fe2bc80&gt;</span>
<span class="sd">        &gt; File &quot;program.py&quot;, line 10, in g</span>
<span class="sd">            f(0)</span>
<span class="sd">            └ &lt;function f at 0x7f225fe2b9d8&gt;</span>
<span class="sd">          File &quot;program.py&quot;, line 6, in f</span>
<span class="sd">            100 / x</span>
<span class="sd">                  └ 0</span>
<span class="sd">        ZeroDivisionError: division by zero</span>

<span class="sd">        &gt;&gt;&gt; with logger.catch(message=&quot;Because we never know...&quot;):</span>
<span class="sd">        ...    main()  # No exception, no logs</span>

<span class="sd">        &gt;&gt;&gt; # Use &#39;onerror&#39; to prevent the program exit code to be 0 (if &#39;reraise=False&#39;) while</span>
<span class="sd">        &gt;&gt;&gt; # also avoiding the stacktrace to be duplicated on stderr (if &#39;reraise=True&#39;).</span>
<span class="sd">        &gt;&gt;&gt; @logger.catch(onerror=lambda _: sys.exit(1))</span>
<span class="sd">        ... def main():</span>
<span class="sd">        ...     1 / 0</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="nb">callable</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span>
            <span class="ow">not</span> <span class="n">isclass</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="ne">BaseException</span><span class="p">)</span>
        <span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">catch</span><span class="p">()(</span><span class="n">exception</span><span class="p">)</span>

        <span class="n">logger</span> <span class="o">=</span> <span class="bp">self</span>

        <span class="k">class</span> <span class="nc">Catcher</span><span class="p">:</span>
            <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_decorator</span><span class="p">):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_from_decorator</span> <span class="o">=</span> <span class="n">from_decorator</span>

            <span class="k">def</span> <span class="fm">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
                <span class="k">return</span> <span class="kc">None</span>

            <span class="k">def</span> <span class="fm">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">type_</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback_</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">type_</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                    <span class="k">return</span> <span class="kc">None</span>

                <span class="c1"># We must prevent infinite recursion in case &quot;logger.catch()&quot; handles an exception</span>
                <span class="c1"># that occurs while logging another exception. This can happen for example when</span>
                <span class="c1"># the exception formatter calls &quot;repr(obj)&quot; while the &quot;__repr__&quot; method is broken</span>
                <span class="c1"># but decorated with &quot;logger.catch()&quot;. In such a case, we ignore the catching</span>
                <span class="c1"># mechanism and just let the exception be thrown (that way, the formatter will</span>
                <span class="c1"># rightly assume the object is unprintable).</span>
                <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">logger</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">thread_locals</span><span class="p">,</span> <span class="s2">&quot;already_logging_exception&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">):</span>
                    <span class="k">return</span> <span class="kc">False</span>

                <span class="k">if</span> <span class="ow">not</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">type_</span><span class="p">,</span> <span class="n">exception</span><span class="p">):</span>
                    <span class="k">return</span> <span class="kc">False</span>

                <span class="k">if</span> <span class="n">exclude</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">type_</span><span class="p">,</span> <span class="n">exclude</span><span class="p">):</span>
                    <span class="k">return</span> <span class="kc">False</span>

                <span class="n">from_decorator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_from_decorator</span>
                <span class="n">_</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="n">logger</span><span class="o">.</span><span class="n">_options</span>

                <span class="k">if</span> <span class="n">from_decorator</span><span class="p">:</span>
                    <span class="n">depth</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="n">catch_options</span> <span class="o">=</span> <span class="p">[(</span><span class="n">type_</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback_</span><span class="p">),</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">]</span>

                <span class="n">logger</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">thread_locals</span><span class="o">.</span><span class="n">already_logging_exception</span> <span class="o">=</span> <span class="kc">True</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">logger</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="n">from_decorator</span><span class="p">,</span> <span class="n">catch_options</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">(),</span> <span class="p">{})</span>
                <span class="k">finally</span><span class="p">:</span>
                    <span class="n">logger</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">thread_locals</span><span class="o">.</span><span class="n">already_logging_exception</span> <span class="o">=</span> <span class="kc">False</span>

                <span class="k">if</span> <span class="n">onerror</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
                    <span class="n">onerror</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>

                <span class="k">return</span> <span class="ow">not</span> <span class="n">reraise</span>

            <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">function</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">isclass</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
                    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                        <span class="s2">&quot;Invalid object decorated with &#39;catch()&#39;, it must be a function, &quot;</span>
                        <span class="s2">&quot;not a class (tried to wrap &#39;</span><span class="si">%s</span><span class="s2">&#39;)&quot;</span> <span class="o">%</span> <span class="n">function</span><span class="o">.</span><span class="vm">__name__</span>
                    <span class="p">)</span>

                <span class="n">catcher</span> <span class="o">=</span> <span class="n">Catcher</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">iscoroutinefunction</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>

                    <span class="k">async</span> <span class="k">def</span> <span class="nf">catch_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
                        <span class="k">with</span> <span class="n">catcher</span><span class="p">:</span>
                            <span class="k">return</span> <span class="k">await</span> <span class="n">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                        <span class="k">return</span> <span class="n">default</span>

                <span class="k">elif</span> <span class="n">isgeneratorfunction</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>

                    <span class="k">def</span> <span class="nf">catch_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
                        <span class="k">with</span> <span class="n">catcher</span><span class="p">:</span>
                            <span class="k">return</span> <span class="p">(</span><span class="k">yield from</span> <span class="n">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
                        <span class="k">return</span> <span class="n">default</span>

                <span class="k">else</span><span class="p">:</span>

                    <span class="k">def</span> <span class="nf">catch_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
                        <span class="k">with</span> <span class="n">catcher</span><span class="p">:</span>
                            <span class="k">return</span> <span class="n">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                        <span class="k">return</span> <span class="n">default</span>

                <span class="n">functools</span><span class="o">.</span><span class="n">update_wrapper</span><span class="p">(</span><span class="n">catch_wrapper</span><span class="p">,</span> <span class="n">function</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">catch_wrapper</span>

        <span class="k">return</span> <span class="n">Catcher</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.opt">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.opt">[docs]</a>
    <span class="k">def</span> <span class="nf">opt</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">exception</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
        <span class="n">record</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
        <span class="n">lazy</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
        <span class="n">colors</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
        <span class="n">raw</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
        <span class="n">capture</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
        <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="n">ansi</span><span class="o">=</span><span class="kc">False</span>
    <span class="p">):</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Parametrize a logging call to slightly change generated log message.</span>

<span class="sd">        Note that it&#39;s not possible to chain |opt| calls, the last one takes precedence over the</span>
<span class="sd">        others as it will &quot;reset&quot; the options to their default values.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        exception : |bool|, |tuple| or |Exception|, optional</span>
<span class="sd">            If it does not evaluate as ``False``, the passed exception is formatted and added to the</span>
<span class="sd">            log message. It could be an |Exception| object or a ``(type, value, traceback)`` tuple,</span>
<span class="sd">            otherwise the exception information is retrieved from |sys.exc_info|.</span>
<span class="sd">        record : |bool|, optional</span>
<span class="sd">            If ``True``, the record dict contextualizing the logging call can be used to format the</span>
<span class="sd">            message by using ``{record[key]}`` in the log message.</span>
<span class="sd">        lazy : |bool|, optional</span>
<span class="sd">            If ``True``, the logging call attribute to format the message should be functions which</span>
<span class="sd">            will be called only if the level is high enough. This can be used to avoid expensive</span>
<span class="sd">            functions if not necessary.</span>
<span class="sd">        colors : |bool|, optional</span>
<span class="sd">            If ``True``, logged message will be colorized according to the markups it possibly</span>
<span class="sd">            contains.</span>
<span class="sd">        raw : |bool|, optional</span>
<span class="sd">            If ``True``, the formatting of each sink will be bypassed and the message will be sent</span>
<span class="sd">            as is.</span>
<span class="sd">        capture : |bool|, optional</span>
<span class="sd">            If ``False``, the ``**kwargs`` of logged message will not automatically populate</span>
<span class="sd">            the ``extra`` dict (although they are still used for formatting).</span>
<span class="sd">        depth : |int|, optional</span>
<span class="sd">            Specify which stacktrace should be used to contextualize the logged message. This is</span>
<span class="sd">            useful while using the logger from inside a wrapped function to retrieve worthwhile</span>
<span class="sd">            information.</span>
<span class="sd">        ansi : |bool|, optional</span>
<span class="sd">            Deprecated since version 0.4.1: the ``ansi`` parameter will be removed in Loguru 1.0.0,</span>
<span class="sd">            it is replaced by ``colors`` which is a more appropriate name.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :class:`~Logger`</span>
<span class="sd">            A logger wrapping the core logger, but transforming logged message adequately before</span>
<span class="sd">            sending.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; try:</span>
<span class="sd">        ...     1 / 0</span>
<span class="sd">        ... except ZeroDivisionError:</span>
<span class="sd">        ...    logger.opt(exception=True).debug(&quot;Exception logged with debug level:&quot;)</span>
<span class="sd">        ...</span>
<span class="sd">        [18:10:02] DEBUG in &#39;&lt;module&gt;&#39; - Exception logged with debug level:</span>
<span class="sd">        Traceback (most recent call last, catch point marked):</span>
<span class="sd">        &gt; File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span>
<span class="sd">        ZeroDivisionError: division by zero</span>

<span class="sd">        &gt;&gt;&gt; logger.opt(record=True).info(&quot;Current line is: {record[line]}&quot;)</span>
<span class="sd">        [18:10:33] INFO in &#39;&lt;module&gt;&#39; - Current line is: 1</span>

<span class="sd">        &gt;&gt;&gt; logger.opt(lazy=True).debug(&quot;If sink &lt;= DEBUG: {x}&quot;, x=lambda: math.factorial(2**5))</span>
<span class="sd">        [18:11:19] DEBUG in &#39;&lt;module&gt;&#39; - If sink &lt;= DEBUG: 263130836933693530167218012160000000</span>

<span class="sd">        &gt;&gt;&gt; logger.opt(colors=True).warning(&quot;We got a &lt;red&gt;BIG&lt;/red&gt; problem&quot;)</span>
<span class="sd">        [18:11:30] WARNING in &#39;&lt;module&gt;&#39; - We got a BIG problem</span>

<span class="sd">        &gt;&gt;&gt; logger.opt(raw=True).debug(&quot;No formatting\n&quot;)</span>
<span class="sd">        No formatting</span>

<span class="sd">        &gt;&gt;&gt; logger.opt(capture=False).info(&quot;Displayed but not captured: {value}&quot;, value=123)</span>
<span class="sd">        [18:11:41] Displayed but not captured: 123</span>

<span class="sd">        &gt;&gt;&gt; def wrapped():</span>
<span class="sd">        ...     logger.opt(depth=1).info(&quot;Get parent context&quot;)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; def func():</span>
<span class="sd">        ...     wrapped()</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; func()</span>
<span class="sd">        [18:11:54] DEBUG in &#39;func&#39; - Get parent context</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">ansi</span><span class="p">:</span>
            <span class="n">colors</span> <span class="o">=</span> <span class="kc">True</span>
            <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span>
                <span class="s2">&quot;The &#39;ansi&#39; parameter is deprecated, please use &#39;colors&#39; instead&quot;</span><span class="p">,</span>
                <span class="ne">DeprecationWarning</span><span class="p">,</span>
                <span class="n">stacklevel</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
            <span class="p">)</span>

        <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_options</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:]</span>
        <span class="k">return</span> <span class="n">Logger</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="p">,</span> <span class="n">exception</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">record</span><span class="p">,</span> <span class="n">lazy</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">raw</span><span class="p">,</span> <span class="n">capture</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.bind">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.bind">[docs]</a>
    <span class="k">def</span> <span class="nf">bind</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Bind attributes to the ``extra`` dict of each logged message record.</span>

<span class="sd">        This is used to add custom context to each logging call.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        **kwargs</span>
<span class="sd">            Mapping between keys and values that will be added to the ``extra`` dict.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :class:`~Logger`</span>
<span class="sd">            A logger wrapping the core logger, but which sends record with the customized ``extra``</span>
<span class="sd">            dict.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sys.stderr, format=&quot;{extra[ip]} - {message}&quot;)</span>
<span class="sd">        &gt;&gt;&gt; class Server:</span>
<span class="sd">        ...     def __init__(self, ip):</span>
<span class="sd">        ...         self.ip = ip</span>
<span class="sd">        ...         self.logger = logger.bind(ip=ip)</span>
<span class="sd">        ...     def call(self, message):</span>
<span class="sd">        ...         self.logger.info(message)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; instance_1 = Server(&quot;192.168.0.200&quot;)</span>
<span class="sd">        &gt;&gt;&gt; instance_2 = Server(&quot;127.0.0.1&quot;)</span>
<span class="sd">        &gt;&gt;&gt; instance_1.call(&quot;First instance&quot;)</span>
<span class="sd">        192.168.0.200 - First instance</span>
<span class="sd">        &gt;&gt;&gt; instance_2.call(&quot;Second instance&quot;)</span>
<span class="sd">        127.0.0.1 - Second instance</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="o">*</span><span class="n">options</span><span class="p">,</span> <span class="n">extra</span> <span class="o">=</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span>
        <span class="k">return</span> <span class="n">Logger</span><span class="p">(</span><span class="n">__self</span><span class="o">.</span><span class="n">_core</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">,</span> <span class="p">{</span><span class="o">**</span><span class="n">extra</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">})</span></div>


<div class="viewcode-block" id="Logger.contextualize">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.contextualize">[docs]</a>
    <span class="nd">@contextlib</span><span class="o">.</span><span class="n">contextmanager</span>
    <span class="k">def</span> <span class="nf">contextualize</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Bind attributes to the context-local ``extra`` dict while inside the ``with`` block.</span>

<span class="sd">        Contrary to |bind| there is no ``logger`` returned, the ``extra`` dict is modified in-place</span>
<span class="sd">        and updated globally. Most importantly, it uses |contextvars| which means that</span>
<span class="sd">        contextualized values are unique to each threads and asynchronous tasks.</span>

<span class="sd">        The ``extra`` dict will retrieve its initial state once the context manager is exited.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        **kwargs</span>
<span class="sd">            Mapping between keys and values that will be added to the context-local ``extra`` dict.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :term:`context manager` / :term:`decorator`</span>
<span class="sd">            A context manager (usable as a decorator too) that will bind the attributes once entered</span>
<span class="sd">            and restore the initial state of the ``extra`` dict while exited.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sys.stderr, format=&quot;{message} | {extra}&quot;)</span>
<span class="sd">        1</span>
<span class="sd">        &gt;&gt;&gt; def task():</span>
<span class="sd">        ...     logger.info(&quot;Processing!&quot;)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; with logger.contextualize(task_id=123):</span>
<span class="sd">        ...     task()</span>
<span class="sd">        ...</span>
<span class="sd">        Processing! | {&#39;task_id&#39;: 123}</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;Done.&quot;)</span>
<span class="sd">        Done. | {}</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">with</span> <span class="n">__self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="n">new_context</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">context</span><span class="o">.</span><span class="n">get</span><span class="p">(),</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">}</span>
            <span class="n">token</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">new_context</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">yield</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">__self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
                <span class="n">context</span><span class="o">.</span><span class="n">reset</span><span class="p">(</span><span class="n">token</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.patch">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.patch">[docs]</a>
    <span class="k">def</span> <span class="nf">patch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">patcher</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Attach a function to modify the record dict created by each logging call.</span>

<span class="sd">        The ``patcher`` may be used to update the record on-the-fly before it&#39;s propagated to the</span>
<span class="sd">        handlers. This allows the &quot;extra&quot; dict to be populated with dynamic values and also permits</span>
<span class="sd">        advanced modifications of the record emitted while logging a message. The function is called</span>
<span class="sd">        once before sending the log message to the different handlers.</span>

<span class="sd">        It is recommended to apply modification on the ``record[&quot;extra&quot;]`` dict rather than on the</span>
<span class="sd">        ``record`` dict itself, as some values are used internally by `Loguru`, and modify them may</span>
<span class="sd">        produce unexpected results.</span>

<span class="sd">        The logger can be patched multiple times. In this case, the functions are called in the</span>
<span class="sd">        same order as they are added.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        patcher: |callable|_</span>
<span class="sd">            The function to which the record dict will be passed as the sole argument. This function</span>
<span class="sd">            is in charge of updating the record in-place, the function does not need to return any</span>
<span class="sd">            value, the modified record object will be re-used.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :class:`~Logger`</span>
<span class="sd">            A logger wrapping the core logger, but which records are passed through the ``patcher``</span>
<span class="sd">            function before being sent to the added handlers.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sys.stderr, format=&quot;{extra[utc]} {message}&quot;)</span>
<span class="sd">        &gt;&gt;&gt; logger = logger.patch(lambda record: record[&quot;extra&quot;].update(utc=datetime.utcnow())</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;That&#39;s way, you can log messages with time displayed in UTC&quot;)</span>

<span class="sd">        &gt;&gt;&gt; def wrapper(func):</span>
<span class="sd">        ...     @functools.wraps(func)</span>
<span class="sd">        ...     def wrapped(*args, **kwargs):</span>
<span class="sd">        ...         logger.patch(lambda r: r.update(function=func.__name__)).info(&quot;Wrapped!&quot;)</span>
<span class="sd">        ...         return func(*args, **kwargs)</span>
<span class="sd">        ...     return wrapped</span>

<span class="sd">        &gt;&gt;&gt; def recv_record_from_network(pipe):</span>
<span class="sd">        ...     record = pickle.loads(pipe.read())</span>
<span class="sd">        ...     level, message = record[&quot;level&quot;], record[&quot;message&quot;]</span>
<span class="sd">        ...     logger.patch(lambda r: r.update(record)).log(level, message)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="o">*</span><span class="n">options</span><span class="p">,</span> <span class="n">patchers</span><span class="p">,</span> <span class="n">extra</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_options</span>
        <span class="k">return</span> <span class="n">Logger</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">,</span> <span class="p">[</span><span class="o">*</span><span class="n">patchers</span><span class="p">,</span> <span class="n">patcher</span><span class="p">],</span> <span class="n">extra</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.level">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.level">[docs]</a>
    <span class="k">def</span> <span class="nf">level</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">no</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">icon</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Add, update or retrieve a logging level.</span>

<span class="sd">        Logging levels are defined by their ``name`` to which a severity ``no``, an ansi ``color``</span>
<span class="sd">        tag and an ``icon`` are associated and possibly modified at run-time. To |log| to a custom</span>
<span class="sd">        level, you should necessarily use its name, the severity number is not linked back to levels</span>
<span class="sd">        name (this implies that several levels can share the same severity).</span>

<span class="sd">        To add a new level, its ``name`` and its ``no`` are required. A ``color`` and an ``icon``</span>
<span class="sd">        can also be specified or will be empty by default.</span>

<span class="sd">        To update an existing level, pass its ``name`` with the parameters to be changed. It is not</span>
<span class="sd">        possible to modify the ``no`` of a level once it has been added.</span>

<span class="sd">        To retrieve level information, the ``name`` solely suffices.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        name : |str|</span>
<span class="sd">            The name of the logging level.</span>
<span class="sd">        no : |int|</span>
<span class="sd">            The severity of the level to be added or updated.</span>
<span class="sd">        color : |str|</span>
<span class="sd">            The color markup of the level to be added or updated.</span>
<span class="sd">        icon : |str|</span>
<span class="sd">            The icon of the level to be added or updated.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        ``Level``</span>
<span class="sd">            A |namedtuple| containing information about the level.</span>

<span class="sd">        Raises</span>
<span class="sd">        ------</span>
<span class="sd">        ValueError</span>
<span class="sd">            If attempting to access a level with a ``name`` that is not registered, or if trying to</span>
<span class="sd">            change the severity ``no`` of an existing level.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; level = logger.level(&quot;ERROR&quot;)</span>
<span class="sd">        &gt;&gt;&gt; print(level)</span>
<span class="sd">        Level(name=&#39;ERROR&#39;, no=40, color=&#39;&lt;red&gt;&lt;bold&gt;&#39;, icon=&#39;❌&#39;)</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sys.stderr, format=&quot;{level.no} {level.icon} {message}&quot;)</span>
<span class="sd">        1</span>
<span class="sd">        &gt;&gt;&gt; logger.level(&quot;CUSTOM&quot;, no=15, color=&quot;&lt;blue&gt;&quot;, icon=&quot;@&quot;)</span>
<span class="sd">        Level(name=&#39;CUSTOM&#39;, no=15, color=&#39;&lt;blue&gt;&#39;, icon=&#39;@&#39;)</span>
<span class="sd">        &gt;&gt;&gt; logger.log(&quot;CUSTOM&quot;, &quot;Logging...&quot;)</span>
<span class="sd">        15 @ Logging...</span>
<span class="sd">        &gt;&gt;&gt; logger.level(&quot;WARNING&quot;, icon=r&quot;/!\\&quot;)</span>
<span class="sd">        Level(name=&#39;WARNING&#39;, no=30, color=&#39;&lt;yellow&gt;&lt;bold&gt;&#39;, icon=&#39;/!\\\\&#39;)</span>
<span class="sd">        &gt;&gt;&gt; logger.warning(&quot;Updated!&quot;)</span>
<span class="sd">        30 /!\\ Updated!</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid level name, it should be a string, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">if</span> <span class="n">no</span> <span class="ow">is</span> <span class="n">color</span> <span class="ow">is</span> <span class="n">icon</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">levels</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
            <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Level &#39;</span><span class="si">%s</span><span class="s2">&#39; does not exist&quot;</span> <span class="o">%</span> <span class="n">name</span><span class="p">)</span> <span class="kn">from</span> <span class="kc">None</span>

        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">levels</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">no</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                    <span class="s2">&quot;Level &#39;</span><span class="si">%s</span><span class="s2">&#39; does not exist, you have to create it by specifying a level no&quot;</span>
                    <span class="o">%</span> <span class="n">name</span>
                <span class="p">)</span>
            <span class="n">old_color</span><span class="p">,</span> <span class="n">old_icon</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span>
        <span class="k">elif</span> <span class="n">no</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Level &#39;</span><span class="si">%s</span><span class="s2">&#39; already exists, you can&#39;t update its severity no&quot;</span> <span class="o">%</span> <span class="n">name</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">_</span><span class="p">,</span> <span class="n">no</span><span class="p">,</span> <span class="n">old_color</span><span class="p">,</span> <span class="n">old_icon</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">level</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">color</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">color</span> <span class="o">=</span> <span class="n">old_color</span>

        <span class="k">if</span> <span class="n">icon</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">icon</span> <span class="o">=</span> <span class="n">old_icon</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">no</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid level no, it should be an integer, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">no</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">if</span> <span class="n">no</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Invalid level no, it should be a positive integer, not: </span><span class="si">%d</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="n">no</span><span class="p">)</span>

        <span class="n">ansi</span> <span class="o">=</span> <span class="n">Colorizer</span><span class="o">.</span><span class="n">ansify</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
        <span class="n">level</span> <span class="o">=</span> <span class="n">Level</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">no</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">icon</span><span class="p">)</span>

        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">levels</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">level</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">levels_ansi_codes</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">ansi</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">levels_lookup</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">no</span><span class="p">,</span> <span class="n">icon</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">handler</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
                <span class="n">handler</span><span class="o">.</span><span class="n">update_format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">level</span></div>


<div class="viewcode-block" id="Logger.disable">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.disable">[docs]</a>
    <span class="k">def</span> <span class="nf">disable</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Disable logging of messages coming from ``name`` module and its children.</span>

<span class="sd">        Developers of library using `Loguru` should absolutely disable it to avoid disrupting</span>
<span class="sd">        users with unrelated logs messages.</span>

<span class="sd">        Note that in some rare circumstances, it is not possible for `Loguru` to</span>
<span class="sd">        determine the module&#39;s ``__name__`` value. In such situation, ``record[&quot;name&quot;]`` will be</span>
<span class="sd">        equal to ``None``, this is why ``None`` is also a valid argument.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        name : |str| or ``None``</span>
<span class="sd">            The name of the parent module to disable.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;Allowed message by default&quot;)</span>
<span class="sd">        [22:21:55] Allowed message by default</span>
<span class="sd">        &gt;&gt;&gt; logger.disable(&quot;my_library&quot;)</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;While publishing a library, don&#39;t forget to disable logging&quot;)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_change_activation</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="kc">False</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.enable">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.enable">[docs]</a>
    <span class="k">def</span> <span class="nf">enable</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Enable logging of messages coming from ``name`` module and its children.</span>

<span class="sd">        Logging is generally disabled by imported library using `Loguru`, hence this function</span>
<span class="sd">        allows users to receive these messages anyway.</span>

<span class="sd">        To enable all logs regardless of the module they are coming from, an empty string ``&quot;&quot;`` can</span>
<span class="sd">        be passed.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        name : |str| or ``None``</span>
<span class="sd">            The name of the parent module to re-allow.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; logger.disable(&quot;__main__&quot;)</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;Disabled, so nothing is logged.&quot;)</span>
<span class="sd">        &gt;&gt;&gt; logger.enable(&quot;__main__&quot;)</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;Re-enabled, messages are logged.&quot;)</span>
<span class="sd">        [22:46:12] Re-enabled, messages are logged.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_change_activation</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.configure">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.configure">[docs]</a>
    <span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">handlers</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">levels</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">extra</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">patcher</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Configure the core logger.</span>

<span class="sd">        It should be noted that ``extra`` values set using this function are available across all</span>
<span class="sd">        modules, so this is the best way to set overall default values.</span>

<span class="sd">        To load the configuration directly from a file, such as JSON or YAML, it is also possible to</span>
<span class="sd">        use the |loguru-config|_ library developed by `@erezinman`_.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        handlers : |list| of |dict|, optional</span>
<span class="sd">            A list of each handler to be added. The list should contain dicts of params passed to</span>
<span class="sd">            the |add| function as keyword arguments. If not ``None``, all previously added</span>
<span class="sd">            handlers are first removed.</span>
<span class="sd">        levels : |list| of |dict|, optional</span>
<span class="sd">            A list of each level to be added or updated. The list should contain dicts of params</span>
<span class="sd">            passed to the |level| function as keyword arguments. This will never remove previously</span>
<span class="sd">            created levels.</span>
<span class="sd">        extra : |dict|, optional</span>
<span class="sd">            A dict containing additional parameters bound to the core logger, useful to share</span>
<span class="sd">            common properties if you call |bind| in several of your files modules. If not ``None``,</span>
<span class="sd">            this will remove previously configured ``extra`` dict.</span>
<span class="sd">        patcher : |callable|_, optional</span>
<span class="sd">            A function that will be applied to the record dict of each logged messages across all</span>
<span class="sd">            modules using the logger. It should modify the dict in-place without returning anything.</span>
<span class="sd">            The function is executed prior to the one possibly added by the |patch| method. If not</span>
<span class="sd">            ``None``, this will replace previously configured ``patcher`` function.</span>
<span class="sd">        activation : |list| of |tuple|, optional</span>
<span class="sd">            A list of ``(name, state)`` tuples which denotes which loggers should be enabled (if</span>
<span class="sd">            ``state`` is ``True``) or disabled (if ``state`` is ``False``). The calls to |enable|</span>
<span class="sd">            and |disable| are made accordingly to the list order. This will not modify previously</span>
<span class="sd">            activated loggers, so if you need a fresh start prepend your list with ``(&quot;&quot;, False)``</span>
<span class="sd">            or ``(&quot;&quot;, True)``.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        :class:`list` of :class:`int`</span>
<span class="sd">            A list containing the identifiers of added sinks (if any).</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; logger.configure(</span>
<span class="sd">        ...     handlers=[</span>
<span class="sd">        ...         dict(sink=sys.stderr, format=&quot;[{time}] {message}&quot;),</span>
<span class="sd">        ...         dict(sink=&quot;file.log&quot;, enqueue=True, serialize=True),</span>
<span class="sd">        ...     ],</span>
<span class="sd">        ...     levels=[dict(name=&quot;NEW&quot;, no=13, icon=&quot;¤&quot;, color=&quot;&quot;)],</span>
<span class="sd">        ...     extra={&quot;common_to_all&quot;: &quot;default&quot;},</span>
<span class="sd">        ...     patcher=lambda record: record[&quot;extra&quot;].update(some_value=42),</span>
<span class="sd">        ...     activation=[(&quot;my_module.secret&quot;, False), (&quot;another_library.module&quot;, True)],</span>
<span class="sd">        ... )</span>
<span class="sd">        [1, 2]</span>

<span class="sd">        &gt;&gt;&gt; # Set a default &quot;extra&quot; dict to logger across all modules, without &quot;bind()&quot;</span>
<span class="sd">        &gt;&gt;&gt; extra = {&quot;context&quot;: &quot;foo&quot;}</span>
<span class="sd">        &gt;&gt;&gt; logger.configure(extra=extra)</span>
<span class="sd">        &gt;&gt;&gt; logger.add(sys.stderr, format=&quot;{extra[context]} - {message}&quot;)</span>
<span class="sd">        &gt;&gt;&gt; logger.info(&quot;Context without bind&quot;)</span>
<span class="sd">        &gt;&gt;&gt; # =&gt; &quot;foo - Context without bind&quot;</span>
<span class="sd">        &gt;&gt;&gt; logger.bind(context=&quot;bar&quot;).info(&quot;Suppress global context&quot;)</span>
<span class="sd">        &gt;&gt;&gt; # =&gt; &quot;bar - Suppress global context&quot;</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">handlers</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">remove</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">handlers</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">if</span> <span class="n">levels</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">params</span> <span class="ow">in</span> <span class="n">levels</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">level</span><span class="p">(</span><span class="o">**</span><span class="n">params</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">patcher</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">patcher</span> <span class="o">=</span> <span class="n">patcher</span>

        <span class="k">if</span> <span class="n">extra</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">extra</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">extra</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">extra</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">activation</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">activation</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">enable</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">disable</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="o">**</span><span class="n">params</span><span class="p">)</span> <span class="k">for</span> <span class="n">params</span> <span class="ow">in</span> <span class="n">handlers</span><span class="p">]</span></div>


    <span class="k">def</span> <span class="nf">_change_activation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid name, it should be a string (or None), not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="n">enabled</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">enabled</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>

            <span class="k">if</span> <span class="n">name</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">enabled</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">n</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                        <span class="n">enabled</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">status</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">activation_none</span> <span class="o">=</span> <span class="n">status</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">enabled</span>
                <span class="k">return</span>

            <span class="k">if</span> <span class="n">name</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">+=</span> <span class="s2">&quot;.&quot;</span>

            <span class="n">activation_list</span> <span class="o">=</span> <span class="p">[</span>
                <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">activation_list</span> <span class="k">if</span> <span class="n">n</span><span class="p">[:</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)]</span> <span class="o">!=</span> <span class="n">name</span>
            <span class="p">]</span>

            <span class="n">parent_status</span> <span class="o">=</span> <span class="nb">next</span><span class="p">((</span><span class="n">s</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">activation_list</span> <span class="k">if</span> <span class="n">name</span><span class="p">[:</span> <span class="nb">len</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="o">==</span> <span class="n">n</span><span class="p">),</span> <span class="kc">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">parent_status</span> <span class="o">!=</span> <span class="n">status</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="ow">and</span> <span class="n">status</span> <span class="ow">is</span> <span class="kc">True</span><span class="p">):</span>
                <span class="n">activation_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">name</span><span class="p">,</span> <span class="n">status</span><span class="p">))</span>

                <span class="k">def</span> <span class="nf">modules_depth</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
                    <span class="k">return</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span>

                <span class="n">activation_list</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">modules_depth</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">enabled</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">n</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span><span class="p">)[:</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)]</span> <span class="o">==</span> <span class="n">name</span><span class="p">:</span>
                    <span class="n">enabled</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">status</span>

            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">activation_list</span> <span class="o">=</span> <span class="n">activation_list</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_core</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">enabled</span>

<div class="viewcode-block" id="Logger.parse">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.parse">[docs]</a>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">pattern</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">cast</span><span class="o">=</span><span class="p">{},</span> <span class="n">chunk</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="mi">16</span><span class="p">):</span>  <span class="c1"># noqa: B006</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Parse raw logs and extract each entry as a |dict|.</span>

<span class="sd">        The logging format has to be specified as the regex ``pattern``, it will then be</span>
<span class="sd">        used to parse the ``file`` and retrieve each entry based on the named groups present</span>
<span class="sd">        in the regex.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        file : |str|, |Path| or |file-like object|_</span>
<span class="sd">            The path of the log file to be parsed, or an already opened file object.</span>
<span class="sd">        pattern : |str| or |re.Pattern|_</span>
<span class="sd">            The regex to use for logs parsing, it should contain named groups which will be included</span>
<span class="sd">            in the returned dict.</span>
<span class="sd">        cast : |callable|_ or |dict|, optional</span>
<span class="sd">            A function that should convert in-place the regex groups parsed (a dict of string</span>
<span class="sd">            values) to more appropriate types. If a dict is passed, it should be a mapping between</span>
<span class="sd">            keys of parsed log dict and the function that should be used to convert the associated</span>
<span class="sd">            value.</span>
<span class="sd">        chunk : |int|, optional</span>
<span class="sd">            The number of bytes read while iterating through the logs, this avoids having to load</span>
<span class="sd">            the whole file in memory.</span>

<span class="sd">        Yields</span>
<span class="sd">        ------</span>
<span class="sd">        :class:`dict`</span>
<span class="sd">            The dict mapping regex named groups to matched values, as returned by |match.groupdict|</span>
<span class="sd">            and optionally converted according to ``cast`` argument.</span>

<span class="sd">        Examples</span>
<span class="sd">        --------</span>
<span class="sd">        &gt;&gt;&gt; reg = r&quot;(?P&lt;lvl&gt;[0-9]+): (?P&lt;msg&gt;.*)&quot;    # If log format is &quot;{level.no} - {message}&quot;</span>
<span class="sd">        &gt;&gt;&gt; for e in logger.parse(&quot;file.log&quot;, reg):  # A file line could be &quot;10 - A debug message&quot;</span>
<span class="sd">        ...     print(e)                             # =&gt; {&#39;lvl&#39;: &#39;10&#39;, &#39;msg&#39;: &#39;A debug message&#39;}</span>

<span class="sd">        &gt;&gt;&gt; caster = dict(lvl=int)                   # Parse &#39;lvl&#39; key as an integer</span>
<span class="sd">        &gt;&gt;&gt; for e in logger.parse(&quot;file.log&quot;, reg, cast=caster):</span>
<span class="sd">        ...     print(e)                             # =&gt; {&#39;lvl&#39;: 10, &#39;msg&#39;: &#39;A debug message&#39;}</span>

<span class="sd">        &gt;&gt;&gt; def cast(groups):</span>
<span class="sd">        ...     if &quot;date&quot; in groups:</span>
<span class="sd">        ...         groups[&quot;date&quot;] = datetime.strptime(groups[&quot;date&quot;], &quot;%Y-%m-%d %H:%M:%S&quot;)</span>
<span class="sd">        ...</span>
<span class="sd">        &gt;&gt;&gt; with open(&quot;file.log&quot;) as file:</span>
<span class="sd">        ...     for log in logger.parse(file, reg, cast=cast):</span>
<span class="sd">        ...         print(log[&quot;date&quot;], log[&quot;something_else&quot;])</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">PathLike</span><span class="p">)):</span>

            <span class="nd">@contextlib</span><span class="o">.</span><span class="n">contextmanager</span>
            <span class="k">def</span> <span class="nf">opener</span><span class="p">():</span>
                <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">file</span><span class="p">))</span> <span class="k">as</span> <span class="n">fileobj</span><span class="p">:</span>
                    <span class="k">yield</span> <span class="n">fileobj</span>

        <span class="k">elif</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&quot;read&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">callable</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">):</span>

            <span class="nd">@contextlib</span><span class="o">.</span><span class="n">contextmanager</span>
            <span class="k">def</span> <span class="nf">opener</span><span class="p">():</span>
                <span class="k">yield</span> <span class="n">file</span>

        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid file, it should be a string path or a file object, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span>
                <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cast</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>

            <span class="k">def</span> <span class="nf">cast_function</span><span class="p">(</span><span class="n">groups</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">converter</span> <span class="ow">in</span> <span class="n">cast</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
                    <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
                        <span class="n">groups</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">converter</span><span class="p">(</span><span class="n">groups</span><span class="p">[</span><span class="n">key</span><span class="p">])</span>

        <span class="k">elif</span> <span class="nb">callable</span><span class="p">(</span><span class="n">cast</span><span class="p">):</span>
            <span class="n">cast_function</span> <span class="o">=</span> <span class="n">cast</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid cast, it should be a function or a dict, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span> <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">cast</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">regex</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                <span class="s2">&quot;Invalid pattern, it should be a string or a compiled regex, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span>
                <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
            <span class="p">)</span> <span class="kn">from</span> <span class="kc">None</span>

        <span class="k">with</span> <span class="n">opener</span><span class="p">()</span> <span class="k">as</span> <span class="n">fileobj</span><span class="p">:</span>
            <span class="n">matches</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="n">_find_iter</span><span class="p">(</span><span class="n">fileobj</span><span class="p">,</span> <span class="n">regex</span><span class="p">,</span> <span class="n">chunk</span><span class="p">)</span>

            <span class="k">for</span> <span class="n">match</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
                <span class="n">groups</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">groupdict</span><span class="p">()</span>
                <span class="n">cast_function</span><span class="p">(</span><span class="n">groups</span><span class="p">)</span>
                <span class="k">yield</span> <span class="n">groups</span></div>


    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_find_iter</span><span class="p">(</span><span class="n">fileobj</span><span class="p">,</span> <span class="n">regex</span><span class="p">,</span> <span class="n">chunk</span><span class="p">):</span>
        <span class="n">buffer</span> <span class="o">=</span> <span class="n">fileobj</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">fileobj</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
            <span class="n">buffer</span> <span class="o">+=</span> <span class="n">text</span>
            <span class="n">matches</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">regex</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">buffer</span><span class="p">))</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="n">text</span><span class="p">:</span>
                <span class="k">yield from</span> <span class="n">matches</span>
                <span class="k">break</span>

            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">end</span> <span class="o">=</span> <span class="n">matches</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">end</span><span class="p">()</span>
                <span class="n">buffer</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">[</span><span class="n">end</span><span class="p">:]</span>
                <span class="k">yield from</span> <span class="n">matches</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">_log</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">from_decorator</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">):</span>
        <span class="n">core</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_core</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">core</span><span class="o">.</span><span class="n">handlers</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">level_id</span><span class="p">,</span> <span class="n">level_name</span><span class="p">,</span> <span class="n">level_no</span><span class="p">,</span> <span class="n">level_icon</span> <span class="o">=</span> <span class="n">core</span><span class="o">.</span><span class="n">levels_lookup</span><span class="p">[</span><span class="n">level</span><span class="p">]</span>
        <span class="k">except</span> <span class="p">(</span><span class="ne">KeyError</span><span class="p">,</span> <span class="ne">TypeError</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Level &#39;</span><span class="si">%s</span><span class="s2">&#39; does not exist&quot;</span> <span class="o">%</span> <span class="n">level</span><span class="p">)</span> <span class="kn">from</span> <span class="kc">None</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
                <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                    <span class="s2">&quot;Invalid level, it should be an integer or a string, not: &#39;</span><span class="si">%s</span><span class="s2">&#39;&quot;</span>
                    <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="o">.</span><span class="vm">__name__</span>
                <span class="p">)</span> <span class="kn">from</span> <span class="kc">None</span>
            <span class="k">if</span> <span class="n">level</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
                    <span class="s2">&quot;Invalid level value, it should be a positive integer, not: </span><span class="si">%d</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="n">level</span>
                <span class="p">)</span> <span class="kn">from</span> <span class="kc">None</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="s2">&quot;Level </span><span class="si">%d</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="n">level</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">)</span>
            <span class="n">level_id</span><span class="p">,</span> <span class="n">level_name</span><span class="p">,</span> <span class="n">level_no</span><span class="p">,</span> <span class="n">level_icon</span> <span class="o">=</span> <span class="n">cache</span>
            <span class="n">core</span><span class="o">.</span><span class="n">levels_lookup</span><span class="p">[</span><span class="n">level</span><span class="p">]</span> <span class="o">=</span> <span class="n">cache</span>

        <span class="k">if</span> <span class="n">level_no</span> <span class="o">&lt;</span> <span class="n">core</span><span class="o">.</span><span class="n">min_level</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">record</span><span class="p">,</span> <span class="n">lazy</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">raw</span><span class="p">,</span> <span class="n">capture</span><span class="p">,</span> <span class="n">patchers</span><span class="p">,</span> <span class="n">extra</span><span class="p">)</span> <span class="o">=</span> <span class="n">options</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">frame</span> <span class="o">=</span> <span class="n">get_frame</span><span class="p">(</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
            <span class="n">f_globals</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">f_lineno</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">co_name</span> <span class="o">=</span> <span class="s2">&quot;&lt;unknown&gt;&quot;</span>
            <span class="n">co_filename</span> <span class="o">=</span> <span class="s2">&quot;&lt;unknown&gt;&quot;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">f_globals</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_globals</span>
            <span class="n">f_lineno</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_lineno</span>
            <span class="n">co_name</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_name</span>
            <span class="n">co_filename</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_code</span><span class="o">.</span><span class="n">co_filename</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">f_globals</span><span class="p">[</span><span class="s2">&quot;__name__&quot;</span><span class="p">]</span>
        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="kc">None</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">core</span><span class="o">.</span><span class="n">enabled</span><span class="p">[</span><span class="n">name</span><span class="p">]:</span>
                <span class="k">return</span>
        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
            <span class="n">enabled</span> <span class="o">=</span> <span class="n">core</span><span class="o">.</span><span class="n">enabled</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">status</span> <span class="o">=</span> <span class="n">core</span><span class="o">.</span><span class="n">activation_none</span>
                <span class="n">enabled</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">status</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">status</span><span class="p">:</span>
                    <span class="k">return</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">dotted_name</span> <span class="o">=</span> <span class="n">name</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span>
                <span class="k">for</span> <span class="n">dotted_module_name</span><span class="p">,</span> <span class="n">status</span> <span class="ow">in</span> <span class="n">core</span><span class="o">.</span><span class="n">activation_list</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">dotted_name</span><span class="p">[:</span> <span class="nb">len</span><span class="p">(</span><span class="n">dotted_module_name</span><span class="p">)]</span> <span class="o">==</span> <span class="n">dotted_module_name</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">status</span><span class="p">:</span>
                            <span class="k">break</span>
                        <span class="n">enabled</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
                        <span class="k">return</span>
                <span class="n">enabled</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>

        <span class="n">current_datetime</span> <span class="o">=</span> <span class="n">aware_now</span><span class="p">()</span>

        <span class="n">file_name</span> <span class="o">=</span> <span class="n">basename</span><span class="p">(</span><span class="n">co_filename</span><span class="p">)</span>
        <span class="n">thread</span> <span class="o">=</span> <span class="n">current_thread</span><span class="p">()</span>
        <span class="n">process</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span>
        <span class="n">elapsed</span> <span class="o">=</span> <span class="n">current_datetime</span> <span class="o">-</span> <span class="n">start_time</span>

        <span class="k">if</span> <span class="n">exception</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="ne">BaseException</span><span class="p">):</span>
                <span class="n">type_</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback</span> <span class="o">=</span> <span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">exception</span><span class="p">),</span> <span class="n">exception</span><span class="p">,</span> <span class="n">exception</span><span class="o">.</span><span class="n">__traceback__</span><span class="p">)</span>
            <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>
                <span class="n">type_</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback</span> <span class="o">=</span> <span class="n">exception</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">type_</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()</span>
            <span class="n">exception</span> <span class="o">=</span> <span class="n">RecordException</span><span class="p">(</span><span class="n">type_</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">exception</span> <span class="o">=</span> <span class="kc">None</span>

        <span class="n">log_record</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s2">&quot;elapsed&quot;</span><span class="p">:</span> <span class="n">elapsed</span><span class="p">,</span>
            <span class="s2">&quot;exception&quot;</span><span class="p">:</span> <span class="n">exception</span><span class="p">,</span>
            <span class="s2">&quot;extra&quot;</span><span class="p">:</span> <span class="p">{</span><span class="o">**</span><span class="n">core</span><span class="o">.</span><span class="n">extra</span><span class="p">,</span> <span class="o">**</span><span class="n">context</span><span class="o">.</span><span class="n">get</span><span class="p">(),</span> <span class="o">**</span><span class="n">extra</span><span class="p">},</span>
            <span class="s2">&quot;file&quot;</span><span class="p">:</span> <span class="n">RecordFile</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">co_filename</span><span class="p">),</span>
            <span class="s2">&quot;function&quot;</span><span class="p">:</span> <span class="n">co_name</span><span class="p">,</span>
            <span class="s2">&quot;level&quot;</span><span class="p">:</span> <span class="n">RecordLevel</span><span class="p">(</span><span class="n">level_name</span><span class="p">,</span> <span class="n">level_no</span><span class="p">,</span> <span class="n">level_icon</span><span class="p">),</span>
            <span class="s2">&quot;line&quot;</span><span class="p">:</span> <span class="n">f_lineno</span><span class="p">,</span>
            <span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">message</span><span class="p">),</span>
            <span class="s2">&quot;module&quot;</span><span class="p">:</span> <span class="n">splitext</span><span class="p">(</span><span class="n">file_name</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
            <span class="s2">&quot;process&quot;</span><span class="p">:</span> <span class="n">RecordProcess</span><span class="p">(</span><span class="n">process</span><span class="o">.</span><span class="n">ident</span><span class="p">,</span> <span class="n">process</span><span class="o">.</span><span class="n">name</span><span class="p">),</span>
            <span class="s2">&quot;thread&quot;</span><span class="p">:</span> <span class="n">RecordThread</span><span class="p">(</span><span class="n">thread</span><span class="o">.</span><span class="n">ident</span><span class="p">,</span> <span class="n">thread</span><span class="o">.</span><span class="n">name</span><span class="p">),</span>
            <span class="s2">&quot;time&quot;</span><span class="p">:</span> <span class="n">current_datetime</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">lazy</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">arg</span><span class="p">()</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span>
            <span class="n">kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="n">value</span><span class="p">()</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>

        <span class="k">if</span> <span class="n">capture</span> <span class="ow">and</span> <span class="n">kwargs</span><span class="p">:</span>
            <span class="n">log_record</span><span class="p">[</span><span class="s2">&quot;extra&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">record</span><span class="p">:</span>
            <span class="k">if</span> <span class="s2">&quot;record&quot;</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span>
                    <span class="s2">&quot;The message can&#39;t be formatted: &#39;record&#39; shall not be used as a keyword &quot;</span>
                    <span class="s2">&quot;argument while logger has been configured with &#39;.opt(record=True)&#39;&quot;</span>
                <span class="p">)</span>
            <span class="n">kwargs</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">record</span><span class="o">=</span><span class="n">log_record</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">colors</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">args</span> <span class="ow">or</span> <span class="n">kwargs</span><span class="p">:</span>
                <span class="n">colored_message</span> <span class="o">=</span> <span class="n">Colorizer</span><span class="o">.</span><span class="n">prepare_message</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">colored_message</span> <span class="o">=</span> <span class="n">Colorizer</span><span class="o">.</span><span class="n">prepare_simple_message</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">message</span><span class="p">))</span>
            <span class="n">log_record</span><span class="p">[</span><span class="s2">&quot;message&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">colored_message</span><span class="o">.</span><span class="n">stripped</span>
        <span class="k">elif</span> <span class="n">args</span> <span class="ow">or</span> <span class="n">kwargs</span><span class="p">:</span>
            <span class="n">colored_message</span> <span class="o">=</span> <span class="kc">None</span>
            <span class="n">log_record</span><span class="p">[</span><span class="s2">&quot;message&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">colored_message</span> <span class="o">=</span> <span class="kc">None</span>

        <span class="k">if</span> <span class="n">core</span><span class="o">.</span><span class="n">patcher</span><span class="p">:</span>
            <span class="n">core</span><span class="o">.</span><span class="n">patcher</span><span class="p">(</span><span class="n">log_record</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">patcher</span> <span class="ow">in</span> <span class="n">patchers</span><span class="p">:</span>
            <span class="n">patcher</span><span class="p">(</span><span class="n">log_record</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">handler</span> <span class="ow">in</span> <span class="n">core</span><span class="o">.</span><span class="n">handlers</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
            <span class="n">handler</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">log_record</span><span class="p">,</span> <span class="n">level_id</span><span class="p">,</span> <span class="n">from_decorator</span><span class="p">,</span> <span class="n">raw</span><span class="p">,</span> <span class="n">colored_message</span><span class="p">)</span>

<div class="viewcode-block" id="Logger.trace">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.trace">[docs]</a>
    <span class="k">def</span> <span class="nf">trace</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``&#39;TRACE&#39;``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;TRACE&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.debug">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.debug">[docs]</a>
    <span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``&#39;DEBUG&#39;``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;DEBUG&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.info">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.info">[docs]</a>
    <span class="k">def</span> <span class="nf">info</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``&#39;INFO&#39;``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;INFO&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.success">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.success">[docs]</a>
    <span class="k">def</span> <span class="nf">success</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``&#39;SUCCESS&#39;``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;SUCCESS&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.warning">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.warning">[docs]</a>
    <span class="k">def</span> <span class="nf">warning</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``&#39;WARNING&#39;``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;WARNING&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.error">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.error">[docs]</a>
    <span class="k">def</span> <span class="nf">error</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``&#39;ERROR&#39;``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.critical">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.critical">[docs]</a>
    <span class="k">def</span> <span class="nf">critical</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``&#39;CRITICAL&#39;``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;CRITICAL&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.exception">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.exception">[docs]</a>
    <span class="k">def</span> <span class="nf">exception</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log an ``&#39;ERROR&#39;```` message while also capturing the currently handled exception.&quot;&quot;&quot;</span>
        <span class="n">options</span> <span class="o">=</span> <span class="p">(</span><span class="kc">True</span><span class="p">,)</span> <span class="o">+</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.log">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.log">[docs]</a>
    <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">__self</span><span class="p">,</span> <span class="n">__level</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># noqa: N805</span>
<span class="w">        </span><span class="sa">r</span><span class="sd">&quot;&quot;&quot;Log ``message.format(*args, **kwargs)`` with severity ``level``.&quot;&quot;&quot;</span>
        <span class="n">__self</span><span class="o">.</span><span class="n">_log</span><span class="p">(</span><span class="n">__level</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="n">__self</span><span class="o">.</span><span class="n">_options</span><span class="p">,</span> <span class="n">__message</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.start">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.start">[docs]</a>
    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Add a handler sending log messages to a sink adequately configured.</span>

<span class="sd">        Deprecated function, use |add| instead.</span>

<span class="sd">        Warnings</span>
<span class="sd">        --------</span>
<span class="sd">        .. deprecated:: 0.2.2</span>
<span class="sd">          ``start()`` will be removed in Loguru 1.0.0, it is replaced by ``add()`` which is a less</span>
<span class="sd">          confusing name.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span>
            <span class="s2">&quot;The &#39;start()&#39; method is deprecated, please use &#39;add()&#39; instead&quot;</span><span class="p">,</span>
            <span class="ne">DeprecationWarning</span><span class="p">,</span>
            <span class="n">stacklevel</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span></div>


<div class="viewcode-block" id="Logger.stop">
<a class="viewcode-back" href="../../api/logger.html#loguru._logger.Logger.stop">[docs]</a>
    <span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Remove a previously added handler and stop sending logs to its sink.</span>

<span class="sd">        Deprecated function, use |remove| instead.</span>

<span class="sd">        Warnings</span>
<span class="sd">        --------</span>
<span class="sd">        .. deprecated:: 0.2.2</span>
<span class="sd">          ``stop()`` will be removed in Loguru 1.0.0, it is replaced by ``remove()`` which is a less</span>
<span class="sd">          confusing name.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span>
            <span class="s2">&quot;The &#39;stop()&#39; method is deprecated, please use &#39;remove()&#39; instead&quot;</span><span class="p">,</span>
            <span class="ne">DeprecationWarning</span><span class="p">,</span>
            <span class="n">stacklevel</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span></div>
</div>

</pre></div>

           </div>
          </div>

<div class="github-corner">
<svg width="120" height="120" viewBox="0 0 250 250">
  <a fill="transparent" href="https://github.com/delgan/loguru" style="pointer-events:auto">
    <path d="M0,0 L250,250 L250,0 Z"></path>
  </a>
  <g class="octocat">
    <path fill="#343131" d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z" ></path>
    <path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
      fill="#ffffff" style="transform-origin: 130px 106px;" class="octo-arm"></path>
    <path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="#ffffff" class="octo-body"></path>
    <text x="240px" y="-10px" class="octo-click-text" stroke="#ffffff" fill="#ffffff">CLICK</text>
    <g class="octo-glasses" visibility="hidden">
      <svg fill="#343131" width="640" height="480">
       <defs>
        <symbol id="glasses" viewBox="0 0 512 512">
         <path d="m465.4,247c-2.2,-22 -12.4,-43 -28.9,-58.4c-17.1,-15.9 -39.3,-24.7 -62.7,-24.7c-41.5,0 -77.3,27.4 -88.5,67c-7,-7 -18.5,-11.7 -29.3,-11.7c-10.8,0 -22.3,4.7 -29.3,11.7c-11.2,-39.6 -47,-67 -88.5,-67c-23.3,0 -45.6,8.7 -62.7,24.6c-16.5,15.5 -26.7,36.5 -28.9,58.5l-14.6,0l0,18l14.6,0c2.2,22 12.4,43 28.9,58.4c17.1,15.9 39.3,24.7 62.7,24.7c50.8,0 92.1,-41.2 92.1,-92c0,-0.1 0,-0.1 0,-0.1l0,0c0,-9.9 11.5,-21.6 25.7,-21.6s25.7,11.7 25.7,21.6l0,0c0,0 0,0 0,0.1c0,50.8 41.3,92 92.1,92c23.3,0 45.6,-8.7 62.7,-24.7c16.5,-15.4 26.7,-36.5 28.9,-58.5l14.6,0l0,-18l-14.6,0l0,0.1z" />
        </symbol>
       </defs>
       <g>
          <use x="530" y="-70" xlink:href="#glasses" transform="rotate(45 100,75) matrix(0.185,0,0,0.185,0,0) " />
       </g>
      </svg>
    </g>
  </g>
</svg>
</div>

<style>
.github-corner {
  pointer-events: none;
  position: absolute;
  top: 0;
  right: 0;
  border: 0;
  mix-blend-mode: darken;
}
.github-corner:hover .octocat{
  transform-origin: center;
  animation: octocat-grow 5s ease-in-out forwards;
}
@keyframes octocat-grow{
  16%, 66%{
    transform: scale(1.2);
  }
  33%{
    transform: scale(1.1);
  }
  50%, 100%{
    transform: scale(1.3);
  }
  83%{
    transform: scale(1.4);
  }
}
.octo-click-text {
  font-weight: normal;
  text-anchor: middle;
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  font-size: 20px;
  stroke-width: 2px;
  transform: rotate(45deg);
  opacity: 0;
}
.github-corner:hover .octo-click-text {
  animation: octocat-text 5s linear forwards
}
@keyframes octocat-text {
  99% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
.github-corner:hover .octo-arm{
  animation: octocat-wave 400ms linear infinite;
}
@keyframes octocat-wave {
  0%,50%,100% {
    transform: rotate(0)
  }
  25% {
    transform: rotate(-25deg)
  }
  75% {
    transform: rotate(10deg)
  }
}
.github-corner .octo-glasses{
  visibility: visible;
  opacity: 0;
  transition: opacity 5s;
}
.github-corner:hover .octo-glasses{
  opacity: 1;
  animation: octocat-glass-wiggle 400ms linear forwards;
  animation-delay: 4s;
}
@keyframes octocat-glass-wiggle {
  0%, 50%, 100% {
    transform: translateX(0px) translateY(0px);
  }
  25%, 75% {
    transform: translateX(3px) translateY(-3px);
  }
}
</style>

          <footer>

  <hr/>

  <div role="contentinfo">
    <p></p>
  </div>

  Built with <a href="https://www.sphinx-doc.org/">Sphinx</a> using a
    <a href="https://github.com/readthedocs/sphinx_rtd_theme">theme</a>
    provided by <a href="https://readthedocs.org">Read the Docs</a>.


</footer>
        </div>
      </div>
    </section>
  </div>
  <script>
      jQuery(function () {
          SphinxRtdTheme.Navigation.enable(true);
      });
  </script>

</body>
</html>
</document_content>
</document>
</documents>
