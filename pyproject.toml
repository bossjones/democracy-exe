[project]
name = "democracy-exe"
version = "0.0.1"
description = "democracy_exe is an advanced, agentic Python application leveraging LangChain and LangGraph to orchestrate and manage a network of AI agents and subgraphs. This system emulates the principles of 'managed democracy' from the Helldivers universe, automating decision-making processes and task delegation across multiple AI entities. Based on Helldivers."
authors = [{name = "Malcolm Jones", email = "bossjones@theblacktonystark.com"}]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "better-exceptions>=0.3.3",
    "discord-py>=2.4.0",
    "langchain>=0.3.7",
    "langchain-anthropic>=0.2.4",
    "langchain-chroma>=0.1.4",
    "langchain-community>=0.3.5",
    "langchain-core>=0.3.15",
    "langchain-google-genai>=2.0.4",
    "langchain-groq>=0.2.1",
    "langchain-openai>=0.2.6",
    "langchainhub>=0.1.21",
    "langgraph>=0.2.45",
    "langserve[all]>=0.3.0",
    "aiodebug>=2.3.0",
    "aiofile>=3.9.0",
    "aiofiles>=24.1.0",
    "aiohttp>=3.10.10",
    "aiomonitor>=0.7.0",
    "aioprometheus[starlette]>=23.12.0",
    "aiopytesseract>=0.14.0",
    "aiosql>=12.2",
    "aiosqlite>=0.20.0",
    "asyncer>=0.0.8",
    "beautifulsoup4>=4.12.3",
    "attrs>=24.2.0",
    "babel>=2.16.0",
    "fastapi[all]>=0.115.4",
    "gallery-dl>=1.27.7",
    "imageio>=2.36.0",
    "imutils>=0.5.4",
    "lazy-object-proxy>=1.10.0",
    "logging-tree>=1.10",
    "loguru>=0.7.2",
    "lxml>=5.3.0",
    "markdown>=3.7",
    "matplotlib>=3.9.2",
    "md2pdf>=1.0.1",
    "memory-profiler>=0.61.0",
    "motor>=3.6.0",
    "moviepy>=1.0.3",
    "pinecone-client[grpc]>=5.0.1",
    "pydantic[email]>=2.9.2",
    "pydantic-settings>=2.6.1",
    "pyinstrument>=5.0.0",
    "pypdf2>=3.0.1",
    "pypdf>=5.1.0",
    "pdf2image>=1.17.0",
    "pytesseract>=0.3.13",
    "python-decouple>=3.8",
    "python-docx>=1.1.2",
    "python-dotenv>=1.0.1",
    "python-json-logger>=2.0.7",
    "python-levenshtein>=0.26.1",
    "python-slugify>=8.0.4",
    "pytz>=2024.2",
    "rank-bm25>=0.2.2",
    "rapidfuzz>=3.10.1",
    "rapidocr-onnxruntime>=1.3.25",
    "redis>=5.2.0",
    "requests-toolbelt>=1.0.0",
    "requests>=2.32.3",
    "scenedetect[opencv]>=0.6.4",
    "sentence-transformers>=3.2.1",
    "sentencepiece>=0.2.0",
]

[project.urls]
Homepage = "https://bossjones.github.io/democracy-exe/"
Repository = "https://github.com/bossjones/democracy-exe"
Documentation = "https://bossjones.github.io/democracy-exe/"

[tool.uv]
dev-dependencies = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.20.0",
    "mypy>=0.991",
    "pytest-cov>=4.0.0",
    "ruff>=0.6.9",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "black>=24.10.0",
    "bpython>=0.24",
    "coverage[toml]>=7.6.4",
    "debugpy>=1.8.8",
    "docformatter[tomli]>=1.7.5",
    "dpytest>=0.7.0",
    "flake8>=7.1.1",
    "grpc-stubs>=1.53.0.5",
    "hunter>=3.7.0",
    "isort>=5.13.2",
    "langsmith>=0.1.142",
    "manhole>=1.8.1",
    "mdformat-config>=0.2.1",
    "mdformat-footnote>=0.1.1",
    "mdformat-frontmatter>=2.0.8",
    "mdformat-gfm>=0.3.7",
    "mdformat-mkdocs>=3.1.1",
    "mdformat-pyproject>=0.0.1",
    "mdx-gh-links>=0.4",
    "memray>=1.14.0",
    "mkdocs-include-markdown-plugin>=7.0.0",
    "mkdocs-jupyter>=0.25.1",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocs-redirects>=1.2.2",
    "mkdocs-simple-hooks>=0.1.5",
    "mkdocs-version-annotations>=1.0.0",
    "mkdocs-with-pdf>=0.9.3",
    "monkeytype>=23.3.0",
    "pandas-stubs>=2.2.3.241009",
    "pydocstringformatter>=0.7.3",
    "pydocstyle>=6.3.0",
    "pylint>=3.3.1",
    "pylint-per-file-ignores>=1.3.2",
    "pylint-to-ruff>=0.3.0",
    "pymarkdownlnt>=0.9.25",
    "pyright>=1.1.388",
    "pysnooper>=1.2.1",
    "pytest-aiohttp>=1.0.5",
    "pytest-asyncio>=0.24.0",
    "pytest-clarity>=1.0.1",
    "pytest-httpx>=0.33.0",
    "pytest-ignore-flaky>=2.2.1",
    "pytest-memray>=1.7.0",
    "pytest-mock>=3.14.0",
    "pytest-recording>=0.13.2",
    "pytest-retry>=1.6.3",
    "pytest-skip-slow>=0.0.5",
    "pytest-sugar>=1.0.0",
    "pyupgrade>=3.19.0",
    "requests-mock>=1.12.1",
    "respx>=0.21.1",
    "rich>=13.9.4",
    "towncrier>=24.8.0",
    "tox>=4.23.2",
    "types-aiofiles>=24.1.0.20240626",
    "types-beautifulsoup4>=4.12.0.20241020",
    "types-cffi>=1.16.0.20240331",
    "types-click>=7.1.8",
    "types-click-spinner>=0.1.13.20240311",
    "types-colorama>=0.4.15.20240311",
    "types-contextvars>=2.4.7.3",
    "types-dataclasses>=0.6.6",
    "types-freezegun>=1.1.10",
    "types-html5lib>=1.1.11.20241018",
    "types-jsonschema>=4.23.0.20240813",
    "types-mock>=5.1.0.20240425",
    "types-mypy-extensions>=1.0.0.20240311",
    "types-protobuf>=5.28.3.20241030",
    "types-psutil>=6.1.0.20241102",
    "types-pyasn1>=0.6.0.20240913",
    "types-python-jose>=3.3.4.20240106",
    "types-pytz>=2024.2.0.20241003",
    "types-pyyaml>=6.0.12.20240917",
    "types-redis>=4.6.0.20241004",
    "types-regex>=2024.11.6.20241108",
    "types-setuptools>=75.3.0.20241107",
    "types-six>=1.16.21.20241105",
    "types-toml>=0.10.8.20240310",
    "types-tqdm>=4.66.0.20240417",
    "types-ujson>=5.10.0.20240515",
    "types-urllib3>=1.26.25.14",
    "typing-extensions>=4.12.2",
    "validate-pyproject[all,store]>=0.22",
    "vcrpy>=6.0.2",
    "yamlfix>=1.17.0",
    "yamllint>=1.35.1",
    "changelogs",
]

[tool.uv.sources]
changelogs = {git = "https://github.com/bossjones/changelogs"}

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["democracy_exe"]

[project.scripts]
democracy-exe = 'democracy_exe.cli:entry'

[tool.mypy]
files = ["democracy_exe"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = false
warn_unused_ignores = true
# Display the codes needed for # type: ignore[code] annotations.
show_error_codes = true
exclude = '''(?x)(
    ^tasks/    # anything under tasks directory
    | ^typings/? # typings directory or typings file
    | ^\.venv/   # .venv directory
    | ^contrib/  # contrib directory
    | ^scripts/  # scripts directory
    | ^venv/     # venv directory
)'''

# from sandbox agent
# mypy_path = "democracy_exe"
# show_column_numbers = true
# disallow_subclassing_any = false
# disallow_untyped_calls = false
# disallow_untyped_decorators = false
# strict = false
# ***********************************************!SECTION

# Enable optional errors.
enable_error_code = [
    # "explicit-override",
    "ignore-without-code",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unused-awaitable",
]

# The following list of codes are globally ignored, do not add to this list

disable_error_code = [
    # annotation-unchecked are 'warning notes', not errors and won't cause mypy to fail
    # but it does create a lot of noise in the CI mypy step.
    # https://mypy-lang.blogspot.com/2022/11/mypy-0990-released.html
    "import-untyped",
    "annotation-unchecked",
    "assignment",
    "attr-defined",
    "call-arg",
    "has-type",
    "import",
    "misc",
    "name-defined",
    "operator",
    "type-var",
    "var-annotated",
    "union-attr",
    "return",
]

# Causes mypy to treat arguments with a None default value as having an implicit Optional type.
follow_imports = "skip"
# follow_imports = "silent"

# Warns about casting an expression to its inferred type.
warn_redundant_casts = true

# Causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables.
allow_redefinition = true

strict_optional = true

# warn_unused_ignores = true

# Warn of unreachable or redundant code.
warn_unreachable = true

# dmypy enables local_partial_types implicitly. We need mypy to align
# with this behavior.
local_partial_types = true

# plugins = ["pydantic.mypy", "loguru_mypy"]
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
# NOTE: https://docs.pydantic.dev/latest/integrations/mypy/#configuring-the-plugin
# See https://docs.pydantic.dev/latest/integrations/mypy/#mypy-plugin-capabilities for the effects of these options.
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# By default, imported values to a module are treated as exported and mypy allows other modules to import them.
# This flag changes the behavior to not re-export unless the item is imported using from-as or is included in __all__.
# Note this is always treated as enabled for stub files. For example:
no_implicit_reexport = true

# Ignores all non-fatal errors.
ignore_errors = true
# warn_untyped_fields = true


ignore_missing_imports = true
follow_imports = "skip"
strict_optional = true

# ===========================[ MYPY OVERRIDES ]========================
[[tool.mypy.overrides]]
check_untyped_defs = true
ignore_missing_imports = true
module = "tests.*"

# Ignore specific error codes
[[tool.mypy.overrides]]
module = "typings.*"
ignore_errors = true


[[tool.mypy.overrides]]
module = [
    "prometheus_client.*",
    "_pytest.*",
    "_string",
    "absl.*",
    "albumentations.*",
    "asr_python.*",
    "astroid.*",
    "boto3.*",
    "botocore.*",
    "colorama.*",
    "colorama",
    "contributors_txt",
    "coverage",
    "cv2.*",
    "dill",
    "discord.*",
    "discord.client.*",
    "enchant.*",
    "etils.*",
    "flatbuffers.*",
    "flax.*",
    "git.*",
    "google.colab.*",
    "importlib_metadata.*",
    "invoke.*",
    "IPython.*",
    "iree.*",
    "jax.experimental.jax2tf.tests.back_compat_testdata",
    "jax.experimental.jax2tf.tests.flax_models",
    "jaxlib.*",
    "jaxlib.mlir.*",
    "jraph.*",
    "libtpu.*",
    "matplotlib.*",
    "mccabe",
    "multiprocessing.*",
    "numpy.*",
    "opt_einsum.*",
    "optax.*",
    "pl_bolts.*",
    "pssh.*",
    "pygments.*",
    "pytest_benchmark.*",
    "pytest.*",
    "pytest",
    "rich.*",
    "robustness.*",
    "scipy.*",
    "seaborn",
    "setuptools.*",
    "skimage.*",
    "sklearn.*",
    "sphinx.*",
    "tensorboard_plugin_profile.convert.*",
    "tensorboard.*",
    "tensorflow.*",
    "tensorflow.io.*",
    "tensorflowjs.*",
    "tensorstore.*",
    "timm.*",
    "torch.*",
    "torchvision.*",
    "usort.*",
    "uvloop.*",
    "web_pdb.*",
    "wilds.*",
    "zstandard.*",
    "aiodebug.*",
    "aiomonitor.*",
    # "loguru.*",
    "aiofiles.*",
    "passlib.*",
    "orjson",
    "sentence_transformers.*",
    "requests_toolbelt",
    "requests_toolbelt.multipart",
    "requests_toolbelt.multipart.decoder",
    'vcr',
    'vcr.*',
    "pysnooper",
    "rich",
    "rich.console",
    "rich.panel",
    "rich.pretty",
    "rich.progress",
    "rich.status",
    "rich.table",
    "rich.text",
    "pydantic_settings",
    "pydantic_settings.*",
    "pydantic_core",
    "pydantic_core.*",
    "pydantic",
    "pydantic.*",
    "pydantic_extra",
    "pydantic_extra.*",


]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "pandas._config.config",                      # TODO
    "pandas._libs.*",
    "pandas._testing.*",                          # TODO
    "pandas.compat.numpy.function",               # TODO
    "pandas.compat.compressors",                  # TODO
    "pandas.core._numba.executor",                # TODO
    "pandas.core.array_algos.masked_reductions",  # TODO
    "pandas.core.array_algos.putmask",            # TODO
    "pandas.core.array_algos.quantile",           # TODO
    "pandas.core.array_algos.replace",            # TODO
    "pandas.core.array_algos.take",               # TODO
    "pandas.core.arrays.*",                       # TODO
    "pandas.core.computation.*",                  # TODO
    "pandas.core.dtypes.astype",                  # TODO
    "pandas.core.dtypes.cast",                    # TODO
    "pandas.core.dtypes.common",                  # TODO
    "pandas.core.dtypes.concat",                  # TODO
    "pandas.core.dtypes.dtypes",                  # TODO
    "pandas.core.dtypes.generic",                 # TODO
    "pandas.core.dtypes.missing",                 # TODO
    "pandas.core.groupby.generic",                # TODO
    "pandas.core.groupby.grouper",                # TODO
    "pandas.core.groupby.groupby",                # TODO
    "pandas.core.groupby.ops",                    # TODO
    "pandas.core.indexers.*",                     # TODO
    "pandas.core.indexes.*",                      # TODO
    "pandas.core.interchange.column",             # TODO
    "pandas.core.interchange.dataframe_protocol", # TODO
    "pandas.core.interchange.from_dataframe",     # TODO
    "pandas.core.internals.*",                    # TODO
    "pandas.core.ops.array_ops",                  # TODO
    "pandas.core.ops.common",                     # TODO
    "pandas.core.ops.missing",                    # TODO
    "pandas.core.reshape.*",                      # TODO
    "pandas.core.strings.*",                      # TODO
    "pandas.core.tools.*",                        # TODO
    "pandas.core.window.common",                  # TODO
    "pandas.core.window.ewm",                     # TODO
    "pandas.core.window.expanding",               # TODO
    "pandas.core.window.numba_",                  # TODO
    "pandas.core.window.online",                  # TODO
    "pandas.core.window.rolling",                 # TODO
    "pandas.core.accessor",                       # TODO
    "pandas.core.algorithms",                     # TODO
    "pandas.core.apply",                          # TODO
    "pandas.core.arraylike",                      # TODO
    "pandas.core.base",                           # TODO
    "pandas.core.common",                         # TODO
    "pandas.core.construction",                   # TODO
    "pandas.core.flags",                          # TODO
    "pandas.core.frame",                          # TODO
    "pandas.core.generic",                        # TODO
    "pandas.core.indexing",                       # TODO
    "pandas.core.missing",                        # TODO
    "pandas.core.nanops",                         # TODO
    "pandas.core.resample",                       # TODO
    "pandas.core.roperator",                      # TODO
    "pandas.core.sample",                         # TODO
    "pandas.core.series",                         # TODO
    "pandas.core.sorting",                        # TODO
    "pandas.errors",                              # TODO
    "pandas.io.clipboard",                        # TODO
    "pandas.io.excel._base",                      # TODO
    "pandas.io.excel._odfreader",                 # TODO
    "pandas.io.excel._openpyxl",                  # TODO
    "pandas.io.excel._pyxlsb",                    # TODO
    "pandas.io.excel._xlrd",                      # TODO
    "pandas.io.excel._xlsxwriter",                # TODO
    "pandas.io.formats.excel",                    # TODO
    "pandas.io.formats.format",                   # TODO
    "pandas.io.formats.style",                    # TODO
    "pandas.io.formats.style_render",             # TODO
    "pandas.io.formats.xml",                      # TODO
    "pandas.io.json.*",                           # TODO
    "pandas.io.parsers.*",                        # TODO
    "pandas.io.sas.sas_xport",                    # TODO
    "pandas.io.sas.sas7bdat",                     # TODO
    "pandas.io.clipboards",                       # TODO
    "pandas.io.html",                             # TODO
    "pandas.io.parquet",                          # TODO
    "pandas.io.pytables",                         # TODO
    "pandas.io.sql",                              # TODO
    "pandas.io.xml",                              # TODO
    "pandas.plotting.*",                          # TODO
    "pandas.tests.*",
    "pandas.tseries.frequencies",                 # TODO
    "pandas.tseries.holiday",                     # TODO
    "pandas.util._decorators",                    # TODO
    "pandas.util._doctools",                      # TODO
    "pandas.util._test_decorators",               # TODO
    "pandas.util._validators",                    # TODO
    "pandas.util",                                # TODO
    "pandas._version",
    "pandas.conftest",
    "pandas",
]
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "pandas.tests.*",
    "pandas._version",
    "pandas.io.clipboard",
]
check_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "pandas.tests.apply.test_series_apply",
    "pandas.tests.arithmetic.conftest",
    "pandas.tests.arrays.sparse.test_combine_concat",
    "pandas.tests.dtypes.test_common",
    "pandas.tests.frame.methods.test_to_records",
    "pandas.tests.groupby.test_rank",
    "pandas.tests.groupby.transform.test_transform",
    "pandas.tests.indexes.interval.test_interval",
    "pandas.tests.indexing.test_categorical",
    "pandas.tests.io.excel.test_writers",
    "pandas.tests.reductions.test_reductions",
    "pandas.tests.test_expressions",
]
ignore_errors = true

# Ignore specific errors in certain files/modules
[[tool.mypy.overrides]]
module = "democracy_exe.utils.imitools"
disable_error_code = [
    "ignore-without-code",
    "unreachable",
    "index",
    "call-overload",
    "return",
    "union-attr",
    "arg-type",
]

[[tool.mypy.overrides]]
module = "democracy_exe.utils.async_"
disable_error_code = [
    "unused-awaitable",
    "ignore-without-code",
]

[[tool.mypy.overrides]]
module = "democracy_exe.utils.file_functions"
disable_error_code = [
    "ignore-without-code",
    "arg-type",
    "redundant-expr",
    "unreachable",
]

[[tool.mypy.overrides]]
module = "democracy_exe.utils.vidops"
disable_error_code = [
    "unused-awaitable",
]

[[tool.mypy.overrides]]
module = "democracy_exe.utils.__init__"
disable_error_code = [
    "redundant-expr",
    "arg-type",
    "return-value",
]

[[tool.mypy.overrides]]
module = "democracy_exe.clients.http_client"
disable_error_code = [
    "str-bytes-safe",
    "no-redef",
]

# ***********************************************!SECTION

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true

extend-include = [
    "*.ipynb",
    "democracy_exe/*.ipynb",
    "notebook/*.ipynb",
    "notebooks/*.ipynb",
    "notebooks/*.py",
    "*.py",
    "*.pyi",
    "**/pyproject.toml",
    "*.ipynb",
    "pyproject.toml",
    "democracy_exe/**/*.py",
]
output-format = "full"
force-exclude = true
respect-gitignore = true
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
extend-exclude = [
    "__pycache__",
    "__pypackages__",
    "_build",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git-rewrite",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "**/__pycache__",
    "buck-out",
    "build",
    "data",
    "data/*",
    "dist",
    "docs",
    "doc",
    "git",
    "logs/*",
    "node_modules",
    # "notebooks/*",
    "tests/data",
    "venv",
    "typings",
    "contrib",
]

# https://docs.astral.sh/ruff/settings/#indent-width
# The formatter wraps lines at a length of 88
unsafe-fixes = false

[tool.ruff.lint]
# **************************************
# extend-select = ["I", "N812"]
unfixable = [
    "ERA", # do not autoremove commented out code
]
fixable = ["ALL"]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",

    "C90",  # mccabe
    "I002", # from __future__ import annotations
    "N812", # lowercase-imported-as-non-lowercase (N812) - Derived from the pep8-naming linter.
]
# ignore = [
#     # LineTooLong
#     "E501",
#     # DoNotAssignLambda
#     "E731",
# ]
# SOURCE: https://github.com/ansible-collections/cloud-content-handbook/blob/9be137d78af4d1cc140b210f3058977164021c9d/proposals/ruff_transition.md - end
# Conflicts with the formatter
ignore = [
    "S105",
    "UP007",
    "TRY003",
    "N815",
    "PLW0603",
    "D",
    "COM812",
    "ISC001",
    "N804",
    "F821",
    "N804",
    "PLR1722",
    "N802",
    "N801",
    "PLW0602",
    "F811",
    "PLW2901",
    "YTT201",
    "E722",
    "PLC0132",
    "PLW0128",
    "W191",    # tab-indentation
    "E111",    # indentation-with-invalid-multiple
    "E114",    # indentation-with-invalid-multiple-comment
    "E117",    # over-indented
    "D206",    # indent-with-spaces
    "D300",    # triple-single-quotes
    "Q000",    # bad-quotes-inline-string
    "Q001",    # bad-quotes-multiline-string
    "Q002",    # bad-quotes-docstring
    "Q003",    # avoidable-escaped-quote
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "ISC002",  # multi-line-implicit-string-concatenation
    "E501",

    # new list
    "E721",
    "E741",
    "E731",
    "E731",
    "PLR1714",
    "N818",
    "PLW0127",
    "PT012",
    "N806",
    "E712",
    "E711",
    "W505",
    "PT006",
    "PLR2004",
    "N812",
    "F841",
    # "R1730",
    # "I",      # isort, ruff doesn't have enough support for isort yet.
    "TID",     # flake8-tidy-imports (TID)#
    "F401",    # unused-import	{name} imported but unused; consider using importlib.util.find_spec to test for availability
    "F402",    # import-shadowed-by-loop-var	Import {name} from {row} shadowed by loop variable
    "F403",    # undefined-local-with-import-star	from {name} import * used; unable to detect undefined names
    "F404",    # late-future-import	from __future__ imports must occur at the beginning of the file
    "F405",    # undefined-local-with-import-star-usage	{name} may be undefined, or defined from star imports
    "F406",    # undefined-local-with-nested-import-star-usage	from {name} import * only allowed at module level
    "E401",    # multiple-imports-on-one-line	Multiple imports on one line
    "E402",    # module-import-not-at-top-of-file	Module level import not at top of cell
    "UP026",   # deprecated-mock-import	mock is deprecated, use unittest.mock
    "UP029",   # unnecessary-builtin-import	Unnecessary builtin import: {import}
    "UP035",   # deprecated-import	Import from {target} instead: {names}
    "ICN",     # flake8-import-conventions (ICN)
    "TCH",     # flake8-type-checking (TCH)#
    "PLC0414", # useless-import-alias	Import alias does not rename original package
    "PLC0415", # PLC0415	import-outside-top-level	import should be at the top-level of a file
    "PLC2403", # non-ascii-import-name	Module alias {name} contains a non-ASCII character, use an ASCII-only alias
    "PLC2701", # import-private-name	Private name import {name} from external module {module}
    "PLR0402", # manual-from-import	Use from {module} import {name} in lieu of alias
    "PLW0406", # import-self	Module {name} imports itself

    # via hatch: https://github.com/pypa/hatch/blob/864854478bac936de2d94273ae083c7c29564df2/scripts/update_ruff.py#L12
    # Allow non-abstract empty methods in abstract base classes
    'B027', # empty-method-without-abstract-decorator	{name} is an empty method in an abstract base class, but has no abstract decorator
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    'FBT003', # boolean-positional-value-in-call	Boolean positional value in function call
    # Ignore complexity
    'C901',    # complex-structure	{name} is too complex ({complexity} > {max_complexity})
    'PLR0904', # too-many-public-methods	Too many public methods ({methods} > {max_methods})
    "PLR0911", # too-many-return-statements	Too many return statements ({returns} > {max_returns})
    "PLR0912", # too-many-branches	Too many branches ({branches} > {max_branches})
    "PLR0913", # too-many-arguments	Too many arguments in function definition ({c_args} > {max_args})
    "PLR0914", # too-many-locals	Too many local variables ({current_amount}/{max_amount})
    "PLR0915", # too-many-statements	Too many statements ({statements} > {max_statements})
    "PLR0916", # too-many-boolean-expressions	Too many Boolean expressions ({expressions} > {max_expressions})
    "PLR0917", # too-many-positional	Too many positional arguments ({c_pos}/{max_pos})
    'PLR1702', # too-many-nested-blocks	Too many nested blocks ({nested_blocks} > {max_nested_blocks})

    # These are dependent on projects themselves
    'AIR', # airflow
    'CPY', # flake8-copyright (CPY)#
    'D',   # pydocstyle (D)#
    'NPY', # NumPy-specific rules (NPY)#
    'PD',  # pandas-vet (PD)

    # Many projects either don't have type annotations or it would take much effort to satisfy this
    'ANN', # flake8-annotations (ANN).

    # Don't be too strict about TODOs as not everyone uses them the same way
    'FIX',     # flake8-fixme (FIX)#
    'TD001',   # invalid-todo-tag	Invalid TODO tag: {tag}
    'TD002',   # missing-todo-author	Missing author in TODO; try: # TODO(<author_name>): ... or # TODO @<author_name>: ...
    'TD003',   # missing-todo-link	Missing issue link on the line following this TODO
    'PTH',     # flake8-use-pathlib (PTH) # There are valid reasons to not use pathlib such as performance and import cost
    'FURB101', # read-whole-file	open and read should be replaced by Path({filename}).{suggestion}

    # Conflicts with type checking
    'RET501', # unnecessary-return-none	Do not explicitly return None in function if it is the only possible return value	✔️ 🛠️
    'RET502', # implicit-return-value	Do not implicitly return None in function able to return non-None value	✔️ 🛠️

    # Under review https://github.com/astral-sh/ruff/issues/8796
    'PT004', # pytest-missing-fixture-name-underscore	Fixture {function} does not return anything, add leading underscore	✔️ 🛠️
    'PT005', # pytest-incorrect-fixture-name-underscore	Fixture {function} returns a value, remove leading underscore

    # Buggy https://github.com/astral-sh/ruff/issues/4845
    'ERA001', # commented-out-code	Found commented-out code

    # Business logic relying on other programs has no choice but to use subprocess
    'S404', # suspicious-subprocess-import	subprocess module is possibly insecure

    # Too prone to false positives and might be removed https://github.com/astral-sh/ruff/issues/4045
    'S603', # subprocess-without-shell-equals-true	subprocess call: check for execution of untrusted input

    # Too prone to false positives https://github.com/astral-sh/ruff/issues/8761
    'SIM401', # if-else-block-instead-of-dict-get	Use {contents} instead of an if block

    # Allow for easy ignores
    'PGH003', # blanket-type-ignore	Use specific rule codes when ignoring type issues	✔️ 🛠️
    'PGH004', # blanket-noqa	Use specific rule codes when using noqa	✔️ 🛠️

    # This is required sometimes, and doesn't matter on Python 3.11+
    'PERF203', # try-except-in-loop	try-except within a loop incurs performance overhead

    # Potentially unnecessary on Python 3.12+
    'FURB140', # reimplemented-starmap	Use itertools.starmap instead of the generator

    # Conflicts with formatter, see:
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "E111",    # indentation-with-invalid-multiple	Indentation is not a multiple of {indent_size}
    "E114",    # indentation-with-invalid-multiple-comment	Indentation is not a multiple of {indent_size} (comment)
    "E117",    # over-indented	Over-indented (comment)
    "E301",    # blank-line-between-methods	Expected {BLANK_LINES_NESTED_LEVEL:?} blank line, found 0
    "E302",    # blank-lines-top-level	Expected {expected_blank_lines:?} blank lines, found {actual_blank_lines}
    "E303",    # too-many-blank-lines	Too many blank lines ({actual_blank_lines})
    "E304",    # blank-line-after-decorator	Blank lines found after function decorator ({lines})
    "E305",    # blank-lines-after-function-or-class	Expected 2 blank lines after class or function definition, found ({blank_lines})
    "E306",    # blank-lines-before-nested-definition	Expected 1 blank line before a nested definition, found 0
    "E501",    # line-too-long	Line too long ({width} > {limit})
    "W191",    # tab-indentation	Indentation contains tabs
    "D206",    # indent-with-spaces	Docstring should be indented with spaces, not tabs
    "D300",    # triple-single-quotes	Use triple double quotes """
    "COM812",  # missing-trailing-comma	Trailing comma missing
    "COM819",  # prohibited-trailing-comma	Trailing comma prohibited
    "ISC001",  # single-line-implicit-string-concatenation	Implicitly concatenated string literals on one line
    "ISC002",  # multi-line-implicit-string-concatenation	Implicitly concatenated string literals over multiple lines
    "Q000",    # bad-quotes-inline-string	Single quotes found but double quotes preferred
    "Q001",    # bad-quotes-multiline-string	Single quote multiline found but double quotes preferred
    "Q002",    # bad-quotes-docstring	Single quote docstring found but double quotes preferred
    "Q003",    # avoidable-escaped-quote	Change outer quotes to avoid escaping inner quotes
    "Q004",    # unnecessary-escaped-quote	Unnecessary escape on inner quote character
    "PLE1141", # dict-iter-missing-items	Unpacking a dictionary in iteration without calling .items()
    "PLE1142", # await-outside-async	await should be used within an async function
    "Q",
    "N999",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

# SOURCE: https://github.com/google/jax/blob/a1c82219e2d23ec994e42761ebcaf4c53d9e4ea7/pyproject.toml#L159C1-L160C20
[tool.ruff.lint.mccabe]
# max-complexity = 18
max-complexity = 31 # C901: Recommended goal is 10

# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.
[tool.ruff.lint.per-file-ignores]
"democracy_exe/democracy_exe/gen_ai/models/vectorstores/*" = ["N815"]
"tests/*" = ["PT011", "S101"]
"democracy_exe/democracy_exe/tutorials/design_patterns/practical_examples/*" = [
    "PT018",
    "PLW0211",
    "ISC003",
    "N803",
]
"__init__.py" = ["F401", "E402"]
"**/{tests,docs,doc}/*" = ["E402"]
# https://github.com/astral-sh/ruff/issues/3928
# "*.pyi" = [
#     "I002", # from __future__ import annotations
# ]
"conf/*" = ["D"]
"demo/*" = ["D"]
"docs/*" = ["D"]
"test/*" = ["D"]
"tests/conftest.py" = ["D"]
"*.pyi" = ["D", "E501", "E701", "I002"]

# ===========================[ ISORT ]========================
# SOURCE: https://github.com/zulip/zulip/blob/f4d109c289f614273b43b411cbd8d1fad128842e/pyproject.toml#L199
[tool.ruff.lint.isort]
# Use a single line between direct and from import.
lines-between-types = 1
# Use a single line after each import block.
lines-after-imports = 2

# Add the specified import line to all files.
# PEP 563: Postponed evaluation of annotations
# https://peps.python.org/pep-0563/
required-imports = ["from __future__ import annotations"]

# Allow imports relative to the "app" directory.
known-third-party = [
    "boto3",
    "fastapi",
    "langchain",
    "pydantic",
    "beautifulsoup4",
    "langchain_community",
    "langchain_openai",
    "openai",
    "requests",
    "discord",
    "uvicorn",
]
split-on-trailing-comma = false

known-first-party = ["democracy_exe", "tests"]

known-local-folder = ["democracy_exe/*"]

section-order = [
    "future",
    "standard-library",
    "third-party",
    "pytest",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"pytest" = ["conftest", "pytest", "pytest_mock"]

# ===========================[ FLAKE8-TYPE-CHECKING ]========================
[tool.ruff.lint.flake8-type-checking]
# pydantic models use annotations at runtime
runtime-evaluated-base-classes = [
    # NOTE: ruff is unable to detect that these are subclasses of pydantic.BaseModel
    "pydantic.BaseModel",
]
runtime-evaluated-decorators = ["pydantic.dataclasses.dataclass"]

# ===========================[ PYUPGRADE ]========================
[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
ignore-decorators = ["typing.overload"]
property-decorators = ["gi.repository.GObject.Property"]
# NOTE: Enabling a convention will disable any rules that are not included in the specified convention. As such, the intended workflow is to enable a convention and then selectively enable or disable any additional rules on top of it. See: https://github.com/astral-sh/ruff/blob/c3e28f9d55b4484b0e7507d3bee6339b9fb83bb5/docs/faq.md
# Accepts: "google", "numpy", or "pep257".
convention = "pep257"


[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

exclude_lines = [
    '\(Protocol\):$',
    '\s*\.\.\.$',
    "@(abc.)?abstractmethod",
    "@overload",
    "@typing.overload",
    "assert_never",
    "def __repr__",
    "def __str__",
    "except ImportError:",
    "if __name__ == .__main__.:",
    "if not _PANDAS_AVAILABLE:",
    "if self.debug",
    "if settings.DEBUG",
    "if TYPE_CHECKING:",
    "if TYPE_CHECKING",
    "if typing.TYPE_CHECKING:",
    "pragma: $TEST_PLATFORM no cover",
    "pragma: no cover",
    "pragma: py$PYTHON_MAJOR_VERSION no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "return NotImplemented",
    "typing.assert_never",
]
omit = [
    "test/*",
    "tests/*",
]
# fail if coverage drops below the specified percentage:
fail_under = 10

# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ d .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # 1. Exclude an except clause of a specific form:
    "except ValueError:\\n\\s*assume\\(False\\)",
    # 2. Comments to turn coverage on and off:
    "no cover: start(?s:.)*?no cover: stop",
    # 3. A pragma comment that excludes an entire file:
    "\\A(?s:.*# pragma: exclude file.*)\\Z",
]

# (boolean, default False) Ignore source code that can't be found, emitting a warning instead of an exception.
ignore_errors = false
# (boolean, default False) When running a summary report, show missing lines. See Coverage summary: coverage report for more information.
show_missing = true
# (boolean, default False) Don't report files that are 100% covered. This helps you focus on files that need attention.
skip_covered = false

[tool.coverage.run]
parallel = true

# NOTE: This might break some SHIT (5/8/2024)
# SOURCE: https://github.com/anthonycorletti/snok/blob/039ae9aaf403485ce9b7fedb0e1943c25a250eed/snok/templates/__shared/_pyproject_toml#L130
concurrency = ["thread", "greenlet", "multiprocessing"]
omit = [
    "**/democracy_exe/tutorials/**",
]


branch = true
source = ["democracy_exe"]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "cov.xml"


# =========================[ PYTEST INI OPTIONS ]========================
[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
]
# retries = 5
# retry_delay = 0.5
# retry_delay = 30
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    # Print runtimes of the slowest tests.
    '--durations=10',
    '--durations-min=0.05',
    '--junitxml=junit/test-results.xml',
    '--cov-report=annotate:cov_annotate',
]

# ###################################################################################
# # enable live logging when needed (very useful when debugging evals)
# ###################################################################################
log_cli = false
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Enable live logging to a file when needed (very useful when debugging evals)
log_file = "pytest-accuracy-debug.log"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_level = "DEBUG"

# markers=["basic", "filetree", "suites", "markers", "parametrization", "buildmeta"]
# allows you to conditionally call only a subset of pytest baased on the marker provided
markers = [
    "cogs: marks tests that run code that utilizes the cogs module (deselect with '-m \"not cogs\"')",
    "configonly: marks tests that run code that utilizes the config module (deselect with '-m \"not configonly\"')",
    "e2e: marks tests dealing with e2e testing (deselect with '-m \"not e2e\"')",
    "evals: marks tests as evals (run with '-m evals')",
    "fast: marks tests as fast (run with '-m fast')",
    "httpclientonly: marks tests that run code that utilizes the http_client module (deselect with '-m \"not httpclientonly\"')",
    "imgops: marks tests as imgops (run with '-m imgops')",
    "integration: marks tests dealing with integration testing (deselect with '-m \"not integration\"')",
    "onboardingonly: marks tests that run code that utilizes the new_dev_onboarding_tool module (deselect with '-m \"not onboardingonly\"')",
    "utilsonly: marks tests that run code that utilizes any utils module (deselect with '-m \"not utilsonly\"')",
    "retryonly: marks tests that run code that utilizes the retry module (deselect with '-m \"not retryonly\"')",
    "skip_in_parallel: marks tests that should be run in serial only (deselect with '-m \"not skip_in_parallel\"')",
    "slow: marks tests as slow (run with '-m slow')",
    "toolonly: marks tests that run code that utilizes a Custom Langchain tool module in the tools directory (deselect with '-m \"not toolonly\"')",
    "toolonly: marks tests that run code that utilizes llm tool classes  (deselect with '-m \"not toolonly\"')",
    "unittest: marks tests dealing with unittest (deselect with '-m \"not unittest\"')",
    "vectorstoronly: marks tests that run code that utilizes the flex_vector_store_tool module (deselect with '-m \"not vectorstoronly\"')",
    "visiontoolonly: marks tests that run code that utilizes vision_tool.py (deselect with '-m \"not visiontoolonly\"')",
    "webpagetoolonly: marks tests that run code that utilizes the fetch_webpage_tool module (deselect with '-m \"not webpagetoolonly\"')",
    "vcronly: marks tests that run code that utilizes the vcr module (deselect with '-m \"not vcronly\"')",
    "vcrcanary: marks tests that run code that utilizes the vcr test canary module (deselect with '-m \"not vcrcanary\"')",
    "pgvectoronly: marks tests that run code that utilizes the pgvector module (deselect with '-m \"not pgvectoronly\"')",
    "services: marks tests that run code that belongs to the services module  (deselect with '-m \"not services\"')",
    "slower: marks tests that run code that belongs to the slower calls at end of pytest run module  (deselect with '-m \"not slower\"')",
    "discordonly: marks tests that run code that belongs to the discordonly calls at end of pytest run module  (deselect with '-m \"not discordonly\"')",
    "cursorgenerated: marks tests that are cursor generated (deselect with '-m \"not cursorgenerated\"')",
    "aidergenerated: marks tests that are aider generated (deselect with '-m \"not aidergenerated\"')",
]


# =========================[ PYTEST-COV ]========================
[tool.coverage.paths]
# SOURCE: https://coverage.readthedocs.io/en/latest/config.html
# the first path is the path on the local filesystem
# the second path is the path as it appears within the Docker container
source = [
    "democracy_exe/",
    "/democracy_exe",
]

# =========================[ BLACK ]========================
[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312"]
